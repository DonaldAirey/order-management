//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.269
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Teraque.AssetNetwork
{
	
	
	/// <summary>
	/// A thread-safe, multi-tiered DataModel.
	/// </summary>
	[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
	[global::System.ComponentModel.DesignerCategoryAttribute("code")]
	[global::System.ComponentModel.ToolboxItemAttribute(true)]
	public partial class DataModel
	{
		
		// The offset to the deleted time column in the deleted data model records.
		private const int deletedTimeColumn = 1;
		
		// The offset to the primary key in the deleted data model records.
		private const int primaryKeyOffset = 2;
		
		// The time that the background thread waits before asking for a reconcilliation from the server.
		private const int refreshInterval = 250;
		
		// The index into the array of reconcled data where the data is found.
		private const int rowDataIndex = 1;
		
		// The index into the array of reconciled data where the state of the row is found.
		private const int rowStateIndex = 0;
		
		// The offset to the row version in the deleted data model records.
		private const int rowVersionColumn = 0;
		
		// The index into the array of reconciled data where the rows of data are found.
		private const int tableRowsIndex = 1;
		
		// The index into the array of reconciled data where the name of the table is found.
		private const int tableTableNameIndex = 0;
		
		// The time to wait for a thread to respond before aborting it.
		private const int threadWaitTime = 5000;
		
		private const int batchSize = 1024;
		
		private static global::System.Data.DataSet dataSet;
		
		private static global::System.Guid dataSetId;
		
		// Indicates whether the client is still reconciling with the server.
		private static bool isReading;
		
		private static System.Collections.Generic.Queue<MergeState> mergeStateQueue = new System.Collections.Generic.Queue<MergeState>();
		
		// Background thread for reconciling with the server data model.
		private static global::System.Threading.Thread reconcilerThread;
		
		private static global::System.Data.DataRelation relationAccountAccountSeries;
		
		private static global::System.Data.DataRelation relationAccountAllocation;
		
		private static global::System.Data.DataRelation relationAccountGroupAccount;
		
		private static global::System.Data.DataRelation relationAccountPosition;
		
		private static global::System.Data.DataRelation relationAccountPositionSeries;
		
		private static global::System.Data.DataRelation relationAccountSingleAccount;
		
		private static global::System.Data.DataRelation relationAccountTaxLot;
		
		private static global::System.Data.DataRelation relationAccountTaxLotSeries;
		
		private static global::System.Data.DataRelation relationBlotterBlotterDestinationMap;
		
		private static global::System.Data.DataRelation relationBlotterBranch;
		
		private static global::System.Data.DataRelation relationBlotterMatch;
		
		private static global::System.Data.DataRelation relationBlotterNegotiation;
		
		private static global::System.Data.DataRelation relationBlotterSource;
		
		private static global::System.Data.DataRelation relationBlotterTrader;
		
		private static global::System.Data.DataRelation relationBlotterWorkingOrder;
		
		private static global::System.Data.DataRelation relationBrokerAccountExecution;
		
		private static global::System.Data.DataRelation relationBrokerBrokerAccount;
		
		private static global::System.Data.DataRelation relationBrokerClearingBroker;
		
		private static global::System.Data.DataRelation relationBrokerExecution;
		
		private static global::System.Data.DataRelation relationCommissionScheduleCommissionTranche;
		
		private static global::System.Data.DataRelation relationCommissionTypeCommissionTranche;
		
		private static global::System.Data.DataRelation relationCommissionUnitCommissionTranche;
		
		private static global::System.Data.DataRelation relationCountryExchange;
		
		private static global::System.Data.DataRelation relationCountryHoliday;
		
		private static global::System.Data.DataRelation relationCountryProvince;
		
		private static global::System.Data.DataRelation relationCountrySecurity;
		
		private static global::System.Data.DataRelation relationCountrySingleAccount;
		
		private static global::System.Data.DataRelation relationCreditRatingSecuritySeriesByFK_CreditRating_SecuritySeries_CreditRatingId0;
		
		private static global::System.Data.DataRelation relationCreditRatingSecuritySeriesByFK_CreditRating_SecuritySeries_CreditRatingId1;
		
		private static global::System.Data.DataRelation relationCreditRatingSecuritySeriesByFK_CreditRating_SecuritySeries_CreditRatingId2;
		
		private static global::System.Data.DataRelation relationCreditRatingSecuritySeriesByFK_CreditRating_SecuritySeries_CreditRatingId3;
		
		private static global::System.Data.DataRelation relationCreditRatingSecuritySeriesByFK_CreditRating_SecuritySeries_CreditRatingId4;
		
		private static global::System.Data.DataRelation relationCreditRatingSecuritySeriesByFK_CreditRating_SecuritySeries_CreditRatingId5;
		
		private static global::System.Data.DataRelation relationCreditRatingServiceCreditRating;
		
		private static global::System.Data.DataRelation relationCrossingWorkingOrder;
		
		private static global::System.Data.DataRelation relationCurrencyAccount;
		
		private static global::System.Data.DataRelation relationDestinationBlotterDestinationMap;
		
		private static global::System.Data.DataRelation relationDestinationDestinationExchangeMap;
		
		private static global::System.Data.DataRelation relationDestinationDestinationOrder;
		
		private static global::System.Data.DataRelation relationDestinationOrderExecution;
		
		private static global::System.Data.DataRelation relationDestinationSourceOrder;
		
		private static global::System.Data.DataRelation relationDestinationWorkingOrder;
		
		private static global::System.Data.DataRelation relationEntityAccount;
		
		private static global::System.Data.DataRelation relationEntityBlotter;
		
		private static global::System.Data.DataRelation relationEntityEntityTreeByFK_Entity_EntityTree_ChildId;
		
		private static global::System.Data.DataRelation relationEntityEntityTreeByFK_Entity_EntityTree_ParentId;
		
		private static global::System.Data.DataRelation relationEntityFolder;
		
		private static global::System.Data.DataRelation relationEntityIssuer;
		
		private static global::System.Data.DataRelation relationEntityPropertyStore;
		
		private static global::System.Data.DataRelation relationEntitySecurity;
		
		private static global::System.Data.DataRelation relationEntityUser;
		
		private static global::System.Data.DataRelation relationExchangeDestinationExchangeMap;
		
		private static global::System.Data.DataRelation relationExchangeEquity;
		
		private static global::System.Data.DataRelation relationExecutionNegotiation;
		
		private static global::System.Data.DataRelation relationHolidayTypeHoliday;
		
		private static global::System.Data.DataRelation relationImageEntity;
		
		private static global::System.Data.DataRelation relationImageType;
		
		private static global::System.Data.DataRelation relationIndustryClassificationIndustry;
		
		private static global::System.Data.DataRelation relationIndustryIndustryLeaf;
		
		private static global::System.Data.DataRelation relationIndustryIndustryTreeByFK_Industry_IndustryTree_ChildId;
		
		private static global::System.Data.DataRelation relationIndustryIndustryTreeByFK_Industry_IndustryTree_ParentId;
		
		private static global::System.Data.DataRelation relationIssuerSecurity;
		
		private static global::System.Data.DataRelation relationLotHandlingSingleAccount;
		
		private static global::System.Data.DataRelation relationMajorInstrumentTypeSecurity;
		
		private static global::System.Data.DataRelation relationMatchNegotiation;
		
		private static global::System.Data.DataRelation relationMinorInstrumentTypeSecurity;
		
		private static global::System.Data.DataRelation relationMssaBucketSecuritySeries;
		
		private static global::System.Data.DataRelation relationOrderTypeDestinationOrder;
		
		private static global::System.Data.DataRelation relationOrderTypeSourceOrder;
		
		private static global::System.Data.DataRelation relationOrderTypeWorkingOrder;
		
		private static global::System.Data.DataRelation relationPartyTypeBlotter;
		
		private static global::System.Data.DataRelation relationPositionPositionSeries;
		
		private static global::System.Data.DataRelation relationPositionSeriesTaxLotSeries;
		
		private static global::System.Data.DataRelation relationPositionTaxLot;
		
		private static global::System.Data.DataRelation relationPositionTypePosition;
		
		private static global::System.Data.DataRelation relationPositionTypePositionSeries;
		
		private static global::System.Data.DataRelation relationPositionTypeTaxLot;
		
		private static global::System.Data.DataRelation relationPositionTypeTaxLotSeries;
		
		private static global::System.Data.DataRelation relationPropertyPropertyStore;
		
		private static global::System.Data.DataRelation relationProvinceSingleAccount;
		
		private static global::System.Data.DataRelation relationSecurityAllocationByFK_Security_Allocation_SecurityId;
		
		private static global::System.Data.DataRelation relationSecurityAllocationByFK_Security_Allocation_SettlementId;
		
		private static global::System.Data.DataRelation relationSecurityCurrency;
		
		private static global::System.Data.DataRelation relationSecurityDebtByFK_Security_Debt_DebtId;
		
		private static global::System.Data.DataRelation relationSecurityDebtByFK_Security_Debt_SettlementId;
		
		private static global::System.Data.DataRelation relationSecurityDestinationOrderByFK_Security_DestinationOrder_SecurityId;
		
		private static global::System.Data.DataRelation relationSecurityDestinationOrderByFK_Security_DestinationOrder_SettlementId;
		
		private static global::System.Data.DataRelation relationSecurityEquityByFK_Security_Equity_EquityId;
		
		private static global::System.Data.DataRelation relationSecurityEquityByFK_Security_Equity_SettlementId;
		
		private static global::System.Data.DataRelation relationSecurityIndustryLeaf;
		
		private static global::System.Data.DataRelation relationSecurityPosition;
		
		private static global::System.Data.DataRelation relationSecurityPositionSeries;
		
		private static global::System.Data.DataRelation relationSecurityPriceByFK_Security_Price_CurrencyId;
		
		private static global::System.Data.DataRelation relationSecurityPriceByFK_Security_Price_SecurityId;
		
		private static global::System.Data.DataRelation relationSecuritySecuritySeries;
		
		private static global::System.Data.DataRelation relationSecuritySeriesPositionSeries;
		
		private static global::System.Data.DataRelation relationSecuritySeriesTaxLotSeries;
		
		private static global::System.Data.DataRelation relationSecuritySourceOrderByFK_Security_SourceOrder_SecurityId;
		
		private static global::System.Data.DataRelation relationSecuritySourceOrderByFK_Security_SourceOrder_SettlementId;
		
		private static global::System.Data.DataRelation relationSecurityTaxLot;
		
		private static global::System.Data.DataRelation relationSecurityTaxLotSeries;
		
		private static global::System.Data.DataRelation relationSecurityWorkingOrderByFK_Security_WorkingOrder_SecurityId;
		
		private static global::System.Data.DataRelation relationSecurityWorkingOrderByFK_Security_WorkingOrder_SettlementId;
		
		private static global::System.Data.DataRelation relationSideAllocation;
		
		private static global::System.Data.DataRelation relationSideDestinationOrder;
		
		private static global::System.Data.DataRelation relationSideSourceOrder;
		
		private static global::System.Data.DataRelation relationSideWorkingOrder;
		
		private static global::System.Data.DataRelation relationSourceBroker;
		
		private static global::System.Data.DataRelation relationSourceInstitution;
		
		private static global::System.Data.DataRelation relationStateDestinationOrder;
		
		private static global::System.Data.DataRelation relationStateExecutionByFK_State_Execution_DestinationStateCode;
		
		private static global::System.Data.DataRelation relationStateExecutionByFK_State_Execution_SourceStateCode;
		
		private static global::System.Data.DataRelation relationStatusDestinationOrder;
		
		private static global::System.Data.DataRelation relationStatusMatch;
		
		private static global::System.Data.DataRelation relationStatusNegotiation;
		
		private static global::System.Data.DataRelation relationStatusSourceOrder;
		
		private static global::System.Data.DataRelation relationStatusWorkingOrder;
		
		private static global::System.Data.DataRelation relationSubordinateTypeSecuritySeries;
		
		private static global::System.Data.DataRelation relationTaxLotTaxLotSeries;
		
		private static global::System.Data.DataRelation relationTimeInForceDestinationOrder;
		
		private static global::System.Data.DataRelation relationTimeInForceSourceOrder;
		
		private static global::System.Data.DataRelation relationTimeInForceWorkingOrder;
		
		private static global::System.Data.DataRelation relationTraderBrokerAccount;
		
		private static global::System.Data.DataRelation relationTraderDestinationOrder;
		
		private static global::System.Data.DataRelation relationTraderTraderVolumeSetting;
		
		private static global::System.Data.DataRelation relationTypeEntity;
		
		private static global::System.Data.DataRelation relationUserAllocationByFK_User_Allocation_CreatedUserId;
		
		private static global::System.Data.DataRelation relationUserAllocationByFK_User_Allocation_ModifiedUserId;
		
		private static global::System.Data.DataRelation relationUserComplianceOfficer;
		
		private static global::System.Data.DataRelation relationUserDestinationOrderByFK_User_DestinationOrder_CreatedUserId;
		
		private static global::System.Data.DataRelation relationUserDestinationOrderByFK_User_DestinationOrder_ModifiedUserId;
		
		private static global::System.Data.DataRelation relationUserExecutionByFK_User_Execution_CreatedUserId;
		
		private static global::System.Data.DataRelation relationUserExecutionByFK_User_Execution_ModifiedUserId;
		
		private static global::System.Data.DataRelation relationUserSourceOrderByFK_User_SourceOrder_CreatedUserId;
		
		private static global::System.Data.DataRelation relationUserSourceOrderByFK_User_SourceOrder_ModifiedUserId;
		
		private static global::System.Data.DataRelation relationUserTrader;
		
		private static global::System.Data.DataRelation relationUserWorkingOrderByFK_User_WorkingOrder_CreatedUserId;
		
		private static global::System.Data.DataRelation relationUserWorkingOrderByFK_User_WorkingOrder_ModifiedUserId;
		
		private static global::System.Data.DataRelation relationVolumeCategorySecurity;
		
		private static global::System.Data.DataRelation relationVolumeCategoryTraderVolumeSetting;
		
		private static global::System.Data.DataRelation relationWeekendDebt;
		
		private static global::System.Data.DataRelation relationWorkingOrderAllocation;
		
		private static global::System.Data.DataRelation relationWorkingOrderDestinationOrder;
		
		private static global::System.Data.DataRelation relationWorkingOrderMatch;
		
		private static global::System.Data.DataRelation relationWorkingOrderSourceOrder;
		
		private static long sequence;
		
		// This object is used to synchronize the data model.
		private static object syncRoot;
		
		// A sync object used to wait for an update of the client data model.
		private static object syncUpdate;
		
		private static AccountDataTable tableAccount;
		
		private static AccountSeriesDataTable tableAccountSeries;
		
		private static AllocationDataTable tableAllocation;
		
		private static BlotterDataTable tableBlotter;
		
		private static BlotterDestinationMapDataTable tableBlotterDestinationMap;
		
		private static BranchDataTable tableBranch;
		
		private static BrokerDataTable tableBroker;
		
		private static BrokerAccountDataTable tableBrokerAccount;
		
		private static ClearingBrokerDataTable tableClearingBroker;
		
		private static CommissionScheduleDataTable tableCommissionSchedule;
		
		private static CommissionTrancheDataTable tableCommissionTranche;
		
		private static CommissionTypeDataTable tableCommissionType;
		
		private static CommissionUnitDataTable tableCommissionUnit;
		
		private static ComplianceOfficerDataTable tableComplianceOfficer;
		
		private static ConditionDataTable tableCondition;
		
		private static ConfigurationDataTable tableConfiguration;
		
		private static CountryDataTable tableCountry;
		
		private static CreditRatingDataTable tableCreditRating;
		
		private static CreditRatingServiceDataTable tableCreditRatingService;
		
		private static CrossingDataTable tableCrossing;
		
		private static CurrencyDataTable tableCurrency;
		
		private static DebtDataTable tableDebt;
		
		private static DestinationDataTable tableDestination;
		
		private static DestinationExchangeMapDataTable tableDestinationExchangeMap;
		
		private static DestinationOrderDataTable tableDestinationOrder;
		
		private static EntityDataTable tableEntity;
		
		private static EntityTreeDataTable tableEntityTree;
		
		private static EquityDataTable tableEquity;
		
		private static ExchangeDataTable tableExchange;
		
		private static ExecutionDataTable tableExecution;
		
		private static FolderDataTable tableFolder;
		
		private static GroupAccountDataTable tableGroupAccount;
		
		private static HolidayDataTable tableHoliday;
		
		private static HolidayTypeDataTable tableHolidayType;
		
		private static ImageDataTable tableImage;
		
		private static IndustryDataTable tableIndustry;
		
		private static IndustryClassificationDataTable tableIndustryClassification;
		
		private static IndustryLeafDataTable tableIndustryLeaf;
		
		private static IndustryTreeDataTable tableIndustryTree;
		
		private static InstitutionDataTable tableInstitution;
		
		private static IssuerDataTable tableIssuer;
		
		private static LotHandlingDataTable tableLotHandling;
		
		private static MajorInstrumentTypeDataTable tableMajorInstrumentType;
		
		private static MatchDataTable tableMatch;
		
		private static MinorInstrumentTypeDataTable tableMinorInstrumentType;
		
		private static MssaBucketDataTable tableMssaBucket;
		
		private static NegotiationDataTable tableNegotiation;
		
		private static OrderTypeDataTable tableOrderType;
		
		private static PartyTypeDataTable tablePartyType;
		
		private static PositionDataTable tablePosition;
		
		private static PositionSeriesDataTable tablePositionSeries;
		
		private static PositionTypeDataTable tablePositionType;
		
		private static PriceDataTable tablePrice;
		
		private static PropertyDataTable tableProperty;
		
		private static PropertyStoreDataTable tablePropertyStore;
		
		private static ProvinceDataTable tableProvince;
		
		private static SecurityDataTable tableSecurity;
		
		private static SecuritySeriesDataTable tableSecuritySeries;
		
		private static SettlementUnitDataTable tableSettlementUnit;
		
		private static SideDataTable tableSide;
		
		private static SingleAccountDataTable tableSingleAccount;
		
		private static SourceDataTable tableSource;
		
		private static SourceOrderDataTable tableSourceOrder;
		
		private static StateDataTable tableState;
		
		private static StatusDataTable tableStatus;
		
		private static SubordinateTypeDataTable tableSubordinateType;
		
		private static TaxLotDataTable tableTaxLot;
		
		private static TaxLotSeriesDataTable tableTaxLotSeries;
		
		private static TimeInForceDataTable tableTimeInForce;
		
		private static TimeUnitDataTable tableTimeUnit;
		
		private static TraderDataTable tableTrader;
		
		private static TraderVolumeSettingDataTable tableTraderVolumeSetting;
		
		private static TypeDataTable tableType;
		
		private static UserDataTable tableUser;
		
		private static VolumeCategoryDataTable tableVolumeCategory;
		
		private static WeekendDataTable tableWeekend;
		
		private static WorkingOrderDataTable tableWorkingOrder;
		
		public static global::Teraque.TenantNotLoadedEventHandler TenantNotLoaded;
		
		// Provides mutually exclusive access to the buffer used to update the client data model.
		private static global::System.Threading.Mutex updateBufferMutex;
		
		/// <summary>
		/// Static Constructor for the DataModel.
		/// </summary>
		static DataModel()
		{
			DataModel.dataSet = new global::System.Data.DataSet();
			DataModel.dataSet.DataSetName = "DataModel";
			DataModel.dataSet.CaseSensitive = true;
			DataModel.dataSet.EnforceConstraints = true;
			DataModel.tableAccount = new AccountDataTable();
			DataModel.dataSet.Tables.Add(DataModel.tableAccount);
			DataModel.tableAccountSeries = new AccountSeriesDataTable();
			DataModel.dataSet.Tables.Add(DataModel.tableAccountSeries);
			DataModel.tableAllocation = new AllocationDataTable();
			DataModel.dataSet.Tables.Add(DataModel.tableAllocation);
			DataModel.tableBlotter = new BlotterDataTable();
			DataModel.dataSet.Tables.Add(DataModel.tableBlotter);
			DataModel.tableBlotterDestinationMap = new BlotterDestinationMapDataTable();
			DataModel.dataSet.Tables.Add(DataModel.tableBlotterDestinationMap);
			DataModel.tableBranch = new BranchDataTable();
			DataModel.dataSet.Tables.Add(DataModel.tableBranch);
			DataModel.tableBroker = new BrokerDataTable();
			DataModel.dataSet.Tables.Add(DataModel.tableBroker);
			DataModel.tableBrokerAccount = new BrokerAccountDataTable();
			DataModel.dataSet.Tables.Add(DataModel.tableBrokerAccount);
			DataModel.tableClearingBroker = new ClearingBrokerDataTable();
			DataModel.dataSet.Tables.Add(DataModel.tableClearingBroker);
			DataModel.tableCommissionSchedule = new CommissionScheduleDataTable();
			DataModel.dataSet.Tables.Add(DataModel.tableCommissionSchedule);
			DataModel.tableCommissionTranche = new CommissionTrancheDataTable();
			DataModel.dataSet.Tables.Add(DataModel.tableCommissionTranche);
			DataModel.tableCommissionType = new CommissionTypeDataTable();
			DataModel.dataSet.Tables.Add(DataModel.tableCommissionType);
			DataModel.tableCommissionUnit = new CommissionUnitDataTable();
			DataModel.dataSet.Tables.Add(DataModel.tableCommissionUnit);
			DataModel.tableComplianceOfficer = new ComplianceOfficerDataTable();
			DataModel.dataSet.Tables.Add(DataModel.tableComplianceOfficer);
			DataModel.tableCondition = new ConditionDataTable();
			DataModel.dataSet.Tables.Add(DataModel.tableCondition);
			DataModel.tableConfiguration = new ConfigurationDataTable();
			DataModel.dataSet.Tables.Add(DataModel.tableConfiguration);
			DataModel.tableCountry = new CountryDataTable();
			DataModel.dataSet.Tables.Add(DataModel.tableCountry);
			DataModel.tableCreditRating = new CreditRatingDataTable();
			DataModel.dataSet.Tables.Add(DataModel.tableCreditRating);
			DataModel.tableCreditRatingService = new CreditRatingServiceDataTable();
			DataModel.dataSet.Tables.Add(DataModel.tableCreditRatingService);
			DataModel.tableCrossing = new CrossingDataTable();
			DataModel.dataSet.Tables.Add(DataModel.tableCrossing);
			DataModel.tableCurrency = new CurrencyDataTable();
			DataModel.dataSet.Tables.Add(DataModel.tableCurrency);
			DataModel.tableDebt = new DebtDataTable();
			DataModel.dataSet.Tables.Add(DataModel.tableDebt);
			DataModel.tableDestination = new DestinationDataTable();
			DataModel.dataSet.Tables.Add(DataModel.tableDestination);
			DataModel.tableDestinationExchangeMap = new DestinationExchangeMapDataTable();
			DataModel.dataSet.Tables.Add(DataModel.tableDestinationExchangeMap);
			DataModel.tableDestinationOrder = new DestinationOrderDataTable();
			DataModel.dataSet.Tables.Add(DataModel.tableDestinationOrder);
			DataModel.tableEntity = new EntityDataTable();
			DataModel.dataSet.Tables.Add(DataModel.tableEntity);
			DataModel.tableEntityTree = new EntityTreeDataTable();
			DataModel.dataSet.Tables.Add(DataModel.tableEntityTree);
			DataModel.tableEquity = new EquityDataTable();
			DataModel.dataSet.Tables.Add(DataModel.tableEquity);
			DataModel.tableExchange = new ExchangeDataTable();
			DataModel.dataSet.Tables.Add(DataModel.tableExchange);
			DataModel.tableExecution = new ExecutionDataTable();
			DataModel.dataSet.Tables.Add(DataModel.tableExecution);
			DataModel.tableFolder = new FolderDataTable();
			DataModel.dataSet.Tables.Add(DataModel.tableFolder);
			DataModel.tableGroupAccount = new GroupAccountDataTable();
			DataModel.dataSet.Tables.Add(DataModel.tableGroupAccount);
			DataModel.tableHoliday = new HolidayDataTable();
			DataModel.dataSet.Tables.Add(DataModel.tableHoliday);
			DataModel.tableHolidayType = new HolidayTypeDataTable();
			DataModel.dataSet.Tables.Add(DataModel.tableHolidayType);
			DataModel.tableImage = new ImageDataTable();
			DataModel.dataSet.Tables.Add(DataModel.tableImage);
			DataModel.tableIndustry = new IndustryDataTable();
			DataModel.dataSet.Tables.Add(DataModel.tableIndustry);
			DataModel.tableIndustryClassification = new IndustryClassificationDataTable();
			DataModel.dataSet.Tables.Add(DataModel.tableIndustryClassification);
			DataModel.tableIndustryLeaf = new IndustryLeafDataTable();
			DataModel.dataSet.Tables.Add(DataModel.tableIndustryLeaf);
			DataModel.tableIndustryTree = new IndustryTreeDataTable();
			DataModel.dataSet.Tables.Add(DataModel.tableIndustryTree);
			DataModel.tableInstitution = new InstitutionDataTable();
			DataModel.dataSet.Tables.Add(DataModel.tableInstitution);
			DataModel.tableIssuer = new IssuerDataTable();
			DataModel.dataSet.Tables.Add(DataModel.tableIssuer);
			DataModel.tableLotHandling = new LotHandlingDataTable();
			DataModel.dataSet.Tables.Add(DataModel.tableLotHandling);
			DataModel.tableMajorInstrumentType = new MajorInstrumentTypeDataTable();
			DataModel.dataSet.Tables.Add(DataModel.tableMajorInstrumentType);
			DataModel.tableMatch = new MatchDataTable();
			DataModel.dataSet.Tables.Add(DataModel.tableMatch);
			DataModel.tableMinorInstrumentType = new MinorInstrumentTypeDataTable();
			DataModel.dataSet.Tables.Add(DataModel.tableMinorInstrumentType);
			DataModel.tableMssaBucket = new MssaBucketDataTable();
			DataModel.dataSet.Tables.Add(DataModel.tableMssaBucket);
			DataModel.tableNegotiation = new NegotiationDataTable();
			DataModel.dataSet.Tables.Add(DataModel.tableNegotiation);
			DataModel.tableOrderType = new OrderTypeDataTable();
			DataModel.dataSet.Tables.Add(DataModel.tableOrderType);
			DataModel.tablePartyType = new PartyTypeDataTable();
			DataModel.dataSet.Tables.Add(DataModel.tablePartyType);
			DataModel.tablePosition = new PositionDataTable();
			DataModel.dataSet.Tables.Add(DataModel.tablePosition);
			DataModel.tablePositionSeries = new PositionSeriesDataTable();
			DataModel.dataSet.Tables.Add(DataModel.tablePositionSeries);
			DataModel.tablePositionType = new PositionTypeDataTable();
			DataModel.dataSet.Tables.Add(DataModel.tablePositionType);
			DataModel.tablePrice = new PriceDataTable();
			DataModel.dataSet.Tables.Add(DataModel.tablePrice);
			DataModel.tableProperty = new PropertyDataTable();
			DataModel.dataSet.Tables.Add(DataModel.tableProperty);
			DataModel.tablePropertyStore = new PropertyStoreDataTable();
			DataModel.dataSet.Tables.Add(DataModel.tablePropertyStore);
			DataModel.tableProvince = new ProvinceDataTable();
			DataModel.dataSet.Tables.Add(DataModel.tableProvince);
			DataModel.tableSecurity = new SecurityDataTable();
			DataModel.dataSet.Tables.Add(DataModel.tableSecurity);
			DataModel.tableSecuritySeries = new SecuritySeriesDataTable();
			DataModel.dataSet.Tables.Add(DataModel.tableSecuritySeries);
			DataModel.tableSettlementUnit = new SettlementUnitDataTable();
			DataModel.dataSet.Tables.Add(DataModel.tableSettlementUnit);
			DataModel.tableSide = new SideDataTable();
			DataModel.dataSet.Tables.Add(DataModel.tableSide);
			DataModel.tableSingleAccount = new SingleAccountDataTable();
			DataModel.dataSet.Tables.Add(DataModel.tableSingleAccount);
			DataModel.tableSource = new SourceDataTable();
			DataModel.dataSet.Tables.Add(DataModel.tableSource);
			DataModel.tableSourceOrder = new SourceOrderDataTable();
			DataModel.dataSet.Tables.Add(DataModel.tableSourceOrder);
			DataModel.tableState = new StateDataTable();
			DataModel.dataSet.Tables.Add(DataModel.tableState);
			DataModel.tableStatus = new StatusDataTable();
			DataModel.dataSet.Tables.Add(DataModel.tableStatus);
			DataModel.tableSubordinateType = new SubordinateTypeDataTable();
			DataModel.dataSet.Tables.Add(DataModel.tableSubordinateType);
			DataModel.tableTaxLot = new TaxLotDataTable();
			DataModel.dataSet.Tables.Add(DataModel.tableTaxLot);
			DataModel.tableTaxLotSeries = new TaxLotSeriesDataTable();
			DataModel.dataSet.Tables.Add(DataModel.tableTaxLotSeries);
			DataModel.tableTimeInForce = new TimeInForceDataTable();
			DataModel.dataSet.Tables.Add(DataModel.tableTimeInForce);
			DataModel.tableTimeUnit = new TimeUnitDataTable();
			DataModel.dataSet.Tables.Add(DataModel.tableTimeUnit);
			DataModel.tableTrader = new TraderDataTable();
			DataModel.dataSet.Tables.Add(DataModel.tableTrader);
			DataModel.tableTraderVolumeSetting = new TraderVolumeSettingDataTable();
			DataModel.dataSet.Tables.Add(DataModel.tableTraderVolumeSetting);
			DataModel.tableType = new TypeDataTable();
			DataModel.dataSet.Tables.Add(DataModel.tableType);
			DataModel.tableUser = new UserDataTable();
			DataModel.dataSet.Tables.Add(DataModel.tableUser);
			DataModel.tableVolumeCategory = new VolumeCategoryDataTable();
			DataModel.dataSet.Tables.Add(DataModel.tableVolumeCategory);
			DataModel.tableWeekend = new WeekendDataTable();
			DataModel.dataSet.Tables.Add(DataModel.tableWeekend);
			DataModel.tableWorkingOrder = new WorkingOrderDataTable();
			DataModel.dataSet.Tables.Add(DataModel.tableWorkingOrder);
			global::System.Data.ForeignKeyConstraint foreignKeyConstraint0 = new global::System.Data.ForeignKeyConstraint("FK_Currency_Account", new global::System.Data.DataColumn[] {
						DataModel.tableCurrency.CurrencyIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableAccount.CurrencyIdColumn});
			foreignKeyConstraint0.AcceptRejectRule = global::System.Data.AcceptRejectRule.Cascade;
			DataModel.tableAccount.Constraints.Add(foreignKeyConstraint0);
			global::System.Data.ForeignKeyConstraint foreignKeyConstraint1 = new global::System.Data.ForeignKeyConstraint("FK_Entity_Account", new global::System.Data.DataColumn[] {
						DataModel.tableEntity.EntityIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableAccount.AccountIdColumn});
			foreignKeyConstraint1.AcceptRejectRule = global::System.Data.AcceptRejectRule.Cascade;
			DataModel.tableAccount.Constraints.Add(foreignKeyConstraint1);
			global::System.Data.ForeignKeyConstraint foreignKeyConstraint2 = new global::System.Data.ForeignKeyConstraint("FK_Account_AccountSeries", new global::System.Data.DataColumn[] {
						DataModel.tableAccount.AccountIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableAccountSeries.AccountSeriesIdColumn});
			foreignKeyConstraint2.AcceptRejectRule = global::System.Data.AcceptRejectRule.Cascade;
			DataModel.tableAccountSeries.Constraints.Add(foreignKeyConstraint2);
			global::System.Data.ForeignKeyConstraint foreignKeyConstraint3 = new global::System.Data.ForeignKeyConstraint("FK_Account_Allocation", new global::System.Data.DataColumn[] {
						DataModel.tableAccount.AccountIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableAllocation.AccountIdColumn});
			foreignKeyConstraint3.AcceptRejectRule = global::System.Data.AcceptRejectRule.Cascade;
			DataModel.tableAllocation.Constraints.Add(foreignKeyConstraint3);
			global::System.Data.ForeignKeyConstraint foreignKeyConstraint4 = new global::System.Data.ForeignKeyConstraint("FK_Security_Allocation_SecurityId", new global::System.Data.DataColumn[] {
						DataModel.tableSecurity.SecurityIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableAllocation.SecurityIdColumn});
			foreignKeyConstraint4.AcceptRejectRule = global::System.Data.AcceptRejectRule.Cascade;
			DataModel.tableAllocation.Constraints.Add(foreignKeyConstraint4);
			global::System.Data.ForeignKeyConstraint foreignKeyConstraint5 = new global::System.Data.ForeignKeyConstraint("FK_Security_Allocation_SettlementId", new global::System.Data.DataColumn[] {
						DataModel.tableSecurity.SecurityIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableAllocation.SettlementIdColumn});
			foreignKeyConstraint5.AcceptRejectRule = global::System.Data.AcceptRejectRule.Cascade;
			DataModel.tableAllocation.Constraints.Add(foreignKeyConstraint5);
			global::System.Data.ForeignKeyConstraint foreignKeyConstraint6 = new global::System.Data.ForeignKeyConstraint("FK_Side_Allocation", new global::System.Data.DataColumn[] {
						DataModel.tableSide.SideCodeColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableAllocation.SideCodeColumn});
			foreignKeyConstraint6.AcceptRejectRule = global::System.Data.AcceptRejectRule.Cascade;
			DataModel.tableAllocation.Constraints.Add(foreignKeyConstraint6);
			global::System.Data.ForeignKeyConstraint foreignKeyConstraint7 = new global::System.Data.ForeignKeyConstraint("FK_User_Allocation_CreatedUserId", new global::System.Data.DataColumn[] {
						DataModel.tableUser.UserIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableAllocation.CreatedUserIdColumn});
			foreignKeyConstraint7.AcceptRejectRule = global::System.Data.AcceptRejectRule.Cascade;
			DataModel.tableAllocation.Constraints.Add(foreignKeyConstraint7);
			global::System.Data.ForeignKeyConstraint foreignKeyConstraint8 = new global::System.Data.ForeignKeyConstraint("FK_User_Allocation_ModifiedUserId", new global::System.Data.DataColumn[] {
						DataModel.tableUser.UserIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableAllocation.ModifiedUserIdColumn});
			foreignKeyConstraint8.AcceptRejectRule = global::System.Data.AcceptRejectRule.Cascade;
			DataModel.tableAllocation.Constraints.Add(foreignKeyConstraint8);
			global::System.Data.ForeignKeyConstraint foreignKeyConstraint9 = new global::System.Data.ForeignKeyConstraint("FK_WorkingOrder_Allocation", new global::System.Data.DataColumn[] {
						DataModel.tableWorkingOrder.WorkingOrderIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableAllocation.WorkingOrderIdColumn});
			foreignKeyConstraint9.AcceptRejectRule = global::System.Data.AcceptRejectRule.Cascade;
			DataModel.tableAllocation.Constraints.Add(foreignKeyConstraint9);
			global::System.Data.ForeignKeyConstraint foreignKeyConstraint10 = new global::System.Data.ForeignKeyConstraint("FK_Entity_Blotter", new global::System.Data.DataColumn[] {
						DataModel.tableEntity.EntityIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableBlotter.BlotterIdColumn});
			foreignKeyConstraint10.AcceptRejectRule = global::System.Data.AcceptRejectRule.Cascade;
			DataModel.tableBlotter.Constraints.Add(foreignKeyConstraint10);
			global::System.Data.ForeignKeyConstraint foreignKeyConstraint11 = new global::System.Data.ForeignKeyConstraint("FK_PartyType_Blotter", new global::System.Data.DataColumn[] {
						DataModel.tablePartyType.PartyTypeCodeColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableBlotter.PartyTypeCodeColumn});
			foreignKeyConstraint11.AcceptRejectRule = global::System.Data.AcceptRejectRule.Cascade;
			DataModel.tableBlotter.Constraints.Add(foreignKeyConstraint11);
			global::System.Data.ForeignKeyConstraint foreignKeyConstraint12 = new global::System.Data.ForeignKeyConstraint("FK_Blotter_BlotterDestinationMap", new global::System.Data.DataColumn[] {
						DataModel.tableBlotter.BlotterIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableBlotterDestinationMap.BlotterIdColumn});
			foreignKeyConstraint12.AcceptRejectRule = global::System.Data.AcceptRejectRule.Cascade;
			DataModel.tableBlotterDestinationMap.Constraints.Add(foreignKeyConstraint12);
			global::System.Data.ForeignKeyConstraint foreignKeyConstraint13 = new global::System.Data.ForeignKeyConstraint("FK_Destination_BlotterDestinationMap", new global::System.Data.DataColumn[] {
						DataModel.tableDestination.DestinationIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableBlotterDestinationMap.DestinationIdColumn});
			foreignKeyConstraint13.AcceptRejectRule = global::System.Data.AcceptRejectRule.Cascade;
			DataModel.tableBlotterDestinationMap.Constraints.Add(foreignKeyConstraint13);
			global::System.Data.ForeignKeyConstraint foreignKeyConstraint14 = new global::System.Data.ForeignKeyConstraint("FK_Blotter_Branch", new global::System.Data.DataColumn[] {
						DataModel.tableBlotter.BlotterIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableBranch.BranchIdColumn});
			foreignKeyConstraint14.AcceptRejectRule = global::System.Data.AcceptRejectRule.Cascade;
			DataModel.tableBranch.Constraints.Add(foreignKeyConstraint14);
			global::System.Data.ForeignKeyConstraint foreignKeyConstraint15 = new global::System.Data.ForeignKeyConstraint("FK_Source_Broker", new global::System.Data.DataColumn[] {
						DataModel.tableSource.SourceIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableBroker.BrokerIdColumn});
			foreignKeyConstraint15.AcceptRejectRule = global::System.Data.AcceptRejectRule.Cascade;
			DataModel.tableBroker.Constraints.Add(foreignKeyConstraint15);
			global::System.Data.ForeignKeyConstraint foreignKeyConstraint16 = new global::System.Data.ForeignKeyConstraint("FK_Broker_BrokerAccount", new global::System.Data.DataColumn[] {
						DataModel.tableBroker.BrokerIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableBrokerAccount.BrokerIdColumn});
			foreignKeyConstraint16.AcceptRejectRule = global::System.Data.AcceptRejectRule.Cascade;
			DataModel.tableBrokerAccount.Constraints.Add(foreignKeyConstraint16);
			global::System.Data.ForeignKeyConstraint foreignKeyConstraint17 = new global::System.Data.ForeignKeyConstraint("FK_Trader_BrokerAccount", new global::System.Data.DataColumn[] {
						DataModel.tableTrader.TraderIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableBrokerAccount.TraderIdColumn});
			foreignKeyConstraint17.AcceptRejectRule = global::System.Data.AcceptRejectRule.Cascade;
			DataModel.tableBrokerAccount.Constraints.Add(foreignKeyConstraint17);
			global::System.Data.ForeignKeyConstraint foreignKeyConstraint18 = new global::System.Data.ForeignKeyConstraint("FK_Broker_ClearingBroker", new global::System.Data.DataColumn[] {
						DataModel.tableBroker.BrokerIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableClearingBroker.ClearingBrokerIdColumn});
			foreignKeyConstraint18.AcceptRejectRule = global::System.Data.AcceptRejectRule.Cascade;
			DataModel.tableClearingBroker.Constraints.Add(foreignKeyConstraint18);
			global::System.Data.ForeignKeyConstraint foreignKeyConstraint19 = new global::System.Data.ForeignKeyConstraint("FK_CommissionSchedule_CommissionTranche", new global::System.Data.DataColumn[] {
						DataModel.tableCommissionSchedule.CommissionScheduleIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableCommissionTranche.CommissionScheduleIdColumn});
			foreignKeyConstraint19.AcceptRejectRule = global::System.Data.AcceptRejectRule.Cascade;
			DataModel.tableCommissionTranche.Constraints.Add(foreignKeyConstraint19);
			global::System.Data.ForeignKeyConstraint foreignKeyConstraint20 = new global::System.Data.ForeignKeyConstraint("FK_CommissionType_CommissionTranche", new global::System.Data.DataColumn[] {
						DataModel.tableCommissionType.CommissionTypeCodeColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableCommissionTranche.CommissionTypeCodeColumn});
			foreignKeyConstraint20.AcceptRejectRule = global::System.Data.AcceptRejectRule.Cascade;
			DataModel.tableCommissionTranche.Constraints.Add(foreignKeyConstraint20);
			global::System.Data.ForeignKeyConstraint foreignKeyConstraint21 = new global::System.Data.ForeignKeyConstraint("FK_CommissionUnit_CommissionTranche", new global::System.Data.DataColumn[] {
						DataModel.tableCommissionUnit.CommissionUnitCodeColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableCommissionTranche.CommissionUnitCodeColumn});
			foreignKeyConstraint21.AcceptRejectRule = global::System.Data.AcceptRejectRule.Cascade;
			DataModel.tableCommissionTranche.Constraints.Add(foreignKeyConstraint21);
			global::System.Data.ForeignKeyConstraint foreignKeyConstraint22 = new global::System.Data.ForeignKeyConstraint("FK_User_ComplianceOfficer", new global::System.Data.DataColumn[] {
						DataModel.tableUser.UserIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableComplianceOfficer.ComplianceOfficerIdColumn});
			foreignKeyConstraint22.AcceptRejectRule = global::System.Data.AcceptRejectRule.Cascade;
			DataModel.tableComplianceOfficer.Constraints.Add(foreignKeyConstraint22);
			global::System.Data.ForeignKeyConstraint foreignKeyConstraint23 = new global::System.Data.ForeignKeyConstraint("FK_CreditRatingService_CreditRating", new global::System.Data.DataColumn[] {
						DataModel.tableCreditRatingService.CreditRatingServiceIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableCreditRating.CreditRatingServiceIdColumn});
			foreignKeyConstraint23.AcceptRejectRule = global::System.Data.AcceptRejectRule.Cascade;
			DataModel.tableCreditRating.Constraints.Add(foreignKeyConstraint23);
			global::System.Data.ForeignKeyConstraint foreignKeyConstraint24 = new global::System.Data.ForeignKeyConstraint("FK_Security_Currency", new global::System.Data.DataColumn[] {
						DataModel.tableSecurity.SecurityIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableCurrency.CurrencyIdColumn});
			foreignKeyConstraint24.AcceptRejectRule = global::System.Data.AcceptRejectRule.Cascade;
			DataModel.tableCurrency.Constraints.Add(foreignKeyConstraint24);
			global::System.Data.ForeignKeyConstraint foreignKeyConstraint25 = new global::System.Data.ForeignKeyConstraint("FK_Security_Debt_DebtId", new global::System.Data.DataColumn[] {
						DataModel.tableSecurity.SecurityIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableDebt.DebtIdColumn});
			foreignKeyConstraint25.AcceptRejectRule = global::System.Data.AcceptRejectRule.Cascade;
			DataModel.tableDebt.Constraints.Add(foreignKeyConstraint25);
			global::System.Data.ForeignKeyConstraint foreignKeyConstraint26 = new global::System.Data.ForeignKeyConstraint("FK_Security_Debt_SettlementId", new global::System.Data.DataColumn[] {
						DataModel.tableSecurity.SecurityIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableDebt.SettlementIdColumn});
			foreignKeyConstraint26.AcceptRejectRule = global::System.Data.AcceptRejectRule.Cascade;
			DataModel.tableDebt.Constraints.Add(foreignKeyConstraint26);
			global::System.Data.ForeignKeyConstraint foreignKeyConstraint27 = new global::System.Data.ForeignKeyConstraint("FK_Weekend_Debt", new global::System.Data.DataColumn[] {
						DataModel.tableWeekend.WeekendCodeColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableDebt.WeekendCodeColumn});
			foreignKeyConstraint27.AcceptRejectRule = global::System.Data.AcceptRejectRule.Cascade;
			DataModel.tableDebt.Constraints.Add(foreignKeyConstraint27);
			global::System.Data.ForeignKeyConstraint foreignKeyConstraint28 = new global::System.Data.ForeignKeyConstraint("FK_Destination_DestinationExchangeMap", new global::System.Data.DataColumn[] {
						DataModel.tableDestination.DestinationIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableDestinationExchangeMap.DestinationIdColumn});
			foreignKeyConstraint28.AcceptRejectRule = global::System.Data.AcceptRejectRule.Cascade;
			DataModel.tableDestinationExchangeMap.Constraints.Add(foreignKeyConstraint28);
			global::System.Data.ForeignKeyConstraint foreignKeyConstraint29 = new global::System.Data.ForeignKeyConstraint("FK_Exchange_DestinationExchangeMap", new global::System.Data.DataColumn[] {
						DataModel.tableExchange.ExchangeIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableDestinationExchangeMap.ExchangeIdColumn});
			foreignKeyConstraint29.AcceptRejectRule = global::System.Data.AcceptRejectRule.Cascade;
			DataModel.tableDestinationExchangeMap.Constraints.Add(foreignKeyConstraint29);
			global::System.Data.ForeignKeyConstraint foreignKeyConstraint30 = new global::System.Data.ForeignKeyConstraint("FK_Destination_DestinationOrder", new global::System.Data.DataColumn[] {
						DataModel.tableDestination.DestinationIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableDestinationOrder.DestinationIdColumn});
			foreignKeyConstraint30.AcceptRejectRule = global::System.Data.AcceptRejectRule.Cascade;
			DataModel.tableDestinationOrder.Constraints.Add(foreignKeyConstraint30);
			global::System.Data.ForeignKeyConstraint foreignKeyConstraint31 = new global::System.Data.ForeignKeyConstraint("FK_OrderType_DestinationOrder", new global::System.Data.DataColumn[] {
						DataModel.tableOrderType.OrderTypeCodeColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableDestinationOrder.OrderTypeCodeColumn});
			foreignKeyConstraint31.AcceptRejectRule = global::System.Data.AcceptRejectRule.Cascade;
			DataModel.tableDestinationOrder.Constraints.Add(foreignKeyConstraint31);
			global::System.Data.ForeignKeyConstraint foreignKeyConstraint32 = new global::System.Data.ForeignKeyConstraint("FK_Security_DestinationOrder_SecurityId", new global::System.Data.DataColumn[] {
						DataModel.tableSecurity.SecurityIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableDestinationOrder.SecurityIdColumn});
			foreignKeyConstraint32.AcceptRejectRule = global::System.Data.AcceptRejectRule.Cascade;
			DataModel.tableDestinationOrder.Constraints.Add(foreignKeyConstraint32);
			global::System.Data.ForeignKeyConstraint foreignKeyConstraint33 = new global::System.Data.ForeignKeyConstraint("FK_Security_DestinationOrder_SettlementId", new global::System.Data.DataColumn[] {
						DataModel.tableSecurity.SecurityIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableDestinationOrder.SettlementIdColumn});
			foreignKeyConstraint33.AcceptRejectRule = global::System.Data.AcceptRejectRule.Cascade;
			DataModel.tableDestinationOrder.Constraints.Add(foreignKeyConstraint33);
			global::System.Data.ForeignKeyConstraint foreignKeyConstraint34 = new global::System.Data.ForeignKeyConstraint("FK_Side_DestinationOrder", new global::System.Data.DataColumn[] {
						DataModel.tableSide.SideCodeColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableDestinationOrder.SideCodeColumn});
			foreignKeyConstraint34.AcceptRejectRule = global::System.Data.AcceptRejectRule.Cascade;
			DataModel.tableDestinationOrder.Constraints.Add(foreignKeyConstraint34);
			global::System.Data.ForeignKeyConstraint foreignKeyConstraint35 = new global::System.Data.ForeignKeyConstraint("FK_State_DestinationOrder", new global::System.Data.DataColumn[] {
						DataModel.tableState.StateCodeColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableDestinationOrder.StateCodeColumn});
			foreignKeyConstraint35.AcceptRejectRule = global::System.Data.AcceptRejectRule.Cascade;
			DataModel.tableDestinationOrder.Constraints.Add(foreignKeyConstraint35);
			global::System.Data.ForeignKeyConstraint foreignKeyConstraint36 = new global::System.Data.ForeignKeyConstraint("FK_Status_DestinationOrder", new global::System.Data.DataColumn[] {
						DataModel.tableStatus.StatusCodeColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableDestinationOrder.StatusCodeColumn});
			foreignKeyConstraint36.AcceptRejectRule = global::System.Data.AcceptRejectRule.Cascade;
			DataModel.tableDestinationOrder.Constraints.Add(foreignKeyConstraint36);
			global::System.Data.ForeignKeyConstraint foreignKeyConstraint37 = new global::System.Data.ForeignKeyConstraint("FK_TimeInForce_DestinationOrder", new global::System.Data.DataColumn[] {
						DataModel.tableTimeInForce.TimeInForceCodeColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableDestinationOrder.TimeInForceCodeColumn});
			foreignKeyConstraint37.AcceptRejectRule = global::System.Data.AcceptRejectRule.Cascade;
			DataModel.tableDestinationOrder.Constraints.Add(foreignKeyConstraint37);
			global::System.Data.ForeignKeyConstraint foreignKeyConstraint38 = new global::System.Data.ForeignKeyConstraint("FK_Trader_DestinationOrder", new global::System.Data.DataColumn[] {
						DataModel.tableTrader.TraderIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableDestinationOrder.TraderIdColumn});
			foreignKeyConstraint38.AcceptRejectRule = global::System.Data.AcceptRejectRule.Cascade;
			DataModel.tableDestinationOrder.Constraints.Add(foreignKeyConstraint38);
			global::System.Data.ForeignKeyConstraint foreignKeyConstraint39 = new global::System.Data.ForeignKeyConstraint("FK_User_DestinationOrder_CreatedUserId", new global::System.Data.DataColumn[] {
						DataModel.tableUser.UserIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableDestinationOrder.CreatedUserIdColumn});
			foreignKeyConstraint39.AcceptRejectRule = global::System.Data.AcceptRejectRule.Cascade;
			DataModel.tableDestinationOrder.Constraints.Add(foreignKeyConstraint39);
			global::System.Data.ForeignKeyConstraint foreignKeyConstraint40 = new global::System.Data.ForeignKeyConstraint("FK_User_DestinationOrder_ModifiedUserId", new global::System.Data.DataColumn[] {
						DataModel.tableUser.UserIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableDestinationOrder.ModifiedUserIdColumn});
			foreignKeyConstraint40.AcceptRejectRule = global::System.Data.AcceptRejectRule.Cascade;
			DataModel.tableDestinationOrder.Constraints.Add(foreignKeyConstraint40);
			global::System.Data.ForeignKeyConstraint foreignKeyConstraint41 = new global::System.Data.ForeignKeyConstraint("FK_WorkingOrder_DestinationOrder", new global::System.Data.DataColumn[] {
						DataModel.tableWorkingOrder.WorkingOrderIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableDestinationOrder.WorkingOrderIdColumn});
			foreignKeyConstraint41.AcceptRejectRule = global::System.Data.AcceptRejectRule.Cascade;
			DataModel.tableDestinationOrder.Constraints.Add(foreignKeyConstraint41);
			global::System.Data.ForeignKeyConstraint foreignKeyConstraint42 = new global::System.Data.ForeignKeyConstraint("FK_Image_Entity", new global::System.Data.DataColumn[] {
						DataModel.tableImage.ImageIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableEntity.ImageIdColumn});
			foreignKeyConstraint42.AcceptRejectRule = global::System.Data.AcceptRejectRule.Cascade;
			DataModel.tableEntity.Constraints.Add(foreignKeyConstraint42);
			global::System.Data.ForeignKeyConstraint foreignKeyConstraint43 = new global::System.Data.ForeignKeyConstraint("FK_Type_Entity", new global::System.Data.DataColumn[] {
						DataModel.tableType.TypeIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableEntity.TypeIdColumn});
			foreignKeyConstraint43.AcceptRejectRule = global::System.Data.AcceptRejectRule.Cascade;
			DataModel.tableEntity.Constraints.Add(foreignKeyConstraint43);
			global::System.Data.ForeignKeyConstraint foreignKeyConstraint44 = new global::System.Data.ForeignKeyConstraint("FK_Entity_EntityTree_ChildId", new global::System.Data.DataColumn[] {
						DataModel.tableEntity.EntityIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableEntityTree.ChildIdColumn});
			foreignKeyConstraint44.AcceptRejectRule = global::System.Data.AcceptRejectRule.Cascade;
			DataModel.tableEntityTree.Constraints.Add(foreignKeyConstraint44);
			global::System.Data.ForeignKeyConstraint foreignKeyConstraint45 = new global::System.Data.ForeignKeyConstraint("FK_Entity_EntityTree_ParentId", new global::System.Data.DataColumn[] {
						DataModel.tableEntity.EntityIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableEntityTree.ParentIdColumn});
			foreignKeyConstraint45.AcceptRejectRule = global::System.Data.AcceptRejectRule.Cascade;
			DataModel.tableEntityTree.Constraints.Add(foreignKeyConstraint45);
			global::System.Data.ForeignKeyConstraint foreignKeyConstraint46 = new global::System.Data.ForeignKeyConstraint("FK_Exchange_Equity", new global::System.Data.DataColumn[] {
						DataModel.tableExchange.ExchangeIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableEquity.ExchangeIdColumn});
			foreignKeyConstraint46.AcceptRejectRule = global::System.Data.AcceptRejectRule.Cascade;
			DataModel.tableEquity.Constraints.Add(foreignKeyConstraint46);
			global::System.Data.ForeignKeyConstraint foreignKeyConstraint47 = new global::System.Data.ForeignKeyConstraint("FK_Security_Equity_EquityId", new global::System.Data.DataColumn[] {
						DataModel.tableSecurity.SecurityIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableEquity.EquityIdColumn});
			foreignKeyConstraint47.AcceptRejectRule = global::System.Data.AcceptRejectRule.Cascade;
			DataModel.tableEquity.Constraints.Add(foreignKeyConstraint47);
			global::System.Data.ForeignKeyConstraint foreignKeyConstraint48 = new global::System.Data.ForeignKeyConstraint("FK_Security_Equity_SettlementId", new global::System.Data.DataColumn[] {
						DataModel.tableSecurity.SecurityIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableEquity.SettlementIdColumn});
			foreignKeyConstraint48.AcceptRejectRule = global::System.Data.AcceptRejectRule.Cascade;
			DataModel.tableEquity.Constraints.Add(foreignKeyConstraint48);
			global::System.Data.ForeignKeyConstraint foreignKeyConstraint49 = new global::System.Data.ForeignKeyConstraint("FK_Country_Exchange", new global::System.Data.DataColumn[] {
						DataModel.tableCountry.CountryIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableExchange.CountryIdColumn});
			foreignKeyConstraint49.AcceptRejectRule = global::System.Data.AcceptRejectRule.Cascade;
			DataModel.tableExchange.Constraints.Add(foreignKeyConstraint49);
			global::System.Data.ForeignKeyConstraint foreignKeyConstraint50 = new global::System.Data.ForeignKeyConstraint("FK_Broker_Execution", new global::System.Data.DataColumn[] {
						DataModel.tableBroker.BrokerIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableExecution.BrokerIdColumn});
			foreignKeyConstraint50.AcceptRejectRule = global::System.Data.AcceptRejectRule.Cascade;
			DataModel.tableExecution.Constraints.Add(foreignKeyConstraint50);
			global::System.Data.ForeignKeyConstraint foreignKeyConstraint51 = new global::System.Data.ForeignKeyConstraint("FK_BrokerAccount_Execution", new global::System.Data.DataColumn[] {
						DataModel.tableBrokerAccount.BrokerAccountIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableExecution.BrokerAccountIdColumn});
			foreignKeyConstraint51.AcceptRejectRule = global::System.Data.AcceptRejectRule.Cascade;
			DataModel.tableExecution.Constraints.Add(foreignKeyConstraint51);
			global::System.Data.ForeignKeyConstraint foreignKeyConstraint52 = new global::System.Data.ForeignKeyConstraint("FK_DestinationOrder_Execution", new global::System.Data.DataColumn[] {
						DataModel.tableDestinationOrder.DestinationOrderIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableExecution.DestinationOrderIdColumn});
			foreignKeyConstraint52.AcceptRejectRule = global::System.Data.AcceptRejectRule.Cascade;
			DataModel.tableExecution.Constraints.Add(foreignKeyConstraint52);
			global::System.Data.ForeignKeyConstraint foreignKeyConstraint53 = new global::System.Data.ForeignKeyConstraint("FK_State_Execution_DestinationStateCode", new global::System.Data.DataColumn[] {
						DataModel.tableState.StateCodeColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableExecution.DestinationStateCodeColumn});
			foreignKeyConstraint53.AcceptRejectRule = global::System.Data.AcceptRejectRule.Cascade;
			DataModel.tableExecution.Constraints.Add(foreignKeyConstraint53);
			global::System.Data.ForeignKeyConstraint foreignKeyConstraint54 = new global::System.Data.ForeignKeyConstraint("FK_State_Execution_SourceStateCode", new global::System.Data.DataColumn[] {
						DataModel.tableState.StateCodeColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableExecution.SourceStateCodeColumn});
			foreignKeyConstraint54.AcceptRejectRule = global::System.Data.AcceptRejectRule.Cascade;
			DataModel.tableExecution.Constraints.Add(foreignKeyConstraint54);
			global::System.Data.ForeignKeyConstraint foreignKeyConstraint55 = new global::System.Data.ForeignKeyConstraint("FK_User_Execution_CreatedUserId", new global::System.Data.DataColumn[] {
						DataModel.tableUser.UserIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableExecution.CreatedUserIdColumn});
			foreignKeyConstraint55.AcceptRejectRule = global::System.Data.AcceptRejectRule.Cascade;
			DataModel.tableExecution.Constraints.Add(foreignKeyConstraint55);
			global::System.Data.ForeignKeyConstraint foreignKeyConstraint56 = new global::System.Data.ForeignKeyConstraint("FK_User_Execution_ModifiedUserId", new global::System.Data.DataColumn[] {
						DataModel.tableUser.UserIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableExecution.ModifiedUserIdColumn});
			foreignKeyConstraint56.AcceptRejectRule = global::System.Data.AcceptRejectRule.Cascade;
			DataModel.tableExecution.Constraints.Add(foreignKeyConstraint56);
			global::System.Data.ForeignKeyConstraint foreignKeyConstraint57 = new global::System.Data.ForeignKeyConstraint("FK_Entity_Folder", new global::System.Data.DataColumn[] {
						DataModel.tableEntity.EntityIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableFolder.FolderIdColumn});
			foreignKeyConstraint57.AcceptRejectRule = global::System.Data.AcceptRejectRule.Cascade;
			DataModel.tableFolder.Constraints.Add(foreignKeyConstraint57);
			global::System.Data.ForeignKeyConstraint foreignKeyConstraint58 = new global::System.Data.ForeignKeyConstraint("FK_Account_GroupAccount", new global::System.Data.DataColumn[] {
						DataModel.tableAccount.AccountIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableGroupAccount.GroupAccountIdColumn});
			foreignKeyConstraint58.AcceptRejectRule = global::System.Data.AcceptRejectRule.Cascade;
			DataModel.tableGroupAccount.Constraints.Add(foreignKeyConstraint58);
			global::System.Data.ForeignKeyConstraint foreignKeyConstraint59 = new global::System.Data.ForeignKeyConstraint("FK_Country_Holiday", new global::System.Data.DataColumn[] {
						DataModel.tableCountry.CountryIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableHoliday.CountryIdColumn});
			foreignKeyConstraint59.AcceptRejectRule = global::System.Data.AcceptRejectRule.Cascade;
			DataModel.tableHoliday.Constraints.Add(foreignKeyConstraint59);
			global::System.Data.ForeignKeyConstraint foreignKeyConstraint60 = new global::System.Data.ForeignKeyConstraint("FK_HolidayType_Holiday", new global::System.Data.DataColumn[] {
						DataModel.tableHolidayType.HolidayTypeCodeColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableHoliday.HolidayTypeCodeColumn});
			foreignKeyConstraint60.AcceptRejectRule = global::System.Data.AcceptRejectRule.Cascade;
			DataModel.tableHoliday.Constraints.Add(foreignKeyConstraint60);
			global::System.Data.ForeignKeyConstraint foreignKeyConstraint61 = new global::System.Data.ForeignKeyConstraint("FK_IndustryClassification_Industry", new global::System.Data.DataColumn[] {
						DataModel.tableIndustryClassification.IndustryClassificationIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableIndustry.IndustryClassificationIdColumn});
			foreignKeyConstraint61.AcceptRejectRule = global::System.Data.AcceptRejectRule.Cascade;
			DataModel.tableIndustry.Constraints.Add(foreignKeyConstraint61);
			global::System.Data.ForeignKeyConstraint foreignKeyConstraint62 = new global::System.Data.ForeignKeyConstraint("FK_Industry_IndustryLeaf_ParentId", new global::System.Data.DataColumn[] {
						DataModel.tableIndustry.IndustryIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableIndustryLeaf.ParentIdColumn});
			foreignKeyConstraint62.AcceptRejectRule = global::System.Data.AcceptRejectRule.Cascade;
			DataModel.tableIndustryLeaf.Constraints.Add(foreignKeyConstraint62);
			global::System.Data.ForeignKeyConstraint foreignKeyConstraint63 = new global::System.Data.ForeignKeyConstraint("FK_Security_IndustryLeaf_SecurityId", new global::System.Data.DataColumn[] {
						DataModel.tableSecurity.SecurityIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableIndustryLeaf.SecurityIdColumn});
			foreignKeyConstraint63.AcceptRejectRule = global::System.Data.AcceptRejectRule.Cascade;
			DataModel.tableIndustryLeaf.Constraints.Add(foreignKeyConstraint63);
			global::System.Data.ForeignKeyConstraint foreignKeyConstraint64 = new global::System.Data.ForeignKeyConstraint("FK_Industry_IndustryTree_ChildId", new global::System.Data.DataColumn[] {
						DataModel.tableIndustry.IndustryIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableIndustryTree.ChildIdColumn});
			foreignKeyConstraint64.AcceptRejectRule = global::System.Data.AcceptRejectRule.Cascade;
			DataModel.tableIndustryTree.Constraints.Add(foreignKeyConstraint64);
			global::System.Data.ForeignKeyConstraint foreignKeyConstraint65 = new global::System.Data.ForeignKeyConstraint("FK_Industry_IndustryTree_ParentId", new global::System.Data.DataColumn[] {
						DataModel.tableIndustry.IndustryIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableIndustryTree.ParentIdColumn});
			foreignKeyConstraint65.AcceptRejectRule = global::System.Data.AcceptRejectRule.Cascade;
			DataModel.tableIndustryTree.Constraints.Add(foreignKeyConstraint65);
			global::System.Data.ForeignKeyConstraint foreignKeyConstraint66 = new global::System.Data.ForeignKeyConstraint("FK_Source_Institution", new global::System.Data.DataColumn[] {
						DataModel.tableSource.SourceIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableInstitution.InstitutionIdColumn});
			foreignKeyConstraint66.AcceptRejectRule = global::System.Data.AcceptRejectRule.Cascade;
			DataModel.tableInstitution.Constraints.Add(foreignKeyConstraint66);
			global::System.Data.ForeignKeyConstraint foreignKeyConstraint67 = new global::System.Data.ForeignKeyConstraint("FK_Entity_Issuer", new global::System.Data.DataColumn[] {
						DataModel.tableEntity.EntityIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableIssuer.IssuerIdColumn});
			foreignKeyConstraint67.AcceptRejectRule = global::System.Data.AcceptRejectRule.Cascade;
			DataModel.tableIssuer.Constraints.Add(foreignKeyConstraint67);
			global::System.Data.ForeignKeyConstraint foreignKeyConstraint68 = new global::System.Data.ForeignKeyConstraint("FK_Blotter_Match", new global::System.Data.DataColumn[] {
						DataModel.tableBlotter.BlotterIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableMatch.BlotterIdColumn});
			foreignKeyConstraint68.AcceptRejectRule = global::System.Data.AcceptRejectRule.Cascade;
			DataModel.tableMatch.Constraints.Add(foreignKeyConstraint68);
			global::System.Data.ForeignKeyConstraint foreignKeyConstraint69 = new global::System.Data.ForeignKeyConstraint("FK_Status_Match", new global::System.Data.DataColumn[] {
						DataModel.tableStatus.StatusCodeColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableMatch.StatusCodeColumn});
			foreignKeyConstraint69.AcceptRejectRule = global::System.Data.AcceptRejectRule.Cascade;
			DataModel.tableMatch.Constraints.Add(foreignKeyConstraint69);
			global::System.Data.ForeignKeyConstraint foreignKeyConstraint70 = new global::System.Data.ForeignKeyConstraint("FK_WorkingOrder_Match", new global::System.Data.DataColumn[] {
						DataModel.tableWorkingOrder.WorkingOrderIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableMatch.WorkingOrderIdColumn});
			foreignKeyConstraint70.AcceptRejectRule = global::System.Data.AcceptRejectRule.Cascade;
			DataModel.tableMatch.Constraints.Add(foreignKeyConstraint70);
			global::System.Data.ForeignKeyConstraint foreignKeyConstraint71 = new global::System.Data.ForeignKeyConstraint("FK_Blotter_Negotiation", new global::System.Data.DataColumn[] {
						DataModel.tableBlotter.BlotterIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableNegotiation.BlotterIdColumn});
			foreignKeyConstraint71.AcceptRejectRule = global::System.Data.AcceptRejectRule.Cascade;
			DataModel.tableNegotiation.Constraints.Add(foreignKeyConstraint71);
			global::System.Data.ForeignKeyConstraint foreignKeyConstraint72 = new global::System.Data.ForeignKeyConstraint("FK_Execution_Negotiation", new global::System.Data.DataColumn[] {
						DataModel.tableExecution.ExecutionIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableNegotiation.ExecutionIdColumn});
			foreignKeyConstraint72.AcceptRejectRule = global::System.Data.AcceptRejectRule.Cascade;
			DataModel.tableNegotiation.Constraints.Add(foreignKeyConstraint72);
			global::System.Data.ForeignKeyConstraint foreignKeyConstraint73 = new global::System.Data.ForeignKeyConstraint("FK_Match_Negotiation", new global::System.Data.DataColumn[] {
						DataModel.tableMatch.MatchIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableNegotiation.MatchIdColumn});
			foreignKeyConstraint73.AcceptRejectRule = global::System.Data.AcceptRejectRule.Cascade;
			DataModel.tableNegotiation.Constraints.Add(foreignKeyConstraint73);
			global::System.Data.ForeignKeyConstraint foreignKeyConstraint74 = new global::System.Data.ForeignKeyConstraint("FK_Status_Negotiation", new global::System.Data.DataColumn[] {
						DataModel.tableStatus.StatusCodeColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableNegotiation.StatusCodeColumn});
			foreignKeyConstraint74.AcceptRejectRule = global::System.Data.AcceptRejectRule.Cascade;
			DataModel.tableNegotiation.Constraints.Add(foreignKeyConstraint74);
			global::System.Data.ForeignKeyConstraint foreignKeyConstraint75 = new global::System.Data.ForeignKeyConstraint("FK_Account_Position", new global::System.Data.DataColumn[] {
						DataModel.tableAccount.AccountIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tablePosition.AccountIdColumn});
			foreignKeyConstraint75.AcceptRejectRule = global::System.Data.AcceptRejectRule.Cascade;
			DataModel.tablePosition.Constraints.Add(foreignKeyConstraint75);
			global::System.Data.ForeignKeyConstraint foreignKeyConstraint76 = new global::System.Data.ForeignKeyConstraint("FK_PositionType_Position", new global::System.Data.DataColumn[] {
						DataModel.tablePositionType.PositionTypeCodeColumn}, new global::System.Data.DataColumn[] {
						DataModel.tablePosition.PositionTypeCodeColumn});
			foreignKeyConstraint76.AcceptRejectRule = global::System.Data.AcceptRejectRule.Cascade;
			DataModel.tablePosition.Constraints.Add(foreignKeyConstraint76);
			global::System.Data.ForeignKeyConstraint foreignKeyConstraint77 = new global::System.Data.ForeignKeyConstraint("FK_Security_Position", new global::System.Data.DataColumn[] {
						DataModel.tableSecurity.SecurityIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tablePosition.SecurityIdColumn});
			foreignKeyConstraint77.AcceptRejectRule = global::System.Data.AcceptRejectRule.Cascade;
			DataModel.tablePosition.Constraints.Add(foreignKeyConstraint77);
			global::System.Data.ForeignKeyConstraint foreignKeyConstraint78 = new global::System.Data.ForeignKeyConstraint("FK_Account_PositionSeries", new global::System.Data.DataColumn[] {
						DataModel.tableAccount.AccountIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tablePositionSeries.AccountIdColumn});
			foreignKeyConstraint78.AcceptRejectRule = global::System.Data.AcceptRejectRule.Cascade;
			DataModel.tablePositionSeries.Constraints.Add(foreignKeyConstraint78);
			global::System.Data.ForeignKeyConstraint foreignKeyConstraint79 = new global::System.Data.ForeignKeyConstraint("FK_Position_PositionSeries", new global::System.Data.DataColumn[] {
						DataModel.tablePosition.PositionIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tablePositionSeries.PositionIdColumn});
			foreignKeyConstraint79.AcceptRejectRule = global::System.Data.AcceptRejectRule.Cascade;
			DataModel.tablePositionSeries.Constraints.Add(foreignKeyConstraint79);
			global::System.Data.ForeignKeyConstraint foreignKeyConstraint80 = new global::System.Data.ForeignKeyConstraint("FK_PositionType_PositionSeries", new global::System.Data.DataColumn[] {
						DataModel.tablePositionType.PositionTypeCodeColumn}, new global::System.Data.DataColumn[] {
						DataModel.tablePositionSeries.PositionTypeCodeColumn});
			foreignKeyConstraint80.AcceptRejectRule = global::System.Data.AcceptRejectRule.Cascade;
			DataModel.tablePositionSeries.Constraints.Add(foreignKeyConstraint80);
			global::System.Data.ForeignKeyConstraint foreignKeyConstraint81 = new global::System.Data.ForeignKeyConstraint("FK_Security_PositionSeries", new global::System.Data.DataColumn[] {
						DataModel.tableSecurity.SecurityIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tablePositionSeries.SecurityIdColumn});
			foreignKeyConstraint81.AcceptRejectRule = global::System.Data.AcceptRejectRule.Cascade;
			DataModel.tablePositionSeries.Constraints.Add(foreignKeyConstraint81);
			global::System.Data.ForeignKeyConstraint foreignKeyConstraint82 = new global::System.Data.ForeignKeyConstraint("FK_SecuritySeries_PositionSeries", new global::System.Data.DataColumn[] {
						DataModel.tableSecuritySeries.SecuritySeriesIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tablePositionSeries.SecuritySeriesIdColumn});
			foreignKeyConstraint82.AcceptRejectRule = global::System.Data.AcceptRejectRule.Cascade;
			DataModel.tablePositionSeries.Constraints.Add(foreignKeyConstraint82);
			global::System.Data.ForeignKeyConstraint foreignKeyConstraint83 = new global::System.Data.ForeignKeyConstraint("FK_Security_Price_CurrencyId", new global::System.Data.DataColumn[] {
						DataModel.tableSecurity.SecurityIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tablePrice.CurrencyIdColumn});
			foreignKeyConstraint83.AcceptRejectRule = global::System.Data.AcceptRejectRule.Cascade;
			DataModel.tablePrice.Constraints.Add(foreignKeyConstraint83);
			global::System.Data.ForeignKeyConstraint foreignKeyConstraint84 = new global::System.Data.ForeignKeyConstraint("FK_Security_Price_SecurityId", new global::System.Data.DataColumn[] {
						DataModel.tableSecurity.SecurityIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tablePrice.SecurityIdColumn});
			foreignKeyConstraint84.AcceptRejectRule = global::System.Data.AcceptRejectRule.Cascade;
			DataModel.tablePrice.Constraints.Add(foreignKeyConstraint84);
			global::System.Data.ForeignKeyConstraint foreignKeyConstraint85 = new global::System.Data.ForeignKeyConstraint("FK_Entity_PropertyStore", new global::System.Data.DataColumn[] {
						DataModel.tableEntity.EntityIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tablePropertyStore.EntityIdColumn});
			foreignKeyConstraint85.AcceptRejectRule = global::System.Data.AcceptRejectRule.Cascade;
			DataModel.tablePropertyStore.Constraints.Add(foreignKeyConstraint85);
			global::System.Data.ForeignKeyConstraint foreignKeyConstraint86 = new global::System.Data.ForeignKeyConstraint("FK_Property_PropertyStore", new global::System.Data.DataColumn[] {
						DataModel.tableProperty.PropertyIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tablePropertyStore.PropertyIdColumn});
			foreignKeyConstraint86.AcceptRejectRule = global::System.Data.AcceptRejectRule.Cascade;
			DataModel.tablePropertyStore.Constraints.Add(foreignKeyConstraint86);
			global::System.Data.ForeignKeyConstraint foreignKeyConstraint87 = new global::System.Data.ForeignKeyConstraint("FK_Country_Province", new global::System.Data.DataColumn[] {
						DataModel.tableCountry.CountryIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableProvince.CountryIdColumn});
			foreignKeyConstraint87.AcceptRejectRule = global::System.Data.AcceptRejectRule.Cascade;
			DataModel.tableProvince.Constraints.Add(foreignKeyConstraint87);
			global::System.Data.ForeignKeyConstraint foreignKeyConstraint88 = new global::System.Data.ForeignKeyConstraint("FK_Country_Security", new global::System.Data.DataColumn[] {
						DataModel.tableCountry.CountryIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableSecurity.CountryIdColumn});
			foreignKeyConstraint88.AcceptRejectRule = global::System.Data.AcceptRejectRule.Cascade;
			DataModel.tableSecurity.Constraints.Add(foreignKeyConstraint88);
			global::System.Data.ForeignKeyConstraint foreignKeyConstraint89 = new global::System.Data.ForeignKeyConstraint("FK_Entity_Security", new global::System.Data.DataColumn[] {
						DataModel.tableEntity.EntityIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableSecurity.SecurityIdColumn});
			foreignKeyConstraint89.AcceptRejectRule = global::System.Data.AcceptRejectRule.Cascade;
			DataModel.tableSecurity.Constraints.Add(foreignKeyConstraint89);
			global::System.Data.ForeignKeyConstraint foreignKeyConstraint90 = new global::System.Data.ForeignKeyConstraint("FK_Issuer_Security", new global::System.Data.DataColumn[] {
						DataModel.tableIssuer.IssuerIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableSecurity.IssuerIdColumn});
			foreignKeyConstraint90.AcceptRejectRule = global::System.Data.AcceptRejectRule.Cascade;
			DataModel.tableSecurity.Constraints.Add(foreignKeyConstraint90);
			global::System.Data.ForeignKeyConstraint foreignKeyConstraint91 = new global::System.Data.ForeignKeyConstraint("FK_MajorInstrumentType_Security", new global::System.Data.DataColumn[] {
						DataModel.tableMajorInstrumentType.MajorInstrumentTypeIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableSecurity.MajorInstrumentTypeIdColumn});
			foreignKeyConstraint91.AcceptRejectRule = global::System.Data.AcceptRejectRule.Cascade;
			DataModel.tableSecurity.Constraints.Add(foreignKeyConstraint91);
			global::System.Data.ForeignKeyConstraint foreignKeyConstraint92 = new global::System.Data.ForeignKeyConstraint("FK_MinorInstrumentType_Security", new global::System.Data.DataColumn[] {
						DataModel.tableMinorInstrumentType.MinorInstrumentTypeIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableSecurity.MinorInstrumentTypeIdColumn});
			foreignKeyConstraint92.AcceptRejectRule = global::System.Data.AcceptRejectRule.Cascade;
			DataModel.tableSecurity.Constraints.Add(foreignKeyConstraint92);
			global::System.Data.ForeignKeyConstraint foreignKeyConstraint93 = new global::System.Data.ForeignKeyConstraint("FK_VolumeCategory_Security", new global::System.Data.DataColumn[] {
						DataModel.tableVolumeCategory.VolumeCategoryCodeColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableSecurity.VolumeCategoryCodeColumn});
			foreignKeyConstraint93.AcceptRejectRule = global::System.Data.AcceptRejectRule.Cascade;
			DataModel.tableSecurity.Constraints.Add(foreignKeyConstraint93);
			global::System.Data.ForeignKeyConstraint foreignKeyConstraint94 = new global::System.Data.ForeignKeyConstraint("FK_CreditRating_SecuritySeries_CreditRatingId0", new global::System.Data.DataColumn[] {
						DataModel.tableCreditRating.CreditRatingIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableSecuritySeries.CreditRatingId0Column});
			foreignKeyConstraint94.AcceptRejectRule = global::System.Data.AcceptRejectRule.Cascade;
			DataModel.tableSecuritySeries.Constraints.Add(foreignKeyConstraint94);
			global::System.Data.ForeignKeyConstraint foreignKeyConstraint95 = new global::System.Data.ForeignKeyConstraint("FK_CreditRating_SecuritySeries_CreditRatingId1", new global::System.Data.DataColumn[] {
						DataModel.tableCreditRating.CreditRatingIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableSecuritySeries.CreditRatingId1Column});
			foreignKeyConstraint95.AcceptRejectRule = global::System.Data.AcceptRejectRule.Cascade;
			DataModel.tableSecuritySeries.Constraints.Add(foreignKeyConstraint95);
			global::System.Data.ForeignKeyConstraint foreignKeyConstraint96 = new global::System.Data.ForeignKeyConstraint("FK_CreditRating_SecuritySeries_CreditRatingId2", new global::System.Data.DataColumn[] {
						DataModel.tableCreditRating.CreditRatingIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableSecuritySeries.CreditRatingId2Column});
			foreignKeyConstraint96.AcceptRejectRule = global::System.Data.AcceptRejectRule.Cascade;
			DataModel.tableSecuritySeries.Constraints.Add(foreignKeyConstraint96);
			global::System.Data.ForeignKeyConstraint foreignKeyConstraint97 = new global::System.Data.ForeignKeyConstraint("FK_CreditRating_SecuritySeries_CreditRatingId3", new global::System.Data.DataColumn[] {
						DataModel.tableCreditRating.CreditRatingIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableSecuritySeries.CreditRatingId3Column});
			foreignKeyConstraint97.AcceptRejectRule = global::System.Data.AcceptRejectRule.Cascade;
			DataModel.tableSecuritySeries.Constraints.Add(foreignKeyConstraint97);
			global::System.Data.ForeignKeyConstraint foreignKeyConstraint98 = new global::System.Data.ForeignKeyConstraint("FK_CreditRating_SecuritySeries_CreditRatingId4", new global::System.Data.DataColumn[] {
						DataModel.tableCreditRating.CreditRatingIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableSecuritySeries.CreditRatingId4Column});
			foreignKeyConstraint98.AcceptRejectRule = global::System.Data.AcceptRejectRule.Cascade;
			DataModel.tableSecuritySeries.Constraints.Add(foreignKeyConstraint98);
			global::System.Data.ForeignKeyConstraint foreignKeyConstraint99 = new global::System.Data.ForeignKeyConstraint("FK_CreditRating_SecuritySeries_CreditRatingId5", new global::System.Data.DataColumn[] {
						DataModel.tableCreditRating.CreditRatingIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableSecuritySeries.CreditRatingId5Column});
			foreignKeyConstraint99.AcceptRejectRule = global::System.Data.AcceptRejectRule.Cascade;
			DataModel.tableSecuritySeries.Constraints.Add(foreignKeyConstraint99);
			global::System.Data.ForeignKeyConstraint foreignKeyConstraint100 = new global::System.Data.ForeignKeyConstraint("FK_MssaBucket_SecuritySeries", new global::System.Data.DataColumn[] {
						DataModel.tableMssaBucket.MssaBucketIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableSecuritySeries.MssaBucketIdColumn});
			foreignKeyConstraint100.AcceptRejectRule = global::System.Data.AcceptRejectRule.Cascade;
			DataModel.tableSecuritySeries.Constraints.Add(foreignKeyConstraint100);
			global::System.Data.ForeignKeyConstraint foreignKeyConstraint101 = new global::System.Data.ForeignKeyConstraint("FK_Security_SecuritySeries", new global::System.Data.DataColumn[] {
						DataModel.tableSecurity.SecurityIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableSecuritySeries.SecurityIdColumn});
			foreignKeyConstraint101.AcceptRejectRule = global::System.Data.AcceptRejectRule.Cascade;
			DataModel.tableSecuritySeries.Constraints.Add(foreignKeyConstraint101);
			global::System.Data.ForeignKeyConstraint foreignKeyConstraint102 = new global::System.Data.ForeignKeyConstraint("FK_SubordinateType_SecuritySeries", new global::System.Data.DataColumn[] {
						DataModel.tableSubordinateType.SubordinateTypeCodeColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableSecuritySeries.SubordinateTypeCodeColumn});
			foreignKeyConstraint102.AcceptRejectRule = global::System.Data.AcceptRejectRule.Cascade;
			DataModel.tableSecuritySeries.Constraints.Add(foreignKeyConstraint102);
			global::System.Data.ForeignKeyConstraint foreignKeyConstraint103 = new global::System.Data.ForeignKeyConstraint("FK_Account_SingleAccount", new global::System.Data.DataColumn[] {
						DataModel.tableAccount.AccountIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableSingleAccount.SingleAccountIdColumn});
			foreignKeyConstraint103.AcceptRejectRule = global::System.Data.AcceptRejectRule.Cascade;
			DataModel.tableSingleAccount.Constraints.Add(foreignKeyConstraint103);
			global::System.Data.ForeignKeyConstraint foreignKeyConstraint104 = new global::System.Data.ForeignKeyConstraint("FK_Country_SingleAccount", new global::System.Data.DataColumn[] {
						DataModel.tableCountry.CountryIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableSingleAccount.CountryIdColumn});
			foreignKeyConstraint104.AcceptRejectRule = global::System.Data.AcceptRejectRule.Cascade;
			DataModel.tableSingleAccount.Constraints.Add(foreignKeyConstraint104);
			global::System.Data.ForeignKeyConstraint foreignKeyConstraint105 = new global::System.Data.ForeignKeyConstraint("FK_LotHandling_SingleAccount", new global::System.Data.DataColumn[] {
						DataModel.tableLotHandling.LotHandlingCodeColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableSingleAccount.LotHandlingCodeColumn});
			foreignKeyConstraint105.AcceptRejectRule = global::System.Data.AcceptRejectRule.Cascade;
			DataModel.tableSingleAccount.Constraints.Add(foreignKeyConstraint105);
			global::System.Data.ForeignKeyConstraint foreignKeyConstraint106 = new global::System.Data.ForeignKeyConstraint("FK_Province_SingleAccount", new global::System.Data.DataColumn[] {
						DataModel.tableProvince.ProvinceIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableSingleAccount.ProvinceIdColumn});
			foreignKeyConstraint106.AcceptRejectRule = global::System.Data.AcceptRejectRule.Cascade;
			DataModel.tableSingleAccount.Constraints.Add(foreignKeyConstraint106);
			global::System.Data.ForeignKeyConstraint foreignKeyConstraint107 = new global::System.Data.ForeignKeyConstraint("FK_Blotter_Source", new global::System.Data.DataColumn[] {
						DataModel.tableBlotter.BlotterIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableSource.SourceIdColumn});
			foreignKeyConstraint107.AcceptRejectRule = global::System.Data.AcceptRejectRule.Cascade;
			DataModel.tableSource.Constraints.Add(foreignKeyConstraint107);
			global::System.Data.ForeignKeyConstraint foreignKeyConstraint108 = new global::System.Data.ForeignKeyConstraint("FK_Destination_SourceOrder", new global::System.Data.DataColumn[] {
						DataModel.tableDestination.DestinationIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableSourceOrder.DestinationIdColumn});
			foreignKeyConstraint108.AcceptRejectRule = global::System.Data.AcceptRejectRule.Cascade;
			DataModel.tableSourceOrder.Constraints.Add(foreignKeyConstraint108);
			global::System.Data.ForeignKeyConstraint foreignKeyConstraint109 = new global::System.Data.ForeignKeyConstraint("FK_OrderType_SourceOrder", new global::System.Data.DataColumn[] {
						DataModel.tableOrderType.OrderTypeCodeColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableSourceOrder.OrderTypeCodeColumn});
			foreignKeyConstraint109.AcceptRejectRule = global::System.Data.AcceptRejectRule.Cascade;
			DataModel.tableSourceOrder.Constraints.Add(foreignKeyConstraint109);
			global::System.Data.ForeignKeyConstraint foreignKeyConstraint110 = new global::System.Data.ForeignKeyConstraint("FK_Security_SourceOrder_SecurityId", new global::System.Data.DataColumn[] {
						DataModel.tableSecurity.SecurityIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableSourceOrder.SecurityIdColumn});
			foreignKeyConstraint110.AcceptRejectRule = global::System.Data.AcceptRejectRule.Cascade;
			DataModel.tableSourceOrder.Constraints.Add(foreignKeyConstraint110);
			global::System.Data.ForeignKeyConstraint foreignKeyConstraint111 = new global::System.Data.ForeignKeyConstraint("FK_Security_SourceOrder_SettlementId", new global::System.Data.DataColumn[] {
						DataModel.tableSecurity.SecurityIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableSourceOrder.SettlementIdColumn});
			foreignKeyConstraint111.AcceptRejectRule = global::System.Data.AcceptRejectRule.Cascade;
			DataModel.tableSourceOrder.Constraints.Add(foreignKeyConstraint111);
			global::System.Data.ForeignKeyConstraint foreignKeyConstraint112 = new global::System.Data.ForeignKeyConstraint("FK_Side_SourceOrder", new global::System.Data.DataColumn[] {
						DataModel.tableSide.SideCodeColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableSourceOrder.SideCodeColumn});
			foreignKeyConstraint112.AcceptRejectRule = global::System.Data.AcceptRejectRule.Cascade;
			DataModel.tableSourceOrder.Constraints.Add(foreignKeyConstraint112);
			global::System.Data.ForeignKeyConstraint foreignKeyConstraint113 = new global::System.Data.ForeignKeyConstraint("FK_Status_SourceOrder", new global::System.Data.DataColumn[] {
						DataModel.tableStatus.StatusCodeColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableSourceOrder.StatusCodeColumn});
			foreignKeyConstraint113.AcceptRejectRule = global::System.Data.AcceptRejectRule.Cascade;
			DataModel.tableSourceOrder.Constraints.Add(foreignKeyConstraint113);
			global::System.Data.ForeignKeyConstraint foreignKeyConstraint114 = new global::System.Data.ForeignKeyConstraint("FK_TimeInForce_SourceOrder", new global::System.Data.DataColumn[] {
						DataModel.tableTimeInForce.TimeInForceCodeColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableSourceOrder.TimeInForceCodeColumn});
			foreignKeyConstraint114.AcceptRejectRule = global::System.Data.AcceptRejectRule.Cascade;
			DataModel.tableSourceOrder.Constraints.Add(foreignKeyConstraint114);
			global::System.Data.ForeignKeyConstraint foreignKeyConstraint115 = new global::System.Data.ForeignKeyConstraint("FK_User_SourceOrder_CreatedUserId", new global::System.Data.DataColumn[] {
						DataModel.tableUser.UserIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableSourceOrder.CreatedUserIdColumn});
			foreignKeyConstraint115.AcceptRejectRule = global::System.Data.AcceptRejectRule.Cascade;
			DataModel.tableSourceOrder.Constraints.Add(foreignKeyConstraint115);
			global::System.Data.ForeignKeyConstraint foreignKeyConstraint116 = new global::System.Data.ForeignKeyConstraint("FK_User_SourceOrder_ModifiedUserId", new global::System.Data.DataColumn[] {
						DataModel.tableUser.UserIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableSourceOrder.ModifiedUserIdColumn});
			foreignKeyConstraint116.AcceptRejectRule = global::System.Data.AcceptRejectRule.Cascade;
			DataModel.tableSourceOrder.Constraints.Add(foreignKeyConstraint116);
			global::System.Data.ForeignKeyConstraint foreignKeyConstraint117 = new global::System.Data.ForeignKeyConstraint("FK_WorkingOrder_SourceOrder", new global::System.Data.DataColumn[] {
						DataModel.tableWorkingOrder.WorkingOrderIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableSourceOrder.WorkingOrderIdColumn});
			foreignKeyConstraint117.AcceptRejectRule = global::System.Data.AcceptRejectRule.Cascade;
			DataModel.tableSourceOrder.Constraints.Add(foreignKeyConstraint117);
			global::System.Data.ForeignKeyConstraint foreignKeyConstraint118 = new global::System.Data.ForeignKeyConstraint("FK_Account_TaxLot", new global::System.Data.DataColumn[] {
						DataModel.tableAccount.AccountIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableTaxLot.AccountIdColumn});
			foreignKeyConstraint118.AcceptRejectRule = global::System.Data.AcceptRejectRule.Cascade;
			DataModel.tableTaxLot.Constraints.Add(foreignKeyConstraint118);
			global::System.Data.ForeignKeyConstraint foreignKeyConstraint119 = new global::System.Data.ForeignKeyConstraint("FK_Position_TaxLot", new global::System.Data.DataColumn[] {
						DataModel.tablePosition.PositionIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableTaxLot.PositionIdColumn});
			foreignKeyConstraint119.AcceptRejectRule = global::System.Data.AcceptRejectRule.Cascade;
			DataModel.tableTaxLot.Constraints.Add(foreignKeyConstraint119);
			global::System.Data.ForeignKeyConstraint foreignKeyConstraint120 = new global::System.Data.ForeignKeyConstraint("FK_PositionType_TaxLot", new global::System.Data.DataColumn[] {
						DataModel.tablePositionType.PositionTypeCodeColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableTaxLot.PositionTypeCodeColumn});
			foreignKeyConstraint120.AcceptRejectRule = global::System.Data.AcceptRejectRule.Cascade;
			DataModel.tableTaxLot.Constraints.Add(foreignKeyConstraint120);
			global::System.Data.ForeignKeyConstraint foreignKeyConstraint121 = new global::System.Data.ForeignKeyConstraint("FK_Security_TaxLot", new global::System.Data.DataColumn[] {
						DataModel.tableSecurity.SecurityIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableTaxLot.SecurityIdColumn});
			foreignKeyConstraint121.AcceptRejectRule = global::System.Data.AcceptRejectRule.Cascade;
			DataModel.tableTaxLot.Constraints.Add(foreignKeyConstraint121);
			global::System.Data.ForeignKeyConstraint foreignKeyConstraint122 = new global::System.Data.ForeignKeyConstraint("FK_Account_TaxLotSeries", new global::System.Data.DataColumn[] {
						DataModel.tableAccount.AccountIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableTaxLotSeries.AccountIdColumn});
			foreignKeyConstraint122.AcceptRejectRule = global::System.Data.AcceptRejectRule.Cascade;
			DataModel.tableTaxLotSeries.Constraints.Add(foreignKeyConstraint122);
			global::System.Data.ForeignKeyConstraint foreignKeyConstraint123 = new global::System.Data.ForeignKeyConstraint("FK_PositionSeries_TaxLotSeries", new global::System.Data.DataColumn[] {
						DataModel.tablePositionSeries.PositionSeriesIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableTaxLotSeries.PositionSeriesIdColumn});
			foreignKeyConstraint123.AcceptRejectRule = global::System.Data.AcceptRejectRule.Cascade;
			DataModel.tableTaxLotSeries.Constraints.Add(foreignKeyConstraint123);
			global::System.Data.ForeignKeyConstraint foreignKeyConstraint124 = new global::System.Data.ForeignKeyConstraint("FK_PositionType_TaxLotSeries", new global::System.Data.DataColumn[] {
						DataModel.tablePositionType.PositionTypeCodeColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableTaxLotSeries.PositionTypeCodeColumn});
			foreignKeyConstraint124.AcceptRejectRule = global::System.Data.AcceptRejectRule.Cascade;
			DataModel.tableTaxLotSeries.Constraints.Add(foreignKeyConstraint124);
			global::System.Data.ForeignKeyConstraint foreignKeyConstraint125 = new global::System.Data.ForeignKeyConstraint("FK_Security_TaxLotSeries", new global::System.Data.DataColumn[] {
						DataModel.tableSecurity.SecurityIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableTaxLotSeries.SecurityIdColumn});
			foreignKeyConstraint125.AcceptRejectRule = global::System.Data.AcceptRejectRule.Cascade;
			DataModel.tableTaxLotSeries.Constraints.Add(foreignKeyConstraint125);
			global::System.Data.ForeignKeyConstraint foreignKeyConstraint126 = new global::System.Data.ForeignKeyConstraint("FK_SecuritySeries_TaxLotSeries", new global::System.Data.DataColumn[] {
						DataModel.tableSecuritySeries.SecuritySeriesIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableTaxLotSeries.SecuritySeriesIdColumn});
			foreignKeyConstraint126.AcceptRejectRule = global::System.Data.AcceptRejectRule.Cascade;
			DataModel.tableTaxLotSeries.Constraints.Add(foreignKeyConstraint126);
			global::System.Data.ForeignKeyConstraint foreignKeyConstraint127 = new global::System.Data.ForeignKeyConstraint("FK_TaxLot_TaxLotSeries", new global::System.Data.DataColumn[] {
						DataModel.tableTaxLot.TaxLotIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableTaxLotSeries.TaxLotIdColumn});
			foreignKeyConstraint127.AcceptRejectRule = global::System.Data.AcceptRejectRule.Cascade;
			DataModel.tableTaxLotSeries.Constraints.Add(foreignKeyConstraint127);
			global::System.Data.ForeignKeyConstraint foreignKeyConstraint128 = new global::System.Data.ForeignKeyConstraint("FK_Blotter_Trader", new global::System.Data.DataColumn[] {
						DataModel.tableBlotter.BlotterIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableTrader.DefaultBlotterIdColumn});
			foreignKeyConstraint128.AcceptRejectRule = global::System.Data.AcceptRejectRule.Cascade;
			DataModel.tableTrader.Constraints.Add(foreignKeyConstraint128);
			global::System.Data.ForeignKeyConstraint foreignKeyConstraint129 = new global::System.Data.ForeignKeyConstraint("FK_User_Trader", new global::System.Data.DataColumn[] {
						DataModel.tableUser.UserIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableTrader.TraderIdColumn});
			foreignKeyConstraint129.AcceptRejectRule = global::System.Data.AcceptRejectRule.Cascade;
			DataModel.tableTrader.Constraints.Add(foreignKeyConstraint129);
			global::System.Data.ForeignKeyConstraint foreignKeyConstraint130 = new global::System.Data.ForeignKeyConstraint("FK_Trader_TraderVolumeSetting", new global::System.Data.DataColumn[] {
						DataModel.tableTrader.TraderIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableTraderVolumeSetting.TraderIdColumn});
			foreignKeyConstraint130.AcceptRejectRule = global::System.Data.AcceptRejectRule.Cascade;
			DataModel.tableTraderVolumeSetting.Constraints.Add(foreignKeyConstraint130);
			global::System.Data.ForeignKeyConstraint foreignKeyConstraint131 = new global::System.Data.ForeignKeyConstraint("FK_VolumeCategory_TraderVolumeSetting", new global::System.Data.DataColumn[] {
						DataModel.tableVolumeCategory.VolumeCategoryCodeColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableTraderVolumeSetting.VolumeCategoryCodeColumn});
			foreignKeyConstraint131.AcceptRejectRule = global::System.Data.AcceptRejectRule.Cascade;
			DataModel.tableTraderVolumeSetting.Constraints.Add(foreignKeyConstraint131);
			global::System.Data.ForeignKeyConstraint foreignKeyConstraint132 = new global::System.Data.ForeignKeyConstraint("FK_Image_Type", new global::System.Data.DataColumn[] {
						DataModel.tableImage.ImageIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableType.ImageIdColumn});
			foreignKeyConstraint132.AcceptRejectRule = global::System.Data.AcceptRejectRule.Cascade;
			DataModel.tableType.Constraints.Add(foreignKeyConstraint132);
			global::System.Data.ForeignKeyConstraint foreignKeyConstraint133 = new global::System.Data.ForeignKeyConstraint("FK_Entity_User", new global::System.Data.DataColumn[] {
						DataModel.tableEntity.EntityIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableUser.UserIdColumn});
			foreignKeyConstraint133.AcceptRejectRule = global::System.Data.AcceptRejectRule.Cascade;
			DataModel.tableUser.Constraints.Add(foreignKeyConstraint133);
			global::System.Data.ForeignKeyConstraint foreignKeyConstraint134 = new global::System.Data.ForeignKeyConstraint("FK_Blotter_WorkingOrder", new global::System.Data.DataColumn[] {
						DataModel.tableBlotter.BlotterIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableWorkingOrder.BlotterIdColumn});
			foreignKeyConstraint134.AcceptRejectRule = global::System.Data.AcceptRejectRule.Cascade;
			DataModel.tableWorkingOrder.Constraints.Add(foreignKeyConstraint134);
			global::System.Data.ForeignKeyConstraint foreignKeyConstraint135 = new global::System.Data.ForeignKeyConstraint("FK_Crossing_WorkingOrder", new global::System.Data.DataColumn[] {
						DataModel.tableCrossing.CrossingCodeColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableWorkingOrder.CrossingCodeColumn});
			foreignKeyConstraint135.AcceptRejectRule = global::System.Data.AcceptRejectRule.Cascade;
			DataModel.tableWorkingOrder.Constraints.Add(foreignKeyConstraint135);
			global::System.Data.ForeignKeyConstraint foreignKeyConstraint136 = new global::System.Data.ForeignKeyConstraint("FK_Destination_WorkingOrder", new global::System.Data.DataColumn[] {
						DataModel.tableDestination.DestinationIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableWorkingOrder.DestinationIdColumn});
			foreignKeyConstraint136.AcceptRejectRule = global::System.Data.AcceptRejectRule.Cascade;
			DataModel.tableWorkingOrder.Constraints.Add(foreignKeyConstraint136);
			global::System.Data.ForeignKeyConstraint foreignKeyConstraint137 = new global::System.Data.ForeignKeyConstraint("FK_OrderType_WorkingOrder", new global::System.Data.DataColumn[] {
						DataModel.tableOrderType.OrderTypeCodeColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableWorkingOrder.OrderTypeCodeColumn});
			foreignKeyConstraint137.AcceptRejectRule = global::System.Data.AcceptRejectRule.Cascade;
			DataModel.tableWorkingOrder.Constraints.Add(foreignKeyConstraint137);
			global::System.Data.ForeignKeyConstraint foreignKeyConstraint138 = new global::System.Data.ForeignKeyConstraint("FK_Security_WorkingOrder_SecurityId", new global::System.Data.DataColumn[] {
						DataModel.tableSecurity.SecurityIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableWorkingOrder.SecurityIdColumn});
			foreignKeyConstraint138.AcceptRejectRule = global::System.Data.AcceptRejectRule.Cascade;
			DataModel.tableWorkingOrder.Constraints.Add(foreignKeyConstraint138);
			global::System.Data.ForeignKeyConstraint foreignKeyConstraint139 = new global::System.Data.ForeignKeyConstraint("FK_Security_WorkingOrder_SettlementId", new global::System.Data.DataColumn[] {
						DataModel.tableSecurity.SecurityIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableWorkingOrder.SettlementIdColumn});
			foreignKeyConstraint139.AcceptRejectRule = global::System.Data.AcceptRejectRule.Cascade;
			DataModel.tableWorkingOrder.Constraints.Add(foreignKeyConstraint139);
			global::System.Data.ForeignKeyConstraint foreignKeyConstraint140 = new global::System.Data.ForeignKeyConstraint("FK_Side_WorkingOrder", new global::System.Data.DataColumn[] {
						DataModel.tableSide.SideCodeColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableWorkingOrder.SideCodeColumn});
			foreignKeyConstraint140.AcceptRejectRule = global::System.Data.AcceptRejectRule.Cascade;
			DataModel.tableWorkingOrder.Constraints.Add(foreignKeyConstraint140);
			global::System.Data.ForeignKeyConstraint foreignKeyConstraint141 = new global::System.Data.ForeignKeyConstraint("FK_Status_WorkingOrder", new global::System.Data.DataColumn[] {
						DataModel.tableStatus.StatusCodeColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableWorkingOrder.StatusCodeColumn});
			foreignKeyConstraint141.AcceptRejectRule = global::System.Data.AcceptRejectRule.Cascade;
			DataModel.tableWorkingOrder.Constraints.Add(foreignKeyConstraint141);
			global::System.Data.ForeignKeyConstraint foreignKeyConstraint142 = new global::System.Data.ForeignKeyConstraint("FK_TimeInForce_WorkingOrder", new global::System.Data.DataColumn[] {
						DataModel.tableTimeInForce.TimeInForceCodeColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableWorkingOrder.TimeInForceCodeColumn});
			foreignKeyConstraint142.AcceptRejectRule = global::System.Data.AcceptRejectRule.Cascade;
			DataModel.tableWorkingOrder.Constraints.Add(foreignKeyConstraint142);
			global::System.Data.ForeignKeyConstraint foreignKeyConstraint143 = new global::System.Data.ForeignKeyConstraint("FK_User_WorkingOrder_CreatedUserId", new global::System.Data.DataColumn[] {
						DataModel.tableUser.UserIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableWorkingOrder.CreatedUserIdColumn});
			foreignKeyConstraint143.AcceptRejectRule = global::System.Data.AcceptRejectRule.Cascade;
			DataModel.tableWorkingOrder.Constraints.Add(foreignKeyConstraint143);
			global::System.Data.ForeignKeyConstraint foreignKeyConstraint144 = new global::System.Data.ForeignKeyConstraint("FK_User_WorkingOrder_ModifiedUserId", new global::System.Data.DataColumn[] {
						DataModel.tableUser.UserIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableWorkingOrder.ModifiedUserIdColumn});
			foreignKeyConstraint144.AcceptRejectRule = global::System.Data.AcceptRejectRule.Cascade;
			DataModel.tableWorkingOrder.Constraints.Add(foreignKeyConstraint144);
			DataModel.relationAccountAccountSeries = new global::System.Data.DataRelation("FK_Account_AccountSeries", new global::System.Data.DataColumn[] {
						DataModel.tableAccount.AccountIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableAccountSeries.AccountSeriesIdColumn}, false);
			DataModel.dataSet.Relations.Add(DataModel.relationAccountAccountSeries);
			DataModel.relationAccountAllocation = new global::System.Data.DataRelation("FK_Account_Allocation", new global::System.Data.DataColumn[] {
						DataModel.tableAccount.AccountIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableAllocation.AccountIdColumn}, false);
			DataModel.dataSet.Relations.Add(DataModel.relationAccountAllocation);
			DataModel.relationAccountGroupAccount = new global::System.Data.DataRelation("FK_Account_GroupAccount", new global::System.Data.DataColumn[] {
						DataModel.tableAccount.AccountIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableGroupAccount.GroupAccountIdColumn}, false);
			DataModel.dataSet.Relations.Add(DataModel.relationAccountGroupAccount);
			DataModel.relationAccountPosition = new global::System.Data.DataRelation("FK_Account_Position", new global::System.Data.DataColumn[] {
						DataModel.tableAccount.AccountIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tablePosition.AccountIdColumn}, false);
			DataModel.dataSet.Relations.Add(DataModel.relationAccountPosition);
			DataModel.relationAccountPositionSeries = new global::System.Data.DataRelation("FK_Account_PositionSeries", new global::System.Data.DataColumn[] {
						DataModel.tableAccount.AccountIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tablePositionSeries.AccountIdColumn}, false);
			DataModel.dataSet.Relations.Add(DataModel.relationAccountPositionSeries);
			DataModel.relationAccountSingleAccount = new global::System.Data.DataRelation("FK_Account_SingleAccount", new global::System.Data.DataColumn[] {
						DataModel.tableAccount.AccountIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableSingleAccount.SingleAccountIdColumn}, false);
			DataModel.dataSet.Relations.Add(DataModel.relationAccountSingleAccount);
			DataModel.relationAccountTaxLot = new global::System.Data.DataRelation("FK_Account_TaxLot", new global::System.Data.DataColumn[] {
						DataModel.tableAccount.AccountIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableTaxLot.AccountIdColumn}, false);
			DataModel.dataSet.Relations.Add(DataModel.relationAccountTaxLot);
			DataModel.relationAccountTaxLotSeries = new global::System.Data.DataRelation("FK_Account_TaxLotSeries", new global::System.Data.DataColumn[] {
						DataModel.tableAccount.AccountIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableTaxLotSeries.AccountIdColumn}, false);
			DataModel.dataSet.Relations.Add(DataModel.relationAccountTaxLotSeries);
			DataModel.relationBlotterBlotterDestinationMap = new global::System.Data.DataRelation("FK_Blotter_BlotterDestinationMap", new global::System.Data.DataColumn[] {
						DataModel.tableBlotter.BlotterIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableBlotterDestinationMap.BlotterIdColumn}, false);
			DataModel.dataSet.Relations.Add(DataModel.relationBlotterBlotterDestinationMap);
			DataModel.relationBlotterBranch = new global::System.Data.DataRelation("FK_Blotter_Branch", new global::System.Data.DataColumn[] {
						DataModel.tableBlotter.BlotterIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableBranch.BranchIdColumn}, false);
			DataModel.dataSet.Relations.Add(DataModel.relationBlotterBranch);
			DataModel.relationBlotterMatch = new global::System.Data.DataRelation("FK_Blotter_Match", new global::System.Data.DataColumn[] {
						DataModel.tableBlotter.BlotterIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableMatch.BlotterIdColumn}, false);
			DataModel.dataSet.Relations.Add(DataModel.relationBlotterMatch);
			DataModel.relationBlotterNegotiation = new global::System.Data.DataRelation("FK_Blotter_Negotiation", new global::System.Data.DataColumn[] {
						DataModel.tableBlotter.BlotterIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableNegotiation.BlotterIdColumn}, false);
			DataModel.dataSet.Relations.Add(DataModel.relationBlotterNegotiation);
			DataModel.relationBlotterSource = new global::System.Data.DataRelation("FK_Blotter_Source", new global::System.Data.DataColumn[] {
						DataModel.tableBlotter.BlotterIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableSource.SourceIdColumn}, false);
			DataModel.dataSet.Relations.Add(DataModel.relationBlotterSource);
			DataModel.relationBlotterTrader = new global::System.Data.DataRelation("FK_Blotter_Trader", new global::System.Data.DataColumn[] {
						DataModel.tableBlotter.BlotterIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableTrader.DefaultBlotterIdColumn}, false);
			DataModel.dataSet.Relations.Add(DataModel.relationBlotterTrader);
			DataModel.relationBlotterWorkingOrder = new global::System.Data.DataRelation("FK_Blotter_WorkingOrder", new global::System.Data.DataColumn[] {
						DataModel.tableBlotter.BlotterIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableWorkingOrder.BlotterIdColumn}, false);
			DataModel.dataSet.Relations.Add(DataModel.relationBlotterWorkingOrder);
			DataModel.relationBrokerBrokerAccount = new global::System.Data.DataRelation("FK_Broker_BrokerAccount", new global::System.Data.DataColumn[] {
						DataModel.tableBroker.BrokerIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableBrokerAccount.BrokerIdColumn}, false);
			DataModel.dataSet.Relations.Add(DataModel.relationBrokerBrokerAccount);
			DataModel.relationBrokerClearingBroker = new global::System.Data.DataRelation("FK_Broker_ClearingBroker", new global::System.Data.DataColumn[] {
						DataModel.tableBroker.BrokerIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableClearingBroker.ClearingBrokerIdColumn}, false);
			DataModel.dataSet.Relations.Add(DataModel.relationBrokerClearingBroker);
			DataModel.relationBrokerExecution = new global::System.Data.DataRelation("FK_Broker_Execution", new global::System.Data.DataColumn[] {
						DataModel.tableBroker.BrokerIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableExecution.BrokerIdColumn}, false);
			DataModel.dataSet.Relations.Add(DataModel.relationBrokerExecution);
			DataModel.relationBrokerAccountExecution = new global::System.Data.DataRelation("FK_BrokerAccount_Execution", new global::System.Data.DataColumn[] {
						DataModel.tableBrokerAccount.BrokerAccountIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableExecution.BrokerAccountIdColumn}, false);
			DataModel.dataSet.Relations.Add(DataModel.relationBrokerAccountExecution);
			DataModel.relationCommissionScheduleCommissionTranche = new global::System.Data.DataRelation("FK_CommissionSchedule_CommissionTranche", new global::System.Data.DataColumn[] {
						DataModel.tableCommissionSchedule.CommissionScheduleIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableCommissionTranche.CommissionScheduleIdColumn}, false);
			DataModel.dataSet.Relations.Add(DataModel.relationCommissionScheduleCommissionTranche);
			DataModel.relationCommissionTypeCommissionTranche = new global::System.Data.DataRelation("FK_CommissionType_CommissionTranche", new global::System.Data.DataColumn[] {
						DataModel.tableCommissionType.CommissionTypeCodeColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableCommissionTranche.CommissionTypeCodeColumn}, false);
			DataModel.dataSet.Relations.Add(DataModel.relationCommissionTypeCommissionTranche);
			DataModel.relationCommissionUnitCommissionTranche = new global::System.Data.DataRelation("FK_CommissionUnit_CommissionTranche", new global::System.Data.DataColumn[] {
						DataModel.tableCommissionUnit.CommissionUnitCodeColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableCommissionTranche.CommissionUnitCodeColumn}, false);
			DataModel.dataSet.Relations.Add(DataModel.relationCommissionUnitCommissionTranche);
			DataModel.relationCountryExchange = new global::System.Data.DataRelation("FK_Country_Exchange", new global::System.Data.DataColumn[] {
						DataModel.tableCountry.CountryIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableExchange.CountryIdColumn}, false);
			DataModel.dataSet.Relations.Add(DataModel.relationCountryExchange);
			DataModel.relationCountryHoliday = new global::System.Data.DataRelation("FK_Country_Holiday", new global::System.Data.DataColumn[] {
						DataModel.tableCountry.CountryIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableHoliday.CountryIdColumn}, false);
			DataModel.dataSet.Relations.Add(DataModel.relationCountryHoliday);
			DataModel.relationCountryProvince = new global::System.Data.DataRelation("FK_Country_Province", new global::System.Data.DataColumn[] {
						DataModel.tableCountry.CountryIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableProvince.CountryIdColumn}, false);
			DataModel.dataSet.Relations.Add(DataModel.relationCountryProvince);
			DataModel.relationCountrySecurity = new global::System.Data.DataRelation("FK_Country_Security", new global::System.Data.DataColumn[] {
						DataModel.tableCountry.CountryIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableSecurity.CountryIdColumn}, false);
			DataModel.dataSet.Relations.Add(DataModel.relationCountrySecurity);
			DataModel.relationCountrySingleAccount = new global::System.Data.DataRelation("FK_Country_SingleAccount", new global::System.Data.DataColumn[] {
						DataModel.tableCountry.CountryIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableSingleAccount.CountryIdColumn}, false);
			DataModel.dataSet.Relations.Add(DataModel.relationCountrySingleAccount);
			DataModel.relationCreditRatingSecuritySeriesByFK_CreditRating_SecuritySeries_CreditRatingId0 = new global::System.Data.DataRelation("FK_CreditRating_SecuritySeries_CreditRatingId0", new global::System.Data.DataColumn[] {
						DataModel.tableCreditRating.CreditRatingIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableSecuritySeries.CreditRatingId0Column}, false);
			DataModel.dataSet.Relations.Add(DataModel.relationCreditRatingSecuritySeriesByFK_CreditRating_SecuritySeries_CreditRatingId0);
			DataModel.relationCreditRatingSecuritySeriesByFK_CreditRating_SecuritySeries_CreditRatingId1 = new global::System.Data.DataRelation("FK_CreditRating_SecuritySeries_CreditRatingId1", new global::System.Data.DataColumn[] {
						DataModel.tableCreditRating.CreditRatingIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableSecuritySeries.CreditRatingId1Column}, false);
			DataModel.dataSet.Relations.Add(DataModel.relationCreditRatingSecuritySeriesByFK_CreditRating_SecuritySeries_CreditRatingId1);
			DataModel.relationCreditRatingSecuritySeriesByFK_CreditRating_SecuritySeries_CreditRatingId2 = new global::System.Data.DataRelation("FK_CreditRating_SecuritySeries_CreditRatingId2", new global::System.Data.DataColumn[] {
						DataModel.tableCreditRating.CreditRatingIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableSecuritySeries.CreditRatingId2Column}, false);
			DataModel.dataSet.Relations.Add(DataModel.relationCreditRatingSecuritySeriesByFK_CreditRating_SecuritySeries_CreditRatingId2);
			DataModel.relationCreditRatingSecuritySeriesByFK_CreditRating_SecuritySeries_CreditRatingId3 = new global::System.Data.DataRelation("FK_CreditRating_SecuritySeries_CreditRatingId3", new global::System.Data.DataColumn[] {
						DataModel.tableCreditRating.CreditRatingIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableSecuritySeries.CreditRatingId3Column}, false);
			DataModel.dataSet.Relations.Add(DataModel.relationCreditRatingSecuritySeriesByFK_CreditRating_SecuritySeries_CreditRatingId3);
			DataModel.relationCreditRatingSecuritySeriesByFK_CreditRating_SecuritySeries_CreditRatingId4 = new global::System.Data.DataRelation("FK_CreditRating_SecuritySeries_CreditRatingId4", new global::System.Data.DataColumn[] {
						DataModel.tableCreditRating.CreditRatingIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableSecuritySeries.CreditRatingId4Column}, false);
			DataModel.dataSet.Relations.Add(DataModel.relationCreditRatingSecuritySeriesByFK_CreditRating_SecuritySeries_CreditRatingId4);
			DataModel.relationCreditRatingSecuritySeriesByFK_CreditRating_SecuritySeries_CreditRatingId5 = new global::System.Data.DataRelation("FK_CreditRating_SecuritySeries_CreditRatingId5", new global::System.Data.DataColumn[] {
						DataModel.tableCreditRating.CreditRatingIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableSecuritySeries.CreditRatingId5Column}, false);
			DataModel.dataSet.Relations.Add(DataModel.relationCreditRatingSecuritySeriesByFK_CreditRating_SecuritySeries_CreditRatingId5);
			DataModel.relationCreditRatingServiceCreditRating = new global::System.Data.DataRelation("FK_CreditRatingService_CreditRating", new global::System.Data.DataColumn[] {
						DataModel.tableCreditRatingService.CreditRatingServiceIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableCreditRating.CreditRatingServiceIdColumn}, false);
			DataModel.dataSet.Relations.Add(DataModel.relationCreditRatingServiceCreditRating);
			DataModel.relationCrossingWorkingOrder = new global::System.Data.DataRelation("FK_Crossing_WorkingOrder", new global::System.Data.DataColumn[] {
						DataModel.tableCrossing.CrossingCodeColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableWorkingOrder.CrossingCodeColumn}, false);
			DataModel.dataSet.Relations.Add(DataModel.relationCrossingWorkingOrder);
			DataModel.relationCurrencyAccount = new global::System.Data.DataRelation("FK_Currency_Account", new global::System.Data.DataColumn[] {
						DataModel.tableCurrency.CurrencyIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableAccount.CurrencyIdColumn}, false);
			DataModel.dataSet.Relations.Add(DataModel.relationCurrencyAccount);
			DataModel.relationDestinationBlotterDestinationMap = new global::System.Data.DataRelation("FK_Destination_BlotterDestinationMap", new global::System.Data.DataColumn[] {
						DataModel.tableDestination.DestinationIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableBlotterDestinationMap.DestinationIdColumn}, false);
			DataModel.dataSet.Relations.Add(DataModel.relationDestinationBlotterDestinationMap);
			DataModel.relationDestinationDestinationExchangeMap = new global::System.Data.DataRelation("FK_Destination_DestinationExchangeMap", new global::System.Data.DataColumn[] {
						DataModel.tableDestination.DestinationIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableDestinationExchangeMap.DestinationIdColumn}, false);
			DataModel.dataSet.Relations.Add(DataModel.relationDestinationDestinationExchangeMap);
			DataModel.relationDestinationDestinationOrder = new global::System.Data.DataRelation("FK_Destination_DestinationOrder", new global::System.Data.DataColumn[] {
						DataModel.tableDestination.DestinationIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableDestinationOrder.DestinationIdColumn}, false);
			DataModel.dataSet.Relations.Add(DataModel.relationDestinationDestinationOrder);
			DataModel.relationDestinationSourceOrder = new global::System.Data.DataRelation("FK_Destination_SourceOrder", new global::System.Data.DataColumn[] {
						DataModel.tableDestination.DestinationIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableSourceOrder.DestinationIdColumn}, false);
			DataModel.dataSet.Relations.Add(DataModel.relationDestinationSourceOrder);
			DataModel.relationDestinationWorkingOrder = new global::System.Data.DataRelation("FK_Destination_WorkingOrder", new global::System.Data.DataColumn[] {
						DataModel.tableDestination.DestinationIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableWorkingOrder.DestinationIdColumn}, false);
			DataModel.dataSet.Relations.Add(DataModel.relationDestinationWorkingOrder);
			DataModel.relationDestinationOrderExecution = new global::System.Data.DataRelation("FK_DestinationOrder_Execution", new global::System.Data.DataColumn[] {
						DataModel.tableDestinationOrder.DestinationOrderIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableExecution.DestinationOrderIdColumn}, false);
			DataModel.dataSet.Relations.Add(DataModel.relationDestinationOrderExecution);
			DataModel.relationEntityAccount = new global::System.Data.DataRelation("FK_Entity_Account", new global::System.Data.DataColumn[] {
						DataModel.tableEntity.EntityIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableAccount.AccountIdColumn}, false);
			DataModel.dataSet.Relations.Add(DataModel.relationEntityAccount);
			DataModel.relationEntityBlotter = new global::System.Data.DataRelation("FK_Entity_Blotter", new global::System.Data.DataColumn[] {
						DataModel.tableEntity.EntityIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableBlotter.BlotterIdColumn}, false);
			DataModel.dataSet.Relations.Add(DataModel.relationEntityBlotter);
			DataModel.relationEntityEntityTreeByFK_Entity_EntityTree_ChildId = new global::System.Data.DataRelation("FK_Entity_EntityTree_ChildId", new global::System.Data.DataColumn[] {
						DataModel.tableEntity.EntityIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableEntityTree.ChildIdColumn}, false);
			DataModel.dataSet.Relations.Add(DataModel.relationEntityEntityTreeByFK_Entity_EntityTree_ChildId);
			DataModel.relationEntityEntityTreeByFK_Entity_EntityTree_ParentId = new global::System.Data.DataRelation("FK_Entity_EntityTree_ParentId", new global::System.Data.DataColumn[] {
						DataModel.tableEntity.EntityIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableEntityTree.ParentIdColumn}, false);
			DataModel.dataSet.Relations.Add(DataModel.relationEntityEntityTreeByFK_Entity_EntityTree_ParentId);
			DataModel.relationEntityFolder = new global::System.Data.DataRelation("FK_Entity_Folder", new global::System.Data.DataColumn[] {
						DataModel.tableEntity.EntityIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableFolder.FolderIdColumn}, false);
			DataModel.dataSet.Relations.Add(DataModel.relationEntityFolder);
			DataModel.relationEntityIssuer = new global::System.Data.DataRelation("FK_Entity_Issuer", new global::System.Data.DataColumn[] {
						DataModel.tableEntity.EntityIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableIssuer.IssuerIdColumn}, false);
			DataModel.dataSet.Relations.Add(DataModel.relationEntityIssuer);
			DataModel.relationEntityPropertyStore = new global::System.Data.DataRelation("FK_Entity_PropertyStore", new global::System.Data.DataColumn[] {
						DataModel.tableEntity.EntityIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tablePropertyStore.EntityIdColumn}, false);
			DataModel.dataSet.Relations.Add(DataModel.relationEntityPropertyStore);
			DataModel.relationEntitySecurity = new global::System.Data.DataRelation("FK_Entity_Security", new global::System.Data.DataColumn[] {
						DataModel.tableEntity.EntityIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableSecurity.SecurityIdColumn}, false);
			DataModel.dataSet.Relations.Add(DataModel.relationEntitySecurity);
			DataModel.relationEntityUser = new global::System.Data.DataRelation("FK_Entity_User", new global::System.Data.DataColumn[] {
						DataModel.tableEntity.EntityIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableUser.UserIdColumn}, false);
			DataModel.dataSet.Relations.Add(DataModel.relationEntityUser);
			DataModel.relationExchangeDestinationExchangeMap = new global::System.Data.DataRelation("FK_Exchange_DestinationExchangeMap", new global::System.Data.DataColumn[] {
						DataModel.tableExchange.ExchangeIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableDestinationExchangeMap.ExchangeIdColumn}, false);
			DataModel.dataSet.Relations.Add(DataModel.relationExchangeDestinationExchangeMap);
			DataModel.relationExchangeEquity = new global::System.Data.DataRelation("FK_Exchange_Equity", new global::System.Data.DataColumn[] {
						DataModel.tableExchange.ExchangeIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableEquity.ExchangeIdColumn}, false);
			DataModel.dataSet.Relations.Add(DataModel.relationExchangeEquity);
			DataModel.relationExecutionNegotiation = new global::System.Data.DataRelation("FK_Execution_Negotiation", new global::System.Data.DataColumn[] {
						DataModel.tableExecution.ExecutionIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableNegotiation.ExecutionIdColumn}, false);
			DataModel.dataSet.Relations.Add(DataModel.relationExecutionNegotiation);
			DataModel.relationHolidayTypeHoliday = new global::System.Data.DataRelation("FK_HolidayType_Holiday", new global::System.Data.DataColumn[] {
						DataModel.tableHolidayType.HolidayTypeCodeColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableHoliday.HolidayTypeCodeColumn}, false);
			DataModel.dataSet.Relations.Add(DataModel.relationHolidayTypeHoliday);
			DataModel.relationImageEntity = new global::System.Data.DataRelation("FK_Image_Entity", new global::System.Data.DataColumn[] {
						DataModel.tableImage.ImageIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableEntity.ImageIdColumn}, false);
			DataModel.dataSet.Relations.Add(DataModel.relationImageEntity);
			DataModel.relationImageType = new global::System.Data.DataRelation("FK_Image_Type", new global::System.Data.DataColumn[] {
						DataModel.tableImage.ImageIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableType.ImageIdColumn}, false);
			DataModel.dataSet.Relations.Add(DataModel.relationImageType);
			DataModel.relationIndustryIndustryLeaf = new global::System.Data.DataRelation("FK_Industry_IndustryLeaf_ParentId", new global::System.Data.DataColumn[] {
						DataModel.tableIndustry.IndustryIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableIndustryLeaf.ParentIdColumn}, false);
			DataModel.dataSet.Relations.Add(DataModel.relationIndustryIndustryLeaf);
			DataModel.relationIndustryIndustryTreeByFK_Industry_IndustryTree_ChildId = new global::System.Data.DataRelation("FK_Industry_IndustryTree_ChildId", new global::System.Data.DataColumn[] {
						DataModel.tableIndustry.IndustryIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableIndustryTree.ChildIdColumn}, false);
			DataModel.dataSet.Relations.Add(DataModel.relationIndustryIndustryTreeByFK_Industry_IndustryTree_ChildId);
			DataModel.relationIndustryIndustryTreeByFK_Industry_IndustryTree_ParentId = new global::System.Data.DataRelation("FK_Industry_IndustryTree_ParentId", new global::System.Data.DataColumn[] {
						DataModel.tableIndustry.IndustryIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableIndustryTree.ParentIdColumn}, false);
			DataModel.dataSet.Relations.Add(DataModel.relationIndustryIndustryTreeByFK_Industry_IndustryTree_ParentId);
			DataModel.relationIndustryClassificationIndustry = new global::System.Data.DataRelation("FK_IndustryClassification_Industry", new global::System.Data.DataColumn[] {
						DataModel.tableIndustryClassification.IndustryClassificationIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableIndustry.IndustryClassificationIdColumn}, false);
			DataModel.dataSet.Relations.Add(DataModel.relationIndustryClassificationIndustry);
			DataModel.relationIssuerSecurity = new global::System.Data.DataRelation("FK_Issuer_Security", new global::System.Data.DataColumn[] {
						DataModel.tableIssuer.IssuerIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableSecurity.IssuerIdColumn}, false);
			DataModel.dataSet.Relations.Add(DataModel.relationIssuerSecurity);
			DataModel.relationLotHandlingSingleAccount = new global::System.Data.DataRelation("FK_LotHandling_SingleAccount", new global::System.Data.DataColumn[] {
						DataModel.tableLotHandling.LotHandlingCodeColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableSingleAccount.LotHandlingCodeColumn}, false);
			DataModel.dataSet.Relations.Add(DataModel.relationLotHandlingSingleAccount);
			DataModel.relationMajorInstrumentTypeSecurity = new global::System.Data.DataRelation("FK_MajorInstrumentType_Security", new global::System.Data.DataColumn[] {
						DataModel.tableMajorInstrumentType.MajorInstrumentTypeIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableSecurity.MajorInstrumentTypeIdColumn}, false);
			DataModel.dataSet.Relations.Add(DataModel.relationMajorInstrumentTypeSecurity);
			DataModel.relationMatchNegotiation = new global::System.Data.DataRelation("FK_Match_Negotiation", new global::System.Data.DataColumn[] {
						DataModel.tableMatch.MatchIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableNegotiation.MatchIdColumn}, false);
			DataModel.dataSet.Relations.Add(DataModel.relationMatchNegotiation);
			DataModel.relationMinorInstrumentTypeSecurity = new global::System.Data.DataRelation("FK_MinorInstrumentType_Security", new global::System.Data.DataColumn[] {
						DataModel.tableMinorInstrumentType.MinorInstrumentTypeIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableSecurity.MinorInstrumentTypeIdColumn}, false);
			DataModel.dataSet.Relations.Add(DataModel.relationMinorInstrumentTypeSecurity);
			DataModel.relationMssaBucketSecuritySeries = new global::System.Data.DataRelation("FK_MssaBucket_SecuritySeries", new global::System.Data.DataColumn[] {
						DataModel.tableMssaBucket.MssaBucketIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableSecuritySeries.MssaBucketIdColumn}, false);
			DataModel.dataSet.Relations.Add(DataModel.relationMssaBucketSecuritySeries);
			DataModel.relationOrderTypeDestinationOrder = new global::System.Data.DataRelation("FK_OrderType_DestinationOrder", new global::System.Data.DataColumn[] {
						DataModel.tableOrderType.OrderTypeCodeColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableDestinationOrder.OrderTypeCodeColumn}, false);
			DataModel.dataSet.Relations.Add(DataModel.relationOrderTypeDestinationOrder);
			DataModel.relationOrderTypeSourceOrder = new global::System.Data.DataRelation("FK_OrderType_SourceOrder", new global::System.Data.DataColumn[] {
						DataModel.tableOrderType.OrderTypeCodeColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableSourceOrder.OrderTypeCodeColumn}, false);
			DataModel.dataSet.Relations.Add(DataModel.relationOrderTypeSourceOrder);
			DataModel.relationOrderTypeWorkingOrder = new global::System.Data.DataRelation("FK_OrderType_WorkingOrder", new global::System.Data.DataColumn[] {
						DataModel.tableOrderType.OrderTypeCodeColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableWorkingOrder.OrderTypeCodeColumn}, false);
			DataModel.dataSet.Relations.Add(DataModel.relationOrderTypeWorkingOrder);
			DataModel.relationPartyTypeBlotter = new global::System.Data.DataRelation("FK_PartyType_Blotter", new global::System.Data.DataColumn[] {
						DataModel.tablePartyType.PartyTypeCodeColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableBlotter.PartyTypeCodeColumn}, false);
			DataModel.dataSet.Relations.Add(DataModel.relationPartyTypeBlotter);
			DataModel.relationPositionPositionSeries = new global::System.Data.DataRelation("FK_Position_PositionSeries", new global::System.Data.DataColumn[] {
						DataModel.tablePosition.PositionIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tablePositionSeries.PositionIdColumn}, false);
			DataModel.dataSet.Relations.Add(DataModel.relationPositionPositionSeries);
			DataModel.relationPositionTaxLot = new global::System.Data.DataRelation("FK_Position_TaxLot", new global::System.Data.DataColumn[] {
						DataModel.tablePosition.PositionIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableTaxLot.PositionIdColumn}, false);
			DataModel.dataSet.Relations.Add(DataModel.relationPositionTaxLot);
			DataModel.relationPositionSeriesTaxLotSeries = new global::System.Data.DataRelation("FK_PositionSeries_TaxLotSeries", new global::System.Data.DataColumn[] {
						DataModel.tablePositionSeries.PositionSeriesIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableTaxLotSeries.PositionSeriesIdColumn}, false);
			DataModel.dataSet.Relations.Add(DataModel.relationPositionSeriesTaxLotSeries);
			DataModel.relationPositionTypePosition = new global::System.Data.DataRelation("FK_PositionType_Position", new global::System.Data.DataColumn[] {
						DataModel.tablePositionType.PositionTypeCodeColumn}, new global::System.Data.DataColumn[] {
						DataModel.tablePosition.PositionTypeCodeColumn}, false);
			DataModel.dataSet.Relations.Add(DataModel.relationPositionTypePosition);
			DataModel.relationPositionTypePositionSeries = new global::System.Data.DataRelation("FK_PositionType_PositionSeries", new global::System.Data.DataColumn[] {
						DataModel.tablePositionType.PositionTypeCodeColumn}, new global::System.Data.DataColumn[] {
						DataModel.tablePositionSeries.PositionTypeCodeColumn}, false);
			DataModel.dataSet.Relations.Add(DataModel.relationPositionTypePositionSeries);
			DataModel.relationPositionTypeTaxLot = new global::System.Data.DataRelation("FK_PositionType_TaxLot", new global::System.Data.DataColumn[] {
						DataModel.tablePositionType.PositionTypeCodeColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableTaxLot.PositionTypeCodeColumn}, false);
			DataModel.dataSet.Relations.Add(DataModel.relationPositionTypeTaxLot);
			DataModel.relationPositionTypeTaxLotSeries = new global::System.Data.DataRelation("FK_PositionType_TaxLotSeries", new global::System.Data.DataColumn[] {
						DataModel.tablePositionType.PositionTypeCodeColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableTaxLotSeries.PositionTypeCodeColumn}, false);
			DataModel.dataSet.Relations.Add(DataModel.relationPositionTypeTaxLotSeries);
			DataModel.relationPropertyPropertyStore = new global::System.Data.DataRelation("FK_Property_PropertyStore", new global::System.Data.DataColumn[] {
						DataModel.tableProperty.PropertyIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tablePropertyStore.PropertyIdColumn}, false);
			DataModel.dataSet.Relations.Add(DataModel.relationPropertyPropertyStore);
			DataModel.relationProvinceSingleAccount = new global::System.Data.DataRelation("FK_Province_SingleAccount", new global::System.Data.DataColumn[] {
						DataModel.tableProvince.ProvinceIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableSingleAccount.ProvinceIdColumn}, false);
			DataModel.dataSet.Relations.Add(DataModel.relationProvinceSingleAccount);
			DataModel.relationSecurityAllocationByFK_Security_Allocation_SecurityId = new global::System.Data.DataRelation("FK_Security_Allocation_SecurityId", new global::System.Data.DataColumn[] {
						DataModel.tableSecurity.SecurityIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableAllocation.SecurityIdColumn}, false);
			DataModel.dataSet.Relations.Add(DataModel.relationSecurityAllocationByFK_Security_Allocation_SecurityId);
			DataModel.relationSecurityAllocationByFK_Security_Allocation_SettlementId = new global::System.Data.DataRelation("FK_Security_Allocation_SettlementId", new global::System.Data.DataColumn[] {
						DataModel.tableSecurity.SecurityIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableAllocation.SettlementIdColumn}, false);
			DataModel.dataSet.Relations.Add(DataModel.relationSecurityAllocationByFK_Security_Allocation_SettlementId);
			DataModel.relationSecurityCurrency = new global::System.Data.DataRelation("FK_Security_Currency", new global::System.Data.DataColumn[] {
						DataModel.tableSecurity.SecurityIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableCurrency.CurrencyIdColumn}, false);
			DataModel.dataSet.Relations.Add(DataModel.relationSecurityCurrency);
			DataModel.relationSecurityDebtByFK_Security_Debt_DebtId = new global::System.Data.DataRelation("FK_Security_Debt_DebtId", new global::System.Data.DataColumn[] {
						DataModel.tableSecurity.SecurityIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableDebt.DebtIdColumn}, false);
			DataModel.dataSet.Relations.Add(DataModel.relationSecurityDebtByFK_Security_Debt_DebtId);
			DataModel.relationSecurityDebtByFK_Security_Debt_SettlementId = new global::System.Data.DataRelation("FK_Security_Debt_SettlementId", new global::System.Data.DataColumn[] {
						DataModel.tableSecurity.SecurityIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableDebt.SettlementIdColumn}, false);
			DataModel.dataSet.Relations.Add(DataModel.relationSecurityDebtByFK_Security_Debt_SettlementId);
			DataModel.relationSecurityDestinationOrderByFK_Security_DestinationOrder_SecurityId = new global::System.Data.DataRelation("FK_Security_DestinationOrder_SecurityId", new global::System.Data.DataColumn[] {
						DataModel.tableSecurity.SecurityIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableDestinationOrder.SecurityIdColumn}, false);
			DataModel.dataSet.Relations.Add(DataModel.relationSecurityDestinationOrderByFK_Security_DestinationOrder_SecurityId);
			DataModel.relationSecurityDestinationOrderByFK_Security_DestinationOrder_SettlementId = new global::System.Data.DataRelation("FK_Security_DestinationOrder_SettlementId", new global::System.Data.DataColumn[] {
						DataModel.tableSecurity.SecurityIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableDestinationOrder.SettlementIdColumn}, false);
			DataModel.dataSet.Relations.Add(DataModel.relationSecurityDestinationOrderByFK_Security_DestinationOrder_SettlementId);
			DataModel.relationSecurityEquityByFK_Security_Equity_EquityId = new global::System.Data.DataRelation("FK_Security_Equity_EquityId", new global::System.Data.DataColumn[] {
						DataModel.tableSecurity.SecurityIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableEquity.EquityIdColumn}, false);
			DataModel.dataSet.Relations.Add(DataModel.relationSecurityEquityByFK_Security_Equity_EquityId);
			DataModel.relationSecurityEquityByFK_Security_Equity_SettlementId = new global::System.Data.DataRelation("FK_Security_Equity_SettlementId", new global::System.Data.DataColumn[] {
						DataModel.tableSecurity.SecurityIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableEquity.SettlementIdColumn}, false);
			DataModel.dataSet.Relations.Add(DataModel.relationSecurityEquityByFK_Security_Equity_SettlementId);
			DataModel.relationSecurityIndustryLeaf = new global::System.Data.DataRelation("FK_Security_IndustryLeaf_SecurityId", new global::System.Data.DataColumn[] {
						DataModel.tableSecurity.SecurityIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableIndustryLeaf.SecurityIdColumn}, false);
			DataModel.dataSet.Relations.Add(DataModel.relationSecurityIndustryLeaf);
			DataModel.relationSecurityPosition = new global::System.Data.DataRelation("FK_Security_Position", new global::System.Data.DataColumn[] {
						DataModel.tableSecurity.SecurityIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tablePosition.SecurityIdColumn}, false);
			DataModel.dataSet.Relations.Add(DataModel.relationSecurityPosition);
			DataModel.relationSecurityPositionSeries = new global::System.Data.DataRelation("FK_Security_PositionSeries", new global::System.Data.DataColumn[] {
						DataModel.tableSecurity.SecurityIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tablePositionSeries.SecurityIdColumn}, false);
			DataModel.dataSet.Relations.Add(DataModel.relationSecurityPositionSeries);
			DataModel.relationSecurityPriceByFK_Security_Price_CurrencyId = new global::System.Data.DataRelation("FK_Security_Price_CurrencyId", new global::System.Data.DataColumn[] {
						DataModel.tableSecurity.SecurityIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tablePrice.CurrencyIdColumn}, false);
			DataModel.dataSet.Relations.Add(DataModel.relationSecurityPriceByFK_Security_Price_CurrencyId);
			DataModel.relationSecurityPriceByFK_Security_Price_SecurityId = new global::System.Data.DataRelation("FK_Security_Price_SecurityId", new global::System.Data.DataColumn[] {
						DataModel.tableSecurity.SecurityIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tablePrice.SecurityIdColumn}, false);
			DataModel.dataSet.Relations.Add(DataModel.relationSecurityPriceByFK_Security_Price_SecurityId);
			DataModel.relationSecuritySecuritySeries = new global::System.Data.DataRelation("FK_Security_SecuritySeries", new global::System.Data.DataColumn[] {
						DataModel.tableSecurity.SecurityIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableSecuritySeries.SecurityIdColumn}, false);
			DataModel.dataSet.Relations.Add(DataModel.relationSecuritySecuritySeries);
			DataModel.relationSecuritySourceOrderByFK_Security_SourceOrder_SecurityId = new global::System.Data.DataRelation("FK_Security_SourceOrder_SecurityId", new global::System.Data.DataColumn[] {
						DataModel.tableSecurity.SecurityIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableSourceOrder.SecurityIdColumn}, false);
			DataModel.dataSet.Relations.Add(DataModel.relationSecuritySourceOrderByFK_Security_SourceOrder_SecurityId);
			DataModel.relationSecuritySourceOrderByFK_Security_SourceOrder_SettlementId = new global::System.Data.DataRelation("FK_Security_SourceOrder_SettlementId", new global::System.Data.DataColumn[] {
						DataModel.tableSecurity.SecurityIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableSourceOrder.SettlementIdColumn}, false);
			DataModel.dataSet.Relations.Add(DataModel.relationSecuritySourceOrderByFK_Security_SourceOrder_SettlementId);
			DataModel.relationSecurityTaxLot = new global::System.Data.DataRelation("FK_Security_TaxLot", new global::System.Data.DataColumn[] {
						DataModel.tableSecurity.SecurityIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableTaxLot.SecurityIdColumn}, false);
			DataModel.dataSet.Relations.Add(DataModel.relationSecurityTaxLot);
			DataModel.relationSecurityTaxLotSeries = new global::System.Data.DataRelation("FK_Security_TaxLotSeries", new global::System.Data.DataColumn[] {
						DataModel.tableSecurity.SecurityIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableTaxLotSeries.SecurityIdColumn}, false);
			DataModel.dataSet.Relations.Add(DataModel.relationSecurityTaxLotSeries);
			DataModel.relationSecurityWorkingOrderByFK_Security_WorkingOrder_SecurityId = new global::System.Data.DataRelation("FK_Security_WorkingOrder_SecurityId", new global::System.Data.DataColumn[] {
						DataModel.tableSecurity.SecurityIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableWorkingOrder.SecurityIdColumn}, false);
			DataModel.dataSet.Relations.Add(DataModel.relationSecurityWorkingOrderByFK_Security_WorkingOrder_SecurityId);
			DataModel.relationSecurityWorkingOrderByFK_Security_WorkingOrder_SettlementId = new global::System.Data.DataRelation("FK_Security_WorkingOrder_SettlementId", new global::System.Data.DataColumn[] {
						DataModel.tableSecurity.SecurityIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableWorkingOrder.SettlementIdColumn}, false);
			DataModel.dataSet.Relations.Add(DataModel.relationSecurityWorkingOrderByFK_Security_WorkingOrder_SettlementId);
			DataModel.relationSecuritySeriesPositionSeries = new global::System.Data.DataRelation("FK_SecuritySeries_PositionSeries", new global::System.Data.DataColumn[] {
						DataModel.tableSecuritySeries.SecuritySeriesIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tablePositionSeries.SecuritySeriesIdColumn}, false);
			DataModel.dataSet.Relations.Add(DataModel.relationSecuritySeriesPositionSeries);
			DataModel.relationSecuritySeriesTaxLotSeries = new global::System.Data.DataRelation("FK_SecuritySeries_TaxLotSeries", new global::System.Data.DataColumn[] {
						DataModel.tableSecuritySeries.SecuritySeriesIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableTaxLotSeries.SecuritySeriesIdColumn}, false);
			DataModel.dataSet.Relations.Add(DataModel.relationSecuritySeriesTaxLotSeries);
			DataModel.relationSideAllocation = new global::System.Data.DataRelation("FK_Side_Allocation", new global::System.Data.DataColumn[] {
						DataModel.tableSide.SideCodeColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableAllocation.SideCodeColumn}, false);
			DataModel.dataSet.Relations.Add(DataModel.relationSideAllocation);
			DataModel.relationSideDestinationOrder = new global::System.Data.DataRelation("FK_Side_DestinationOrder", new global::System.Data.DataColumn[] {
						DataModel.tableSide.SideCodeColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableDestinationOrder.SideCodeColumn}, false);
			DataModel.dataSet.Relations.Add(DataModel.relationSideDestinationOrder);
			DataModel.relationSideSourceOrder = new global::System.Data.DataRelation("FK_Side_SourceOrder", new global::System.Data.DataColumn[] {
						DataModel.tableSide.SideCodeColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableSourceOrder.SideCodeColumn}, false);
			DataModel.dataSet.Relations.Add(DataModel.relationSideSourceOrder);
			DataModel.relationSideWorkingOrder = new global::System.Data.DataRelation("FK_Side_WorkingOrder", new global::System.Data.DataColumn[] {
						DataModel.tableSide.SideCodeColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableWorkingOrder.SideCodeColumn}, false);
			DataModel.dataSet.Relations.Add(DataModel.relationSideWorkingOrder);
			DataModel.relationSourceBroker = new global::System.Data.DataRelation("FK_Source_Broker", new global::System.Data.DataColumn[] {
						DataModel.tableSource.SourceIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableBroker.BrokerIdColumn}, false);
			DataModel.dataSet.Relations.Add(DataModel.relationSourceBroker);
			DataModel.relationSourceInstitution = new global::System.Data.DataRelation("FK_Source_Institution", new global::System.Data.DataColumn[] {
						DataModel.tableSource.SourceIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableInstitution.InstitutionIdColumn}, false);
			DataModel.dataSet.Relations.Add(DataModel.relationSourceInstitution);
			DataModel.relationStateDestinationOrder = new global::System.Data.DataRelation("FK_State_DestinationOrder", new global::System.Data.DataColumn[] {
						DataModel.tableState.StateCodeColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableDestinationOrder.StateCodeColumn}, false);
			DataModel.dataSet.Relations.Add(DataModel.relationStateDestinationOrder);
			DataModel.relationStateExecutionByFK_State_Execution_DestinationStateCode = new global::System.Data.DataRelation("FK_State_Execution_DestinationStateCode", new global::System.Data.DataColumn[] {
						DataModel.tableState.StateCodeColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableExecution.DestinationStateCodeColumn}, false);
			DataModel.dataSet.Relations.Add(DataModel.relationStateExecutionByFK_State_Execution_DestinationStateCode);
			DataModel.relationStateExecutionByFK_State_Execution_SourceStateCode = new global::System.Data.DataRelation("FK_State_Execution_SourceStateCode", new global::System.Data.DataColumn[] {
						DataModel.tableState.StateCodeColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableExecution.SourceStateCodeColumn}, false);
			DataModel.dataSet.Relations.Add(DataModel.relationStateExecutionByFK_State_Execution_SourceStateCode);
			DataModel.relationStatusDestinationOrder = new global::System.Data.DataRelation("FK_Status_DestinationOrder", new global::System.Data.DataColumn[] {
						DataModel.tableStatus.StatusCodeColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableDestinationOrder.StatusCodeColumn}, false);
			DataModel.dataSet.Relations.Add(DataModel.relationStatusDestinationOrder);
			DataModel.relationStatusMatch = new global::System.Data.DataRelation("FK_Status_Match", new global::System.Data.DataColumn[] {
						DataModel.tableStatus.StatusCodeColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableMatch.StatusCodeColumn}, false);
			DataModel.dataSet.Relations.Add(DataModel.relationStatusMatch);
			DataModel.relationStatusNegotiation = new global::System.Data.DataRelation("FK_Status_Negotiation", new global::System.Data.DataColumn[] {
						DataModel.tableStatus.StatusCodeColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableNegotiation.StatusCodeColumn}, false);
			DataModel.dataSet.Relations.Add(DataModel.relationStatusNegotiation);
			DataModel.relationStatusSourceOrder = new global::System.Data.DataRelation("FK_Status_SourceOrder", new global::System.Data.DataColumn[] {
						DataModel.tableStatus.StatusCodeColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableSourceOrder.StatusCodeColumn}, false);
			DataModel.dataSet.Relations.Add(DataModel.relationStatusSourceOrder);
			DataModel.relationStatusWorkingOrder = new global::System.Data.DataRelation("FK_Status_WorkingOrder", new global::System.Data.DataColumn[] {
						DataModel.tableStatus.StatusCodeColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableWorkingOrder.StatusCodeColumn}, false);
			DataModel.dataSet.Relations.Add(DataModel.relationStatusWorkingOrder);
			DataModel.relationSubordinateTypeSecuritySeries = new global::System.Data.DataRelation("FK_SubordinateType_SecuritySeries", new global::System.Data.DataColumn[] {
						DataModel.tableSubordinateType.SubordinateTypeCodeColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableSecuritySeries.SubordinateTypeCodeColumn}, false);
			DataModel.dataSet.Relations.Add(DataModel.relationSubordinateTypeSecuritySeries);
			DataModel.relationTaxLotTaxLotSeries = new global::System.Data.DataRelation("FK_TaxLot_TaxLotSeries", new global::System.Data.DataColumn[] {
						DataModel.tableTaxLot.TaxLotIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableTaxLotSeries.TaxLotIdColumn}, false);
			DataModel.dataSet.Relations.Add(DataModel.relationTaxLotTaxLotSeries);
			DataModel.relationTimeInForceDestinationOrder = new global::System.Data.DataRelation("FK_TimeInForce_DestinationOrder", new global::System.Data.DataColumn[] {
						DataModel.tableTimeInForce.TimeInForceCodeColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableDestinationOrder.TimeInForceCodeColumn}, false);
			DataModel.dataSet.Relations.Add(DataModel.relationTimeInForceDestinationOrder);
			DataModel.relationTimeInForceSourceOrder = new global::System.Data.DataRelation("FK_TimeInForce_SourceOrder", new global::System.Data.DataColumn[] {
						DataModel.tableTimeInForce.TimeInForceCodeColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableSourceOrder.TimeInForceCodeColumn}, false);
			DataModel.dataSet.Relations.Add(DataModel.relationTimeInForceSourceOrder);
			DataModel.relationTimeInForceWorkingOrder = new global::System.Data.DataRelation("FK_TimeInForce_WorkingOrder", new global::System.Data.DataColumn[] {
						DataModel.tableTimeInForce.TimeInForceCodeColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableWorkingOrder.TimeInForceCodeColumn}, false);
			DataModel.dataSet.Relations.Add(DataModel.relationTimeInForceWorkingOrder);
			DataModel.relationTraderBrokerAccount = new global::System.Data.DataRelation("FK_Trader_BrokerAccount", new global::System.Data.DataColumn[] {
						DataModel.tableTrader.TraderIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableBrokerAccount.TraderIdColumn}, false);
			DataModel.dataSet.Relations.Add(DataModel.relationTraderBrokerAccount);
			DataModel.relationTraderDestinationOrder = new global::System.Data.DataRelation("FK_Trader_DestinationOrder", new global::System.Data.DataColumn[] {
						DataModel.tableTrader.TraderIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableDestinationOrder.TraderIdColumn}, false);
			DataModel.dataSet.Relations.Add(DataModel.relationTraderDestinationOrder);
			DataModel.relationTraderTraderVolumeSetting = new global::System.Data.DataRelation("FK_Trader_TraderVolumeSetting", new global::System.Data.DataColumn[] {
						DataModel.tableTrader.TraderIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableTraderVolumeSetting.TraderIdColumn}, false);
			DataModel.dataSet.Relations.Add(DataModel.relationTraderTraderVolumeSetting);
			DataModel.relationTypeEntity = new global::System.Data.DataRelation("FK_Type_Entity", new global::System.Data.DataColumn[] {
						DataModel.tableType.TypeIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableEntity.TypeIdColumn}, false);
			DataModel.dataSet.Relations.Add(DataModel.relationTypeEntity);
			DataModel.relationUserAllocationByFK_User_Allocation_CreatedUserId = new global::System.Data.DataRelation("FK_User_Allocation_CreatedUserId", new global::System.Data.DataColumn[] {
						DataModel.tableUser.UserIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableAllocation.CreatedUserIdColumn}, false);
			DataModel.dataSet.Relations.Add(DataModel.relationUserAllocationByFK_User_Allocation_CreatedUserId);
			DataModel.relationUserAllocationByFK_User_Allocation_ModifiedUserId = new global::System.Data.DataRelation("FK_User_Allocation_ModifiedUserId", new global::System.Data.DataColumn[] {
						DataModel.tableUser.UserIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableAllocation.ModifiedUserIdColumn}, false);
			DataModel.dataSet.Relations.Add(DataModel.relationUserAllocationByFK_User_Allocation_ModifiedUserId);
			DataModel.relationUserComplianceOfficer = new global::System.Data.DataRelation("FK_User_ComplianceOfficer", new global::System.Data.DataColumn[] {
						DataModel.tableUser.UserIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableComplianceOfficer.ComplianceOfficerIdColumn}, false);
			DataModel.dataSet.Relations.Add(DataModel.relationUserComplianceOfficer);
			DataModel.relationUserDestinationOrderByFK_User_DestinationOrder_CreatedUserId = new global::System.Data.DataRelation("FK_User_DestinationOrder_CreatedUserId", new global::System.Data.DataColumn[] {
						DataModel.tableUser.UserIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableDestinationOrder.CreatedUserIdColumn}, false);
			DataModel.dataSet.Relations.Add(DataModel.relationUserDestinationOrderByFK_User_DestinationOrder_CreatedUserId);
			DataModel.relationUserDestinationOrderByFK_User_DestinationOrder_ModifiedUserId = new global::System.Data.DataRelation("FK_User_DestinationOrder_ModifiedUserId", new global::System.Data.DataColumn[] {
						DataModel.tableUser.UserIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableDestinationOrder.ModifiedUserIdColumn}, false);
			DataModel.dataSet.Relations.Add(DataModel.relationUserDestinationOrderByFK_User_DestinationOrder_ModifiedUserId);
			DataModel.relationUserExecutionByFK_User_Execution_CreatedUserId = new global::System.Data.DataRelation("FK_User_Execution_CreatedUserId", new global::System.Data.DataColumn[] {
						DataModel.tableUser.UserIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableExecution.CreatedUserIdColumn}, false);
			DataModel.dataSet.Relations.Add(DataModel.relationUserExecutionByFK_User_Execution_CreatedUserId);
			DataModel.relationUserExecutionByFK_User_Execution_ModifiedUserId = new global::System.Data.DataRelation("FK_User_Execution_ModifiedUserId", new global::System.Data.DataColumn[] {
						DataModel.tableUser.UserIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableExecution.ModifiedUserIdColumn}, false);
			DataModel.dataSet.Relations.Add(DataModel.relationUserExecutionByFK_User_Execution_ModifiedUserId);
			DataModel.relationUserSourceOrderByFK_User_SourceOrder_CreatedUserId = new global::System.Data.DataRelation("FK_User_SourceOrder_CreatedUserId", new global::System.Data.DataColumn[] {
						DataModel.tableUser.UserIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableSourceOrder.CreatedUserIdColumn}, false);
			DataModel.dataSet.Relations.Add(DataModel.relationUserSourceOrderByFK_User_SourceOrder_CreatedUserId);
			DataModel.relationUserSourceOrderByFK_User_SourceOrder_ModifiedUserId = new global::System.Data.DataRelation("FK_User_SourceOrder_ModifiedUserId", new global::System.Data.DataColumn[] {
						DataModel.tableUser.UserIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableSourceOrder.ModifiedUserIdColumn}, false);
			DataModel.dataSet.Relations.Add(DataModel.relationUserSourceOrderByFK_User_SourceOrder_ModifiedUserId);
			DataModel.relationUserTrader = new global::System.Data.DataRelation("FK_User_Trader", new global::System.Data.DataColumn[] {
						DataModel.tableUser.UserIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableTrader.TraderIdColumn}, false);
			DataModel.dataSet.Relations.Add(DataModel.relationUserTrader);
			DataModel.relationUserWorkingOrderByFK_User_WorkingOrder_CreatedUserId = new global::System.Data.DataRelation("FK_User_WorkingOrder_CreatedUserId", new global::System.Data.DataColumn[] {
						DataModel.tableUser.UserIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableWorkingOrder.CreatedUserIdColumn}, false);
			DataModel.dataSet.Relations.Add(DataModel.relationUserWorkingOrderByFK_User_WorkingOrder_CreatedUserId);
			DataModel.relationUserWorkingOrderByFK_User_WorkingOrder_ModifiedUserId = new global::System.Data.DataRelation("FK_User_WorkingOrder_ModifiedUserId", new global::System.Data.DataColumn[] {
						DataModel.tableUser.UserIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableWorkingOrder.ModifiedUserIdColumn}, false);
			DataModel.dataSet.Relations.Add(DataModel.relationUserWorkingOrderByFK_User_WorkingOrder_ModifiedUserId);
			DataModel.relationVolumeCategorySecurity = new global::System.Data.DataRelation("FK_VolumeCategory_Security", new global::System.Data.DataColumn[] {
						DataModel.tableVolumeCategory.VolumeCategoryCodeColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableSecurity.VolumeCategoryCodeColumn}, false);
			DataModel.dataSet.Relations.Add(DataModel.relationVolumeCategorySecurity);
			DataModel.relationVolumeCategoryTraderVolumeSetting = new global::System.Data.DataRelation("FK_VolumeCategory_TraderVolumeSetting", new global::System.Data.DataColumn[] {
						DataModel.tableVolumeCategory.VolumeCategoryCodeColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableTraderVolumeSetting.VolumeCategoryCodeColumn}, false);
			DataModel.dataSet.Relations.Add(DataModel.relationVolumeCategoryTraderVolumeSetting);
			DataModel.relationWeekendDebt = new global::System.Data.DataRelation("FK_Weekend_Debt", new global::System.Data.DataColumn[] {
						DataModel.tableWeekend.WeekendCodeColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableDebt.WeekendCodeColumn}, false);
			DataModel.dataSet.Relations.Add(DataModel.relationWeekendDebt);
			DataModel.relationWorkingOrderAllocation = new global::System.Data.DataRelation("FK_WorkingOrder_Allocation", new global::System.Data.DataColumn[] {
						DataModel.tableWorkingOrder.WorkingOrderIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableAllocation.WorkingOrderIdColumn}, false);
			DataModel.dataSet.Relations.Add(DataModel.relationWorkingOrderAllocation);
			DataModel.relationWorkingOrderDestinationOrder = new global::System.Data.DataRelation("FK_WorkingOrder_DestinationOrder", new global::System.Data.DataColumn[] {
						DataModel.tableWorkingOrder.WorkingOrderIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableDestinationOrder.WorkingOrderIdColumn}, false);
			DataModel.dataSet.Relations.Add(DataModel.relationWorkingOrderDestinationOrder);
			DataModel.relationWorkingOrderMatch = new global::System.Data.DataRelation("FK_WorkingOrder_Match", new global::System.Data.DataColumn[] {
						DataModel.tableWorkingOrder.WorkingOrderIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableMatch.WorkingOrderIdColumn}, false);
			DataModel.dataSet.Relations.Add(DataModel.relationWorkingOrderMatch);
			DataModel.relationWorkingOrderSourceOrder = new global::System.Data.DataRelation("FK_WorkingOrder_SourceOrder", new global::System.Data.DataColumn[] {
						DataModel.tableWorkingOrder.WorkingOrderIdColumn}, new global::System.Data.DataColumn[] {
						DataModel.tableSourceOrder.WorkingOrderIdColumn}, false);
			DataModel.dataSet.Relations.Add(DataModel.relationWorkingOrderSourceOrder);
			DataModel.tableAccount.InitializeRelations();
			DataModel.tableAccountSeries.InitializeRelations();
			DataModel.tableAllocation.InitializeRelations();
			DataModel.tableBlotter.InitializeRelations();
			DataModel.tableBlotterDestinationMap.InitializeRelations();
			DataModel.tableBranch.InitializeRelations();
			DataModel.tableBroker.InitializeRelations();
			DataModel.tableBrokerAccount.InitializeRelations();
			DataModel.tableClearingBroker.InitializeRelations();
			DataModel.tableCommissionSchedule.InitializeRelations();
			DataModel.tableCommissionTranche.InitializeRelations();
			DataModel.tableCommissionType.InitializeRelations();
			DataModel.tableCommissionUnit.InitializeRelations();
			DataModel.tableComplianceOfficer.InitializeRelations();
			DataModel.tableCondition.InitializeRelations();
			DataModel.tableConfiguration.InitializeRelations();
			DataModel.tableCountry.InitializeRelations();
			DataModel.tableCreditRating.InitializeRelations();
			DataModel.tableCreditRatingService.InitializeRelations();
			DataModel.tableCrossing.InitializeRelations();
			DataModel.tableCurrency.InitializeRelations();
			DataModel.tableDebt.InitializeRelations();
			DataModel.tableDestination.InitializeRelations();
			DataModel.tableDestinationExchangeMap.InitializeRelations();
			DataModel.tableDestinationOrder.InitializeRelations();
			DataModel.tableEntity.InitializeRelations();
			DataModel.tableEntityTree.InitializeRelations();
			DataModel.tableEquity.InitializeRelations();
			DataModel.tableExchange.InitializeRelations();
			DataModel.tableExecution.InitializeRelations();
			DataModel.tableFolder.InitializeRelations();
			DataModel.tableGroupAccount.InitializeRelations();
			DataModel.tableHoliday.InitializeRelations();
			DataModel.tableHolidayType.InitializeRelations();
			DataModel.tableImage.InitializeRelations();
			DataModel.tableIndustry.InitializeRelations();
			DataModel.tableIndustryClassification.InitializeRelations();
			DataModel.tableIndustryLeaf.InitializeRelations();
			DataModel.tableIndustryTree.InitializeRelations();
			DataModel.tableInstitution.InitializeRelations();
			DataModel.tableIssuer.InitializeRelations();
			DataModel.tableLotHandling.InitializeRelations();
			DataModel.tableMajorInstrumentType.InitializeRelations();
			DataModel.tableMatch.InitializeRelations();
			DataModel.tableMinorInstrumentType.InitializeRelations();
			DataModel.tableMssaBucket.InitializeRelations();
			DataModel.tableNegotiation.InitializeRelations();
			DataModel.tableOrderType.InitializeRelations();
			DataModel.tablePartyType.InitializeRelations();
			DataModel.tablePosition.InitializeRelations();
			DataModel.tablePositionSeries.InitializeRelations();
			DataModel.tablePositionType.InitializeRelations();
			DataModel.tablePrice.InitializeRelations();
			DataModel.tableProperty.InitializeRelations();
			DataModel.tablePropertyStore.InitializeRelations();
			DataModel.tableProvince.InitializeRelations();
			DataModel.tableSecurity.InitializeRelations();
			DataModel.tableSecuritySeries.InitializeRelations();
			DataModel.tableSettlementUnit.InitializeRelations();
			DataModel.tableSide.InitializeRelations();
			DataModel.tableSingleAccount.InitializeRelations();
			DataModel.tableSource.InitializeRelations();
			DataModel.tableSourceOrder.InitializeRelations();
			DataModel.tableState.InitializeRelations();
			DataModel.tableStatus.InitializeRelations();
			DataModel.tableSubordinateType.InitializeRelations();
			DataModel.tableTaxLot.InitializeRelations();
			DataModel.tableTaxLotSeries.InitializeRelations();
			DataModel.tableTimeInForce.InitializeRelations();
			DataModel.tableTimeUnit.InitializeRelations();
			DataModel.tableTrader.InitializeRelations();
			DataModel.tableTraderVolumeSetting.InitializeRelations();
			DataModel.tableType.InitializeRelations();
			DataModel.tableUser.InitializeRelations();
			DataModel.tableVolumeCategory.InitializeRelations();
			DataModel.tableWeekend.InitializeRelations();
			DataModel.tableWorkingOrder.InitializeRelations();
			DataModel.syncUpdate = new object();
			DataModel.syncRoot = new object();
			DataModel.dataSetId = global::System.Guid.Empty;
			DataModel.sequence = long.MinValue;
			DataModel.updateBufferMutex = new global::System.Threading.Mutex(false);
		}
		
		/// <summary>
		/// Gets an accessor for the Account table.
		/// </summary>
		[global::System.ComponentModel.BrowsableAttribute(false)]
		public static AccountDataTable Account
		{
			get
			{
				return DataModel.tableAccount;
			}
		}
		
		/// <summary>
		/// Gets an accessor for the AccountSeries table.
		/// </summary>
		[global::System.ComponentModel.BrowsableAttribute(false)]
		public static AccountSeriesDataTable AccountSeries
		{
			get
			{
				return DataModel.tableAccountSeries;
			}
		}
		
		/// <summary>
		/// Gets an accessor for the Allocation table.
		/// </summary>
		[global::System.ComponentModel.BrowsableAttribute(false)]
		public static AllocationDataTable Allocation
		{
			get
			{
				return DataModel.tableAllocation;
			}
		}
		
		/// <summary>
		/// Gets an accessor for the Blotter table.
		/// </summary>
		[global::System.ComponentModel.BrowsableAttribute(false)]
		public static BlotterDataTable Blotter
		{
			get
			{
				return DataModel.tableBlotter;
			}
		}
		
		/// <summary>
		/// Gets an accessor for the BlotterDestinationMap table.
		/// </summary>
		[global::System.ComponentModel.BrowsableAttribute(false)]
		public static BlotterDestinationMapDataTable BlotterDestinationMap
		{
			get
			{
				return DataModel.tableBlotterDestinationMap;
			}
		}
		
		/// <summary>
		/// Gets an accessor for the Branch table.
		/// </summary>
		[global::System.ComponentModel.BrowsableAttribute(false)]
		public static BranchDataTable Branch
		{
			get
			{
				return DataModel.tableBranch;
			}
		}
		
		/// <summary>
		/// Gets an accessor for the Broker table.
		/// </summary>
		[global::System.ComponentModel.BrowsableAttribute(false)]
		public static BrokerDataTable Broker
		{
			get
			{
				return DataModel.tableBroker;
			}
		}
		
		/// <summary>
		/// Gets an accessor for the BrokerAccount table.
		/// </summary>
		[global::System.ComponentModel.BrowsableAttribute(false)]
		public static BrokerAccountDataTable BrokerAccount
		{
			get
			{
				return DataModel.tableBrokerAccount;
			}
		}
		
		/// <summary>
		/// Gets an accessor for the ClearingBroker table.
		/// </summary>
		[global::System.ComponentModel.BrowsableAttribute(false)]
		public static ClearingBrokerDataTable ClearingBroker
		{
			get
			{
				return DataModel.tableClearingBroker;
			}
		}
		
		/// <summary>
		/// Gets an accessor for the CommissionSchedule table.
		/// </summary>
		[global::System.ComponentModel.BrowsableAttribute(false)]
		public static CommissionScheduleDataTable CommissionSchedule
		{
			get
			{
				return DataModel.tableCommissionSchedule;
			}
		}
		
		/// <summary>
		/// Gets an accessor for the CommissionTranche table.
		/// </summary>
		[global::System.ComponentModel.BrowsableAttribute(false)]
		public static CommissionTrancheDataTable CommissionTranche
		{
			get
			{
				return DataModel.tableCommissionTranche;
			}
		}
		
		/// <summary>
		/// Gets an accessor for the CommissionType table.
		/// </summary>
		[global::System.ComponentModel.BrowsableAttribute(false)]
		public static CommissionTypeDataTable CommissionType
		{
			get
			{
				return DataModel.tableCommissionType;
			}
		}
		
		/// <summary>
		/// Gets an accessor for the CommissionUnit table.
		/// </summary>
		[global::System.ComponentModel.BrowsableAttribute(false)]
		public static CommissionUnitDataTable CommissionUnit
		{
			get
			{
				return DataModel.tableCommissionUnit;
			}
		}
		
		/// <summary>
		/// Gets an accessor for the ComplianceOfficer table.
		/// </summary>
		[global::System.ComponentModel.BrowsableAttribute(false)]
		public static ComplianceOfficerDataTable ComplianceOfficer
		{
			get
			{
				return DataModel.tableComplianceOfficer;
			}
		}
		
		/// <summary>
		/// Gets an accessor for the Condition table.
		/// </summary>
		[global::System.ComponentModel.BrowsableAttribute(false)]
		public static ConditionDataTable Condition
		{
			get
			{
				return DataModel.tableCondition;
			}
		}
		
		/// <summary>
		/// Gets an accessor for the Configuration table.
		/// </summary>
		[global::System.ComponentModel.BrowsableAttribute(false)]
		public static ConfigurationDataTable Configuration
		{
			get
			{
				return DataModel.tableConfiguration;
			}
		}
		
		/// <summary>
		/// Gets an accessor for the Country table.
		/// </summary>
		[global::System.ComponentModel.BrowsableAttribute(false)]
		public static CountryDataTable Country
		{
			get
			{
				return DataModel.tableCountry;
			}
		}
		
		/// <summary>
		/// Gets an accessor for the CreditRating table.
		/// </summary>
		[global::System.ComponentModel.BrowsableAttribute(false)]
		public static CreditRatingDataTable CreditRating
		{
			get
			{
				return DataModel.tableCreditRating;
			}
		}
		
		/// <summary>
		/// Gets an accessor for the CreditRatingService table.
		/// </summary>
		[global::System.ComponentModel.BrowsableAttribute(false)]
		public static CreditRatingServiceDataTable CreditRatingService
		{
			get
			{
				return DataModel.tableCreditRatingService;
			}
		}
		
		/// <summary>
		/// Gets an accessor for the Crossing table.
		/// </summary>
		[global::System.ComponentModel.BrowsableAttribute(false)]
		public static CrossingDataTable Crossing
		{
			get
			{
				return DataModel.tableCrossing;
			}
		}
		
		/// <summary>
		/// Gets an accessor for the Currency table.
		/// </summary>
		[global::System.ComponentModel.BrowsableAttribute(false)]
		public static CurrencyDataTable Currency
		{
			get
			{
				return DataModel.tableCurrency;
			}
		}
		
		/// <summary>
		/// Gets an accessor for the Debt table.
		/// </summary>
		[global::System.ComponentModel.BrowsableAttribute(false)]
		public static DebtDataTable Debt
		{
			get
			{
				return DataModel.tableDebt;
			}
		}
		
		/// <summary>
		/// Gets an accessor for the Destination table.
		/// </summary>
		[global::System.ComponentModel.BrowsableAttribute(false)]
		public static DestinationDataTable Destination
		{
			get
			{
				return DataModel.tableDestination;
			}
		}
		
		/// <summary>
		/// Gets an accessor for the DestinationExchangeMap table.
		/// </summary>
		[global::System.ComponentModel.BrowsableAttribute(false)]
		public static DestinationExchangeMapDataTable DestinationExchangeMap
		{
			get
			{
				return DataModel.tableDestinationExchangeMap;
			}
		}
		
		/// <summary>
		/// Gets an accessor for the DestinationOrder table.
		/// </summary>
		[global::System.ComponentModel.BrowsableAttribute(false)]
		public static DestinationOrderDataTable DestinationOrder
		{
			get
			{
				return DataModel.tableDestinationOrder;
			}
		}
		
		/// <summary>
		/// Gets an accessor for the Entity table.
		/// </summary>
		[global::System.ComponentModel.BrowsableAttribute(false)]
		public static EntityDataTable Entity
		{
			get
			{
				return DataModel.tableEntity;
			}
		}
		
		/// <summary>
		/// Gets an accessor for the EntityTree table.
		/// </summary>
		[global::System.ComponentModel.BrowsableAttribute(false)]
		public static EntityTreeDataTable EntityTree
		{
			get
			{
				return DataModel.tableEntityTree;
			}
		}
		
		/// <summary>
		/// Gets an accessor for the Equity table.
		/// </summary>
		[global::System.ComponentModel.BrowsableAttribute(false)]
		public static EquityDataTable Equity
		{
			get
			{
				return DataModel.tableEquity;
			}
		}
		
		/// <summary>
		/// Gets an accessor for the Exchange table.
		/// </summary>
		[global::System.ComponentModel.BrowsableAttribute(false)]
		public static ExchangeDataTable Exchange
		{
			get
			{
				return DataModel.tableExchange;
			}
		}
		
		/// <summary>
		/// Gets an accessor for the Execution table.
		/// </summary>
		[global::System.ComponentModel.BrowsableAttribute(false)]
		public static ExecutionDataTable Execution
		{
			get
			{
				return DataModel.tableExecution;
			}
		}
		
		/// <summary>
		/// Gets an accessor for the Folder table.
		/// </summary>
		[global::System.ComponentModel.BrowsableAttribute(false)]
		public static FolderDataTable Folder
		{
			get
			{
				return DataModel.tableFolder;
			}
		}
		
		/// <summary>
		/// Gets an accessor for the GroupAccount table.
		/// </summary>
		[global::System.ComponentModel.BrowsableAttribute(false)]
		public static GroupAccountDataTable GroupAccount
		{
			get
			{
				return DataModel.tableGroupAccount;
			}
		}
		
		/// <summary>
		/// Gets an accessor for the Holiday table.
		/// </summary>
		[global::System.ComponentModel.BrowsableAttribute(false)]
		public static HolidayDataTable Holiday
		{
			get
			{
				return DataModel.tableHoliday;
			}
		}
		
		/// <summary>
		/// Gets an accessor for the HolidayType table.
		/// </summary>
		[global::System.ComponentModel.BrowsableAttribute(false)]
		public static HolidayTypeDataTable HolidayType
		{
			get
			{
				return DataModel.tableHolidayType;
			}
		}
		
		/// <summary>
		/// Gets an accessor for the Image table.
		/// </summary>
		[global::System.ComponentModel.BrowsableAttribute(false)]
		public static ImageDataTable Image
		{
			get
			{
				return DataModel.tableImage;
			}
		}
		
		/// <summary>
		/// Gets an accessor for the Industry table.
		/// </summary>
		[global::System.ComponentModel.BrowsableAttribute(false)]
		public static IndustryDataTable Industry
		{
			get
			{
				return DataModel.tableIndustry;
			}
		}
		
		/// <summary>
		/// Gets an accessor for the IndustryClassification table.
		/// </summary>
		[global::System.ComponentModel.BrowsableAttribute(false)]
		public static IndustryClassificationDataTable IndustryClassification
		{
			get
			{
				return DataModel.tableIndustryClassification;
			}
		}
		
		/// <summary>
		/// Gets an accessor for the IndustryLeaf table.
		/// </summary>
		[global::System.ComponentModel.BrowsableAttribute(false)]
		public static IndustryLeafDataTable IndustryLeaf
		{
			get
			{
				return DataModel.tableIndustryLeaf;
			}
		}
		
		/// <summary>
		/// Gets an accessor for the IndustryTree table.
		/// </summary>
		[global::System.ComponentModel.BrowsableAttribute(false)]
		public static IndustryTreeDataTable IndustryTree
		{
			get
			{
				return DataModel.tableIndustryTree;
			}
		}
		
		/// <summary>
		/// Gets an accessor for the Institution table.
		/// </summary>
		[global::System.ComponentModel.BrowsableAttribute(false)]
		public static InstitutionDataTable Institution
		{
			get
			{
				return DataModel.tableInstitution;
			}
		}
		
		/// <summary>
		/// Gets or sets an indication of whether the background thread that reconciles the client data model is running or not.
		/// </summary>
		public static bool IsReading
		{
			get
			{
				try
				{
					// Prevent other threads from modifying the flag while it is returned to the caller.
					global::System.Threading.Monitor.Enter(DataModel.syncRoot);
					return DataModel.isReading;
				}
				finally
				{
					global::System.Threading.Monitor.Exit(DataModel.syncRoot);
				}
			}
			set
			{
				try
				{
					// Prevent other threads from modifying the flag while it is set.
					global::System.Threading.Monitor.Enter(DataModel.syncRoot);
					// If the state of the reconciling thread has changed, then either start or stop the background thread
					// depending on the new value.
					if ((DataModel.isReading != value))
					{
						// The background thread that keeps the data model synchronized with the server data model is either
						// started or stopped based on the new value.
						if ((DataModel.isReading = value))
						{
							// This will pre-load the data model to save time starting up.
							// This thread will periodically ask the server for records missing from the client version of the
							// data model.
							DataModel.reconcilerThread = new global::System.Threading.Thread(DataModel.ReadDataModel);
							DataModel.reconcilerThread.Name = "Data Model Reader Thread";
							DataModel.reconcilerThread.Start();
						}
						else
						{
							// This will kill the reconciling thread.  Special consideration is given if the caller is the
							// reconciling thread to make sure that the locking of the monitor is balanced out.
							if ((global::System.Threading.Thread.CurrentThread == DataModel.reconcilerThread))
							{
								// If this property accessed by the reconciling thread, then there is no need to join the thread to
								// abort it.
								global::System.Threading.Thread.CurrentThread.Abort();
							}
							else
							{
								// When joining the thread to shut it down gracefully, the critical code lock must be released in
								// order to allow the Reconciling thread to run.  That same lock must be re acquired in order to
								// leave the books balanced when the property access method exits.
								global::System.Threading.Monitor.Exit(DataModel.syncRoot);
								if ((DataModel.reconcilerThread.Join(DataModel.threadWaitTime) == false))
								{
									DataModel.reconcilerThread.Abort();
								}
								global::System.Threading.Monitor.Enter(DataModel.syncRoot);
							}
						}
					}
				}
				finally
				{
					global::System.Threading.Monitor.Exit(DataModel.syncRoot);
				}
			}
		}
		
		/// <summary>
		/// Gets an accessor for the Issuer table.
		/// </summary>
		[global::System.ComponentModel.BrowsableAttribute(false)]
		public static IssuerDataTable Issuer
		{
			get
			{
				return DataModel.tableIssuer;
			}
		}
		
		/// <summary>
		/// Gets an accessor for the LotHandling table.
		/// </summary>
		[global::System.ComponentModel.BrowsableAttribute(false)]
		public static LotHandlingDataTable LotHandling
		{
			get
			{
				return DataModel.tableLotHandling;
			}
		}
		
		/// <summary>
		/// Gets an accessor for the MajorInstrumentType table.
		/// </summary>
		[global::System.ComponentModel.BrowsableAttribute(false)]
		public static MajorInstrumentTypeDataTable MajorInstrumentType
		{
			get
			{
				return DataModel.tableMajorInstrumentType;
			}
		}
		
		/// <summary>
		/// Gets an accessor for the Match table.
		/// </summary>
		[global::System.ComponentModel.BrowsableAttribute(false)]
		public static MatchDataTable Match
		{
			get
			{
				return DataModel.tableMatch;
			}
		}
		
		/// <summary>
		/// Gets an accessor for the MinorInstrumentType table.
		/// </summary>
		[global::System.ComponentModel.BrowsableAttribute(false)]
		public static MinorInstrumentTypeDataTable MinorInstrumentType
		{
			get
			{
				return DataModel.tableMinorInstrumentType;
			}
		}
		
		/// <summary>
		/// Gets an accessor for the MssaBucket table.
		/// </summary>
		[global::System.ComponentModel.BrowsableAttribute(false)]
		public static MssaBucketDataTable MssaBucket
		{
			get
			{
				return DataModel.tableMssaBucket;
			}
		}
		
		/// <summary>
		/// Gets an accessor for the Negotiation table.
		/// </summary>
		[global::System.ComponentModel.BrowsableAttribute(false)]
		public static NegotiationDataTable Negotiation
		{
			get
			{
				return DataModel.tableNegotiation;
			}
		}
		
		/// <summary>
		/// Gets an accessor for the OrderType table.
		/// </summary>
		[global::System.ComponentModel.BrowsableAttribute(false)]
		public static OrderTypeDataTable OrderType
		{
			get
			{
				return DataModel.tableOrderType;
			}
		}
		
		/// <summary>
		/// Gets an accessor for the PartyType table.
		/// </summary>
		[global::System.ComponentModel.BrowsableAttribute(false)]
		public static PartyTypeDataTable PartyType
		{
			get
			{
				return DataModel.tablePartyType;
			}
		}
		
		/// <summary>
		/// Gets an accessor for the Position table.
		/// </summary>
		[global::System.ComponentModel.BrowsableAttribute(false)]
		public static PositionDataTable Position
		{
			get
			{
				return DataModel.tablePosition;
			}
		}
		
		/// <summary>
		/// Gets an accessor for the PositionSeries table.
		/// </summary>
		[global::System.ComponentModel.BrowsableAttribute(false)]
		public static PositionSeriesDataTable PositionSeries
		{
			get
			{
				return DataModel.tablePositionSeries;
			}
		}
		
		/// <summary>
		/// Gets an accessor for the PositionType table.
		/// </summary>
		[global::System.ComponentModel.BrowsableAttribute(false)]
		public static PositionTypeDataTable PositionType
		{
			get
			{
				return DataModel.tablePositionType;
			}
		}
		
		/// <summary>
		/// Gets an accessor for the Price table.
		/// </summary>
		[global::System.ComponentModel.BrowsableAttribute(false)]
		public static PriceDataTable Price
		{
			get
			{
				return DataModel.tablePrice;
			}
		}
		
		/// <summary>
		/// Gets an accessor for the Property table.
		/// </summary>
		[global::System.ComponentModel.BrowsableAttribute(false)]
		public static PropertyDataTable Property
		{
			get
			{
				return DataModel.tableProperty;
			}
		}
		
		/// <summary>
		/// Gets an accessor for the PropertyStore table.
		/// </summary>
		[global::System.ComponentModel.BrowsableAttribute(false)]
		public static PropertyStoreDataTable PropertyStore
		{
			get
			{
				return DataModel.tablePropertyStore;
			}
		}
		
		/// <summary>
		/// Gets an accessor for the Province table.
		/// </summary>
		[global::System.ComponentModel.BrowsableAttribute(false)]
		public static ProvinceDataTable Province
		{
			get
			{
				return DataModel.tableProvince;
			}
		}
		
		/// <summary>
		/// Gets the collection of relations that link tables and allow navigation between parent tables and child tables.
		/// </summary>
		[global::System.ComponentModel.BrowsableAttribute(false)]
		public static global::System.Data.DataRelationCollection Relations
		{
			get
			{
				return DataModel.dataSet.Relations;
			}
		}
		
		/// <summary>
		/// Gets an accessor for the Security table.
		/// </summary>
		[global::System.ComponentModel.BrowsableAttribute(false)]
		public static SecurityDataTable Security
		{
			get
			{
				return DataModel.tableSecurity;
			}
		}
		
		/// <summary>
		/// Gets an accessor for the SecuritySeries table.
		/// </summary>
		[global::System.ComponentModel.BrowsableAttribute(false)]
		public static SecuritySeriesDataTable SecuritySeries
		{
			get
			{
				return DataModel.tableSecuritySeries;
			}
		}
		
		/// <summary>
		/// Gets an accessor for the SettlementUnit table.
		/// </summary>
		[global::System.ComponentModel.BrowsableAttribute(false)]
		public static SettlementUnitDataTable SettlementUnit
		{
			get
			{
				return DataModel.tableSettlementUnit;
			}
		}
		
		/// <summary>
		/// Gets an accessor for the Side table.
		/// </summary>
		[global::System.ComponentModel.BrowsableAttribute(false)]
		public static SideDataTable Side
		{
			get
			{
				return DataModel.tableSide;
			}
		}
		
		/// <summary>
		/// Gets an accessor for the SingleAccount table.
		/// </summary>
		[global::System.ComponentModel.BrowsableAttribute(false)]
		public static SingleAccountDataTable SingleAccount
		{
			get
			{
				return DataModel.tableSingleAccount;
			}
		}
		
		/// <summary>
		/// Gets an accessor for the Source table.
		/// </summary>
		[global::System.ComponentModel.BrowsableAttribute(false)]
		public static SourceDataTable Source
		{
			get
			{
				return DataModel.tableSource;
			}
		}
		
		/// <summary>
		/// Gets an accessor for the SourceOrder table.
		/// </summary>
		[global::System.ComponentModel.BrowsableAttribute(false)]
		public static SourceOrderDataTable SourceOrder
		{
			get
			{
				return DataModel.tableSourceOrder;
			}
		}
		
		/// <summary>
		/// Gets an accessor for the State table.
		/// </summary>
		[global::System.ComponentModel.BrowsableAttribute(false)]
		public static StateDataTable State
		{
			get
			{
				return DataModel.tableState;
			}
		}
		
		/// <summary>
		/// Gets an accessor for the Status table.
		/// </summary>
		[global::System.ComponentModel.BrowsableAttribute(false)]
		public static StatusDataTable Status
		{
			get
			{
				return DataModel.tableStatus;
			}
		}
		
		/// <summary>
		/// Gets an accessor for the SubordinateType table.
		/// </summary>
		[global::System.ComponentModel.BrowsableAttribute(false)]
		public static SubordinateTypeDataTable SubordinateType
		{
			get
			{
				return DataModel.tableSubordinateType;
			}
		}
		
		/// <summary>
		/// Gets an object that can be used to synchronize access to the DataModel.
		/// </summary>
		[global::System.ComponentModel.BrowsableAttribute(false)]
		public static object SyncRoot
		{
			get
			{
				return DataModel.syncRoot;
			}
		}
		
		/// <summary>
		/// Gets the collection of tables contained in the DataModel.
		/// </summary>
		[global::System.ComponentModel.BrowsableAttribute(false)]
		public static global::System.Data.DataTableCollection Tables
		{
			get
			{
				return DataModel.dataSet.Tables;
			}
		}
		
		/// <summary>
		/// Gets an accessor for the TaxLot table.
		/// </summary>
		[global::System.ComponentModel.BrowsableAttribute(false)]
		public static TaxLotDataTable TaxLot
		{
			get
			{
				return DataModel.tableTaxLot;
			}
		}
		
		/// <summary>
		/// Gets an accessor for the TaxLotSeries table.
		/// </summary>
		[global::System.ComponentModel.BrowsableAttribute(false)]
		public static TaxLotSeriesDataTable TaxLotSeries
		{
			get
			{
				return DataModel.tableTaxLotSeries;
			}
		}
		
		/// <summary>
		/// Gets an accessor for the TimeInForce table.
		/// </summary>
		[global::System.ComponentModel.BrowsableAttribute(false)]
		public static TimeInForceDataTable TimeInForce
		{
			get
			{
				return DataModel.tableTimeInForce;
			}
		}
		
		/// <summary>
		/// Gets an accessor for the TimeUnit table.
		/// </summary>
		[global::System.ComponentModel.BrowsableAttribute(false)]
		public static TimeUnitDataTable TimeUnit
		{
			get
			{
				return DataModel.tableTimeUnit;
			}
		}
		
		/// <summary>
		/// Gets an accessor for the Trader table.
		/// </summary>
		[global::System.ComponentModel.BrowsableAttribute(false)]
		public static TraderDataTable Trader
		{
			get
			{
				return DataModel.tableTrader;
			}
		}
		
		/// <summary>
		/// Gets an accessor for the TraderVolumeSetting table.
		/// </summary>
		[global::System.ComponentModel.BrowsableAttribute(false)]
		public static TraderVolumeSettingDataTable TraderVolumeSetting
		{
			get
			{
				return DataModel.tableTraderVolumeSetting;
			}
		}
		
		/// <summary>
		/// Gets an accessor for the Type table.
		/// </summary>
		[global::System.ComponentModel.BrowsableAttribute(false)]
		public static TypeDataTable Type
		{
			get
			{
				return DataModel.tableType;
			}
		}
		
		/// <summary>
		/// Gets an accessor for the User table.
		/// </summary>
		[global::System.ComponentModel.BrowsableAttribute(false)]
		public static UserDataTable User
		{
			get
			{
				return DataModel.tableUser;
			}
		}
		
		/// <summary>
		/// Gets an accessor for the VolumeCategory table.
		/// </summary>
		[global::System.ComponentModel.BrowsableAttribute(false)]
		public static VolumeCategoryDataTable VolumeCategory
		{
			get
			{
				return DataModel.tableVolumeCategory;
			}
		}
		
		/// <summary>
		/// Gets an accessor for the Weekend table.
		/// </summary>
		[global::System.ComponentModel.BrowsableAttribute(false)]
		public static WeekendDataTable Weekend
		{
			get
			{
				return DataModel.tableWeekend;
			}
		}
		
		/// <summary>
		/// Gets an accessor for the WorkingOrder table.
		/// </summary>
		[global::System.ComponentModel.BrowsableAttribute(false)]
		public static WorkingOrderDataTable WorkingOrder
		{
			get
			{
				return DataModel.tableWorkingOrder;
			}
		}
		
		/// <summary>
		/// Merge the data from the server into the client's data model.
		/// </summary>
		private static void MergeDataModel()
		{
			int batchCounter = DataModel.batchSize;
			MergeState mergeState = DataModel.mergeStateQueue.Peek();
			global::System.Data.DataRow destinationRow = null;
		StartRowLoop:
			try
			{
				if ((mergeState.rowIndex < 0))
				{
					goto EndRowLoop;
				}
				batchCounter = (batchCounter - 1);
				if ((batchCounter == 0))
				{
					goto ScheduleNext;
				}
				object[] transactionLogItem = ((object[])(mergeState.transactionLog[mergeState.rowIndex]));
				global::System.Data.DataTable destinationTable = DataModel.Tables[((int)(transactionLogItem[1]))];
				object[] key = new object[destinationTable.PrimaryKey.Length];
				for (int keyIndex = 0; (keyIndex < destinationTable.PrimaryKey.Length); keyIndex = (keyIndex + 1))
				{
					key[keyIndex] = transactionLogItem[(2 + keyIndex)];
				}
				destinationRow = destinationTable.Rows.Find(key);
				int dataRowState = ((int)(transactionLogItem[0]));
				if ((dataRowState == global::Teraque.RecordState.Modified))
				{
					if ((destinationRow == null))
					{
						goto KeepRow;
					}
					int offset = (2 + destinationTable.PrimaryKey.Length);
					int fields = ((transactionLogItem.Length - offset) 
								/ 2);
					for (int parentIndex = 0; (parentIndex < destinationTable.ParentRelations.Count); parentIndex = (parentIndex + 1))
					{
						global::System.Data.DataRelation parentRelation = destinationTable.ParentRelations[parentIndex];
						bool isNullKey = true;
						object[] parentKey = new object[parentRelation.ChildColumns.Length];
						for (int keyIndex = 0; (keyIndex < parentRelation.ChildColumns.Length); keyIndex = (keyIndex + 1))
						{
							global::System.Data.DataColumn dataColumn = parentRelation.ChildColumns[keyIndex];
							parentKey[keyIndex] = dataColumn.DefaultValue;
							for (int field = 0; (field < fields); field = (field + 1))
							{
								int fieldIndex = (offset 
											+ (field * 2));
								if ((((int)(transactionLogItem[fieldIndex])) == dataColumn.Ordinal))
								{
									parentKey[keyIndex] = transactionLogItem[(fieldIndex + 1)];
								}
							}
							if ((parentKey[keyIndex] != global::System.DBNull.Value))
							{
								isNullKey = false;
							}
						}
						if (((isNullKey == false) 
									&& (parentRelation.ParentTable.Rows.Find(parentKey) == null)))
						{
							goto KeepRow;
						}
					}
					destinationRow.BeginEdit();
					for (int field = 0; (field < fields); field = (field + 1))
					{
						int fieldIndex = (offset 
									+ (field * 2));
						destinationRow[((int)(transactionLogItem[fieldIndex]))] = transactionLogItem[(fieldIndex + 1)];
					}
					destinationRow.EndEdit();
					destinationRow.AcceptChanges();
					mergeState.isAnythingMerged = true;
				}
				else
				{
					if ((dataRowState == global::Teraque.RecordState.Added))
					{
						int offset = (2 + destinationTable.PrimaryKey.Length);
						int fields = ((transactionLogItem.Length - offset) 
									/ 2);
						for (int parentIndex = 0; (parentIndex < destinationTable.ParentRelations.Count); parentIndex = (parentIndex + 1))
						{
							global::System.Data.DataRelation parentRelation = destinationTable.ParentRelations[parentIndex];
							bool isNullKey = true;
							object[] parentKey = new object[parentRelation.ChildColumns.Length];
							for (int keyIndex = 0; (keyIndex < parentRelation.ChildColumns.Length); keyIndex = (keyIndex + 1))
							{
								global::System.Data.DataColumn dataColumn = parentRelation.ChildColumns[keyIndex];
								parentKey[keyIndex] = dataColumn.DefaultValue;
								for (int field = 0; (field < fields); field = (field + 1))
								{
									int fieldIndex = (offset 
												+ (field * 2));
									if ((((int)(transactionLogItem[fieldIndex])) == dataColumn.Ordinal))
									{
										parentKey[keyIndex] = transactionLogItem[(fieldIndex + 1)];
									}
								}
								if ((parentKey[keyIndex] != global::System.DBNull.Value))
								{
									isNullKey = false;
								}
							}
							if (((isNullKey == false) 
										&& (parentRelation.ParentTable.Rows.Find(parentKey) == null)))
							{
								goto KeepRow;
							}
						}
						if ((destinationRow == null))
						{
							destinationRow = destinationTable.NewRow();
							for (int field = 0; (field < fields); field = (field + 1))
							{
								int fieldIndex = (offset 
											+ (field * 2));
								destinationRow[((int)(transactionLogItem[fieldIndex]))] = transactionLogItem[(fieldIndex + 1)];
							}
							destinationTable.Rows.Add(destinationRow);
						}
						else
						{
							destinationRow.BeginEdit();
							for (int field = 0; (field < fields); field = (field + 1))
							{
								int fieldIndex = (offset 
											+ (field * 2));
								destinationRow[((int)(transactionLogItem[fieldIndex]))] = transactionLogItem[(fieldIndex + 1)];
							}
							destinationRow.EndEdit();
						}
						destinationRow.AcceptChanges();
						mergeState.isAnythingMerged = true;
					}
					else
					{
						if ((destinationRow == null))
						{
							goto KeepRow;
						}
						destinationRow.Delete();
						destinationRow.AcceptChanges();
						mergeState.isAnythingMerged = true;
					}
				}
				goto NextRow;
			KeepRow:
				mergeState.unhandledRows.Add(transactionLogItem);
			NextRow:
				mergeState.rowIndex = (mergeState.rowIndex - 1);
				goto StartRowLoop;
			}
			catch (global::System.Exception exception)
			{
				if ((destinationRow != null))
				{
					destinationRow.RejectChanges();
				}
				global::Teraque.Log.Error("{0}, {1}", exception.Message, exception.StackTrace);
			}
		EndRowLoop:
			if (((mergeState.unhandledRows.Count != 0) 
						&& (mergeState.isAnythingMerged == false)))
			{
				throw new global::System.Data.ConstraintException("Results from the server couldn\'t be merged into the client data model.");
			}
			if ((mergeState.unhandledRows.Count == 0))
			{
				DataModel.mergeStateQueue.Dequeue();
				if ((DataModel.mergeStateQueue.Count == 0))
				{
					return;
				}
			}
			else
			{
				mergeState.transactionLog = mergeState.unhandledRows.ToArray();
				mergeState.unhandledRows = new System.Collections.ArrayList();
				mergeState.rowIndex = (mergeState.transactionLog.Length - 1);
				mergeState.isAnythingMerged = false;
				goto StartRowLoop;
			}
		ScheduleNext:
			if ((DataModel.mergeStateQueue.Count != 0))
			{
				global::System.Windows.Application.Current.Dispatcher.BeginInvoke(global::System.Windows.Threading.DispatcherPriority.SystemIdle, new System.Action(DataModel.MergeDataModel));
			}
		}
		
		/// <summary>
		/// This thread will periodically reconcile the client data model with the server's.
		/// </summary>
		private static void ReadDataModel()
		{
			DataModelClient dataModelClient = new DataModelClient(Teraque.AssetNetwork.Properties.Settings.Default.DataModelEndpoint);
			for (
			; (DataModel.IsReading == true); 
			)
			{
				try
				{
					object[] dataHeader = dataModelClient.Read(DataModel.dataSetId, DataModel.sequence);
					global::System.Guid dataSetId = ((global::System.Guid)(dataHeader[0]));
					DataModel.sequence = ((long)(dataHeader[1]));
					object[] transactionLog = ((object[])(dataHeader[2]));
					if ((dataSetId != DataModel.dataSetId))
					{
						DataModel.dataSetId = dataSetId;
						DataModel.dataSet.EnforceConstraints = false;
						DataModel.dataSet.Clear();
						DataModel.dataSet.EnforceConstraints = true;
					}
					if ((transactionLog.Length != 0))
					{
						global::System.Windows.Application.Current.Dispatcher.BeginInvoke(global::System.Windows.Threading.DispatcherPriority.SystemIdle, new System.Action<object[]>(DataModel.StartMerge), transactionLog);
					}
				}
				catch (global::System.ServiceModel.FaultException<Teraque.TenantNotLoadedFault> tenantNotFoundFaultException)
				{
					global::Teraque.Log.Error("Tenant {0} not loaded.", tenantNotFoundFaultException.Detail.TenantName);
					if ((DataModel.TenantNotLoaded != null))
					{
						DataModel.TenantNotLoaded(typeof(DataModel), tenantNotFoundFaultException.Detail.TenantName);
					}
				}
				catch (global::System.Exception exception)
				{
					global::Teraque.Log.Error("{0}, {1}", exception.Message, exception.StackTrace);
				}
				finally
				{
					if ((dataModelClient.State != global::System.ServiceModel.CommunicationState.Opened))
					{
						global::System.Threading.Thread.Sleep(1000);
						dataModelClient = new DataModelClient(Teraque.AssetNetwork.Properties.Settings.Default.DataModelEndpoint);
					}
				}
				global::System.Threading.Thread.Sleep(DataModel.refreshInterval);
			}
		}
		
		/// <summary>
		/// Reads an XML file into the data model.
		/// </summary>
		/// <param name="fileName">The name of the file to read.</param>
		public static void ReadXml(string fileName)
		{
			DataModel.dataSet.ReadXml(fileName);
		}
		
		/// <summary>
		/// Resets the DataModel.
		/// </summary>
		public static void Reset()
		{
			try
			{
				global::System.Threading.Monitor.Enter(DataModel.syncRoot);
				DataModel.dataSetId = global::System.Guid.Empty;
			}
			finally
			{
				global::System.Threading.Monitor.Exit(DataModel.syncRoot);
			}
		}
		
		/// <summary>
		/// Starts the process of merging the data collected in the background from the server into the client's data model.
		/// </summary>
		private static void StartMerge(object[] transactionLog)
		{
			DataModel.mergeStateQueue.Enqueue(new MergeState(transactionLog));
			if ((DataModel.mergeStateQueue.Count == 1))
			{
				global::System.Windows.Application.Current.Dispatcher.BeginInvoke(global::System.Windows.Threading.DispatcherPriority.SystemIdle, new System.Action(DataModel.MergeDataModel));
			}
		}
		
		/// <summary>
		/// Writes an XML file to a file.
		/// </summary>
		/// <param name="fileName">The name of the file to write.</param>
		public static void WriteXml(string fileName)
		{
			DataModel.dataSet.WriteXml(fileName);
		}
		
		internal class MergeState
		{
			
			internal bool isAnythingMerged;
			
			internal int rowIndex;
			
			internal object[] transactionLog;
			
			internal global::System.Collections.ArrayList unhandledRows = new global::System.Collections.ArrayList();
			
			internal MergeState(object[] transactionLog)
			{
				this.transactionLog = transactionLog;
				this.rowIndex = (this.transactionLog.Length - 1);
			}
		}
		
		/// <summary>
		/// Delegate for handling changes to the Account table.
		/// </summary>
		/// <param name="sender">The object that originated the event.</param>
		/// <param name="e">The event arguments.</param>
		public delegate void AccountRowChangeEventHandler(object sender, AccountRowChangeEventArgs e);
		
		/// <summary>
		/// Delegate for handling changes to the AccountSeries table.
		/// </summary>
		/// <param name="sender">The object that originated the event.</param>
		/// <param name="e">The event arguments.</param>
		public delegate void AccountSeriesRowChangeEventHandler(object sender, AccountSeriesRowChangeEventArgs e);
		
		/// <summary>
		/// Delegate for handling changes to the Allocation table.
		/// </summary>
		/// <param name="sender">The object that originated the event.</param>
		/// <param name="e">The event arguments.</param>
		public delegate void AllocationRowChangeEventHandler(object sender, AllocationRowChangeEventArgs e);
		
		/// <summary>
		/// Delegate for handling changes to the Blotter table.
		/// </summary>
		/// <param name="sender">The object that originated the event.</param>
		/// <param name="e">The event arguments.</param>
		public delegate void BlotterRowChangeEventHandler(object sender, BlotterRowChangeEventArgs e);
		
		/// <summary>
		/// Delegate for handling changes to the BlotterDestinationMap table.
		/// </summary>
		/// <param name="sender">The object that originated the event.</param>
		/// <param name="e">The event arguments.</param>
		public delegate void BlotterDestinationMapRowChangeEventHandler(object sender, BlotterDestinationMapRowChangeEventArgs e);
		
		/// <summary>
		/// Delegate for handling changes to the Branch table.
		/// </summary>
		/// <param name="sender">The object that originated the event.</param>
		/// <param name="e">The event arguments.</param>
		public delegate void BranchRowChangeEventHandler(object sender, BranchRowChangeEventArgs e);
		
		/// <summary>
		/// Delegate for handling changes to the Broker table.
		/// </summary>
		/// <param name="sender">The object that originated the event.</param>
		/// <param name="e">The event arguments.</param>
		public delegate void BrokerRowChangeEventHandler(object sender, BrokerRowChangeEventArgs e);
		
		/// <summary>
		/// Delegate for handling changes to the BrokerAccount table.
		/// </summary>
		/// <param name="sender">The object that originated the event.</param>
		/// <param name="e">The event arguments.</param>
		public delegate void BrokerAccountRowChangeEventHandler(object sender, BrokerAccountRowChangeEventArgs e);
		
		/// <summary>
		/// Delegate for handling changes to the ClearingBroker table.
		/// </summary>
		/// <param name="sender">The object that originated the event.</param>
		/// <param name="e">The event arguments.</param>
		public delegate void ClearingBrokerRowChangeEventHandler(object sender, ClearingBrokerRowChangeEventArgs e);
		
		/// <summary>
		/// Delegate for handling changes to the CommissionSchedule table.
		/// </summary>
		/// <param name="sender">The object that originated the event.</param>
		/// <param name="e">The event arguments.</param>
		public delegate void CommissionScheduleRowChangeEventHandler(object sender, CommissionScheduleRowChangeEventArgs e);
		
		/// <summary>
		/// Delegate for handling changes to the CommissionTranche table.
		/// </summary>
		/// <param name="sender">The object that originated the event.</param>
		/// <param name="e">The event arguments.</param>
		public delegate void CommissionTrancheRowChangeEventHandler(object sender, CommissionTrancheRowChangeEventArgs e);
		
		/// <summary>
		/// Delegate for handling changes to the CommissionType table.
		/// </summary>
		/// <param name="sender">The object that originated the event.</param>
		/// <param name="e">The event arguments.</param>
		public delegate void CommissionTypeRowChangeEventHandler(object sender, CommissionTypeRowChangeEventArgs e);
		
		/// <summary>
		/// Delegate for handling changes to the CommissionUnit table.
		/// </summary>
		/// <param name="sender">The object that originated the event.</param>
		/// <param name="e">The event arguments.</param>
		public delegate void CommissionUnitRowChangeEventHandler(object sender, CommissionUnitRowChangeEventArgs e);
		
		/// <summary>
		/// Delegate for handling changes to the ComplianceOfficer table.
		/// </summary>
		/// <param name="sender">The object that originated the event.</param>
		/// <param name="e">The event arguments.</param>
		public delegate void ComplianceOfficerRowChangeEventHandler(object sender, ComplianceOfficerRowChangeEventArgs e);
		
		/// <summary>
		/// Delegate for handling changes to the Condition table.
		/// </summary>
		/// <param name="sender">The object that originated the event.</param>
		/// <param name="e">The event arguments.</param>
		public delegate void ConditionRowChangeEventHandler(object sender, ConditionRowChangeEventArgs e);
		
		/// <summary>
		/// Delegate for handling changes to the Configuration table.
		/// </summary>
		/// <param name="sender">The object that originated the event.</param>
		/// <param name="e">The event arguments.</param>
		public delegate void ConfigurationRowChangeEventHandler(object sender, ConfigurationRowChangeEventArgs e);
		
		/// <summary>
		/// Delegate for handling changes to the Country table.
		/// </summary>
		/// <param name="sender">The object that originated the event.</param>
		/// <param name="e">The event arguments.</param>
		public delegate void CountryRowChangeEventHandler(object sender, CountryRowChangeEventArgs e);
		
		/// <summary>
		/// Delegate for handling changes to the CreditRating table.
		/// </summary>
		/// <param name="sender">The object that originated the event.</param>
		/// <param name="e">The event arguments.</param>
		public delegate void CreditRatingRowChangeEventHandler(object sender, CreditRatingRowChangeEventArgs e);
		
		/// <summary>
		/// Delegate for handling changes to the CreditRatingService table.
		/// </summary>
		/// <param name="sender">The object that originated the event.</param>
		/// <param name="e">The event arguments.</param>
		public delegate void CreditRatingServiceRowChangeEventHandler(object sender, CreditRatingServiceRowChangeEventArgs e);
		
		/// <summary>
		/// Delegate for handling changes to the Crossing table.
		/// </summary>
		/// <param name="sender">The object that originated the event.</param>
		/// <param name="e">The event arguments.</param>
		public delegate void CrossingRowChangeEventHandler(object sender, CrossingRowChangeEventArgs e);
		
		/// <summary>
		/// Delegate for handling changes to the Currency table.
		/// </summary>
		/// <param name="sender">The object that originated the event.</param>
		/// <param name="e">The event arguments.</param>
		public delegate void CurrencyRowChangeEventHandler(object sender, CurrencyRowChangeEventArgs e);
		
		/// <summary>
		/// Delegate for handling changes to the Debt table.
		/// </summary>
		/// <param name="sender">The object that originated the event.</param>
		/// <param name="e">The event arguments.</param>
		public delegate void DebtRowChangeEventHandler(object sender, DebtRowChangeEventArgs e);
		
		/// <summary>
		/// Delegate for handling changes to the Destination table.
		/// </summary>
		/// <param name="sender">The object that originated the event.</param>
		/// <param name="e">The event arguments.</param>
		public delegate void DestinationRowChangeEventHandler(object sender, DestinationRowChangeEventArgs e);
		
		/// <summary>
		/// Delegate for handling changes to the DestinationExchangeMap table.
		/// </summary>
		/// <param name="sender">The object that originated the event.</param>
		/// <param name="e">The event arguments.</param>
		public delegate void DestinationExchangeMapRowChangeEventHandler(object sender, DestinationExchangeMapRowChangeEventArgs e);
		
		/// <summary>
		/// Delegate for handling changes to the DestinationOrder table.
		/// </summary>
		/// <param name="sender">The object that originated the event.</param>
		/// <param name="e">The event arguments.</param>
		public delegate void DestinationOrderRowChangeEventHandler(object sender, DestinationOrderRowChangeEventArgs e);
		
		/// <summary>
		/// Delegate for handling changes to the Entity table.
		/// </summary>
		/// <param name="sender">The object that originated the event.</param>
		/// <param name="e">The event arguments.</param>
		public delegate void EntityRowChangeEventHandler(object sender, EntityRowChangeEventArgs e);
		
		/// <summary>
		/// Delegate for handling changes to the EntityTree table.
		/// </summary>
		/// <param name="sender">The object that originated the event.</param>
		/// <param name="e">The event arguments.</param>
		public delegate void EntityTreeRowChangeEventHandler(object sender, EntityTreeRowChangeEventArgs e);
		
		/// <summary>
		/// Delegate for handling changes to the Equity table.
		/// </summary>
		/// <param name="sender">The object that originated the event.</param>
		/// <param name="e">The event arguments.</param>
		public delegate void EquityRowChangeEventHandler(object sender, EquityRowChangeEventArgs e);
		
		/// <summary>
		/// Delegate for handling changes to the Exchange table.
		/// </summary>
		/// <param name="sender">The object that originated the event.</param>
		/// <param name="e">The event arguments.</param>
		public delegate void ExchangeRowChangeEventHandler(object sender, ExchangeRowChangeEventArgs e);
		
		/// <summary>
		/// Delegate for handling changes to the Execution table.
		/// </summary>
		/// <param name="sender">The object that originated the event.</param>
		/// <param name="e">The event arguments.</param>
		public delegate void ExecutionRowChangeEventHandler(object sender, ExecutionRowChangeEventArgs e);
		
		/// <summary>
		/// Delegate for handling changes to the Folder table.
		/// </summary>
		/// <param name="sender">The object that originated the event.</param>
		/// <param name="e">The event arguments.</param>
		public delegate void FolderRowChangeEventHandler(object sender, FolderRowChangeEventArgs e);
		
		/// <summary>
		/// Delegate for handling changes to the GroupAccount table.
		/// </summary>
		/// <param name="sender">The object that originated the event.</param>
		/// <param name="e">The event arguments.</param>
		public delegate void GroupAccountRowChangeEventHandler(object sender, GroupAccountRowChangeEventArgs e);
		
		/// <summary>
		/// Delegate for handling changes to the Holiday table.
		/// </summary>
		/// <param name="sender">The object that originated the event.</param>
		/// <param name="e">The event arguments.</param>
		public delegate void HolidayRowChangeEventHandler(object sender, HolidayRowChangeEventArgs e);
		
		/// <summary>
		/// Delegate for handling changes to the HolidayType table.
		/// </summary>
		/// <param name="sender">The object that originated the event.</param>
		/// <param name="e">The event arguments.</param>
		public delegate void HolidayTypeRowChangeEventHandler(object sender, HolidayTypeRowChangeEventArgs e);
		
		/// <summary>
		/// Delegate for handling changes to the Image table.
		/// </summary>
		/// <param name="sender">The object that originated the event.</param>
		/// <param name="e">The event arguments.</param>
		public delegate void ImageRowChangeEventHandler(object sender, ImageRowChangeEventArgs e);
		
		/// <summary>
		/// Delegate for handling changes to the Industry table.
		/// </summary>
		/// <param name="sender">The object that originated the event.</param>
		/// <param name="e">The event arguments.</param>
		public delegate void IndustryRowChangeEventHandler(object sender, IndustryRowChangeEventArgs e);
		
		/// <summary>
		/// Delegate for handling changes to the IndustryClassification table.
		/// </summary>
		/// <param name="sender">The object that originated the event.</param>
		/// <param name="e">The event arguments.</param>
		public delegate void IndustryClassificationRowChangeEventHandler(object sender, IndustryClassificationRowChangeEventArgs e);
		
		/// <summary>
		/// Delegate for handling changes to the IndustryLeaf table.
		/// </summary>
		/// <param name="sender">The object that originated the event.</param>
		/// <param name="e">The event arguments.</param>
		public delegate void IndustryLeafRowChangeEventHandler(object sender, IndustryLeafRowChangeEventArgs e);
		
		/// <summary>
		/// Delegate for handling changes to the IndustryTree table.
		/// </summary>
		/// <param name="sender">The object that originated the event.</param>
		/// <param name="e">The event arguments.</param>
		public delegate void IndustryTreeRowChangeEventHandler(object sender, IndustryTreeRowChangeEventArgs e);
		
		/// <summary>
		/// Delegate for handling changes to the Institution table.
		/// </summary>
		/// <param name="sender">The object that originated the event.</param>
		/// <param name="e">The event arguments.</param>
		public delegate void InstitutionRowChangeEventHandler(object sender, InstitutionRowChangeEventArgs e);
		
		/// <summary>
		/// Delegate for handling changes to the Issuer table.
		/// </summary>
		/// <param name="sender">The object that originated the event.</param>
		/// <param name="e">The event arguments.</param>
		public delegate void IssuerRowChangeEventHandler(object sender, IssuerRowChangeEventArgs e);
		
		/// <summary>
		/// Delegate for handling changes to the LotHandling table.
		/// </summary>
		/// <param name="sender">The object that originated the event.</param>
		/// <param name="e">The event arguments.</param>
		public delegate void LotHandlingRowChangeEventHandler(object sender, LotHandlingRowChangeEventArgs e);
		
		/// <summary>
		/// Delegate for handling changes to the MajorInstrumentType table.
		/// </summary>
		/// <param name="sender">The object that originated the event.</param>
		/// <param name="e">The event arguments.</param>
		public delegate void MajorInstrumentTypeRowChangeEventHandler(object sender, MajorInstrumentTypeRowChangeEventArgs e);
		
		/// <summary>
		/// Delegate for handling changes to the Match table.
		/// </summary>
		/// <param name="sender">The object that originated the event.</param>
		/// <param name="e">The event arguments.</param>
		public delegate void MatchRowChangeEventHandler(object sender, MatchRowChangeEventArgs e);
		
		/// <summary>
		/// Delegate for handling changes to the MinorInstrumentType table.
		/// </summary>
		/// <param name="sender">The object that originated the event.</param>
		/// <param name="e">The event arguments.</param>
		public delegate void MinorInstrumentTypeRowChangeEventHandler(object sender, MinorInstrumentTypeRowChangeEventArgs e);
		
		/// <summary>
		/// Delegate for handling changes to the MssaBucket table.
		/// </summary>
		/// <param name="sender">The object that originated the event.</param>
		/// <param name="e">The event arguments.</param>
		public delegate void MssaBucketRowChangeEventHandler(object sender, MssaBucketRowChangeEventArgs e);
		
		/// <summary>
		/// Delegate for handling changes to the Negotiation table.
		/// </summary>
		/// <param name="sender">The object that originated the event.</param>
		/// <param name="e">The event arguments.</param>
		public delegate void NegotiationRowChangeEventHandler(object sender, NegotiationRowChangeEventArgs e);
		
		/// <summary>
		/// Delegate for handling changes to the OrderType table.
		/// </summary>
		/// <param name="sender">The object that originated the event.</param>
		/// <param name="e">The event arguments.</param>
		public delegate void OrderTypeRowChangeEventHandler(object sender, OrderTypeRowChangeEventArgs e);
		
		/// <summary>
		/// Delegate for handling changes to the PartyType table.
		/// </summary>
		/// <param name="sender">The object that originated the event.</param>
		/// <param name="e">The event arguments.</param>
		public delegate void PartyTypeRowChangeEventHandler(object sender, PartyTypeRowChangeEventArgs e);
		
		/// <summary>
		/// Delegate for handling changes to the Position table.
		/// </summary>
		/// <param name="sender">The object that originated the event.</param>
		/// <param name="e">The event arguments.</param>
		public delegate void PositionRowChangeEventHandler(object sender, PositionRowChangeEventArgs e);
		
		/// <summary>
		/// Delegate for handling changes to the PositionSeries table.
		/// </summary>
		/// <param name="sender">The object that originated the event.</param>
		/// <param name="e">The event arguments.</param>
		public delegate void PositionSeriesRowChangeEventHandler(object sender, PositionSeriesRowChangeEventArgs e);
		
		/// <summary>
		/// Delegate for handling changes to the PositionType table.
		/// </summary>
		/// <param name="sender">The object that originated the event.</param>
		/// <param name="e">The event arguments.</param>
		public delegate void PositionTypeRowChangeEventHandler(object sender, PositionTypeRowChangeEventArgs e);
		
		/// <summary>
		/// Delegate for handling changes to the Price table.
		/// </summary>
		/// <param name="sender">The object that originated the event.</param>
		/// <param name="e">The event arguments.</param>
		public delegate void PriceRowChangeEventHandler(object sender, PriceRowChangeEventArgs e);
		
		/// <summary>
		/// Delegate for handling changes to the Property table.
		/// </summary>
		/// <param name="sender">The object that originated the event.</param>
		/// <param name="e">The event arguments.</param>
		public delegate void PropertyRowChangeEventHandler(object sender, PropertyRowChangeEventArgs e);
		
		/// <summary>
		/// Delegate for handling changes to the PropertyStore table.
		/// </summary>
		/// <param name="sender">The object that originated the event.</param>
		/// <param name="e">The event arguments.</param>
		public delegate void PropertyStoreRowChangeEventHandler(object sender, PropertyStoreRowChangeEventArgs e);
		
		/// <summary>
		/// Delegate for handling changes to the Province table.
		/// </summary>
		/// <param name="sender">The object that originated the event.</param>
		/// <param name="e">The event arguments.</param>
		public delegate void ProvinceRowChangeEventHandler(object sender, ProvinceRowChangeEventArgs e);
		
		/// <summary>
		/// Delegate for handling changes to the Security table.
		/// </summary>
		/// <param name="sender">The object that originated the event.</param>
		/// <param name="e">The event arguments.</param>
		public delegate void SecurityRowChangeEventHandler(object sender, SecurityRowChangeEventArgs e);
		
		/// <summary>
		/// Delegate for handling changes to the SecuritySeries table.
		/// </summary>
		/// <param name="sender">The object that originated the event.</param>
		/// <param name="e">The event arguments.</param>
		public delegate void SecuritySeriesRowChangeEventHandler(object sender, SecuritySeriesRowChangeEventArgs e);
		
		/// <summary>
		/// Delegate for handling changes to the SettlementUnit table.
		/// </summary>
		/// <param name="sender">The object that originated the event.</param>
		/// <param name="e">The event arguments.</param>
		public delegate void SettlementUnitRowChangeEventHandler(object sender, SettlementUnitRowChangeEventArgs e);
		
		/// <summary>
		/// Delegate for handling changes to the Side table.
		/// </summary>
		/// <param name="sender">The object that originated the event.</param>
		/// <param name="e">The event arguments.</param>
		public delegate void SideRowChangeEventHandler(object sender, SideRowChangeEventArgs e);
		
		/// <summary>
		/// Delegate for handling changes to the SingleAccount table.
		/// </summary>
		/// <param name="sender">The object that originated the event.</param>
		/// <param name="e">The event arguments.</param>
		public delegate void SingleAccountRowChangeEventHandler(object sender, SingleAccountRowChangeEventArgs e);
		
		/// <summary>
		/// Delegate for handling changes to the Source table.
		/// </summary>
		/// <param name="sender">The object that originated the event.</param>
		/// <param name="e">The event arguments.</param>
		public delegate void SourceRowChangeEventHandler(object sender, SourceRowChangeEventArgs e);
		
		/// <summary>
		/// Delegate for handling changes to the SourceOrder table.
		/// </summary>
		/// <param name="sender">The object that originated the event.</param>
		/// <param name="e">The event arguments.</param>
		public delegate void SourceOrderRowChangeEventHandler(object sender, SourceOrderRowChangeEventArgs e);
		
		/// <summary>
		/// Delegate for handling changes to the State table.
		/// </summary>
		/// <param name="sender">The object that originated the event.</param>
		/// <param name="e">The event arguments.</param>
		public delegate void StateRowChangeEventHandler(object sender, StateRowChangeEventArgs e);
		
		/// <summary>
		/// Delegate for handling changes to the Status table.
		/// </summary>
		/// <param name="sender">The object that originated the event.</param>
		/// <param name="e">The event arguments.</param>
		public delegate void StatusRowChangeEventHandler(object sender, StatusRowChangeEventArgs e);
		
		/// <summary>
		/// Delegate for handling changes to the SubordinateType table.
		/// </summary>
		/// <param name="sender">The object that originated the event.</param>
		/// <param name="e">The event arguments.</param>
		public delegate void SubordinateTypeRowChangeEventHandler(object sender, SubordinateTypeRowChangeEventArgs e);
		
		/// <summary>
		/// Delegate for handling changes to the TaxLot table.
		/// </summary>
		/// <param name="sender">The object that originated the event.</param>
		/// <param name="e">The event arguments.</param>
		public delegate void TaxLotRowChangeEventHandler(object sender, TaxLotRowChangeEventArgs e);
		
		/// <summary>
		/// Delegate for handling changes to the TaxLotSeries table.
		/// </summary>
		/// <param name="sender">The object that originated the event.</param>
		/// <param name="e">The event arguments.</param>
		public delegate void TaxLotSeriesRowChangeEventHandler(object sender, TaxLotSeriesRowChangeEventArgs e);
		
		/// <summary>
		/// Delegate for handling changes to the TimeInForce table.
		/// </summary>
		/// <param name="sender">The object that originated the event.</param>
		/// <param name="e">The event arguments.</param>
		public delegate void TimeInForceRowChangeEventHandler(object sender, TimeInForceRowChangeEventArgs e);
		
		/// <summary>
		/// Delegate for handling changes to the TimeUnit table.
		/// </summary>
		/// <param name="sender">The object that originated the event.</param>
		/// <param name="e">The event arguments.</param>
		public delegate void TimeUnitRowChangeEventHandler(object sender, TimeUnitRowChangeEventArgs e);
		
		/// <summary>
		/// Delegate for handling changes to the Trader table.
		/// </summary>
		/// <param name="sender">The object that originated the event.</param>
		/// <param name="e">The event arguments.</param>
		public delegate void TraderRowChangeEventHandler(object sender, TraderRowChangeEventArgs e);
		
		/// <summary>
		/// Delegate for handling changes to the TraderVolumeSetting table.
		/// </summary>
		/// <param name="sender">The object that originated the event.</param>
		/// <param name="e">The event arguments.</param>
		public delegate void TraderVolumeSettingRowChangeEventHandler(object sender, TraderVolumeSettingRowChangeEventArgs e);
		
		/// <summary>
		/// Delegate for handling changes to the Type table.
		/// </summary>
		/// <param name="sender">The object that originated the event.</param>
		/// <param name="e">The event arguments.</param>
		public delegate void TypeRowChangeEventHandler(object sender, TypeRowChangeEventArgs e);
		
		/// <summary>
		/// Delegate for handling changes to the User table.
		/// </summary>
		/// <param name="sender">The object that originated the event.</param>
		/// <param name="e">The event arguments.</param>
		public delegate void UserRowChangeEventHandler(object sender, UserRowChangeEventArgs e);
		
		/// <summary>
		/// Delegate for handling changes to the VolumeCategory table.
		/// </summary>
		/// <param name="sender">The object that originated the event.</param>
		/// <param name="e">The event arguments.</param>
		public delegate void VolumeCategoryRowChangeEventHandler(object sender, VolumeCategoryRowChangeEventArgs e);
		
		/// <summary>
		/// Delegate for handling changes to the Weekend table.
		/// </summary>
		/// <param name="sender">The object that originated the event.</param>
		/// <param name="e">The event arguments.</param>
		public delegate void WeekendRowChangeEventHandler(object sender, WeekendRowChangeEventArgs e);
		
		/// <summary>
		/// Delegate for handling changes to the WorkingOrder table.
		/// </summary>
		/// <param name="sender">The object that originated the event.</param>
		/// <param name="e">The event arguments.</param>
		public delegate void WorkingOrderRowChangeEventHandler(object sender, WorkingOrderRowChangeEventArgs e);
		
		/// <summary>
		/// The Account table.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public partial class AccountDataTable : global::System.Data.TypedTableBase<DataModel.AccountRow>
		{
			
			private global::System.Data.DataColumn columnAccountId;
			
			private global::System.Data.DataColumn columnCurrencyId;
			
			private global::System.Data.DataColumn columnMnemonic;
			
			private global::System.Data.DataColumn columnRowVersion;
			
			private global::Teraque.DataIndexCollection dataIndices;
			
			private global::Teraque.DataIndex indexAccountKey;
			
			private global::System.Data.DataRelation relationAccountAccountSeries;
			
			private global::System.Data.DataRelation relationAccountAllocation;
			
			private global::System.Data.DataRelation relationAccountGroupAccount;
			
			private global::System.Data.DataRelation relationAccountPosition;
			
			private global::System.Data.DataRelation relationAccountPositionSeries;
			
			private global::System.Data.DataRelation relationAccountSingleAccount;
			
			private global::System.Data.DataRelation relationAccountTaxLot;
			
			private global::System.Data.DataRelation relationAccountTaxLotSeries;
			
			private global::System.Data.DataRelation relationCurrencyAccount;
			
			private global::System.Data.DataRelation relationEntityAccount;
			
			/// <summary>
			/// Creates the Account table.
			/// </summary>
			internal AccountDataTable()
			{
				// Initialize the object.
				this.TableName = "Account";
				this.dataIndices = new global::Teraque.DataIndexCollection();
				// The AccountId Column
				this.columnAccountId = new global::System.Data.DataColumn("AccountId", typeof(System.Guid), null, global::System.Data.MappingType.Element);
				this.columnAccountId.AllowDBNull = false;
				this.Columns.Add(this.columnAccountId);
				// The CurrencyId Column
				this.columnCurrencyId = new global::System.Data.DataColumn("CurrencyId", typeof(System.Guid), null, global::System.Data.MappingType.Element);
				this.columnCurrencyId.AllowDBNull = false;
				this.Columns.Add(this.columnCurrencyId);
				// The Mnemonic Column
				this.columnMnemonic = new global::System.Data.DataColumn("Mnemonic", typeof(string), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnMnemonic);
				// The RowVersion Column
				this.columnRowVersion = new global::System.Data.DataColumn("RowVersion", typeof(long), null, global::System.Data.MappingType.Element);
				this.columnRowVersion.AllowDBNull = false;
				this.Columns.Add(this.columnRowVersion);
				// The AccountKey Index
				this.indexAccountKey = new AccountKeyIndex("AccountKey", new global::System.Data.DataColumn[] {
							this.columnAccountId});
				this.Indices.Add(this.indexAccountKey);
			}
			
			/// <summary>
			/// Gets the child relation between the Account and AccountSeries tables.
			/// </summary>
			internal global::System.Data.DataRelation AccountAccountSeriesRelation
			{
				get
				{
					return this.relationAccountAccountSeries;
				}
			}
			
			/// <summary>
			/// Gets the child relation between the Account and Allocation tables.
			/// </summary>
			internal global::System.Data.DataRelation AccountAllocationRelation
			{
				get
				{
					return this.relationAccountAllocation;
				}
			}
			
			/// <summary>
			/// Gets the child relation between the Account and GroupAccount tables.
			/// </summary>
			internal global::System.Data.DataRelation AccountGroupAccountRelation
			{
				get
				{
					return this.relationAccountGroupAccount;
				}
			}
			
			/// <summary>
			/// Gets the AccountId column of the Account table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn AccountIdColumn
			{
				get
				{
					return this.columnAccountId;
				}
			}
			
			/// <summary>
			/// Gets the AccountKey index on the Account table.
			/// </summary>
			public AccountKeyIndex AccountKey
			{
				get
				{
					return ((AccountKeyIndex)(this.indexAccountKey));
				}
			}
			
			/// <summary>
			/// Gets the child relation between the Account and Position tables.
			/// </summary>
			internal global::System.Data.DataRelation AccountPositionRelation
			{
				get
				{
					return this.relationAccountPosition;
				}
			}
			
			/// <summary>
			/// Gets the child relation between the Account and PositionSeries tables.
			/// </summary>
			internal global::System.Data.DataRelation AccountPositionSeriesRelation
			{
				get
				{
					return this.relationAccountPositionSeries;
				}
			}
			
			/// <summary>
			/// Gets the child relation between the Account and SingleAccount tables.
			/// </summary>
			internal global::System.Data.DataRelation AccountSingleAccountRelation
			{
				get
				{
					return this.relationAccountSingleAccount;
				}
			}
			
			/// <summary>
			/// Gets the child relation between the Account and TaxLot tables.
			/// </summary>
			internal global::System.Data.DataRelation AccountTaxLotRelation
			{
				get
				{
					return this.relationAccountTaxLot;
				}
			}
			
			/// <summary>
			/// Gets the child relation between the Account and TaxLotSeries tables.
			/// </summary>
			internal global::System.Data.DataRelation AccountTaxLotSeriesRelation
			{
				get
				{
					return this.relationAccountTaxLotSeries;
				}
			}
			
			/// <summary>
			/// Gets the number of rows in the Account table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public int Count
			{
				get
				{
					return this.Rows.Count;
				}
			}
			
			/// <summary>
			/// Gets the parent relation between the Currency and Account tables.
			/// </summary>
			public global::System.Data.DataRelation CurrencyAccountRelation
			{
				get
				{
					return this.relationCurrencyAccount;
				}
			}
			
			/// <summary>
			/// Gets the CurrencyId column of the Account table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn CurrencyIdColumn
			{
				get
				{
					return this.columnCurrencyId;
				}
			}
			
			/// <summary>
			/// Gets the parent relation between the Entity and Account tables.
			/// </summary>
			public global::System.Data.DataRelation EntityAccountRelation
			{
				get
				{
					return this.relationEntityAccount;
				}
			}
			
			/// <summary>
			/// Gets a collection of Teraque.DataModelGenerator.DataIndices on a table.
			/// </summary>
			public global::Teraque.DataIndexCollection Indices
			{
				get
				{
					return this.dataIndices;
				}
			}
			
			/// <summary>
			/// Indexer to a row in the Account table.
			/// </summary>
			/// <param name="index">The integer index of the row.</param>
			/// <returns>The Account row found at the given index.</returns>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public DataModel.AccountRow this[int index]
			{
				get
				{
					return ((DataModel.AccountRow)(this.Rows[index]));
				}
			}
			
			/// <summary>
			/// Gets the Mnemonic column of the Account table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn MnemonicColumn
			{
				get
				{
					return this.columnMnemonic;
				}
			}
			
			/// <summary>
			/// Gets the RowVersion column of the Account table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn RowVersionColumn
			{
				get
				{
					return this.columnRowVersion;
				}
			}
			
			/// <summary>
			/// Occurs after a Account row has been changed successfully.
			/// </summary>
			public event AccountRowChangeEventHandler AccountRowChanged;
			
			/// <summary>
			/// Occurs when a Account row is changing.
			/// </summary>
			public event AccountRowChangeEventHandler AccountRowChanging;
			
			/// <summary>
			/// Occurs after a Account row in the table has been deleted.
			/// </summary>
			public event AccountRowChangeEventHandler AccountRowDeleted;
			
			/// <summary>
			/// Occurs before a Account row in the table is about to be deleted.
			/// </summary>
			public event AccountRowChangeEventHandler AccountRowDeleting;
			
			/// <summary>
			/// Returns the type of the row in a Account table.
			/// </summary>
			/// <returns>The AccountRow type.</returns>
			protected override global::System.Type GetRowType()
			{
				return typeof(AccountRow);
			}
			
			/// <summary>
			/// Initializes the relation fields with the parent and child relations.
			/// </summary>
			internal void InitializeRelations()
			{
				this.relationCurrencyAccount = this.ParentRelations["FK_Currency_Account"];
				this.relationEntityAccount = this.ParentRelations["FK_Entity_Account"];
				this.relationAccountAccountSeries = this.ChildRelations["FK_Account_AccountSeries"];
				this.relationAccountAllocation = this.ChildRelations["FK_Account_Allocation"];
				this.relationAccountGroupAccount = this.ChildRelations["FK_Account_GroupAccount"];
				this.relationAccountPosition = this.ChildRelations["FK_Account_Position"];
				this.relationAccountPositionSeries = this.ChildRelations["FK_Account_PositionSeries"];
				this.relationAccountSingleAccount = this.ChildRelations["FK_Account_SingleAccount"];
				this.relationAccountTaxLot = this.ChildRelations["FK_Account_TaxLot"];
				this.relationAccountTaxLotSeries = this.ChildRelations["FK_Account_TaxLotSeries"];
			}
			
			/// <summary>
			/// Initializes a new instance of a Account row.  Constructs a row from the builder.  Only for internal usage.
			/// </summary>
			/// <returns>A new row with the same schema as the table.</returns>
			protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder dataRowBuilder)
			{
				return new AccountRow(dataRowBuilder);
			}
			
			/// <summary>
			/// Raises the AccountRowChanged event.
			/// </summary>
			/// <param name="e">Provides data for the AccountRow changing and deleting events.</param>
			protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowChanged(e);
				if ((this.AccountRowChanged != null))
				{
					this.AccountRowChanged(this, new AccountRowChangeEventArgs(((AccountRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the AccountRowChanging event.
			/// </summary>
			/// <param name="e">Provides data for the AccountRow changing and deleting events.</param>
			protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowChanging(e);
				if ((this.AccountRowChanging != null))
				{
					this.AccountRowChanging(this, new AccountRowChangeEventArgs(((AccountRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the AccountRowDeleted event.
			/// </summary>
			/// <param name="e">Provides data for the AccountRow changing and deleting events.</param>
			protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowDeleted(e);
				if ((this.AccountRowDeleted != null))
				{
					this.AccountRowDeleted(this, new AccountRowChangeEventArgs(((AccountRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the AccountRowDeleting event.
			/// </summary>
			/// <param name="e">Provides data for the AccountRow changing and deleting events.</param>
			protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowDeleting(e);
				if ((this.AccountRowDeleting != null))
				{
					this.AccountRowDeleting(this, new AccountRowChangeEventArgs(((AccountRow)(e.Row)), e.Action));
				}
			}
		}
		
		/// <summary>
		/// The AccountSeries table.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public partial class AccountSeriesDataTable : global::System.Data.TypedTableBase<DataModel.AccountSeriesRow>
		{
			
			private global::System.Data.DataColumn columnAccountSeriesId;
			
			private global::System.Data.DataColumn columnDate;
			
			private global::System.Data.DataColumn columnMonthToDayLinkedReturn;
			
			private global::System.Data.DataColumn columnMonthToDayProfitAndLoss;
			
			private global::System.Data.DataColumn columnQuarterToDayLinkedReturn;
			
			private global::System.Data.DataColumn columnQuarterToDayProfitAndLoss;
			
			private global::System.Data.DataColumn columnRowVersion;
			
			private global::System.Data.DataColumn columnTotalExposureBase;
			
			private global::System.Data.DataColumn columnTotalExposureLocal;
			
			private global::System.Data.DataColumn columnTotalMarketValueBase;
			
			private global::System.Data.DataColumn columnTotalMarketValueLocal;
			
			private global::System.Data.DataColumn columnTrailingOneDayLinkedReturn;
			
			private global::System.Data.DataColumn columnTrailingOneDayProfitAndLoss;
			
			private global::System.Data.DataColumn columnTrailingOneMonthLinkedReturn;
			
			private global::System.Data.DataColumn columnTrailingOneMonthProfitAndLoss;
			
			private global::System.Data.DataColumn columnTrailingOneYearLinkedReturn;
			
			private global::System.Data.DataColumn columnTrailingOneYearProfitAndLoss;
			
			private global::System.Data.DataColumn columnTrailingSixMonthLinkedReturn;
			
			private global::System.Data.DataColumn columnTrailingSixMonthProfitAndLoss;
			
			private global::System.Data.DataColumn columnTrailingThreeMonthLinkedReturn;
			
			private global::System.Data.DataColumn columnTrailingThreeMonthProfitAndLoss;
			
			private global::System.Data.DataColumn columnYearToDayLinkedReturn;
			
			private global::System.Data.DataColumn columnYearToDayProfitAndLoss;
			
			private global::Teraque.DataIndexCollection dataIndices;
			
			private global::Teraque.DataIndex indexAccountSeriesKey;
			
			private global::System.Data.DataRelation relationAccountAccountSeries;
			
			/// <summary>
			/// Creates the AccountSeries table.
			/// </summary>
			internal AccountSeriesDataTable()
			{
				// Initialize the object.
				this.TableName = "AccountSeries";
				this.dataIndices = new global::Teraque.DataIndexCollection();
				// The AccountSeriesId Column
				this.columnAccountSeriesId = new global::System.Data.DataColumn("AccountSeriesId", typeof(System.Guid), null, global::System.Data.MappingType.Element);
				this.columnAccountSeriesId.AllowDBNull = false;
				this.Columns.Add(this.columnAccountSeriesId);
				// The Date Column
				this.columnDate = new global::System.Data.DataColumn("Date", typeof(System.DateTime), null, global::System.Data.MappingType.Element);
				this.columnDate.AllowDBNull = false;
				this.Columns.Add(this.columnDate);
				// The MonthToDayLinkedReturn Column
				this.columnMonthToDayLinkedReturn = new global::System.Data.DataColumn("MonthToDayLinkedReturn", typeof(decimal), null, global::System.Data.MappingType.Element);
				this.columnMonthToDayLinkedReturn.AllowDBNull = false;
				this.columnMonthToDayLinkedReturn.DefaultValue = 0.0m;
				this.Columns.Add(this.columnMonthToDayLinkedReturn);
				// The MonthToDayProfitAndLoss Column
				this.columnMonthToDayProfitAndLoss = new global::System.Data.DataColumn("MonthToDayProfitAndLoss", typeof(decimal), null, global::System.Data.MappingType.Element);
				this.columnMonthToDayProfitAndLoss.AllowDBNull = false;
				this.columnMonthToDayProfitAndLoss.DefaultValue = 0.0m;
				this.Columns.Add(this.columnMonthToDayProfitAndLoss);
				// The QuarterToDayLinkedReturn Column
				this.columnQuarterToDayLinkedReturn = new global::System.Data.DataColumn("QuarterToDayLinkedReturn", typeof(decimal), null, global::System.Data.MappingType.Element);
				this.columnQuarterToDayLinkedReturn.AllowDBNull = false;
				this.columnQuarterToDayLinkedReturn.DefaultValue = 0.0m;
				this.Columns.Add(this.columnQuarterToDayLinkedReturn);
				// The QuarterToDayProfitAndLoss Column
				this.columnQuarterToDayProfitAndLoss = new global::System.Data.DataColumn("QuarterToDayProfitAndLoss", typeof(decimal), null, global::System.Data.MappingType.Element);
				this.columnQuarterToDayProfitAndLoss.AllowDBNull = false;
				this.columnQuarterToDayProfitAndLoss.DefaultValue = 0.0m;
				this.Columns.Add(this.columnQuarterToDayProfitAndLoss);
				// The RowVersion Column
				this.columnRowVersion = new global::System.Data.DataColumn("RowVersion", typeof(long), null, global::System.Data.MappingType.Element);
				this.columnRowVersion.AllowDBNull = false;
				this.Columns.Add(this.columnRowVersion);
				// The TotalExposureBase Column
				this.columnTotalExposureBase = new global::System.Data.DataColumn("TotalExposureBase", typeof(decimal), null, global::System.Data.MappingType.Element);
				this.columnTotalExposureBase.AllowDBNull = false;
				this.columnTotalExposureBase.DefaultValue = 0.0m;
				this.Columns.Add(this.columnTotalExposureBase);
				// The TotalExposureLocal Column
				this.columnTotalExposureLocal = new global::System.Data.DataColumn("TotalExposureLocal", typeof(decimal), null, global::System.Data.MappingType.Element);
				this.columnTotalExposureLocal.AllowDBNull = false;
				this.columnTotalExposureLocal.DefaultValue = 0.0m;
				this.Columns.Add(this.columnTotalExposureLocal);
				// The TotalMarketValueBase Column
				this.columnTotalMarketValueBase = new global::System.Data.DataColumn("TotalMarketValueBase", typeof(decimal), null, global::System.Data.MappingType.Element);
				this.columnTotalMarketValueBase.AllowDBNull = false;
				this.columnTotalMarketValueBase.DefaultValue = 0.0m;
				this.Columns.Add(this.columnTotalMarketValueBase);
				// The TotalMarketValueLocal Column
				this.columnTotalMarketValueLocal = new global::System.Data.DataColumn("TotalMarketValueLocal", typeof(decimal), null, global::System.Data.MappingType.Element);
				this.columnTotalMarketValueLocal.AllowDBNull = false;
				this.columnTotalMarketValueLocal.DefaultValue = 0.0m;
				this.Columns.Add(this.columnTotalMarketValueLocal);
				// The TrailingOneDayLinkedReturn Column
				this.columnTrailingOneDayLinkedReturn = new global::System.Data.DataColumn("TrailingOneDayLinkedReturn", typeof(decimal), null, global::System.Data.MappingType.Element);
				this.columnTrailingOneDayLinkedReturn.AllowDBNull = false;
				this.columnTrailingOneDayLinkedReturn.DefaultValue = 0.0m;
				this.Columns.Add(this.columnTrailingOneDayLinkedReturn);
				// The TrailingOneDayProfitAndLoss Column
				this.columnTrailingOneDayProfitAndLoss = new global::System.Data.DataColumn("TrailingOneDayProfitAndLoss", typeof(decimal), null, global::System.Data.MappingType.Element);
				this.columnTrailingOneDayProfitAndLoss.AllowDBNull = false;
				this.columnTrailingOneDayProfitAndLoss.DefaultValue = 0.0m;
				this.Columns.Add(this.columnTrailingOneDayProfitAndLoss);
				// The TrailingOneMonthLinkedReturn Column
				this.columnTrailingOneMonthLinkedReturn = new global::System.Data.DataColumn("TrailingOneMonthLinkedReturn", typeof(decimal), null, global::System.Data.MappingType.Element);
				this.columnTrailingOneMonthLinkedReturn.AllowDBNull = false;
				this.columnTrailingOneMonthLinkedReturn.DefaultValue = 0.0m;
				this.Columns.Add(this.columnTrailingOneMonthLinkedReturn);
				// The TrailingOneMonthProfitAndLoss Column
				this.columnTrailingOneMonthProfitAndLoss = new global::System.Data.DataColumn("TrailingOneMonthProfitAndLoss", typeof(decimal), null, global::System.Data.MappingType.Element);
				this.columnTrailingOneMonthProfitAndLoss.AllowDBNull = false;
				this.columnTrailingOneMonthProfitAndLoss.DefaultValue = 0.0m;
				this.Columns.Add(this.columnTrailingOneMonthProfitAndLoss);
				// The TrailingOneYearLinkedReturn Column
				this.columnTrailingOneYearLinkedReturn = new global::System.Data.DataColumn("TrailingOneYearLinkedReturn", typeof(decimal), null, global::System.Data.MappingType.Element);
				this.columnTrailingOneYearLinkedReturn.AllowDBNull = false;
				this.columnTrailingOneYearLinkedReturn.DefaultValue = 0.0m;
				this.Columns.Add(this.columnTrailingOneYearLinkedReturn);
				// The TrailingOneYearProfitAndLoss Column
				this.columnTrailingOneYearProfitAndLoss = new global::System.Data.DataColumn("TrailingOneYearProfitAndLoss", typeof(decimal), null, global::System.Data.MappingType.Element);
				this.columnTrailingOneYearProfitAndLoss.AllowDBNull = false;
				this.columnTrailingOneYearProfitAndLoss.DefaultValue = 0.0m;
				this.Columns.Add(this.columnTrailingOneYearProfitAndLoss);
				// The TrailingSixMonthLinkedReturn Column
				this.columnTrailingSixMonthLinkedReturn = new global::System.Data.DataColumn("TrailingSixMonthLinkedReturn", typeof(decimal), null, global::System.Data.MappingType.Element);
				this.columnTrailingSixMonthLinkedReturn.AllowDBNull = false;
				this.columnTrailingSixMonthLinkedReturn.DefaultValue = 0.0m;
				this.Columns.Add(this.columnTrailingSixMonthLinkedReturn);
				// The TrailingSixMonthProfitAndLoss Column
				this.columnTrailingSixMonthProfitAndLoss = new global::System.Data.DataColumn("TrailingSixMonthProfitAndLoss", typeof(decimal), null, global::System.Data.MappingType.Element);
				this.columnTrailingSixMonthProfitAndLoss.AllowDBNull = false;
				this.columnTrailingSixMonthProfitAndLoss.DefaultValue = 0.0m;
				this.Columns.Add(this.columnTrailingSixMonthProfitAndLoss);
				// The TrailingThreeMonthLinkedReturn Column
				this.columnTrailingThreeMonthLinkedReturn = new global::System.Data.DataColumn("TrailingThreeMonthLinkedReturn", typeof(decimal), null, global::System.Data.MappingType.Element);
				this.columnTrailingThreeMonthLinkedReturn.AllowDBNull = false;
				this.columnTrailingThreeMonthLinkedReturn.DefaultValue = 0.0m;
				this.Columns.Add(this.columnTrailingThreeMonthLinkedReturn);
				// The TrailingThreeMonthProfitAndLoss Column
				this.columnTrailingThreeMonthProfitAndLoss = new global::System.Data.DataColumn("TrailingThreeMonthProfitAndLoss", typeof(decimal), null, global::System.Data.MappingType.Element);
				this.columnTrailingThreeMonthProfitAndLoss.AllowDBNull = false;
				this.columnTrailingThreeMonthProfitAndLoss.DefaultValue = 0.0m;
				this.Columns.Add(this.columnTrailingThreeMonthProfitAndLoss);
				// The YearToDayLinkedReturn Column
				this.columnYearToDayLinkedReturn = new global::System.Data.DataColumn("YearToDayLinkedReturn", typeof(decimal), null, global::System.Data.MappingType.Element);
				this.columnYearToDayLinkedReturn.AllowDBNull = false;
				this.columnYearToDayLinkedReturn.DefaultValue = 0.0m;
				this.Columns.Add(this.columnYearToDayLinkedReturn);
				// The YearToDayProfitAndLoss Column
				this.columnYearToDayProfitAndLoss = new global::System.Data.DataColumn("YearToDayProfitAndLoss", typeof(decimal), null, global::System.Data.MappingType.Element);
				this.columnYearToDayProfitAndLoss.AllowDBNull = false;
				this.columnYearToDayProfitAndLoss.DefaultValue = 0.0m;
				this.Columns.Add(this.columnYearToDayProfitAndLoss);
				// The AccountSeriesKey Index
				this.indexAccountSeriesKey = new AccountSeriesKeyIndex("AccountSeriesKey", new global::System.Data.DataColumn[] {
							this.columnAccountSeriesId,
							this.columnDate});
				this.Indices.Add(this.indexAccountSeriesKey);
			}
			
			/// <summary>
			/// Gets the parent relation between the Account and AccountSeries tables.
			/// </summary>
			public global::System.Data.DataRelation AccountAccountSeriesRelation
			{
				get
				{
					return this.relationAccountAccountSeries;
				}
			}
			
			/// <summary>
			/// Gets the AccountSeriesId column of the AccountSeries table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn AccountSeriesIdColumn
			{
				get
				{
					return this.columnAccountSeriesId;
				}
			}
			
			/// <summary>
			/// Gets the AccountSeriesKey index on the AccountSeries table.
			/// </summary>
			public AccountSeriesKeyIndex AccountSeriesKey
			{
				get
				{
					return ((AccountSeriesKeyIndex)(this.indexAccountSeriesKey));
				}
			}
			
			/// <summary>
			/// Gets the number of rows in the AccountSeries table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public int Count
			{
				get
				{
					return this.Rows.Count;
				}
			}
			
			/// <summary>
			/// Gets the Date column of the AccountSeries table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn DateColumn
			{
				get
				{
					return this.columnDate;
				}
			}
			
			/// <summary>
			/// Gets a collection of Teraque.DataModelGenerator.DataIndices on a table.
			/// </summary>
			public global::Teraque.DataIndexCollection Indices
			{
				get
				{
					return this.dataIndices;
				}
			}
			
			/// <summary>
			/// Indexer to a row in the AccountSeries table.
			/// </summary>
			/// <param name="index">The integer index of the row.</param>
			/// <returns>The AccountSeries row found at the given index.</returns>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public DataModel.AccountSeriesRow this[int index]
			{
				get
				{
					return ((DataModel.AccountSeriesRow)(this.Rows[index]));
				}
			}
			
			/// <summary>
			/// Gets the MonthToDayLinkedReturn column of the AccountSeries table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn MonthToDayLinkedReturnColumn
			{
				get
				{
					return this.columnMonthToDayLinkedReturn;
				}
			}
			
			/// <summary>
			/// Gets the MonthToDayProfitAndLoss column of the AccountSeries table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn MonthToDayProfitAndLossColumn
			{
				get
				{
					return this.columnMonthToDayProfitAndLoss;
				}
			}
			
			/// <summary>
			/// Gets the QuarterToDayLinkedReturn column of the AccountSeries table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn QuarterToDayLinkedReturnColumn
			{
				get
				{
					return this.columnQuarterToDayLinkedReturn;
				}
			}
			
			/// <summary>
			/// Gets the QuarterToDayProfitAndLoss column of the AccountSeries table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn QuarterToDayProfitAndLossColumn
			{
				get
				{
					return this.columnQuarterToDayProfitAndLoss;
				}
			}
			
			/// <summary>
			/// Gets the RowVersion column of the AccountSeries table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn RowVersionColumn
			{
				get
				{
					return this.columnRowVersion;
				}
			}
			
			/// <summary>
			/// Gets the TotalExposureBase column of the AccountSeries table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn TotalExposureBaseColumn
			{
				get
				{
					return this.columnTotalExposureBase;
				}
			}
			
			/// <summary>
			/// Gets the TotalExposureLocal column of the AccountSeries table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn TotalExposureLocalColumn
			{
				get
				{
					return this.columnTotalExposureLocal;
				}
			}
			
			/// <summary>
			/// Gets the TotalMarketValueBase column of the AccountSeries table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn TotalMarketValueBaseColumn
			{
				get
				{
					return this.columnTotalMarketValueBase;
				}
			}
			
			/// <summary>
			/// Gets the TotalMarketValueLocal column of the AccountSeries table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn TotalMarketValueLocalColumn
			{
				get
				{
					return this.columnTotalMarketValueLocal;
				}
			}
			
			/// <summary>
			/// Gets the TrailingOneDayLinkedReturn column of the AccountSeries table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn TrailingOneDayLinkedReturnColumn
			{
				get
				{
					return this.columnTrailingOneDayLinkedReturn;
				}
			}
			
			/// <summary>
			/// Gets the TrailingOneDayProfitAndLoss column of the AccountSeries table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn TrailingOneDayProfitAndLossColumn
			{
				get
				{
					return this.columnTrailingOneDayProfitAndLoss;
				}
			}
			
			/// <summary>
			/// Gets the TrailingOneMonthLinkedReturn column of the AccountSeries table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn TrailingOneMonthLinkedReturnColumn
			{
				get
				{
					return this.columnTrailingOneMonthLinkedReturn;
				}
			}
			
			/// <summary>
			/// Gets the TrailingOneMonthProfitAndLoss column of the AccountSeries table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn TrailingOneMonthProfitAndLossColumn
			{
				get
				{
					return this.columnTrailingOneMonthProfitAndLoss;
				}
			}
			
			/// <summary>
			/// Gets the TrailingOneYearLinkedReturn column of the AccountSeries table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn TrailingOneYearLinkedReturnColumn
			{
				get
				{
					return this.columnTrailingOneYearLinkedReturn;
				}
			}
			
			/// <summary>
			/// Gets the TrailingOneYearProfitAndLoss column of the AccountSeries table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn TrailingOneYearProfitAndLossColumn
			{
				get
				{
					return this.columnTrailingOneYearProfitAndLoss;
				}
			}
			
			/// <summary>
			/// Gets the TrailingSixMonthLinkedReturn column of the AccountSeries table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn TrailingSixMonthLinkedReturnColumn
			{
				get
				{
					return this.columnTrailingSixMonthLinkedReturn;
				}
			}
			
			/// <summary>
			/// Gets the TrailingSixMonthProfitAndLoss column of the AccountSeries table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn TrailingSixMonthProfitAndLossColumn
			{
				get
				{
					return this.columnTrailingSixMonthProfitAndLoss;
				}
			}
			
			/// <summary>
			/// Gets the TrailingThreeMonthLinkedReturn column of the AccountSeries table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn TrailingThreeMonthLinkedReturnColumn
			{
				get
				{
					return this.columnTrailingThreeMonthLinkedReturn;
				}
			}
			
			/// <summary>
			/// Gets the TrailingThreeMonthProfitAndLoss column of the AccountSeries table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn TrailingThreeMonthProfitAndLossColumn
			{
				get
				{
					return this.columnTrailingThreeMonthProfitAndLoss;
				}
			}
			
			/// <summary>
			/// Gets the YearToDayLinkedReturn column of the AccountSeries table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn YearToDayLinkedReturnColumn
			{
				get
				{
					return this.columnYearToDayLinkedReturn;
				}
			}
			
			/// <summary>
			/// Gets the YearToDayProfitAndLoss column of the AccountSeries table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn YearToDayProfitAndLossColumn
			{
				get
				{
					return this.columnYearToDayProfitAndLoss;
				}
			}
			
			/// <summary>
			/// Occurs after a AccountSeries row has been changed successfully.
			/// </summary>
			public event AccountSeriesRowChangeEventHandler AccountSeriesRowChanged;
			
			/// <summary>
			/// Occurs when a AccountSeries row is changing.
			/// </summary>
			public event AccountSeriesRowChangeEventHandler AccountSeriesRowChanging;
			
			/// <summary>
			/// Occurs after a AccountSeries row in the table has been deleted.
			/// </summary>
			public event AccountSeriesRowChangeEventHandler AccountSeriesRowDeleted;
			
			/// <summary>
			/// Occurs before a AccountSeries row in the table is about to be deleted.
			/// </summary>
			public event AccountSeriesRowChangeEventHandler AccountSeriesRowDeleting;
			
			/// <summary>
			/// Returns the type of the row in a AccountSeries table.
			/// </summary>
			/// <returns>The AccountSeriesRow type.</returns>
			protected override global::System.Type GetRowType()
			{
				return typeof(AccountSeriesRow);
			}
			
			/// <summary>
			/// Initializes the relation fields with the parent and child relations.
			/// </summary>
			internal void InitializeRelations()
			{
				this.relationAccountAccountSeries = this.ParentRelations["FK_Account_AccountSeries"];
			}
			
			/// <summary>
			/// Initializes a new instance of a AccountSeries row.  Constructs a row from the builder.  Only for internal usage.
			/// </summary>
			/// <returns>A new row with the same schema as the table.</returns>
			protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder dataRowBuilder)
			{
				return new AccountSeriesRow(dataRowBuilder);
			}
			
			/// <summary>
			/// Raises the AccountSeriesRowChanged event.
			/// </summary>
			/// <param name="e">Provides data for the AccountSeriesRow changing and deleting events.</param>
			protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowChanged(e);
				if ((this.AccountSeriesRowChanged != null))
				{
					this.AccountSeriesRowChanged(this, new AccountSeriesRowChangeEventArgs(((AccountSeriesRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the AccountSeriesRowChanging event.
			/// </summary>
			/// <param name="e">Provides data for the AccountSeriesRow changing and deleting events.</param>
			protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowChanging(e);
				if ((this.AccountSeriesRowChanging != null))
				{
					this.AccountSeriesRowChanging(this, new AccountSeriesRowChangeEventArgs(((AccountSeriesRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the AccountSeriesRowDeleted event.
			/// </summary>
			/// <param name="e">Provides data for the AccountSeriesRow changing and deleting events.</param>
			protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowDeleted(e);
				if ((this.AccountSeriesRowDeleted != null))
				{
					this.AccountSeriesRowDeleted(this, new AccountSeriesRowChangeEventArgs(((AccountSeriesRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the AccountSeriesRowDeleting event.
			/// </summary>
			/// <param name="e">Provides data for the AccountSeriesRow changing and deleting events.</param>
			protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowDeleting(e);
				if ((this.AccountSeriesRowDeleting != null))
				{
					this.AccountSeriesRowDeleting(this, new AccountSeriesRowChangeEventArgs(((AccountSeriesRow)(e.Row)), e.Action));
				}
			}
		}
		
		/// <summary>
		/// The Allocation table.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public partial class AllocationDataTable : global::System.Data.TypedTableBase<DataModel.AllocationRow>
		{
			
			private global::System.Data.DataColumn columnAccountId;
			
			private global::System.Data.DataColumn columnAccruedInterest;
			
			private global::System.Data.DataColumn columnAllocationId;
			
			private global::System.Data.DataColumn columnCommission;
			
			private global::System.Data.DataColumn columnCreatedTime;
			
			private global::System.Data.DataColumn columnCreatedUserId;
			
			private global::System.Data.DataColumn columnExternalId0;
			
			private global::System.Data.DataColumn columnModifiedTime;
			
			private global::System.Data.DataColumn columnModifiedUserId;
			
			private global::System.Data.DataColumn columnPositionTypeCode;
			
			private global::System.Data.DataColumn columnPrice;
			
			private global::System.Data.DataColumn columnQuantity;
			
			private global::System.Data.DataColumn columnRowVersion;
			
			private global::System.Data.DataColumn columnSecurityId;
			
			private global::System.Data.DataColumn columnSettlementDate;
			
			private global::System.Data.DataColumn columnSettlementId;
			
			private global::System.Data.DataColumn columnSideCode;
			
			private global::System.Data.DataColumn columnTradeDate;
			
			private global::System.Data.DataColumn columnUserFee0;
			
			private global::System.Data.DataColumn columnUserFee1;
			
			private global::System.Data.DataColumn columnUserFee2;
			
			private global::System.Data.DataColumn columnUserFee3;
			
			private global::System.Data.DataColumn columnWorkingOrderId;
			
			private global::Teraque.DataIndexCollection dataIndices;
			
			private global::Teraque.DataIndex indexAllocationKey;
			
			private global::Teraque.DataIndex indexAllocationKeyAccountIdSecurityIdPositionTypeCode;
			
			private global::System.Data.DataRelation relationAccountAllocation;
			
			private global::System.Data.DataRelation relationSecurityAllocationByFK_Security_Allocation_SecurityId;
			
			private global::System.Data.DataRelation relationSecurityAllocationByFK_Security_Allocation_SettlementId;
			
			private global::System.Data.DataRelation relationSideAllocation;
			
			private global::System.Data.DataRelation relationUserAllocationByFK_User_Allocation_CreatedUserId;
			
			private global::System.Data.DataRelation relationUserAllocationByFK_User_Allocation_ModifiedUserId;
			
			private global::System.Data.DataRelation relationWorkingOrderAllocation;
			
			/// <summary>
			/// Creates the Allocation table.
			/// </summary>
			internal AllocationDataTable()
			{
				// Initialize the object.
				this.TableName = "Allocation";
				this.dataIndices = new global::Teraque.DataIndexCollection();
				// The AccountId Column
				this.columnAccountId = new global::System.Data.DataColumn("AccountId", typeof(System.Guid), null, global::System.Data.MappingType.Element);
				this.columnAccountId.AllowDBNull = false;
				this.Columns.Add(this.columnAccountId);
				// The AccruedInterest Column
				this.columnAccruedInterest = new global::System.Data.DataColumn("AccruedInterest", typeof(decimal), null, global::System.Data.MappingType.Element);
				this.columnAccruedInterest.AllowDBNull = false;
				this.columnAccruedInterest.DefaultValue = 0.0m;
				this.Columns.Add(this.columnAccruedInterest);
				// The AllocationId Column
				this.columnAllocationId = new global::System.Data.DataColumn("AllocationId", typeof(System.Guid), null, global::System.Data.MappingType.Element);
				this.columnAllocationId.AllowDBNull = false;
				this.Columns.Add(this.columnAllocationId);
				// The Commission Column
				this.columnCommission = new global::System.Data.DataColumn("Commission", typeof(decimal), null, global::System.Data.MappingType.Element);
				this.columnCommission.AllowDBNull = false;
				this.columnCommission.DefaultValue = 0.0m;
				this.Columns.Add(this.columnCommission);
				// The CreatedTime Column
				this.columnCreatedTime = new global::System.Data.DataColumn("CreatedTime", typeof(System.DateTime), null, global::System.Data.MappingType.Element);
				this.columnCreatedTime.AllowDBNull = false;
				this.Columns.Add(this.columnCreatedTime);
				// The CreatedUserId Column
				this.columnCreatedUserId = new global::System.Data.DataColumn("CreatedUserId", typeof(System.Guid), null, global::System.Data.MappingType.Element);
				this.columnCreatedUserId.AllowDBNull = false;
				this.Columns.Add(this.columnCreatedUserId);
				// The ExternalId0 Column
				this.columnExternalId0 = new global::System.Data.DataColumn("ExternalId0", typeof(string), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnExternalId0);
				// The ModifiedTime Column
				this.columnModifiedTime = new global::System.Data.DataColumn("ModifiedTime", typeof(System.DateTime), null, global::System.Data.MappingType.Element);
				this.columnModifiedTime.AllowDBNull = false;
				this.Columns.Add(this.columnModifiedTime);
				// The ModifiedUserId Column
				this.columnModifiedUserId = new global::System.Data.DataColumn("ModifiedUserId", typeof(System.Guid), null, global::System.Data.MappingType.Element);
				this.columnModifiedUserId.AllowDBNull = false;
				this.Columns.Add(this.columnModifiedUserId);
				// The PositionTypeCode Column
				this.columnPositionTypeCode = new global::System.Data.DataColumn("PositionTypeCode", typeof(Teraque.PositionTypeCode), null, global::System.Data.MappingType.Element);
				this.columnPositionTypeCode.AllowDBNull = false;
				this.Columns.Add(this.columnPositionTypeCode);
				// The Price Column
				this.columnPrice = new global::System.Data.DataColumn("Price", typeof(decimal), null, global::System.Data.MappingType.Element);
				this.columnPrice.AllowDBNull = false;
				this.columnPrice.DefaultValue = 0.0m;
				this.Columns.Add(this.columnPrice);
				// The Quantity Column
				this.columnQuantity = new global::System.Data.DataColumn("Quantity", typeof(decimal), null, global::System.Data.MappingType.Element);
				this.columnQuantity.AllowDBNull = false;
				this.columnQuantity.DefaultValue = 0.0m;
				this.Columns.Add(this.columnQuantity);
				// The RowVersion Column
				this.columnRowVersion = new global::System.Data.DataColumn("RowVersion", typeof(long), null, global::System.Data.MappingType.Element);
				this.columnRowVersion.AllowDBNull = false;
				this.Columns.Add(this.columnRowVersion);
				// The SecurityId Column
				this.columnSecurityId = new global::System.Data.DataColumn("SecurityId", typeof(System.Guid), null, global::System.Data.MappingType.Element);
				this.columnSecurityId.AllowDBNull = false;
				this.Columns.Add(this.columnSecurityId);
				// The SettlementDate Column
				this.columnSettlementDate = new global::System.Data.DataColumn("SettlementDate", typeof(System.DateTime), null, global::System.Data.MappingType.Element);
				this.columnSettlementDate.AllowDBNull = false;
				this.Columns.Add(this.columnSettlementDate);
				// The SettlementId Column
				this.columnSettlementId = new global::System.Data.DataColumn("SettlementId", typeof(System.Guid), null, global::System.Data.MappingType.Element);
				this.columnSettlementId.AllowDBNull = false;
				this.Columns.Add(this.columnSettlementId);
				// The SideCode Column
				this.columnSideCode = new global::System.Data.DataColumn("SideCode", typeof(Teraque.SideCode), null, global::System.Data.MappingType.Element);
				this.columnSideCode.AllowDBNull = false;
				this.Columns.Add(this.columnSideCode);
				// The TradeDate Column
				this.columnTradeDate = new global::System.Data.DataColumn("TradeDate", typeof(System.DateTime), null, global::System.Data.MappingType.Element);
				this.columnTradeDate.AllowDBNull = false;
				this.Columns.Add(this.columnTradeDate);
				// The UserFee0 Column
				this.columnUserFee0 = new global::System.Data.DataColumn("UserFee0", typeof(decimal), null, global::System.Data.MappingType.Element);
				this.columnUserFee0.AllowDBNull = false;
				this.columnUserFee0.DefaultValue = 0.0m;
				this.Columns.Add(this.columnUserFee0);
				// The UserFee1 Column
				this.columnUserFee1 = new global::System.Data.DataColumn("UserFee1", typeof(decimal), null, global::System.Data.MappingType.Element);
				this.columnUserFee1.AllowDBNull = false;
				this.columnUserFee1.DefaultValue = 0.0m;
				this.Columns.Add(this.columnUserFee1);
				// The UserFee2 Column
				this.columnUserFee2 = new global::System.Data.DataColumn("UserFee2", typeof(decimal), null, global::System.Data.MappingType.Element);
				this.columnUserFee2.AllowDBNull = false;
				this.columnUserFee2.DefaultValue = 0.0m;
				this.Columns.Add(this.columnUserFee2);
				// The UserFee3 Column
				this.columnUserFee3 = new global::System.Data.DataColumn("UserFee3", typeof(decimal), null, global::System.Data.MappingType.Element);
				this.columnUserFee3.AllowDBNull = false;
				this.columnUserFee3.DefaultValue = 0.0m;
				this.Columns.Add(this.columnUserFee3);
				// The WorkingOrderId Column
				this.columnWorkingOrderId = new global::System.Data.DataColumn("WorkingOrderId", typeof(System.Guid), null, global::System.Data.MappingType.Element);
				this.columnWorkingOrderId.AllowDBNull = false;
				this.Columns.Add(this.columnWorkingOrderId);
				// The AllocationKey Index
				this.indexAllocationKey = new AllocationKeyIndex("AllocationKey", new global::System.Data.DataColumn[] {
							this.columnAllocationId});
				this.Indices.Add(this.indexAllocationKey);
				// The AllocationKeyAccountIdSecurityIdPositionTypeCode Index
				this.indexAllocationKeyAccountIdSecurityIdPositionTypeCode = new AllocationKeyAccountIdSecurityIdPositionTypeCodeIndex("AllocationKeyAccountIdSecurityIdPositionTypeCode", new global::System.Data.DataColumn[] {
							this.columnAccountId,
							this.columnSecurityId,
							this.columnPositionTypeCode});
				this.Constraints.Add(new global::System.Data.UniqueConstraint(new global::System.Data.DataColumn[] {
								this.columnAccountId,
								this.columnSecurityId,
								this.columnPositionTypeCode}));
				this.Indices.Add(this.indexAllocationKeyAccountIdSecurityIdPositionTypeCode);
			}
			
			/// <summary>
			/// Gets the parent relation between the Account and Allocation tables.
			/// </summary>
			public global::System.Data.DataRelation AccountAllocationRelation
			{
				get
				{
					return this.relationAccountAllocation;
				}
			}
			
			/// <summary>
			/// Gets the AccountId column of the Allocation table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn AccountIdColumn
			{
				get
				{
					return this.columnAccountId;
				}
			}
			
			/// <summary>
			/// Gets the AccruedInterest column of the Allocation table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn AccruedInterestColumn
			{
				get
				{
					return this.columnAccruedInterest;
				}
			}
			
			/// <summary>
			/// Gets the AllocationId column of the Allocation table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn AllocationIdColumn
			{
				get
				{
					return this.columnAllocationId;
				}
			}
			
			/// <summary>
			/// Gets the AllocationKey index on the Allocation table.
			/// </summary>
			public AllocationKeyIndex AllocationKey
			{
				get
				{
					return ((AllocationKeyIndex)(this.indexAllocationKey));
				}
			}
			
			/// <summary>
			/// Gets the AllocationKeyAccountIdSecurityIdPositionTypeCode index on the Allocation table.
			/// </summary>
			public AllocationKeyAccountIdSecurityIdPositionTypeCodeIndex AllocationKeyAccountIdSecurityIdPositionTypeCode
			{
				get
				{
					return ((AllocationKeyAccountIdSecurityIdPositionTypeCodeIndex)(this.indexAllocationKeyAccountIdSecurityIdPositionTypeCode));
				}
			}
			
			/// <summary>
			/// Gets the Commission column of the Allocation table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn CommissionColumn
			{
				get
				{
					return this.columnCommission;
				}
			}
			
			/// <summary>
			/// Gets the number of rows in the Allocation table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public int Count
			{
				get
				{
					return this.Rows.Count;
				}
			}
			
			/// <summary>
			/// Gets the CreatedTime column of the Allocation table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn CreatedTimeColumn
			{
				get
				{
					return this.columnCreatedTime;
				}
			}
			
			/// <summary>
			/// Gets the CreatedUserId column of the Allocation table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn CreatedUserIdColumn
			{
				get
				{
					return this.columnCreatedUserId;
				}
			}
			
			/// <summary>
			/// Gets the ExternalId0 column of the Allocation table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn ExternalId0Column
			{
				get
				{
					return this.columnExternalId0;
				}
			}
			
			/// <summary>
			/// Gets a collection of Teraque.DataModelGenerator.DataIndices on a table.
			/// </summary>
			public global::Teraque.DataIndexCollection Indices
			{
				get
				{
					return this.dataIndices;
				}
			}
			
			/// <summary>
			/// Indexer to a row in the Allocation table.
			/// </summary>
			/// <param name="index">The integer index of the row.</param>
			/// <returns>The Allocation row found at the given index.</returns>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public DataModel.AllocationRow this[int index]
			{
				get
				{
					return ((DataModel.AllocationRow)(this.Rows[index]));
				}
			}
			
			/// <summary>
			/// Gets the ModifiedTime column of the Allocation table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn ModifiedTimeColumn
			{
				get
				{
					return this.columnModifiedTime;
				}
			}
			
			/// <summary>
			/// Gets the ModifiedUserId column of the Allocation table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn ModifiedUserIdColumn
			{
				get
				{
					return this.columnModifiedUserId;
				}
			}
			
			/// <summary>
			/// Gets the PositionTypeCode column of the Allocation table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn PositionTypeCodeColumn
			{
				get
				{
					return this.columnPositionTypeCode;
				}
			}
			
			/// <summary>
			/// Gets the Price column of the Allocation table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn PriceColumn
			{
				get
				{
					return this.columnPrice;
				}
			}
			
			/// <summary>
			/// Gets the Quantity column of the Allocation table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn QuantityColumn
			{
				get
				{
					return this.columnQuantity;
				}
			}
			
			/// <summary>
			/// Gets the RowVersion column of the Allocation table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn RowVersionColumn
			{
				get
				{
					return this.columnRowVersion;
				}
			}
			
			/// <summary>
			/// Gets the parent relation between the Security and Allocation tables.
			/// </summary>
			public global::System.Data.DataRelation SecurityAllocationByFK_Security_Allocation_SecurityIdRelation
			{
				get
				{
					return this.relationSecurityAllocationByFK_Security_Allocation_SecurityId;
				}
			}
			
			/// <summary>
			/// Gets the parent relation between the Security and Allocation tables.
			/// </summary>
			public global::System.Data.DataRelation SecurityAllocationByFK_Security_Allocation_SettlementIdRelation
			{
				get
				{
					return this.relationSecurityAllocationByFK_Security_Allocation_SettlementId;
				}
			}
			
			/// <summary>
			/// Gets the SecurityId column of the Allocation table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn SecurityIdColumn
			{
				get
				{
					return this.columnSecurityId;
				}
			}
			
			/// <summary>
			/// Gets the SettlementDate column of the Allocation table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn SettlementDateColumn
			{
				get
				{
					return this.columnSettlementDate;
				}
			}
			
			/// <summary>
			/// Gets the SettlementId column of the Allocation table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn SettlementIdColumn
			{
				get
				{
					return this.columnSettlementId;
				}
			}
			
			/// <summary>
			/// Gets the parent relation between the Side and Allocation tables.
			/// </summary>
			public global::System.Data.DataRelation SideAllocationRelation
			{
				get
				{
					return this.relationSideAllocation;
				}
			}
			
			/// <summary>
			/// Gets the SideCode column of the Allocation table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn SideCodeColumn
			{
				get
				{
					return this.columnSideCode;
				}
			}
			
			/// <summary>
			/// Gets the TradeDate column of the Allocation table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn TradeDateColumn
			{
				get
				{
					return this.columnTradeDate;
				}
			}
			
			/// <summary>
			/// Gets the parent relation between the User and Allocation tables.
			/// </summary>
			public global::System.Data.DataRelation UserAllocationByFK_User_Allocation_CreatedUserIdRelation
			{
				get
				{
					return this.relationUserAllocationByFK_User_Allocation_CreatedUserId;
				}
			}
			
			/// <summary>
			/// Gets the parent relation between the User and Allocation tables.
			/// </summary>
			public global::System.Data.DataRelation UserAllocationByFK_User_Allocation_ModifiedUserIdRelation
			{
				get
				{
					return this.relationUserAllocationByFK_User_Allocation_ModifiedUserId;
				}
			}
			
			/// <summary>
			/// Gets the UserFee0 column of the Allocation table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn UserFee0Column
			{
				get
				{
					return this.columnUserFee0;
				}
			}
			
			/// <summary>
			/// Gets the UserFee1 column of the Allocation table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn UserFee1Column
			{
				get
				{
					return this.columnUserFee1;
				}
			}
			
			/// <summary>
			/// Gets the UserFee2 column of the Allocation table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn UserFee2Column
			{
				get
				{
					return this.columnUserFee2;
				}
			}
			
			/// <summary>
			/// Gets the UserFee3 column of the Allocation table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn UserFee3Column
			{
				get
				{
					return this.columnUserFee3;
				}
			}
			
			/// <summary>
			/// Gets the parent relation between the WorkingOrder and Allocation tables.
			/// </summary>
			public global::System.Data.DataRelation WorkingOrderAllocationRelation
			{
				get
				{
					return this.relationWorkingOrderAllocation;
				}
			}
			
			/// <summary>
			/// Gets the WorkingOrderId column of the Allocation table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn WorkingOrderIdColumn
			{
				get
				{
					return this.columnWorkingOrderId;
				}
			}
			
			/// <summary>
			/// Occurs after a Allocation row has been changed successfully.
			/// </summary>
			public event AllocationRowChangeEventHandler AllocationRowChanged;
			
			/// <summary>
			/// Occurs when a Allocation row is changing.
			/// </summary>
			public event AllocationRowChangeEventHandler AllocationRowChanging;
			
			/// <summary>
			/// Occurs after a Allocation row in the table has been deleted.
			/// </summary>
			public event AllocationRowChangeEventHandler AllocationRowDeleted;
			
			/// <summary>
			/// Occurs before a Allocation row in the table is about to be deleted.
			/// </summary>
			public event AllocationRowChangeEventHandler AllocationRowDeleting;
			
			/// <summary>
			/// Returns the type of the row in a Allocation table.
			/// </summary>
			/// <returns>The AllocationRow type.</returns>
			protected override global::System.Type GetRowType()
			{
				return typeof(AllocationRow);
			}
			
			/// <summary>
			/// Initializes the relation fields with the parent and child relations.
			/// </summary>
			internal void InitializeRelations()
			{
				this.relationAccountAllocation = this.ParentRelations["FK_Account_Allocation"];
				this.relationSecurityAllocationByFK_Security_Allocation_SecurityId = this.ParentRelations["FK_Security_Allocation_SecurityId"];
				this.relationSecurityAllocationByFK_Security_Allocation_SettlementId = this.ParentRelations["FK_Security_Allocation_SettlementId"];
				this.relationSideAllocation = this.ParentRelations["FK_Side_Allocation"];
				this.relationUserAllocationByFK_User_Allocation_CreatedUserId = this.ParentRelations["FK_User_Allocation_CreatedUserId"];
				this.relationUserAllocationByFK_User_Allocation_ModifiedUserId = this.ParentRelations["FK_User_Allocation_ModifiedUserId"];
				this.relationWorkingOrderAllocation = this.ParentRelations["FK_WorkingOrder_Allocation"];
			}
			
			/// <summary>
			/// Initializes a new instance of a Allocation row.  Constructs a row from the builder.  Only for internal usage.
			/// </summary>
			/// <returns>A new row with the same schema as the table.</returns>
			protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder dataRowBuilder)
			{
				return new AllocationRow(dataRowBuilder);
			}
			
			/// <summary>
			/// Raises the AllocationRowChanged event.
			/// </summary>
			/// <param name="e">Provides data for the AllocationRow changing and deleting events.</param>
			protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowChanged(e);
				if ((this.AllocationRowChanged != null))
				{
					this.AllocationRowChanged(this, new AllocationRowChangeEventArgs(((AllocationRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the AllocationRowChanging event.
			/// </summary>
			/// <param name="e">Provides data for the AllocationRow changing and deleting events.</param>
			protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowChanging(e);
				if ((this.AllocationRowChanging != null))
				{
					this.AllocationRowChanging(this, new AllocationRowChangeEventArgs(((AllocationRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the AllocationRowDeleted event.
			/// </summary>
			/// <param name="e">Provides data for the AllocationRow changing and deleting events.</param>
			protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowDeleted(e);
				if ((this.AllocationRowDeleted != null))
				{
					this.AllocationRowDeleted(this, new AllocationRowChangeEventArgs(((AllocationRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the AllocationRowDeleting event.
			/// </summary>
			/// <param name="e">Provides data for the AllocationRow changing and deleting events.</param>
			protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowDeleting(e);
				if ((this.AllocationRowDeleting != null))
				{
					this.AllocationRowDeleting(this, new AllocationRowChangeEventArgs(((AllocationRow)(e.Row)), e.Action));
				}
			}
		}
		
		/// <summary>
		/// The Blotter table.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public partial class BlotterDataTable : global::System.Data.TypedTableBase<DataModel.BlotterRow>
		{
			
			private global::System.Data.DataColumn columnBlotterId;
			
			private global::System.Data.DataColumn columnPartyTypeCode;
			
			private global::System.Data.DataColumn columnRowVersion;
			
			private global::Teraque.DataIndexCollection dataIndices;
			
			private global::Teraque.DataIndex indexBlotterKey;
			
			private global::System.Data.DataRelation relationBlotterBlotterDestinationMap;
			
			private global::System.Data.DataRelation relationBlotterBranch;
			
			private global::System.Data.DataRelation relationBlotterMatch;
			
			private global::System.Data.DataRelation relationBlotterNegotiation;
			
			private global::System.Data.DataRelation relationBlotterSource;
			
			private global::System.Data.DataRelation relationBlotterTrader;
			
			private global::System.Data.DataRelation relationBlotterWorkingOrder;
			
			private global::System.Data.DataRelation relationEntityBlotter;
			
			private global::System.Data.DataRelation relationPartyTypeBlotter;
			
			/// <summary>
			/// Creates the Blotter table.
			/// </summary>
			internal BlotterDataTable()
			{
				// Initialize the object.
				this.TableName = "Blotter";
				this.dataIndices = new global::Teraque.DataIndexCollection();
				// The BlotterId Column
				this.columnBlotterId = new global::System.Data.DataColumn("BlotterId", typeof(System.Guid), null, global::System.Data.MappingType.Element);
				this.columnBlotterId.AllowDBNull = false;
				this.Columns.Add(this.columnBlotterId);
				// The PartyTypeCode Column
				this.columnPartyTypeCode = new global::System.Data.DataColumn("PartyTypeCode", typeof(Teraque.PartyTypeCode), null, global::System.Data.MappingType.Element);
				this.columnPartyTypeCode.AllowDBNull = false;
				this.Columns.Add(this.columnPartyTypeCode);
				// The RowVersion Column
				this.columnRowVersion = new global::System.Data.DataColumn("RowVersion", typeof(long), null, global::System.Data.MappingType.Element);
				this.columnRowVersion.AllowDBNull = false;
				this.Columns.Add(this.columnRowVersion);
				// The BlotterKey Index
				this.indexBlotterKey = new BlotterKeyIndex("BlotterKey", new global::System.Data.DataColumn[] {
							this.columnBlotterId});
				this.Indices.Add(this.indexBlotterKey);
			}
			
			/// <summary>
			/// Gets the child relation between the Blotter and BlotterDestinationMap tables.
			/// </summary>
			internal global::System.Data.DataRelation BlotterBlotterDestinationMapRelation
			{
				get
				{
					return this.relationBlotterBlotterDestinationMap;
				}
			}
			
			/// <summary>
			/// Gets the child relation between the Blotter and Branch tables.
			/// </summary>
			internal global::System.Data.DataRelation BlotterBranchRelation
			{
				get
				{
					return this.relationBlotterBranch;
				}
			}
			
			/// <summary>
			/// Gets the BlotterId column of the Blotter table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn BlotterIdColumn
			{
				get
				{
					return this.columnBlotterId;
				}
			}
			
			/// <summary>
			/// Gets the BlotterKey index on the Blotter table.
			/// </summary>
			public BlotterKeyIndex BlotterKey
			{
				get
				{
					return ((BlotterKeyIndex)(this.indexBlotterKey));
				}
			}
			
			/// <summary>
			/// Gets the child relation between the Blotter and Match tables.
			/// </summary>
			internal global::System.Data.DataRelation BlotterMatchRelation
			{
				get
				{
					return this.relationBlotterMatch;
				}
			}
			
			/// <summary>
			/// Gets the child relation between the Blotter and Negotiation tables.
			/// </summary>
			internal global::System.Data.DataRelation BlotterNegotiationRelation
			{
				get
				{
					return this.relationBlotterNegotiation;
				}
			}
			
			/// <summary>
			/// Gets the child relation between the Blotter and Source tables.
			/// </summary>
			internal global::System.Data.DataRelation BlotterSourceRelation
			{
				get
				{
					return this.relationBlotterSource;
				}
			}
			
			/// <summary>
			/// Gets the child relation between the Blotter and Trader tables.
			/// </summary>
			internal global::System.Data.DataRelation BlotterTraderRelation
			{
				get
				{
					return this.relationBlotterTrader;
				}
			}
			
			/// <summary>
			/// Gets the child relation between the Blotter and WorkingOrder tables.
			/// </summary>
			internal global::System.Data.DataRelation BlotterWorkingOrderRelation
			{
				get
				{
					return this.relationBlotterWorkingOrder;
				}
			}
			
			/// <summary>
			/// Gets the number of rows in the Blotter table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public int Count
			{
				get
				{
					return this.Rows.Count;
				}
			}
			
			/// <summary>
			/// Gets the parent relation between the Entity and Blotter tables.
			/// </summary>
			public global::System.Data.DataRelation EntityBlotterRelation
			{
				get
				{
					return this.relationEntityBlotter;
				}
			}
			
			/// <summary>
			/// Gets a collection of Teraque.DataModelGenerator.DataIndices on a table.
			/// </summary>
			public global::Teraque.DataIndexCollection Indices
			{
				get
				{
					return this.dataIndices;
				}
			}
			
			/// <summary>
			/// Indexer to a row in the Blotter table.
			/// </summary>
			/// <param name="index">The integer index of the row.</param>
			/// <returns>The Blotter row found at the given index.</returns>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public DataModel.BlotterRow this[int index]
			{
				get
				{
					return ((DataModel.BlotterRow)(this.Rows[index]));
				}
			}
			
			/// <summary>
			/// Gets the parent relation between the PartyType and Blotter tables.
			/// </summary>
			public global::System.Data.DataRelation PartyTypeBlotterRelation
			{
				get
				{
					return this.relationPartyTypeBlotter;
				}
			}
			
			/// <summary>
			/// Gets the PartyTypeCode column of the Blotter table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn PartyTypeCodeColumn
			{
				get
				{
					return this.columnPartyTypeCode;
				}
			}
			
			/// <summary>
			/// Gets the RowVersion column of the Blotter table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn RowVersionColumn
			{
				get
				{
					return this.columnRowVersion;
				}
			}
			
			/// <summary>
			/// Occurs after a Blotter row has been changed successfully.
			/// </summary>
			public event BlotterRowChangeEventHandler BlotterRowChanged;
			
			/// <summary>
			/// Occurs when a Blotter row is changing.
			/// </summary>
			public event BlotterRowChangeEventHandler BlotterRowChanging;
			
			/// <summary>
			/// Occurs after a Blotter row in the table has been deleted.
			/// </summary>
			public event BlotterRowChangeEventHandler BlotterRowDeleted;
			
			/// <summary>
			/// Occurs before a Blotter row in the table is about to be deleted.
			/// </summary>
			public event BlotterRowChangeEventHandler BlotterRowDeleting;
			
			/// <summary>
			/// Returns the type of the row in a Blotter table.
			/// </summary>
			/// <returns>The BlotterRow type.</returns>
			protected override global::System.Type GetRowType()
			{
				return typeof(BlotterRow);
			}
			
			/// <summary>
			/// Initializes the relation fields with the parent and child relations.
			/// </summary>
			internal void InitializeRelations()
			{
				this.relationEntityBlotter = this.ParentRelations["FK_Entity_Blotter"];
				this.relationPartyTypeBlotter = this.ParentRelations["FK_PartyType_Blotter"];
				this.relationBlotterBlotterDestinationMap = this.ChildRelations["FK_Blotter_BlotterDestinationMap"];
				this.relationBlotterBranch = this.ChildRelations["FK_Blotter_Branch"];
				this.relationBlotterMatch = this.ChildRelations["FK_Blotter_Match"];
				this.relationBlotterNegotiation = this.ChildRelations["FK_Blotter_Negotiation"];
				this.relationBlotterSource = this.ChildRelations["FK_Blotter_Source"];
				this.relationBlotterTrader = this.ChildRelations["FK_Blotter_Trader"];
				this.relationBlotterWorkingOrder = this.ChildRelations["FK_Blotter_WorkingOrder"];
			}
			
			/// <summary>
			/// Initializes a new instance of a Blotter row.  Constructs a row from the builder.  Only for internal usage.
			/// </summary>
			/// <returns>A new row with the same schema as the table.</returns>
			protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder dataRowBuilder)
			{
				return new BlotterRow(dataRowBuilder);
			}
			
			/// <summary>
			/// Raises the BlotterRowChanged event.
			/// </summary>
			/// <param name="e">Provides data for the BlotterRow changing and deleting events.</param>
			protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowChanged(e);
				if ((this.BlotterRowChanged != null))
				{
					this.BlotterRowChanged(this, new BlotterRowChangeEventArgs(((BlotterRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the BlotterRowChanging event.
			/// </summary>
			/// <param name="e">Provides data for the BlotterRow changing and deleting events.</param>
			protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowChanging(e);
				if ((this.BlotterRowChanging != null))
				{
					this.BlotterRowChanging(this, new BlotterRowChangeEventArgs(((BlotterRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the BlotterRowDeleted event.
			/// </summary>
			/// <param name="e">Provides data for the BlotterRow changing and deleting events.</param>
			protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowDeleted(e);
				if ((this.BlotterRowDeleted != null))
				{
					this.BlotterRowDeleted(this, new BlotterRowChangeEventArgs(((BlotterRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the BlotterRowDeleting event.
			/// </summary>
			/// <param name="e">Provides data for the BlotterRow changing and deleting events.</param>
			protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowDeleting(e);
				if ((this.BlotterRowDeleting != null))
				{
					this.BlotterRowDeleting(this, new BlotterRowChangeEventArgs(((BlotterRow)(e.Row)), e.Action));
				}
			}
		}
		
		/// <summary>
		/// The BlotterDestinationMap table.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public partial class BlotterDestinationMapDataTable : global::System.Data.TypedTableBase<DataModel.BlotterDestinationMapRow>
		{
			
			private global::System.Data.DataColumn columnBlotterDestinationMapId;
			
			private global::System.Data.DataColumn columnBlotterId;
			
			private global::System.Data.DataColumn columnDestinationId;
			
			private global::System.Data.DataColumn columnExternalId0;
			
			private global::System.Data.DataColumn columnRowVersion;
			
			private global::Teraque.DataIndexCollection dataIndices;
			
			private global::Teraque.DataIndex indexBlotterDestinationMapKey;
			
			private global::Teraque.DataIndex indexBlotterDestinationMapKeyBlotterIdDestinationId;
			
			private global::System.Data.DataRelation relationBlotterBlotterDestinationMap;
			
			private global::System.Data.DataRelation relationDestinationBlotterDestinationMap;
			
			/// <summary>
			/// Creates the BlotterDestinationMap table.
			/// </summary>
			internal BlotterDestinationMapDataTable()
			{
				// Initialize the object.
				this.TableName = "BlotterDestinationMap";
				this.dataIndices = new global::Teraque.DataIndexCollection();
				// The BlotterDestinationMapId Column
				this.columnBlotterDestinationMapId = new global::System.Data.DataColumn("BlotterDestinationMapId", typeof(System.Guid), null, global::System.Data.MappingType.Element);
				this.columnBlotterDestinationMapId.AllowDBNull = false;
				this.Columns.Add(this.columnBlotterDestinationMapId);
				// The BlotterId Column
				this.columnBlotterId = new global::System.Data.DataColumn("BlotterId", typeof(System.Guid), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnBlotterId);
				// The DestinationId Column
				this.columnDestinationId = new global::System.Data.DataColumn("DestinationId", typeof(System.Guid), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnDestinationId);
				// The ExternalId0 Column
				this.columnExternalId0 = new global::System.Data.DataColumn("ExternalId0", typeof(string), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnExternalId0);
				// The RowVersion Column
				this.columnRowVersion = new global::System.Data.DataColumn("RowVersion", typeof(long), null, global::System.Data.MappingType.Element);
				this.columnRowVersion.AllowDBNull = false;
				this.Columns.Add(this.columnRowVersion);
				// The BlotterDestinationMapKey Index
				this.indexBlotterDestinationMapKey = new BlotterDestinationMapKeyIndex("BlotterDestinationMapKey", new global::System.Data.DataColumn[] {
							this.columnBlotterDestinationMapId});
				this.Indices.Add(this.indexBlotterDestinationMapKey);
				// The BlotterDestinationMapKeyBlotterIdDestinationId Index
				this.indexBlotterDestinationMapKeyBlotterIdDestinationId = new BlotterDestinationMapKeyBlotterIdDestinationIdIndex("BlotterDestinationMapKeyBlotterIdDestinationId", new global::System.Data.DataColumn[] {
							this.columnBlotterId,
							this.columnDestinationId});
				this.Indices.Add(this.indexBlotterDestinationMapKeyBlotterIdDestinationId);
			}
			
			/// <summary>
			/// Gets the parent relation between the Blotter and BlotterDestinationMap tables.
			/// </summary>
			public global::System.Data.DataRelation BlotterBlotterDestinationMapRelation
			{
				get
				{
					return this.relationBlotterBlotterDestinationMap;
				}
			}
			
			/// <summary>
			/// Gets the BlotterDestinationMapId column of the BlotterDestinationMap table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn BlotterDestinationMapIdColumn
			{
				get
				{
					return this.columnBlotterDestinationMapId;
				}
			}
			
			/// <summary>
			/// Gets the BlotterDestinationMapKey index on the BlotterDestinationMap table.
			/// </summary>
			public BlotterDestinationMapKeyIndex BlotterDestinationMapKey
			{
				get
				{
					return ((BlotterDestinationMapKeyIndex)(this.indexBlotterDestinationMapKey));
				}
			}
			
			/// <summary>
			/// Gets the BlotterDestinationMapKeyBlotterIdDestinationId index on the BlotterDestinationMap table.
			/// </summary>
			public BlotterDestinationMapKeyBlotterIdDestinationIdIndex BlotterDestinationMapKeyBlotterIdDestinationId
			{
				get
				{
					return ((BlotterDestinationMapKeyBlotterIdDestinationIdIndex)(this.indexBlotterDestinationMapKeyBlotterIdDestinationId));
				}
			}
			
			/// <summary>
			/// Gets the BlotterId column of the BlotterDestinationMap table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn BlotterIdColumn
			{
				get
				{
					return this.columnBlotterId;
				}
			}
			
			/// <summary>
			/// Gets the number of rows in the BlotterDestinationMap table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public int Count
			{
				get
				{
					return this.Rows.Count;
				}
			}
			
			/// <summary>
			/// Gets the parent relation between the Destination and BlotterDestinationMap tables.
			/// </summary>
			public global::System.Data.DataRelation DestinationBlotterDestinationMapRelation
			{
				get
				{
					return this.relationDestinationBlotterDestinationMap;
				}
			}
			
			/// <summary>
			/// Gets the DestinationId column of the BlotterDestinationMap table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn DestinationIdColumn
			{
				get
				{
					return this.columnDestinationId;
				}
			}
			
			/// <summary>
			/// Gets the ExternalId0 column of the BlotterDestinationMap table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn ExternalId0Column
			{
				get
				{
					return this.columnExternalId0;
				}
			}
			
			/// <summary>
			/// Gets a collection of Teraque.DataModelGenerator.DataIndices on a table.
			/// </summary>
			public global::Teraque.DataIndexCollection Indices
			{
				get
				{
					return this.dataIndices;
				}
			}
			
			/// <summary>
			/// Indexer to a row in the BlotterDestinationMap table.
			/// </summary>
			/// <param name="index">The integer index of the row.</param>
			/// <returns>The BlotterDestinationMap row found at the given index.</returns>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public DataModel.BlotterDestinationMapRow this[int index]
			{
				get
				{
					return ((DataModel.BlotterDestinationMapRow)(this.Rows[index]));
				}
			}
			
			/// <summary>
			/// Gets the RowVersion column of the BlotterDestinationMap table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn RowVersionColumn
			{
				get
				{
					return this.columnRowVersion;
				}
			}
			
			/// <summary>
			/// Occurs after a BlotterDestinationMap row has been changed successfully.
			/// </summary>
			public event BlotterDestinationMapRowChangeEventHandler BlotterDestinationMapRowChanged;
			
			/// <summary>
			/// Occurs when a BlotterDestinationMap row is changing.
			/// </summary>
			public event BlotterDestinationMapRowChangeEventHandler BlotterDestinationMapRowChanging;
			
			/// <summary>
			/// Occurs after a BlotterDestinationMap row in the table has been deleted.
			/// </summary>
			public event BlotterDestinationMapRowChangeEventHandler BlotterDestinationMapRowDeleted;
			
			/// <summary>
			/// Occurs before a BlotterDestinationMap row in the table is about to be deleted.
			/// </summary>
			public event BlotterDestinationMapRowChangeEventHandler BlotterDestinationMapRowDeleting;
			
			/// <summary>
			/// Returns the type of the row in a BlotterDestinationMap table.
			/// </summary>
			/// <returns>The BlotterDestinationMapRow type.</returns>
			protected override global::System.Type GetRowType()
			{
				return typeof(BlotterDestinationMapRow);
			}
			
			/// <summary>
			/// Initializes the relation fields with the parent and child relations.
			/// </summary>
			internal void InitializeRelations()
			{
				this.relationBlotterBlotterDestinationMap = this.ParentRelations["FK_Blotter_BlotterDestinationMap"];
				this.relationDestinationBlotterDestinationMap = this.ParentRelations["FK_Destination_BlotterDestinationMap"];
			}
			
			/// <summary>
			/// Initializes a new instance of a BlotterDestinationMap row.  Constructs a row from the builder.  Only for internal usage.
			/// </summary>
			/// <returns>A new row with the same schema as the table.</returns>
			protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder dataRowBuilder)
			{
				return new BlotterDestinationMapRow(dataRowBuilder);
			}
			
			/// <summary>
			/// Raises the BlotterDestinationMapRowChanged event.
			/// </summary>
			/// <param name="e">Provides data for the BlotterDestinationMapRow changing and deleting events.</param>
			protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowChanged(e);
				if ((this.BlotterDestinationMapRowChanged != null))
				{
					this.BlotterDestinationMapRowChanged(this, new BlotterDestinationMapRowChangeEventArgs(((BlotterDestinationMapRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the BlotterDestinationMapRowChanging event.
			/// </summary>
			/// <param name="e">Provides data for the BlotterDestinationMapRow changing and deleting events.</param>
			protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowChanging(e);
				if ((this.BlotterDestinationMapRowChanging != null))
				{
					this.BlotterDestinationMapRowChanging(this, new BlotterDestinationMapRowChangeEventArgs(((BlotterDestinationMapRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the BlotterDestinationMapRowDeleted event.
			/// </summary>
			/// <param name="e">Provides data for the BlotterDestinationMapRow changing and deleting events.</param>
			protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowDeleted(e);
				if ((this.BlotterDestinationMapRowDeleted != null))
				{
					this.BlotterDestinationMapRowDeleted(this, new BlotterDestinationMapRowChangeEventArgs(((BlotterDestinationMapRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the BlotterDestinationMapRowDeleting event.
			/// </summary>
			/// <param name="e">Provides data for the BlotterDestinationMapRow changing and deleting events.</param>
			protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowDeleting(e);
				if ((this.BlotterDestinationMapRowDeleting != null))
				{
					this.BlotterDestinationMapRowDeleting(this, new BlotterDestinationMapRowChangeEventArgs(((BlotterDestinationMapRow)(e.Row)), e.Action));
				}
			}
		}
		
		/// <summary>
		/// The Branch table.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public partial class BranchDataTable : global::System.Data.TypedTableBase<DataModel.BranchRow>
		{
			
			private global::System.Data.DataColumn columnBranchId;
			
			private global::System.Data.DataColumn columnRowVersion;
			
			private global::System.Data.DataColumn columnShortName;
			
			private global::Teraque.DataIndexCollection dataIndices;
			
			private global::Teraque.DataIndex indexBranchKey;
			
			private global::System.Data.DataRelation relationBlotterBranch;
			
			/// <summary>
			/// Creates the Branch table.
			/// </summary>
			internal BranchDataTable()
			{
				// Initialize the object.
				this.TableName = "Branch";
				this.dataIndices = new global::Teraque.DataIndexCollection();
				// The BranchId Column
				this.columnBranchId = new global::System.Data.DataColumn("BranchId", typeof(System.Guid), null, global::System.Data.MappingType.Element);
				this.columnBranchId.AllowDBNull = false;
				this.Columns.Add(this.columnBranchId);
				// The RowVersion Column
				this.columnRowVersion = new global::System.Data.DataColumn("RowVersion", typeof(long), null, global::System.Data.MappingType.Element);
				this.columnRowVersion.AllowDBNull = false;
				this.Columns.Add(this.columnRowVersion);
				// The ShortName Column
				this.columnShortName = new global::System.Data.DataColumn("ShortName", typeof(string), null, global::System.Data.MappingType.Element);
				this.columnShortName.AllowDBNull = false;
				this.columnShortName.DefaultValue = "";
				this.Columns.Add(this.columnShortName);
				// The BranchKey Index
				this.indexBranchKey = new BranchKeyIndex("BranchKey", new global::System.Data.DataColumn[] {
							this.columnBranchId});
				this.Indices.Add(this.indexBranchKey);
			}
			
			/// <summary>
			/// Gets the parent relation between the Blotter and Branch tables.
			/// </summary>
			public global::System.Data.DataRelation BlotterBranchRelation
			{
				get
				{
					return this.relationBlotterBranch;
				}
			}
			
			/// <summary>
			/// Gets the BranchId column of the Branch table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn BranchIdColumn
			{
				get
				{
					return this.columnBranchId;
				}
			}
			
			/// <summary>
			/// Gets the BranchKey index on the Branch table.
			/// </summary>
			public BranchKeyIndex BranchKey
			{
				get
				{
					return ((BranchKeyIndex)(this.indexBranchKey));
				}
			}
			
			/// <summary>
			/// Gets the number of rows in the Branch table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public int Count
			{
				get
				{
					return this.Rows.Count;
				}
			}
			
			/// <summary>
			/// Gets a collection of Teraque.DataModelGenerator.DataIndices on a table.
			/// </summary>
			public global::Teraque.DataIndexCollection Indices
			{
				get
				{
					return this.dataIndices;
				}
			}
			
			/// <summary>
			/// Indexer to a row in the Branch table.
			/// </summary>
			/// <param name="index">The integer index of the row.</param>
			/// <returns>The Branch row found at the given index.</returns>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public DataModel.BranchRow this[int index]
			{
				get
				{
					return ((DataModel.BranchRow)(this.Rows[index]));
				}
			}
			
			/// <summary>
			/// Gets the RowVersion column of the Branch table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn RowVersionColumn
			{
				get
				{
					return this.columnRowVersion;
				}
			}
			
			/// <summary>
			/// Gets the ShortName column of the Branch table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn ShortNameColumn
			{
				get
				{
					return this.columnShortName;
				}
			}
			
			/// <summary>
			/// Occurs after a Branch row has been changed successfully.
			/// </summary>
			public event BranchRowChangeEventHandler BranchRowChanged;
			
			/// <summary>
			/// Occurs when a Branch row is changing.
			/// </summary>
			public event BranchRowChangeEventHandler BranchRowChanging;
			
			/// <summary>
			/// Occurs after a Branch row in the table has been deleted.
			/// </summary>
			public event BranchRowChangeEventHandler BranchRowDeleted;
			
			/// <summary>
			/// Occurs before a Branch row in the table is about to be deleted.
			/// </summary>
			public event BranchRowChangeEventHandler BranchRowDeleting;
			
			/// <summary>
			/// Returns the type of the row in a Branch table.
			/// </summary>
			/// <returns>The BranchRow type.</returns>
			protected override global::System.Type GetRowType()
			{
				return typeof(BranchRow);
			}
			
			/// <summary>
			/// Initializes the relation fields with the parent and child relations.
			/// </summary>
			internal void InitializeRelations()
			{
				this.relationBlotterBranch = this.ParentRelations["FK_Blotter_Branch"];
			}
			
			/// <summary>
			/// Initializes a new instance of a Branch row.  Constructs a row from the builder.  Only for internal usage.
			/// </summary>
			/// <returns>A new row with the same schema as the table.</returns>
			protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder dataRowBuilder)
			{
				return new BranchRow(dataRowBuilder);
			}
			
			/// <summary>
			/// Raises the BranchRowChanged event.
			/// </summary>
			/// <param name="e">Provides data for the BranchRow changing and deleting events.</param>
			protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowChanged(e);
				if ((this.BranchRowChanged != null))
				{
					this.BranchRowChanged(this, new BranchRowChangeEventArgs(((BranchRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the BranchRowChanging event.
			/// </summary>
			/// <param name="e">Provides data for the BranchRow changing and deleting events.</param>
			protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowChanging(e);
				if ((this.BranchRowChanging != null))
				{
					this.BranchRowChanging(this, new BranchRowChangeEventArgs(((BranchRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the BranchRowDeleted event.
			/// </summary>
			/// <param name="e">Provides data for the BranchRow changing and deleting events.</param>
			protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowDeleted(e);
				if ((this.BranchRowDeleted != null))
				{
					this.BranchRowDeleted(this, new BranchRowChangeEventArgs(((BranchRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the BranchRowDeleting event.
			/// </summary>
			/// <param name="e">Provides data for the BranchRow changing and deleting events.</param>
			protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowDeleting(e);
				if ((this.BranchRowDeleting != null))
				{
					this.BranchRowDeleting(this, new BranchRowChangeEventArgs(((BranchRow)(e.Row)), e.Action));
				}
			}
		}
		
		/// <summary>
		/// The Broker table.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public partial class BrokerDataTable : global::System.Data.TypedTableBase<DataModel.BrokerRow>
		{
			
			private global::System.Data.DataColumn columnBrokerId;
			
			private global::System.Data.DataColumn columnConnected;
			
			private global::System.Data.DataColumn columnPhone;
			
			private global::System.Data.DataColumn columnRowVersion;
			
			private global::System.Data.DataColumn columnSymbol;
			
			private global::Teraque.DataIndexCollection dataIndices;
			
			private global::Teraque.DataIndex indexBrokerKey;
			
			private global::System.Data.DataRelation relationBrokerBrokerAccount;
			
			private global::System.Data.DataRelation relationBrokerClearingBroker;
			
			private global::System.Data.DataRelation relationBrokerExecution;
			
			private global::System.Data.DataRelation relationSourceBroker;
			
			/// <summary>
			/// Creates the Broker table.
			/// </summary>
			internal BrokerDataTable()
			{
				// Initialize the object.
				this.TableName = "Broker";
				this.dataIndices = new global::Teraque.DataIndexCollection();
				// The BrokerId Column
				this.columnBrokerId = new global::System.Data.DataColumn("BrokerId", typeof(System.Guid), null, global::System.Data.MappingType.Element);
				this.columnBrokerId.AllowDBNull = false;
				this.Columns.Add(this.columnBrokerId);
				// The Connected Column
				this.columnConnected = new global::System.Data.DataColumn("Connected", typeof(bool), null, global::System.Data.MappingType.Element);
				this.columnConnected.AllowDBNull = false;
				this.columnConnected.DefaultValue = false;
				this.Columns.Add(this.columnConnected);
				// The Phone Column
				this.columnPhone = new global::System.Data.DataColumn("Phone", typeof(string), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnPhone);
				// The RowVersion Column
				this.columnRowVersion = new global::System.Data.DataColumn("RowVersion", typeof(long), null, global::System.Data.MappingType.Element);
				this.columnRowVersion.AllowDBNull = false;
				this.Columns.Add(this.columnRowVersion);
				// The Symbol Column
				this.columnSymbol = new global::System.Data.DataColumn("Symbol", typeof(string), null, global::System.Data.MappingType.Element);
				this.columnSymbol.AllowDBNull = false;
				this.columnSymbol.DefaultValue = "";
				this.Columns.Add(this.columnSymbol);
				// The BrokerKey Index
				this.indexBrokerKey = new BrokerKeyIndex("BrokerKey", new global::System.Data.DataColumn[] {
							this.columnBrokerId});
				this.Indices.Add(this.indexBrokerKey);
			}
			
			/// <summary>
			/// Gets the child relation between the Broker and BrokerAccount tables.
			/// </summary>
			internal global::System.Data.DataRelation BrokerBrokerAccountRelation
			{
				get
				{
					return this.relationBrokerBrokerAccount;
				}
			}
			
			/// <summary>
			/// Gets the child relation between the Broker and ClearingBroker tables.
			/// </summary>
			internal global::System.Data.DataRelation BrokerClearingBrokerRelation
			{
				get
				{
					return this.relationBrokerClearingBroker;
				}
			}
			
			/// <summary>
			/// Gets the child relation between the Broker and Execution tables.
			/// </summary>
			internal global::System.Data.DataRelation BrokerExecutionRelation
			{
				get
				{
					return this.relationBrokerExecution;
				}
			}
			
			/// <summary>
			/// Gets the BrokerId column of the Broker table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn BrokerIdColumn
			{
				get
				{
					return this.columnBrokerId;
				}
			}
			
			/// <summary>
			/// Gets the BrokerKey index on the Broker table.
			/// </summary>
			public BrokerKeyIndex BrokerKey
			{
				get
				{
					return ((BrokerKeyIndex)(this.indexBrokerKey));
				}
			}
			
			/// <summary>
			/// Gets the Connected column of the Broker table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn ConnectedColumn
			{
				get
				{
					return this.columnConnected;
				}
			}
			
			/// <summary>
			/// Gets the number of rows in the Broker table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public int Count
			{
				get
				{
					return this.Rows.Count;
				}
			}
			
			/// <summary>
			/// Gets a collection of Teraque.DataModelGenerator.DataIndices on a table.
			/// </summary>
			public global::Teraque.DataIndexCollection Indices
			{
				get
				{
					return this.dataIndices;
				}
			}
			
			/// <summary>
			/// Indexer to a row in the Broker table.
			/// </summary>
			/// <param name="index">The integer index of the row.</param>
			/// <returns>The Broker row found at the given index.</returns>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public DataModel.BrokerRow this[int index]
			{
				get
				{
					return ((DataModel.BrokerRow)(this.Rows[index]));
				}
			}
			
			/// <summary>
			/// Gets the Phone column of the Broker table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn PhoneColumn
			{
				get
				{
					return this.columnPhone;
				}
			}
			
			/// <summary>
			/// Gets the RowVersion column of the Broker table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn RowVersionColumn
			{
				get
				{
					return this.columnRowVersion;
				}
			}
			
			/// <summary>
			/// Gets the parent relation between the Source and Broker tables.
			/// </summary>
			public global::System.Data.DataRelation SourceBrokerRelation
			{
				get
				{
					return this.relationSourceBroker;
				}
			}
			
			/// <summary>
			/// Gets the Symbol column of the Broker table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn SymbolColumn
			{
				get
				{
					return this.columnSymbol;
				}
			}
			
			/// <summary>
			/// Occurs after a Broker row has been changed successfully.
			/// </summary>
			public event BrokerRowChangeEventHandler BrokerRowChanged;
			
			/// <summary>
			/// Occurs when a Broker row is changing.
			/// </summary>
			public event BrokerRowChangeEventHandler BrokerRowChanging;
			
			/// <summary>
			/// Occurs after a Broker row in the table has been deleted.
			/// </summary>
			public event BrokerRowChangeEventHandler BrokerRowDeleted;
			
			/// <summary>
			/// Occurs before a Broker row in the table is about to be deleted.
			/// </summary>
			public event BrokerRowChangeEventHandler BrokerRowDeleting;
			
			/// <summary>
			/// Returns the type of the row in a Broker table.
			/// </summary>
			/// <returns>The BrokerRow type.</returns>
			protected override global::System.Type GetRowType()
			{
				return typeof(BrokerRow);
			}
			
			/// <summary>
			/// Initializes the relation fields with the parent and child relations.
			/// </summary>
			internal void InitializeRelations()
			{
				this.relationSourceBroker = this.ParentRelations["FK_Source_Broker"];
				this.relationBrokerBrokerAccount = this.ChildRelations["FK_Broker_BrokerAccount"];
				this.relationBrokerClearingBroker = this.ChildRelations["FK_Broker_ClearingBroker"];
				this.relationBrokerExecution = this.ChildRelations["FK_Broker_Execution"];
			}
			
			/// <summary>
			/// Initializes a new instance of a Broker row.  Constructs a row from the builder.  Only for internal usage.
			/// </summary>
			/// <returns>A new row with the same schema as the table.</returns>
			protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder dataRowBuilder)
			{
				return new BrokerRow(dataRowBuilder);
			}
			
			/// <summary>
			/// Raises the BrokerRowChanged event.
			/// </summary>
			/// <param name="e">Provides data for the BrokerRow changing and deleting events.</param>
			protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowChanged(e);
				if ((this.BrokerRowChanged != null))
				{
					this.BrokerRowChanged(this, new BrokerRowChangeEventArgs(((BrokerRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the BrokerRowChanging event.
			/// </summary>
			/// <param name="e">Provides data for the BrokerRow changing and deleting events.</param>
			protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowChanging(e);
				if ((this.BrokerRowChanging != null))
				{
					this.BrokerRowChanging(this, new BrokerRowChangeEventArgs(((BrokerRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the BrokerRowDeleted event.
			/// </summary>
			/// <param name="e">Provides data for the BrokerRow changing and deleting events.</param>
			protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowDeleted(e);
				if ((this.BrokerRowDeleted != null))
				{
					this.BrokerRowDeleted(this, new BrokerRowChangeEventArgs(((BrokerRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the BrokerRowDeleting event.
			/// </summary>
			/// <param name="e">Provides data for the BrokerRow changing and deleting events.</param>
			protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowDeleting(e);
				if ((this.BrokerRowDeleting != null))
				{
					this.BrokerRowDeleting(this, new BrokerRowChangeEventArgs(((BrokerRow)(e.Row)), e.Action));
				}
			}
		}
		
		/// <summary>
		/// The BrokerAccount table.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public partial class BrokerAccountDataTable : global::System.Data.TypedTableBase<DataModel.BrokerAccountRow>
		{
			
			private global::System.Data.DataColumn columnBrokerAccountId;
			
			private global::System.Data.DataColumn columnBrokerId;
			
			private global::System.Data.DataColumn columnDescription;
			
			private global::System.Data.DataColumn columnExternalId0;
			
			private global::System.Data.DataColumn columnExternalId1;
			
			private global::System.Data.DataColumn columnExternalId2;
			
			private global::System.Data.DataColumn columnExternalId3;
			
			private global::System.Data.DataColumn columnMnemonic;
			
			private global::System.Data.DataColumn columnRowVersion;
			
			private global::System.Data.DataColumn columnTraderId;
			
			private global::Teraque.DataIndexCollection dataIndices;
			
			private global::Teraque.DataIndex indexBrokerAccountKey;
			
			private global::Teraque.DataIndex indexBrokerAccountKeyExternalId0;
			
			private global::Teraque.DataIndex indexBrokerAccountKeyExternalId1;
			
			private global::Teraque.DataIndex indexBrokerAccountKeyExternalId2;
			
			private global::Teraque.DataIndex indexBrokerAccountKeyExternalId3;
			
			private global::System.Data.DataRelation relationBrokerAccountExecution;
			
			private global::System.Data.DataRelation relationBrokerBrokerAccount;
			
			private global::System.Data.DataRelation relationTraderBrokerAccount;
			
			/// <summary>
			/// Creates the BrokerAccount table.
			/// </summary>
			internal BrokerAccountDataTable()
			{
				// Initialize the object.
				this.TableName = "BrokerAccount";
				this.dataIndices = new global::Teraque.DataIndexCollection();
				// The BrokerAccountId Column
				this.columnBrokerAccountId = new global::System.Data.DataColumn("BrokerAccountId", typeof(System.Guid), null, global::System.Data.MappingType.Element);
				this.columnBrokerAccountId.AllowDBNull = false;
				this.Columns.Add(this.columnBrokerAccountId);
				// The BrokerId Column
				this.columnBrokerId = new global::System.Data.DataColumn("BrokerId", typeof(System.Guid), null, global::System.Data.MappingType.Element);
				this.columnBrokerId.AllowDBNull = false;
				this.Columns.Add(this.columnBrokerId);
				// The Description Column
				this.columnDescription = new global::System.Data.DataColumn("Description", typeof(string), null, global::System.Data.MappingType.Element);
				this.columnDescription.AllowDBNull = false;
				this.columnDescription.DefaultValue = "";
				this.Columns.Add(this.columnDescription);
				// The ExternalId0 Column
				this.columnExternalId0 = new global::System.Data.DataColumn("ExternalId0", typeof(string), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnExternalId0);
				// The ExternalId1 Column
				this.columnExternalId1 = new global::System.Data.DataColumn("ExternalId1", typeof(string), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnExternalId1);
				// The ExternalId2 Column
				this.columnExternalId2 = new global::System.Data.DataColumn("ExternalId2", typeof(string), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnExternalId2);
				// The ExternalId3 Column
				this.columnExternalId3 = new global::System.Data.DataColumn("ExternalId3", typeof(string), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnExternalId3);
				// The Mnemonic Column
				this.columnMnemonic = new global::System.Data.DataColumn("Mnemonic", typeof(string), null, global::System.Data.MappingType.Element);
				this.columnMnemonic.AllowDBNull = false;
				this.columnMnemonic.DefaultValue = "";
				this.Columns.Add(this.columnMnemonic);
				// The RowVersion Column
				this.columnRowVersion = new global::System.Data.DataColumn("RowVersion", typeof(long), null, global::System.Data.MappingType.Element);
				this.columnRowVersion.AllowDBNull = false;
				this.Columns.Add(this.columnRowVersion);
				// The TraderId Column
				this.columnTraderId = new global::System.Data.DataColumn("TraderId", typeof(System.Guid), null, global::System.Data.MappingType.Element);
				this.columnTraderId.AllowDBNull = false;
				this.Columns.Add(this.columnTraderId);
				// The BrokerAccountKey Index
				this.indexBrokerAccountKey = new BrokerAccountKeyIndex("BrokerAccountKey", new global::System.Data.DataColumn[] {
							this.columnBrokerAccountId});
				this.Indices.Add(this.indexBrokerAccountKey);
				// The BrokerAccountKeyExternalId0 Index
				this.indexBrokerAccountKeyExternalId0 = new BrokerAccountKeyExternalId0Index("BrokerAccountKeyExternalId0", new global::System.Data.DataColumn[] {
							this.columnExternalId0});
				this.Indices.Add(this.indexBrokerAccountKeyExternalId0);
				// The BrokerAccountKeyExternalId1 Index
				this.indexBrokerAccountKeyExternalId1 = new BrokerAccountKeyExternalId1Index("BrokerAccountKeyExternalId1", new global::System.Data.DataColumn[] {
							this.columnExternalId1});
				this.Indices.Add(this.indexBrokerAccountKeyExternalId1);
				// The BrokerAccountKeyExternalId2 Index
				this.indexBrokerAccountKeyExternalId2 = new BrokerAccountKeyExternalId2Index("BrokerAccountKeyExternalId2", new global::System.Data.DataColumn[] {
							this.columnExternalId2});
				this.Indices.Add(this.indexBrokerAccountKeyExternalId2);
				// The BrokerAccountKeyExternalId3 Index
				this.indexBrokerAccountKeyExternalId3 = new BrokerAccountKeyExternalId3Index("BrokerAccountKeyExternalId3", new global::System.Data.DataColumn[] {
							this.columnExternalId3});
				this.Indices.Add(this.indexBrokerAccountKeyExternalId3);
			}
			
			/// <summary>
			/// Gets the child relation between the BrokerAccount and Execution tables.
			/// </summary>
			internal global::System.Data.DataRelation BrokerAccountExecutionRelation
			{
				get
				{
					return this.relationBrokerAccountExecution;
				}
			}
			
			/// <summary>
			/// Gets the BrokerAccountId column of the BrokerAccount table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn BrokerAccountIdColumn
			{
				get
				{
					return this.columnBrokerAccountId;
				}
			}
			
			/// <summary>
			/// Gets the BrokerAccountKey index on the BrokerAccount table.
			/// </summary>
			public BrokerAccountKeyIndex BrokerAccountKey
			{
				get
				{
					return ((BrokerAccountKeyIndex)(this.indexBrokerAccountKey));
				}
			}
			
			/// <summary>
			/// Gets the BrokerAccountKeyExternalId0 index on the BrokerAccount table.
			/// </summary>
			public BrokerAccountKeyExternalId0Index BrokerAccountKeyExternalId0
			{
				get
				{
					return ((BrokerAccountKeyExternalId0Index)(this.indexBrokerAccountKeyExternalId0));
				}
			}
			
			/// <summary>
			/// Gets the BrokerAccountKeyExternalId1 index on the BrokerAccount table.
			/// </summary>
			public BrokerAccountKeyExternalId1Index BrokerAccountKeyExternalId1
			{
				get
				{
					return ((BrokerAccountKeyExternalId1Index)(this.indexBrokerAccountKeyExternalId1));
				}
			}
			
			/// <summary>
			/// Gets the BrokerAccountKeyExternalId2 index on the BrokerAccount table.
			/// </summary>
			public BrokerAccountKeyExternalId2Index BrokerAccountKeyExternalId2
			{
				get
				{
					return ((BrokerAccountKeyExternalId2Index)(this.indexBrokerAccountKeyExternalId2));
				}
			}
			
			/// <summary>
			/// Gets the BrokerAccountKeyExternalId3 index on the BrokerAccount table.
			/// </summary>
			public BrokerAccountKeyExternalId3Index BrokerAccountKeyExternalId3
			{
				get
				{
					return ((BrokerAccountKeyExternalId3Index)(this.indexBrokerAccountKeyExternalId3));
				}
			}
			
			/// <summary>
			/// Gets the parent relation between the Broker and BrokerAccount tables.
			/// </summary>
			public global::System.Data.DataRelation BrokerBrokerAccountRelation
			{
				get
				{
					return this.relationBrokerBrokerAccount;
				}
			}
			
			/// <summary>
			/// Gets the BrokerId column of the BrokerAccount table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn BrokerIdColumn
			{
				get
				{
					return this.columnBrokerId;
				}
			}
			
			/// <summary>
			/// Gets the number of rows in the BrokerAccount table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public int Count
			{
				get
				{
					return this.Rows.Count;
				}
			}
			
			/// <summary>
			/// Gets the Description column of the BrokerAccount table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn DescriptionColumn
			{
				get
				{
					return this.columnDescription;
				}
			}
			
			/// <summary>
			/// Gets the ExternalId0 column of the BrokerAccount table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn ExternalId0Column
			{
				get
				{
					return this.columnExternalId0;
				}
			}
			
			/// <summary>
			/// Gets the ExternalId1 column of the BrokerAccount table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn ExternalId1Column
			{
				get
				{
					return this.columnExternalId1;
				}
			}
			
			/// <summary>
			/// Gets the ExternalId2 column of the BrokerAccount table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn ExternalId2Column
			{
				get
				{
					return this.columnExternalId2;
				}
			}
			
			/// <summary>
			/// Gets the ExternalId3 column of the BrokerAccount table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn ExternalId3Column
			{
				get
				{
					return this.columnExternalId3;
				}
			}
			
			/// <summary>
			/// Gets a collection of Teraque.DataModelGenerator.DataIndices on a table.
			/// </summary>
			public global::Teraque.DataIndexCollection Indices
			{
				get
				{
					return this.dataIndices;
				}
			}
			
			/// <summary>
			/// Indexer to a row in the BrokerAccount table.
			/// </summary>
			/// <param name="index">The integer index of the row.</param>
			/// <returns>The BrokerAccount row found at the given index.</returns>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public DataModel.BrokerAccountRow this[int index]
			{
				get
				{
					return ((DataModel.BrokerAccountRow)(this.Rows[index]));
				}
			}
			
			/// <summary>
			/// Gets the Mnemonic column of the BrokerAccount table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn MnemonicColumn
			{
				get
				{
					return this.columnMnemonic;
				}
			}
			
			/// <summary>
			/// Gets the RowVersion column of the BrokerAccount table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn RowVersionColumn
			{
				get
				{
					return this.columnRowVersion;
				}
			}
			
			/// <summary>
			/// Gets the parent relation between the Trader and BrokerAccount tables.
			/// </summary>
			public global::System.Data.DataRelation TraderBrokerAccountRelation
			{
				get
				{
					return this.relationTraderBrokerAccount;
				}
			}
			
			/// <summary>
			/// Gets the TraderId column of the BrokerAccount table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn TraderIdColumn
			{
				get
				{
					return this.columnTraderId;
				}
			}
			
			/// <summary>
			/// Occurs after a BrokerAccount row has been changed successfully.
			/// </summary>
			public event BrokerAccountRowChangeEventHandler BrokerAccountRowChanged;
			
			/// <summary>
			/// Occurs when a BrokerAccount row is changing.
			/// </summary>
			public event BrokerAccountRowChangeEventHandler BrokerAccountRowChanging;
			
			/// <summary>
			/// Occurs after a BrokerAccount row in the table has been deleted.
			/// </summary>
			public event BrokerAccountRowChangeEventHandler BrokerAccountRowDeleted;
			
			/// <summary>
			/// Occurs before a BrokerAccount row in the table is about to be deleted.
			/// </summary>
			public event BrokerAccountRowChangeEventHandler BrokerAccountRowDeleting;
			
			/// <summary>
			/// Returns the type of the row in a BrokerAccount table.
			/// </summary>
			/// <returns>The BrokerAccountRow type.</returns>
			protected override global::System.Type GetRowType()
			{
				return typeof(BrokerAccountRow);
			}
			
			/// <summary>
			/// Initializes the relation fields with the parent and child relations.
			/// </summary>
			internal void InitializeRelations()
			{
				this.relationBrokerBrokerAccount = this.ParentRelations["FK_Broker_BrokerAccount"];
				this.relationTraderBrokerAccount = this.ParentRelations["FK_Trader_BrokerAccount"];
				this.relationBrokerAccountExecution = this.ChildRelations["FK_BrokerAccount_Execution"];
			}
			
			/// <summary>
			/// Initializes a new instance of a BrokerAccount row.  Constructs a row from the builder.  Only for internal usage.
			/// </summary>
			/// <returns>A new row with the same schema as the table.</returns>
			protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder dataRowBuilder)
			{
				return new BrokerAccountRow(dataRowBuilder);
			}
			
			/// <summary>
			/// Raises the BrokerAccountRowChanged event.
			/// </summary>
			/// <param name="e">Provides data for the BrokerAccountRow changing and deleting events.</param>
			protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowChanged(e);
				if ((this.BrokerAccountRowChanged != null))
				{
					this.BrokerAccountRowChanged(this, new BrokerAccountRowChangeEventArgs(((BrokerAccountRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the BrokerAccountRowChanging event.
			/// </summary>
			/// <param name="e">Provides data for the BrokerAccountRow changing and deleting events.</param>
			protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowChanging(e);
				if ((this.BrokerAccountRowChanging != null))
				{
					this.BrokerAccountRowChanging(this, new BrokerAccountRowChangeEventArgs(((BrokerAccountRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the BrokerAccountRowDeleted event.
			/// </summary>
			/// <param name="e">Provides data for the BrokerAccountRow changing and deleting events.</param>
			protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowDeleted(e);
				if ((this.BrokerAccountRowDeleted != null))
				{
					this.BrokerAccountRowDeleted(this, new BrokerAccountRowChangeEventArgs(((BrokerAccountRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the BrokerAccountRowDeleting event.
			/// </summary>
			/// <param name="e">Provides data for the BrokerAccountRow changing and deleting events.</param>
			protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowDeleting(e);
				if ((this.BrokerAccountRowDeleting != null))
				{
					this.BrokerAccountRowDeleting(this, new BrokerAccountRowChangeEventArgs(((BrokerAccountRow)(e.Row)), e.Action));
				}
			}
		}
		
		/// <summary>
		/// The ClearingBroker table.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public partial class ClearingBrokerDataTable : global::System.Data.TypedTableBase<DataModel.ClearingBrokerRow>
		{
			
			private global::System.Data.DataColumn columnClearingBrokerId;
			
			private global::System.Data.DataColumn columnRowVersion;
			
			private global::Teraque.DataIndexCollection dataIndices;
			
			private global::Teraque.DataIndex indexClearingBrokerKey;
			
			private global::System.Data.DataRelation relationBrokerClearingBroker;
			
			/// <summary>
			/// Creates the ClearingBroker table.
			/// </summary>
			internal ClearingBrokerDataTable()
			{
				// Initialize the object.
				this.TableName = "ClearingBroker";
				this.dataIndices = new global::Teraque.DataIndexCollection();
				// The ClearingBrokerId Column
				this.columnClearingBrokerId = new global::System.Data.DataColumn("ClearingBrokerId", typeof(System.Guid), null, global::System.Data.MappingType.Element);
				this.columnClearingBrokerId.AllowDBNull = false;
				this.Columns.Add(this.columnClearingBrokerId);
				// The RowVersion Column
				this.columnRowVersion = new global::System.Data.DataColumn("RowVersion", typeof(long), null, global::System.Data.MappingType.Element);
				this.columnRowVersion.AllowDBNull = false;
				this.Columns.Add(this.columnRowVersion);
				// The ClearingBrokerKey Index
				this.indexClearingBrokerKey = new ClearingBrokerKeyIndex("ClearingBrokerKey", new global::System.Data.DataColumn[] {
							this.columnClearingBrokerId});
				this.Indices.Add(this.indexClearingBrokerKey);
			}
			
			/// <summary>
			/// Gets the parent relation between the Broker and ClearingBroker tables.
			/// </summary>
			public global::System.Data.DataRelation BrokerClearingBrokerRelation
			{
				get
				{
					return this.relationBrokerClearingBroker;
				}
			}
			
			/// <summary>
			/// Gets the ClearingBrokerId column of the ClearingBroker table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn ClearingBrokerIdColumn
			{
				get
				{
					return this.columnClearingBrokerId;
				}
			}
			
			/// <summary>
			/// Gets the ClearingBrokerKey index on the ClearingBroker table.
			/// </summary>
			public ClearingBrokerKeyIndex ClearingBrokerKey
			{
				get
				{
					return ((ClearingBrokerKeyIndex)(this.indexClearingBrokerKey));
				}
			}
			
			/// <summary>
			/// Gets the number of rows in the ClearingBroker table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public int Count
			{
				get
				{
					return this.Rows.Count;
				}
			}
			
			/// <summary>
			/// Gets a collection of Teraque.DataModelGenerator.DataIndices on a table.
			/// </summary>
			public global::Teraque.DataIndexCollection Indices
			{
				get
				{
					return this.dataIndices;
				}
			}
			
			/// <summary>
			/// Indexer to a row in the ClearingBroker table.
			/// </summary>
			/// <param name="index">The integer index of the row.</param>
			/// <returns>The ClearingBroker row found at the given index.</returns>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public DataModel.ClearingBrokerRow this[int index]
			{
				get
				{
					return ((DataModel.ClearingBrokerRow)(this.Rows[index]));
				}
			}
			
			/// <summary>
			/// Gets the RowVersion column of the ClearingBroker table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn RowVersionColumn
			{
				get
				{
					return this.columnRowVersion;
				}
			}
			
			/// <summary>
			/// Occurs after a ClearingBroker row has been changed successfully.
			/// </summary>
			public event ClearingBrokerRowChangeEventHandler ClearingBrokerRowChanged;
			
			/// <summary>
			/// Occurs when a ClearingBroker row is changing.
			/// </summary>
			public event ClearingBrokerRowChangeEventHandler ClearingBrokerRowChanging;
			
			/// <summary>
			/// Occurs after a ClearingBroker row in the table has been deleted.
			/// </summary>
			public event ClearingBrokerRowChangeEventHandler ClearingBrokerRowDeleted;
			
			/// <summary>
			/// Occurs before a ClearingBroker row in the table is about to be deleted.
			/// </summary>
			public event ClearingBrokerRowChangeEventHandler ClearingBrokerRowDeleting;
			
			/// <summary>
			/// Returns the type of the row in a ClearingBroker table.
			/// </summary>
			/// <returns>The ClearingBrokerRow type.</returns>
			protected override global::System.Type GetRowType()
			{
				return typeof(ClearingBrokerRow);
			}
			
			/// <summary>
			/// Initializes the relation fields with the parent and child relations.
			/// </summary>
			internal void InitializeRelations()
			{
				this.relationBrokerClearingBroker = this.ParentRelations["FK_Broker_ClearingBroker"];
			}
			
			/// <summary>
			/// Initializes a new instance of a ClearingBroker row.  Constructs a row from the builder.  Only for internal usage.
			/// </summary>
			/// <returns>A new row with the same schema as the table.</returns>
			protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder dataRowBuilder)
			{
				return new ClearingBrokerRow(dataRowBuilder);
			}
			
			/// <summary>
			/// Raises the ClearingBrokerRowChanged event.
			/// </summary>
			/// <param name="e">Provides data for the ClearingBrokerRow changing and deleting events.</param>
			protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowChanged(e);
				if ((this.ClearingBrokerRowChanged != null))
				{
					this.ClearingBrokerRowChanged(this, new ClearingBrokerRowChangeEventArgs(((ClearingBrokerRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the ClearingBrokerRowChanging event.
			/// </summary>
			/// <param name="e">Provides data for the ClearingBrokerRow changing and deleting events.</param>
			protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowChanging(e);
				if ((this.ClearingBrokerRowChanging != null))
				{
					this.ClearingBrokerRowChanging(this, new ClearingBrokerRowChangeEventArgs(((ClearingBrokerRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the ClearingBrokerRowDeleted event.
			/// </summary>
			/// <param name="e">Provides data for the ClearingBrokerRow changing and deleting events.</param>
			protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowDeleted(e);
				if ((this.ClearingBrokerRowDeleted != null))
				{
					this.ClearingBrokerRowDeleted(this, new ClearingBrokerRowChangeEventArgs(((ClearingBrokerRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the ClearingBrokerRowDeleting event.
			/// </summary>
			/// <param name="e">Provides data for the ClearingBrokerRow changing and deleting events.</param>
			protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowDeleting(e);
				if ((this.ClearingBrokerRowDeleting != null))
				{
					this.ClearingBrokerRowDeleting(this, new ClearingBrokerRowChangeEventArgs(((ClearingBrokerRow)(e.Row)), e.Action));
				}
			}
		}
		
		/// <summary>
		/// The CommissionSchedule table.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public partial class CommissionScheduleDataTable : global::System.Data.TypedTableBase<DataModel.CommissionScheduleRow>
		{
			
			private global::System.Data.DataColumn columnCommissionScheduleId;
			
			private global::System.Data.DataColumn columnExternalId0;
			
			private global::System.Data.DataColumn columnName;
			
			private global::System.Data.DataColumn columnRowVersion;
			
			private global::Teraque.DataIndexCollection dataIndices;
			
			private global::Teraque.DataIndex indexCommissionScheduleKey;
			
			private global::Teraque.DataIndex indexCommissionScheduleKeyExternalId0;
			
			private global::System.Data.DataRelation relationCommissionScheduleCommissionTranche;
			
			/// <summary>
			/// Creates the CommissionSchedule table.
			/// </summary>
			internal CommissionScheduleDataTable()
			{
				// Initialize the object.
				this.TableName = "CommissionSchedule";
				this.dataIndices = new global::Teraque.DataIndexCollection();
				// The CommissionScheduleId Column
				this.columnCommissionScheduleId = new global::System.Data.DataColumn("CommissionScheduleId", typeof(System.Guid), null, global::System.Data.MappingType.Element);
				this.columnCommissionScheduleId.AllowDBNull = false;
				this.Columns.Add(this.columnCommissionScheduleId);
				// The ExternalId0 Column
				this.columnExternalId0 = new global::System.Data.DataColumn("ExternalId0", typeof(string), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnExternalId0);
				// The Name Column
				this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnName);
				// The RowVersion Column
				this.columnRowVersion = new global::System.Data.DataColumn("RowVersion", typeof(long), null, global::System.Data.MappingType.Element);
				this.columnRowVersion.AllowDBNull = false;
				this.Columns.Add(this.columnRowVersion);
				// The CommissionScheduleKey Index
				this.indexCommissionScheduleKey = new CommissionScheduleKeyIndex("CommissionScheduleKey", new global::System.Data.DataColumn[] {
							this.columnCommissionScheduleId});
				this.Indices.Add(this.indexCommissionScheduleKey);
				// The CommissionScheduleKeyExternalId0 Index
				this.indexCommissionScheduleKeyExternalId0 = new CommissionScheduleKeyExternalId0Index("CommissionScheduleKeyExternalId0", new global::System.Data.DataColumn[] {
							this.columnExternalId0});
				this.Indices.Add(this.indexCommissionScheduleKeyExternalId0);
			}
			
			/// <summary>
			/// Gets the child relation between the CommissionSchedule and CommissionTranche tables.
			/// </summary>
			internal global::System.Data.DataRelation CommissionScheduleCommissionTrancheRelation
			{
				get
				{
					return this.relationCommissionScheduleCommissionTranche;
				}
			}
			
			/// <summary>
			/// Gets the CommissionScheduleId column of the CommissionSchedule table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn CommissionScheduleIdColumn
			{
				get
				{
					return this.columnCommissionScheduleId;
				}
			}
			
			/// <summary>
			/// Gets the CommissionScheduleKey index on the CommissionSchedule table.
			/// </summary>
			public CommissionScheduleKeyIndex CommissionScheduleKey
			{
				get
				{
					return ((CommissionScheduleKeyIndex)(this.indexCommissionScheduleKey));
				}
			}
			
			/// <summary>
			/// Gets the CommissionScheduleKeyExternalId0 index on the CommissionSchedule table.
			/// </summary>
			public CommissionScheduleKeyExternalId0Index CommissionScheduleKeyExternalId0
			{
				get
				{
					return ((CommissionScheduleKeyExternalId0Index)(this.indexCommissionScheduleKeyExternalId0));
				}
			}
			
			/// <summary>
			/// Gets the number of rows in the CommissionSchedule table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public int Count
			{
				get
				{
					return this.Rows.Count;
				}
			}
			
			/// <summary>
			/// Gets the ExternalId0 column of the CommissionSchedule table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn ExternalId0Column
			{
				get
				{
					return this.columnExternalId0;
				}
			}
			
			/// <summary>
			/// Gets a collection of Teraque.DataModelGenerator.DataIndices on a table.
			/// </summary>
			public global::Teraque.DataIndexCollection Indices
			{
				get
				{
					return this.dataIndices;
				}
			}
			
			/// <summary>
			/// Indexer to a row in the CommissionSchedule table.
			/// </summary>
			/// <param name="index">The integer index of the row.</param>
			/// <returns>The CommissionSchedule row found at the given index.</returns>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public DataModel.CommissionScheduleRow this[int index]
			{
				get
				{
					return ((DataModel.CommissionScheduleRow)(this.Rows[index]));
				}
			}
			
			/// <summary>
			/// Gets the Name column of the CommissionSchedule table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn NameColumn
			{
				get
				{
					return this.columnName;
				}
			}
			
			/// <summary>
			/// Gets the RowVersion column of the CommissionSchedule table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn RowVersionColumn
			{
				get
				{
					return this.columnRowVersion;
				}
			}
			
			/// <summary>
			/// Occurs after a CommissionSchedule row has been changed successfully.
			/// </summary>
			public event CommissionScheduleRowChangeEventHandler CommissionScheduleRowChanged;
			
			/// <summary>
			/// Occurs when a CommissionSchedule row is changing.
			/// </summary>
			public event CommissionScheduleRowChangeEventHandler CommissionScheduleRowChanging;
			
			/// <summary>
			/// Occurs after a CommissionSchedule row in the table has been deleted.
			/// </summary>
			public event CommissionScheduleRowChangeEventHandler CommissionScheduleRowDeleted;
			
			/// <summary>
			/// Occurs before a CommissionSchedule row in the table is about to be deleted.
			/// </summary>
			public event CommissionScheduleRowChangeEventHandler CommissionScheduleRowDeleting;
			
			/// <summary>
			/// Returns the type of the row in a CommissionSchedule table.
			/// </summary>
			/// <returns>The CommissionScheduleRow type.</returns>
			protected override global::System.Type GetRowType()
			{
				return typeof(CommissionScheduleRow);
			}
			
			/// <summary>
			/// Initializes the relation fields with the parent and child relations.
			/// </summary>
			internal void InitializeRelations()
			{
				this.relationCommissionScheduleCommissionTranche = this.ChildRelations["FK_CommissionSchedule_CommissionTranche"];
			}
			
			/// <summary>
			/// Initializes a new instance of a CommissionSchedule row.  Constructs a row from the builder.  Only for internal usage.
			/// </summary>
			/// <returns>A new row with the same schema as the table.</returns>
			protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder dataRowBuilder)
			{
				return new CommissionScheduleRow(dataRowBuilder);
			}
			
			/// <summary>
			/// Raises the CommissionScheduleRowChanged event.
			/// </summary>
			/// <param name="e">Provides data for the CommissionScheduleRow changing and deleting events.</param>
			protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowChanged(e);
				if ((this.CommissionScheduleRowChanged != null))
				{
					this.CommissionScheduleRowChanged(this, new CommissionScheduleRowChangeEventArgs(((CommissionScheduleRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the CommissionScheduleRowChanging event.
			/// </summary>
			/// <param name="e">Provides data for the CommissionScheduleRow changing and deleting events.</param>
			protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowChanging(e);
				if ((this.CommissionScheduleRowChanging != null))
				{
					this.CommissionScheduleRowChanging(this, new CommissionScheduleRowChangeEventArgs(((CommissionScheduleRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the CommissionScheduleRowDeleted event.
			/// </summary>
			/// <param name="e">Provides data for the CommissionScheduleRow changing and deleting events.</param>
			protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowDeleted(e);
				if ((this.CommissionScheduleRowDeleted != null))
				{
					this.CommissionScheduleRowDeleted(this, new CommissionScheduleRowChangeEventArgs(((CommissionScheduleRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the CommissionScheduleRowDeleting event.
			/// </summary>
			/// <param name="e">Provides data for the CommissionScheduleRow changing and deleting events.</param>
			protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowDeleting(e);
				if ((this.CommissionScheduleRowDeleting != null))
				{
					this.CommissionScheduleRowDeleting(this, new CommissionScheduleRowChangeEventArgs(((CommissionScheduleRow)(e.Row)), e.Action));
				}
			}
		}
		
		/// <summary>
		/// The CommissionTranche table.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public partial class CommissionTrancheDataTable : global::System.Data.TypedTableBase<DataModel.CommissionTrancheRow>
		{
			
			private global::System.Data.DataColumn columnCommissionScheduleId;
			
			private global::System.Data.DataColumn columnCommissionTrancheId;
			
			private global::System.Data.DataColumn columnCommissionTypeCode;
			
			private global::System.Data.DataColumn columnCommissionUnitCode;
			
			private global::System.Data.DataColumn columnEndRange;
			
			private global::System.Data.DataColumn columnExternalId0;
			
			private global::System.Data.DataColumn columnRowVersion;
			
			private global::System.Data.DataColumn columnStartRange;
			
			private global::System.Data.DataColumn columnValue;
			
			private global::Teraque.DataIndexCollection dataIndices;
			
			private global::Teraque.DataIndex indexCommissionTrancheKey;
			
			private global::Teraque.DataIndex indexCommissionTrancheKeyExternalId0;
			
			private global::System.Data.DataRelation relationCommissionScheduleCommissionTranche;
			
			private global::System.Data.DataRelation relationCommissionTypeCommissionTranche;
			
			private global::System.Data.DataRelation relationCommissionUnitCommissionTranche;
			
			/// <summary>
			/// Creates the CommissionTranche table.
			/// </summary>
			internal CommissionTrancheDataTable()
			{
				// Initialize the object.
				this.TableName = "CommissionTranche";
				this.dataIndices = new global::Teraque.DataIndexCollection();
				// The CommissionScheduleId Column
				this.columnCommissionScheduleId = new global::System.Data.DataColumn("CommissionScheduleId", typeof(System.Guid), null, global::System.Data.MappingType.Element);
				this.columnCommissionScheduleId.AllowDBNull = false;
				this.Columns.Add(this.columnCommissionScheduleId);
				// The CommissionTrancheId Column
				this.columnCommissionTrancheId = new global::System.Data.DataColumn("CommissionTrancheId", typeof(System.Guid), null, global::System.Data.MappingType.Element);
				this.columnCommissionTrancheId.AllowDBNull = false;
				this.Columns.Add(this.columnCommissionTrancheId);
				// The CommissionTypeCode Column
				this.columnCommissionTypeCode = new global::System.Data.DataColumn("CommissionTypeCode", typeof(Teraque.CommissionTypeCode), null, global::System.Data.MappingType.Element);
				this.columnCommissionTypeCode.AllowDBNull = false;
				this.Columns.Add(this.columnCommissionTypeCode);
				// The CommissionUnitCode Column
				this.columnCommissionUnitCode = new global::System.Data.DataColumn("CommissionUnitCode", typeof(Teraque.CommissionUnitCode), null, global::System.Data.MappingType.Element);
				this.columnCommissionUnitCode.AllowDBNull = false;
				this.Columns.Add(this.columnCommissionUnitCode);
				// The EndRange Column
				this.columnEndRange = new global::System.Data.DataColumn("EndRange", typeof(decimal), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnEndRange);
				// The ExternalId0 Column
				this.columnExternalId0 = new global::System.Data.DataColumn("ExternalId0", typeof(string), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnExternalId0);
				// The RowVersion Column
				this.columnRowVersion = new global::System.Data.DataColumn("RowVersion", typeof(long), null, global::System.Data.MappingType.Element);
				this.columnRowVersion.AllowDBNull = false;
				this.Columns.Add(this.columnRowVersion);
				// The StartRange Column
				this.columnStartRange = new global::System.Data.DataColumn("StartRange", typeof(decimal), null, global::System.Data.MappingType.Element);
				this.columnStartRange.AllowDBNull = false;
				this.columnStartRange.DefaultValue = 0.0m;
				this.Columns.Add(this.columnStartRange);
				// The Value Column
				this.columnValue = new global::System.Data.DataColumn("Value", typeof(decimal), null, global::System.Data.MappingType.Element);
				this.columnValue.AllowDBNull = false;
				this.columnValue.DefaultValue = 0.0m;
				this.Columns.Add(this.columnValue);
				// The CommissionTrancheKey Index
				this.indexCommissionTrancheKey = new CommissionTrancheKeyIndex("CommissionTrancheKey", new global::System.Data.DataColumn[] {
							this.columnCommissionTrancheId});
				this.Indices.Add(this.indexCommissionTrancheKey);
				// The CommissionTrancheKeyExternalId0 Index
				this.indexCommissionTrancheKeyExternalId0 = new CommissionTrancheKeyExternalId0Index("CommissionTrancheKeyExternalId0", new global::System.Data.DataColumn[] {
							this.columnExternalId0});
				this.Indices.Add(this.indexCommissionTrancheKeyExternalId0);
			}
			
			/// <summary>
			/// Gets the parent relation between the CommissionSchedule and CommissionTranche tables.
			/// </summary>
			public global::System.Data.DataRelation CommissionScheduleCommissionTrancheRelation
			{
				get
				{
					return this.relationCommissionScheduleCommissionTranche;
				}
			}
			
			/// <summary>
			/// Gets the CommissionScheduleId column of the CommissionTranche table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn CommissionScheduleIdColumn
			{
				get
				{
					return this.columnCommissionScheduleId;
				}
			}
			
			/// <summary>
			/// Gets the CommissionTrancheId column of the CommissionTranche table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn CommissionTrancheIdColumn
			{
				get
				{
					return this.columnCommissionTrancheId;
				}
			}
			
			/// <summary>
			/// Gets the CommissionTrancheKey index on the CommissionTranche table.
			/// </summary>
			public CommissionTrancheKeyIndex CommissionTrancheKey
			{
				get
				{
					return ((CommissionTrancheKeyIndex)(this.indexCommissionTrancheKey));
				}
			}
			
			/// <summary>
			/// Gets the CommissionTrancheKeyExternalId0 index on the CommissionTranche table.
			/// </summary>
			public CommissionTrancheKeyExternalId0Index CommissionTrancheKeyExternalId0
			{
				get
				{
					return ((CommissionTrancheKeyExternalId0Index)(this.indexCommissionTrancheKeyExternalId0));
				}
			}
			
			/// <summary>
			/// Gets the CommissionTypeCode column of the CommissionTranche table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn CommissionTypeCodeColumn
			{
				get
				{
					return this.columnCommissionTypeCode;
				}
			}
			
			/// <summary>
			/// Gets the parent relation between the CommissionType and CommissionTranche tables.
			/// </summary>
			public global::System.Data.DataRelation CommissionTypeCommissionTrancheRelation
			{
				get
				{
					return this.relationCommissionTypeCommissionTranche;
				}
			}
			
			/// <summary>
			/// Gets the CommissionUnitCode column of the CommissionTranche table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn CommissionUnitCodeColumn
			{
				get
				{
					return this.columnCommissionUnitCode;
				}
			}
			
			/// <summary>
			/// Gets the parent relation between the CommissionUnit and CommissionTranche tables.
			/// </summary>
			public global::System.Data.DataRelation CommissionUnitCommissionTrancheRelation
			{
				get
				{
					return this.relationCommissionUnitCommissionTranche;
				}
			}
			
			/// <summary>
			/// Gets the number of rows in the CommissionTranche table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public int Count
			{
				get
				{
					return this.Rows.Count;
				}
			}
			
			/// <summary>
			/// Gets the EndRange column of the CommissionTranche table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn EndRangeColumn
			{
				get
				{
					return this.columnEndRange;
				}
			}
			
			/// <summary>
			/// Gets the ExternalId0 column of the CommissionTranche table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn ExternalId0Column
			{
				get
				{
					return this.columnExternalId0;
				}
			}
			
			/// <summary>
			/// Gets a collection of Teraque.DataModelGenerator.DataIndices on a table.
			/// </summary>
			public global::Teraque.DataIndexCollection Indices
			{
				get
				{
					return this.dataIndices;
				}
			}
			
			/// <summary>
			/// Indexer to a row in the CommissionTranche table.
			/// </summary>
			/// <param name="index">The integer index of the row.</param>
			/// <returns>The CommissionTranche row found at the given index.</returns>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public DataModel.CommissionTrancheRow this[int index]
			{
				get
				{
					return ((DataModel.CommissionTrancheRow)(this.Rows[index]));
				}
			}
			
			/// <summary>
			/// Gets the RowVersion column of the CommissionTranche table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn RowVersionColumn
			{
				get
				{
					return this.columnRowVersion;
				}
			}
			
			/// <summary>
			/// Gets the StartRange column of the CommissionTranche table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn StartRangeColumn
			{
				get
				{
					return this.columnStartRange;
				}
			}
			
			/// <summary>
			/// Gets the Value column of the CommissionTranche table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn ValueColumn
			{
				get
				{
					return this.columnValue;
				}
			}
			
			/// <summary>
			/// Occurs after a CommissionTranche row has been changed successfully.
			/// </summary>
			public event CommissionTrancheRowChangeEventHandler CommissionTrancheRowChanged;
			
			/// <summary>
			/// Occurs when a CommissionTranche row is changing.
			/// </summary>
			public event CommissionTrancheRowChangeEventHandler CommissionTrancheRowChanging;
			
			/// <summary>
			/// Occurs after a CommissionTranche row in the table has been deleted.
			/// </summary>
			public event CommissionTrancheRowChangeEventHandler CommissionTrancheRowDeleted;
			
			/// <summary>
			/// Occurs before a CommissionTranche row in the table is about to be deleted.
			/// </summary>
			public event CommissionTrancheRowChangeEventHandler CommissionTrancheRowDeleting;
			
			/// <summary>
			/// Returns the type of the row in a CommissionTranche table.
			/// </summary>
			/// <returns>The CommissionTrancheRow type.</returns>
			protected override global::System.Type GetRowType()
			{
				return typeof(CommissionTrancheRow);
			}
			
			/// <summary>
			/// Initializes the relation fields with the parent and child relations.
			/// </summary>
			internal void InitializeRelations()
			{
				this.relationCommissionScheduleCommissionTranche = this.ParentRelations["FK_CommissionSchedule_CommissionTranche"];
				this.relationCommissionTypeCommissionTranche = this.ParentRelations["FK_CommissionType_CommissionTranche"];
				this.relationCommissionUnitCommissionTranche = this.ParentRelations["FK_CommissionUnit_CommissionTranche"];
			}
			
			/// <summary>
			/// Initializes a new instance of a CommissionTranche row.  Constructs a row from the builder.  Only for internal usage.
			/// </summary>
			/// <returns>A new row with the same schema as the table.</returns>
			protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder dataRowBuilder)
			{
				return new CommissionTrancheRow(dataRowBuilder);
			}
			
			/// <summary>
			/// Raises the CommissionTrancheRowChanged event.
			/// </summary>
			/// <param name="e">Provides data for the CommissionTrancheRow changing and deleting events.</param>
			protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowChanged(e);
				if ((this.CommissionTrancheRowChanged != null))
				{
					this.CommissionTrancheRowChanged(this, new CommissionTrancheRowChangeEventArgs(((CommissionTrancheRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the CommissionTrancheRowChanging event.
			/// </summary>
			/// <param name="e">Provides data for the CommissionTrancheRow changing and deleting events.</param>
			protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowChanging(e);
				if ((this.CommissionTrancheRowChanging != null))
				{
					this.CommissionTrancheRowChanging(this, new CommissionTrancheRowChangeEventArgs(((CommissionTrancheRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the CommissionTrancheRowDeleted event.
			/// </summary>
			/// <param name="e">Provides data for the CommissionTrancheRow changing and deleting events.</param>
			protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowDeleted(e);
				if ((this.CommissionTrancheRowDeleted != null))
				{
					this.CommissionTrancheRowDeleted(this, new CommissionTrancheRowChangeEventArgs(((CommissionTrancheRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the CommissionTrancheRowDeleting event.
			/// </summary>
			/// <param name="e">Provides data for the CommissionTrancheRow changing and deleting events.</param>
			protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowDeleting(e);
				if ((this.CommissionTrancheRowDeleting != null))
				{
					this.CommissionTrancheRowDeleting(this, new CommissionTrancheRowChangeEventArgs(((CommissionTrancheRow)(e.Row)), e.Action));
				}
			}
		}
		
		/// <summary>
		/// The CommissionType table.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public partial class CommissionTypeDataTable : global::System.Data.TypedTableBase<DataModel.CommissionTypeRow>
		{
			
			private global::System.Data.DataColumn columnCommissionTypeCode;
			
			private global::System.Data.DataColumn columnDescription;
			
			private global::System.Data.DataColumn columnExternalId0;
			
			private global::System.Data.DataColumn columnName;
			
			private global::System.Data.DataColumn columnRowVersion;
			
			private global::Teraque.DataIndexCollection dataIndices;
			
			private global::Teraque.DataIndex indexCommissionTypeKey;
			
			private global::Teraque.DataIndex indexCommissionTypeKeyExternalId0;
			
			private global::System.Data.DataRelation relationCommissionTypeCommissionTranche;
			
			/// <summary>
			/// Creates the CommissionType table.
			/// </summary>
			internal CommissionTypeDataTable()
			{
				// Initialize the object.
				this.TableName = "CommissionType";
				this.dataIndices = new global::Teraque.DataIndexCollection();
				// The CommissionTypeCode Column
				this.columnCommissionTypeCode = new global::System.Data.DataColumn("CommissionTypeCode", typeof(Teraque.CommissionTypeCode), null, global::System.Data.MappingType.Element);
				this.columnCommissionTypeCode.AllowDBNull = false;
				this.Columns.Add(this.columnCommissionTypeCode);
				// The Description Column
				this.columnDescription = new global::System.Data.DataColumn("Description", typeof(string), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnDescription);
				// The ExternalId0 Column
				this.columnExternalId0 = new global::System.Data.DataColumn("ExternalId0", typeof(string), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnExternalId0);
				// The Name Column
				this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnName);
				// The RowVersion Column
				this.columnRowVersion = new global::System.Data.DataColumn("RowVersion", typeof(long), null, global::System.Data.MappingType.Element);
				this.columnRowVersion.AllowDBNull = false;
				this.Columns.Add(this.columnRowVersion);
				// The CommissionTypeKey Index
				this.indexCommissionTypeKey = new CommissionTypeKeyIndex("CommissionTypeKey", new global::System.Data.DataColumn[] {
							this.columnCommissionTypeCode});
				this.Indices.Add(this.indexCommissionTypeKey);
				// The CommissionTypeKeyExternalId0 Index
				this.indexCommissionTypeKeyExternalId0 = new CommissionTypeKeyExternalId0Index("CommissionTypeKeyExternalId0", new global::System.Data.DataColumn[] {
							this.columnExternalId0});
				this.Indices.Add(this.indexCommissionTypeKeyExternalId0);
			}
			
			/// <summary>
			/// Gets the CommissionTypeCode column of the CommissionType table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn CommissionTypeCodeColumn
			{
				get
				{
					return this.columnCommissionTypeCode;
				}
			}
			
			/// <summary>
			/// Gets the child relation between the CommissionType and CommissionTranche tables.
			/// </summary>
			internal global::System.Data.DataRelation CommissionTypeCommissionTrancheRelation
			{
				get
				{
					return this.relationCommissionTypeCommissionTranche;
				}
			}
			
			/// <summary>
			/// Gets the CommissionTypeKey index on the CommissionType table.
			/// </summary>
			public CommissionTypeKeyIndex CommissionTypeKey
			{
				get
				{
					return ((CommissionTypeKeyIndex)(this.indexCommissionTypeKey));
				}
			}
			
			/// <summary>
			/// Gets the CommissionTypeKeyExternalId0 index on the CommissionType table.
			/// </summary>
			public CommissionTypeKeyExternalId0Index CommissionTypeKeyExternalId0
			{
				get
				{
					return ((CommissionTypeKeyExternalId0Index)(this.indexCommissionTypeKeyExternalId0));
				}
			}
			
			/// <summary>
			/// Gets the number of rows in the CommissionType table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public int Count
			{
				get
				{
					return this.Rows.Count;
				}
			}
			
			/// <summary>
			/// Gets the Description column of the CommissionType table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn DescriptionColumn
			{
				get
				{
					return this.columnDescription;
				}
			}
			
			/// <summary>
			/// Gets the ExternalId0 column of the CommissionType table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn ExternalId0Column
			{
				get
				{
					return this.columnExternalId0;
				}
			}
			
			/// <summary>
			/// Gets a collection of Teraque.DataModelGenerator.DataIndices on a table.
			/// </summary>
			public global::Teraque.DataIndexCollection Indices
			{
				get
				{
					return this.dataIndices;
				}
			}
			
			/// <summary>
			/// Indexer to a row in the CommissionType table.
			/// </summary>
			/// <param name="index">The integer index of the row.</param>
			/// <returns>The CommissionType row found at the given index.</returns>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public DataModel.CommissionTypeRow this[int index]
			{
				get
				{
					return ((DataModel.CommissionTypeRow)(this.Rows[index]));
				}
			}
			
			/// <summary>
			/// Gets the Name column of the CommissionType table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn NameColumn
			{
				get
				{
					return this.columnName;
				}
			}
			
			/// <summary>
			/// Gets the RowVersion column of the CommissionType table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn RowVersionColumn
			{
				get
				{
					return this.columnRowVersion;
				}
			}
			
			/// <summary>
			/// Occurs after a CommissionType row has been changed successfully.
			/// </summary>
			public event CommissionTypeRowChangeEventHandler CommissionTypeRowChanged;
			
			/// <summary>
			/// Occurs when a CommissionType row is changing.
			/// </summary>
			public event CommissionTypeRowChangeEventHandler CommissionTypeRowChanging;
			
			/// <summary>
			/// Occurs after a CommissionType row in the table has been deleted.
			/// </summary>
			public event CommissionTypeRowChangeEventHandler CommissionTypeRowDeleted;
			
			/// <summary>
			/// Occurs before a CommissionType row in the table is about to be deleted.
			/// </summary>
			public event CommissionTypeRowChangeEventHandler CommissionTypeRowDeleting;
			
			/// <summary>
			/// Returns the type of the row in a CommissionType table.
			/// </summary>
			/// <returns>The CommissionTypeRow type.</returns>
			protected override global::System.Type GetRowType()
			{
				return typeof(CommissionTypeRow);
			}
			
			/// <summary>
			/// Initializes the relation fields with the parent and child relations.
			/// </summary>
			internal void InitializeRelations()
			{
				this.relationCommissionTypeCommissionTranche = this.ChildRelations["FK_CommissionType_CommissionTranche"];
			}
			
			/// <summary>
			/// Initializes a new instance of a CommissionType row.  Constructs a row from the builder.  Only for internal usage.
			/// </summary>
			/// <returns>A new row with the same schema as the table.</returns>
			protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder dataRowBuilder)
			{
				return new CommissionTypeRow(dataRowBuilder);
			}
			
			/// <summary>
			/// Raises the CommissionTypeRowChanged event.
			/// </summary>
			/// <param name="e">Provides data for the CommissionTypeRow changing and deleting events.</param>
			protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowChanged(e);
				if ((this.CommissionTypeRowChanged != null))
				{
					this.CommissionTypeRowChanged(this, new CommissionTypeRowChangeEventArgs(((CommissionTypeRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the CommissionTypeRowChanging event.
			/// </summary>
			/// <param name="e">Provides data for the CommissionTypeRow changing and deleting events.</param>
			protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowChanging(e);
				if ((this.CommissionTypeRowChanging != null))
				{
					this.CommissionTypeRowChanging(this, new CommissionTypeRowChangeEventArgs(((CommissionTypeRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the CommissionTypeRowDeleted event.
			/// </summary>
			/// <param name="e">Provides data for the CommissionTypeRow changing and deleting events.</param>
			protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowDeleted(e);
				if ((this.CommissionTypeRowDeleted != null))
				{
					this.CommissionTypeRowDeleted(this, new CommissionTypeRowChangeEventArgs(((CommissionTypeRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the CommissionTypeRowDeleting event.
			/// </summary>
			/// <param name="e">Provides data for the CommissionTypeRow changing and deleting events.</param>
			protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowDeleting(e);
				if ((this.CommissionTypeRowDeleting != null))
				{
					this.CommissionTypeRowDeleting(this, new CommissionTypeRowChangeEventArgs(((CommissionTypeRow)(e.Row)), e.Action));
				}
			}
		}
		
		/// <summary>
		/// The CommissionUnit table.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public partial class CommissionUnitDataTable : global::System.Data.TypedTableBase<DataModel.CommissionUnitRow>
		{
			
			private global::System.Data.DataColumn columnCommissionUnitCode;
			
			private global::System.Data.DataColumn columnDescription;
			
			private global::System.Data.DataColumn columnExternalId0;
			
			private global::System.Data.DataColumn columnName;
			
			private global::System.Data.DataColumn columnRowVersion;
			
			private global::Teraque.DataIndexCollection dataIndices;
			
			private global::Teraque.DataIndex indexCommissionUnitKey;
			
			private global::Teraque.DataIndex indexCommissionUnitKeyExternalId0;
			
			private global::System.Data.DataRelation relationCommissionUnitCommissionTranche;
			
			/// <summary>
			/// Creates the CommissionUnit table.
			/// </summary>
			internal CommissionUnitDataTable()
			{
				// Initialize the object.
				this.TableName = "CommissionUnit";
				this.dataIndices = new global::Teraque.DataIndexCollection();
				// The CommissionUnitCode Column
				this.columnCommissionUnitCode = new global::System.Data.DataColumn("CommissionUnitCode", typeof(Teraque.CommissionUnitCode), null, global::System.Data.MappingType.Element);
				this.columnCommissionUnitCode.AllowDBNull = false;
				this.Columns.Add(this.columnCommissionUnitCode);
				// The Description Column
				this.columnDescription = new global::System.Data.DataColumn("Description", typeof(string), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnDescription);
				// The ExternalId0 Column
				this.columnExternalId0 = new global::System.Data.DataColumn("ExternalId0", typeof(string), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnExternalId0);
				// The Name Column
				this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnName);
				// The RowVersion Column
				this.columnRowVersion = new global::System.Data.DataColumn("RowVersion", typeof(long), null, global::System.Data.MappingType.Element);
				this.columnRowVersion.AllowDBNull = false;
				this.Columns.Add(this.columnRowVersion);
				// The CommissionUnitKey Index
				this.indexCommissionUnitKey = new CommissionUnitKeyIndex("CommissionUnitKey", new global::System.Data.DataColumn[] {
							this.columnCommissionUnitCode});
				this.Indices.Add(this.indexCommissionUnitKey);
				// The CommissionUnitKeyExternalId0 Index
				this.indexCommissionUnitKeyExternalId0 = new CommissionUnitKeyExternalId0Index("CommissionUnitKeyExternalId0", new global::System.Data.DataColumn[] {
							this.columnExternalId0});
				this.Indices.Add(this.indexCommissionUnitKeyExternalId0);
			}
			
			/// <summary>
			/// Gets the CommissionUnitCode column of the CommissionUnit table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn CommissionUnitCodeColumn
			{
				get
				{
					return this.columnCommissionUnitCode;
				}
			}
			
			/// <summary>
			/// Gets the child relation between the CommissionUnit and CommissionTranche tables.
			/// </summary>
			internal global::System.Data.DataRelation CommissionUnitCommissionTrancheRelation
			{
				get
				{
					return this.relationCommissionUnitCommissionTranche;
				}
			}
			
			/// <summary>
			/// Gets the CommissionUnitKey index on the CommissionUnit table.
			/// </summary>
			public CommissionUnitKeyIndex CommissionUnitKey
			{
				get
				{
					return ((CommissionUnitKeyIndex)(this.indexCommissionUnitKey));
				}
			}
			
			/// <summary>
			/// Gets the CommissionUnitKeyExternalId0 index on the CommissionUnit table.
			/// </summary>
			public CommissionUnitKeyExternalId0Index CommissionUnitKeyExternalId0
			{
				get
				{
					return ((CommissionUnitKeyExternalId0Index)(this.indexCommissionUnitKeyExternalId0));
				}
			}
			
			/// <summary>
			/// Gets the number of rows in the CommissionUnit table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public int Count
			{
				get
				{
					return this.Rows.Count;
				}
			}
			
			/// <summary>
			/// Gets the Description column of the CommissionUnit table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn DescriptionColumn
			{
				get
				{
					return this.columnDescription;
				}
			}
			
			/// <summary>
			/// Gets the ExternalId0 column of the CommissionUnit table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn ExternalId0Column
			{
				get
				{
					return this.columnExternalId0;
				}
			}
			
			/// <summary>
			/// Gets a collection of Teraque.DataModelGenerator.DataIndices on a table.
			/// </summary>
			public global::Teraque.DataIndexCollection Indices
			{
				get
				{
					return this.dataIndices;
				}
			}
			
			/// <summary>
			/// Indexer to a row in the CommissionUnit table.
			/// </summary>
			/// <param name="index">The integer index of the row.</param>
			/// <returns>The CommissionUnit row found at the given index.</returns>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public DataModel.CommissionUnitRow this[int index]
			{
				get
				{
					return ((DataModel.CommissionUnitRow)(this.Rows[index]));
				}
			}
			
			/// <summary>
			/// Gets the Name column of the CommissionUnit table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn NameColumn
			{
				get
				{
					return this.columnName;
				}
			}
			
			/// <summary>
			/// Gets the RowVersion column of the CommissionUnit table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn RowVersionColumn
			{
				get
				{
					return this.columnRowVersion;
				}
			}
			
			/// <summary>
			/// Occurs after a CommissionUnit row has been changed successfully.
			/// </summary>
			public event CommissionUnitRowChangeEventHandler CommissionUnitRowChanged;
			
			/// <summary>
			/// Occurs when a CommissionUnit row is changing.
			/// </summary>
			public event CommissionUnitRowChangeEventHandler CommissionUnitRowChanging;
			
			/// <summary>
			/// Occurs after a CommissionUnit row in the table has been deleted.
			/// </summary>
			public event CommissionUnitRowChangeEventHandler CommissionUnitRowDeleted;
			
			/// <summary>
			/// Occurs before a CommissionUnit row in the table is about to be deleted.
			/// </summary>
			public event CommissionUnitRowChangeEventHandler CommissionUnitRowDeleting;
			
			/// <summary>
			/// Returns the type of the row in a CommissionUnit table.
			/// </summary>
			/// <returns>The CommissionUnitRow type.</returns>
			protected override global::System.Type GetRowType()
			{
				return typeof(CommissionUnitRow);
			}
			
			/// <summary>
			/// Initializes the relation fields with the parent and child relations.
			/// </summary>
			internal void InitializeRelations()
			{
				this.relationCommissionUnitCommissionTranche = this.ChildRelations["FK_CommissionUnit_CommissionTranche"];
			}
			
			/// <summary>
			/// Initializes a new instance of a CommissionUnit row.  Constructs a row from the builder.  Only for internal usage.
			/// </summary>
			/// <returns>A new row with the same schema as the table.</returns>
			protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder dataRowBuilder)
			{
				return new CommissionUnitRow(dataRowBuilder);
			}
			
			/// <summary>
			/// Raises the CommissionUnitRowChanged event.
			/// </summary>
			/// <param name="e">Provides data for the CommissionUnitRow changing and deleting events.</param>
			protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowChanged(e);
				if ((this.CommissionUnitRowChanged != null))
				{
					this.CommissionUnitRowChanged(this, new CommissionUnitRowChangeEventArgs(((CommissionUnitRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the CommissionUnitRowChanging event.
			/// </summary>
			/// <param name="e">Provides data for the CommissionUnitRow changing and deleting events.</param>
			protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowChanging(e);
				if ((this.CommissionUnitRowChanging != null))
				{
					this.CommissionUnitRowChanging(this, new CommissionUnitRowChangeEventArgs(((CommissionUnitRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the CommissionUnitRowDeleted event.
			/// </summary>
			/// <param name="e">Provides data for the CommissionUnitRow changing and deleting events.</param>
			protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowDeleted(e);
				if ((this.CommissionUnitRowDeleted != null))
				{
					this.CommissionUnitRowDeleted(this, new CommissionUnitRowChangeEventArgs(((CommissionUnitRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the CommissionUnitRowDeleting event.
			/// </summary>
			/// <param name="e">Provides data for the CommissionUnitRow changing and deleting events.</param>
			protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowDeleting(e);
				if ((this.CommissionUnitRowDeleting != null))
				{
					this.CommissionUnitRowDeleting(this, new CommissionUnitRowChangeEventArgs(((CommissionUnitRow)(e.Row)), e.Action));
				}
			}
		}
		
		/// <summary>
		/// The ComplianceOfficer table.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public partial class ComplianceOfficerDataTable : global::System.Data.TypedTableBase<DataModel.ComplianceOfficerRow>
		{
			
			private global::System.Data.DataColumn columnComplianceOfficerId;
			
			private global::System.Data.DataColumn columnRowVersion;
			
			private global::Teraque.DataIndexCollection dataIndices;
			
			private global::Teraque.DataIndex indexComplianceOfficerKey;
			
			private global::System.Data.DataRelation relationUserComplianceOfficer;
			
			/// <summary>
			/// Creates the ComplianceOfficer table.
			/// </summary>
			internal ComplianceOfficerDataTable()
			{
				// Initialize the object.
				this.TableName = "ComplianceOfficer";
				this.dataIndices = new global::Teraque.DataIndexCollection();
				// The ComplianceOfficerId Column
				this.columnComplianceOfficerId = new global::System.Data.DataColumn("ComplianceOfficerId", typeof(System.Guid), null, global::System.Data.MappingType.Element);
				this.columnComplianceOfficerId.AllowDBNull = false;
				this.Columns.Add(this.columnComplianceOfficerId);
				// The RowVersion Column
				this.columnRowVersion = new global::System.Data.DataColumn("RowVersion", typeof(long), null, global::System.Data.MappingType.Element);
				this.columnRowVersion.AllowDBNull = false;
				this.Columns.Add(this.columnRowVersion);
				// The ComplianceOfficerKey Index
				this.indexComplianceOfficerKey = new ComplianceOfficerKeyIndex("ComplianceOfficerKey", new global::System.Data.DataColumn[] {
							this.columnComplianceOfficerId});
				this.Indices.Add(this.indexComplianceOfficerKey);
			}
			
			/// <summary>
			/// Gets the ComplianceOfficerId column of the ComplianceOfficer table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn ComplianceOfficerIdColumn
			{
				get
				{
					return this.columnComplianceOfficerId;
				}
			}
			
			/// <summary>
			/// Gets the ComplianceOfficerKey index on the ComplianceOfficer table.
			/// </summary>
			public ComplianceOfficerKeyIndex ComplianceOfficerKey
			{
				get
				{
					return ((ComplianceOfficerKeyIndex)(this.indexComplianceOfficerKey));
				}
			}
			
			/// <summary>
			/// Gets the number of rows in the ComplianceOfficer table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public int Count
			{
				get
				{
					return this.Rows.Count;
				}
			}
			
			/// <summary>
			/// Gets a collection of Teraque.DataModelGenerator.DataIndices on a table.
			/// </summary>
			public global::Teraque.DataIndexCollection Indices
			{
				get
				{
					return this.dataIndices;
				}
			}
			
			/// <summary>
			/// Indexer to a row in the ComplianceOfficer table.
			/// </summary>
			/// <param name="index">The integer index of the row.</param>
			/// <returns>The ComplianceOfficer row found at the given index.</returns>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public DataModel.ComplianceOfficerRow this[int index]
			{
				get
				{
					return ((DataModel.ComplianceOfficerRow)(this.Rows[index]));
				}
			}
			
			/// <summary>
			/// Gets the RowVersion column of the ComplianceOfficer table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn RowVersionColumn
			{
				get
				{
					return this.columnRowVersion;
				}
			}
			
			/// <summary>
			/// Gets the parent relation between the User and ComplianceOfficer tables.
			/// </summary>
			public global::System.Data.DataRelation UserComplianceOfficerRelation
			{
				get
				{
					return this.relationUserComplianceOfficer;
				}
			}
			
			/// <summary>
			/// Occurs after a ComplianceOfficer row has been changed successfully.
			/// </summary>
			public event ComplianceOfficerRowChangeEventHandler ComplianceOfficerRowChanged;
			
			/// <summary>
			/// Occurs when a ComplianceOfficer row is changing.
			/// </summary>
			public event ComplianceOfficerRowChangeEventHandler ComplianceOfficerRowChanging;
			
			/// <summary>
			/// Occurs after a ComplianceOfficer row in the table has been deleted.
			/// </summary>
			public event ComplianceOfficerRowChangeEventHandler ComplianceOfficerRowDeleted;
			
			/// <summary>
			/// Occurs before a ComplianceOfficer row in the table is about to be deleted.
			/// </summary>
			public event ComplianceOfficerRowChangeEventHandler ComplianceOfficerRowDeleting;
			
			/// <summary>
			/// Returns the type of the row in a ComplianceOfficer table.
			/// </summary>
			/// <returns>The ComplianceOfficerRow type.</returns>
			protected override global::System.Type GetRowType()
			{
				return typeof(ComplianceOfficerRow);
			}
			
			/// <summary>
			/// Initializes the relation fields with the parent and child relations.
			/// </summary>
			internal void InitializeRelations()
			{
				this.relationUserComplianceOfficer = this.ParentRelations["FK_User_ComplianceOfficer"];
			}
			
			/// <summary>
			/// Initializes a new instance of a ComplianceOfficer row.  Constructs a row from the builder.  Only for internal usage.
			/// </summary>
			/// <returns>A new row with the same schema as the table.</returns>
			protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder dataRowBuilder)
			{
				return new ComplianceOfficerRow(dataRowBuilder);
			}
			
			/// <summary>
			/// Raises the ComplianceOfficerRowChanged event.
			/// </summary>
			/// <param name="e">Provides data for the ComplianceOfficerRow changing and deleting events.</param>
			protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowChanged(e);
				if ((this.ComplianceOfficerRowChanged != null))
				{
					this.ComplianceOfficerRowChanged(this, new ComplianceOfficerRowChangeEventArgs(((ComplianceOfficerRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the ComplianceOfficerRowChanging event.
			/// </summary>
			/// <param name="e">Provides data for the ComplianceOfficerRow changing and deleting events.</param>
			protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowChanging(e);
				if ((this.ComplianceOfficerRowChanging != null))
				{
					this.ComplianceOfficerRowChanging(this, new ComplianceOfficerRowChangeEventArgs(((ComplianceOfficerRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the ComplianceOfficerRowDeleted event.
			/// </summary>
			/// <param name="e">Provides data for the ComplianceOfficerRow changing and deleting events.</param>
			protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowDeleted(e);
				if ((this.ComplianceOfficerRowDeleted != null))
				{
					this.ComplianceOfficerRowDeleted(this, new ComplianceOfficerRowChangeEventArgs(((ComplianceOfficerRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the ComplianceOfficerRowDeleting event.
			/// </summary>
			/// <param name="e">Provides data for the ComplianceOfficerRow changing and deleting events.</param>
			protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowDeleting(e);
				if ((this.ComplianceOfficerRowDeleting != null))
				{
					this.ComplianceOfficerRowDeleting(this, new ComplianceOfficerRowChangeEventArgs(((ComplianceOfficerRow)(e.Row)), e.Action));
				}
			}
		}
		
		/// <summary>
		/// The Condition table.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public partial class ConditionDataTable : global::System.Data.TypedTableBase<DataModel.ConditionRow>
		{
			
			private global::System.Data.DataColumn columnConditionCode;
			
			private global::System.Data.DataColumn columnDescription;
			
			private global::System.Data.DataColumn columnExternalId0;
			
			private global::System.Data.DataColumn columnExternalId1;
			
			private global::System.Data.DataColumn columnExternalId2;
			
			private global::System.Data.DataColumn columnExternalId3;
			
			private global::System.Data.DataColumn columnMnemonic;
			
			private global::System.Data.DataColumn columnRowVersion;
			
			private global::Teraque.DataIndexCollection dataIndices;
			
			private global::Teraque.DataIndex indexConditionKey;
			
			private global::Teraque.DataIndex indexConditionKeyExternalId0;
			
			private global::Teraque.DataIndex indexConditionKeyExternalId1;
			
			private global::Teraque.DataIndex indexConditionKeyExternalId2;
			
			private global::Teraque.DataIndex indexConditionKeyExternalId3;
			
			/// <summary>
			/// Creates the Condition table.
			/// </summary>
			internal ConditionDataTable()
			{
				// Initialize the object.
				this.TableName = "Condition";
				this.dataIndices = new global::Teraque.DataIndexCollection();
				// The ConditionCode Column
				this.columnConditionCode = new global::System.Data.DataColumn("ConditionCode", typeof(Teraque.ConditionCode), null, global::System.Data.MappingType.Element);
				this.columnConditionCode.AllowDBNull = false;
				this.Columns.Add(this.columnConditionCode);
				// The Description Column
				this.columnDescription = new global::System.Data.DataColumn("Description", typeof(string), null, global::System.Data.MappingType.Element);
				this.columnDescription.AllowDBNull = false;
				this.columnDescription.DefaultValue = "";
				this.Columns.Add(this.columnDescription);
				// The ExternalId0 Column
				this.columnExternalId0 = new global::System.Data.DataColumn("ExternalId0", typeof(string), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnExternalId0);
				// The ExternalId1 Column
				this.columnExternalId1 = new global::System.Data.DataColumn("ExternalId1", typeof(string), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnExternalId1);
				// The ExternalId2 Column
				this.columnExternalId2 = new global::System.Data.DataColumn("ExternalId2", typeof(string), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnExternalId2);
				// The ExternalId3 Column
				this.columnExternalId3 = new global::System.Data.DataColumn("ExternalId3", typeof(string), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnExternalId3);
				// The Mnemonic Column
				this.columnMnemonic = new global::System.Data.DataColumn("Mnemonic", typeof(string), null, global::System.Data.MappingType.Element);
				this.columnMnemonic.AllowDBNull = false;
				this.columnMnemonic.DefaultValue = "";
				this.Columns.Add(this.columnMnemonic);
				// The RowVersion Column
				this.columnRowVersion = new global::System.Data.DataColumn("RowVersion", typeof(long), null, global::System.Data.MappingType.Element);
				this.columnRowVersion.AllowDBNull = false;
				this.Columns.Add(this.columnRowVersion);
				// The ConditionKey Index
				this.indexConditionKey = new ConditionKeyIndex("ConditionKey", new global::System.Data.DataColumn[] {
							this.columnConditionCode});
				this.Indices.Add(this.indexConditionKey);
				// The ConditionKeyExternalId0 Index
				this.indexConditionKeyExternalId0 = new ConditionKeyExternalId0Index("ConditionKeyExternalId0", new global::System.Data.DataColumn[] {
							this.columnExternalId0});
				this.Indices.Add(this.indexConditionKeyExternalId0);
				// The ConditionKeyExternalId1 Index
				this.indexConditionKeyExternalId1 = new ConditionKeyExternalId1Index("ConditionKeyExternalId1", new global::System.Data.DataColumn[] {
							this.columnExternalId1});
				this.Indices.Add(this.indexConditionKeyExternalId1);
				// The ConditionKeyExternalId2 Index
				this.indexConditionKeyExternalId2 = new ConditionKeyExternalId2Index("ConditionKeyExternalId2", new global::System.Data.DataColumn[] {
							this.columnExternalId2});
				this.Indices.Add(this.indexConditionKeyExternalId2);
				// The ConditionKeyExternalId3 Index
				this.indexConditionKeyExternalId3 = new ConditionKeyExternalId3Index("ConditionKeyExternalId3", new global::System.Data.DataColumn[] {
							this.columnExternalId3});
				this.Indices.Add(this.indexConditionKeyExternalId3);
			}
			
			/// <summary>
			/// Gets the ConditionCode column of the Condition table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn ConditionCodeColumn
			{
				get
				{
					return this.columnConditionCode;
				}
			}
			
			/// <summary>
			/// Gets the ConditionKey index on the Condition table.
			/// </summary>
			public ConditionKeyIndex ConditionKey
			{
				get
				{
					return ((ConditionKeyIndex)(this.indexConditionKey));
				}
			}
			
			/// <summary>
			/// Gets the ConditionKeyExternalId0 index on the Condition table.
			/// </summary>
			public ConditionKeyExternalId0Index ConditionKeyExternalId0
			{
				get
				{
					return ((ConditionKeyExternalId0Index)(this.indexConditionKeyExternalId0));
				}
			}
			
			/// <summary>
			/// Gets the ConditionKeyExternalId1 index on the Condition table.
			/// </summary>
			public ConditionKeyExternalId1Index ConditionKeyExternalId1
			{
				get
				{
					return ((ConditionKeyExternalId1Index)(this.indexConditionKeyExternalId1));
				}
			}
			
			/// <summary>
			/// Gets the ConditionKeyExternalId2 index on the Condition table.
			/// </summary>
			public ConditionKeyExternalId2Index ConditionKeyExternalId2
			{
				get
				{
					return ((ConditionKeyExternalId2Index)(this.indexConditionKeyExternalId2));
				}
			}
			
			/// <summary>
			/// Gets the ConditionKeyExternalId3 index on the Condition table.
			/// </summary>
			public ConditionKeyExternalId3Index ConditionKeyExternalId3
			{
				get
				{
					return ((ConditionKeyExternalId3Index)(this.indexConditionKeyExternalId3));
				}
			}
			
			/// <summary>
			/// Gets the number of rows in the Condition table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public int Count
			{
				get
				{
					return this.Rows.Count;
				}
			}
			
			/// <summary>
			/// Gets the Description column of the Condition table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn DescriptionColumn
			{
				get
				{
					return this.columnDescription;
				}
			}
			
			/// <summary>
			/// Gets the ExternalId0 column of the Condition table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn ExternalId0Column
			{
				get
				{
					return this.columnExternalId0;
				}
			}
			
			/// <summary>
			/// Gets the ExternalId1 column of the Condition table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn ExternalId1Column
			{
				get
				{
					return this.columnExternalId1;
				}
			}
			
			/// <summary>
			/// Gets the ExternalId2 column of the Condition table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn ExternalId2Column
			{
				get
				{
					return this.columnExternalId2;
				}
			}
			
			/// <summary>
			/// Gets the ExternalId3 column of the Condition table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn ExternalId3Column
			{
				get
				{
					return this.columnExternalId3;
				}
			}
			
			/// <summary>
			/// Gets a collection of Teraque.DataModelGenerator.DataIndices on a table.
			/// </summary>
			public global::Teraque.DataIndexCollection Indices
			{
				get
				{
					return this.dataIndices;
				}
			}
			
			/// <summary>
			/// Indexer to a row in the Condition table.
			/// </summary>
			/// <param name="index">The integer index of the row.</param>
			/// <returns>The Condition row found at the given index.</returns>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public DataModel.ConditionRow this[int index]
			{
				get
				{
					return ((DataModel.ConditionRow)(this.Rows[index]));
				}
			}
			
			/// <summary>
			/// Gets the Mnemonic column of the Condition table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn MnemonicColumn
			{
				get
				{
					return this.columnMnemonic;
				}
			}
			
			/// <summary>
			/// Gets the RowVersion column of the Condition table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn RowVersionColumn
			{
				get
				{
					return this.columnRowVersion;
				}
			}
			
			/// <summary>
			/// Occurs after a Condition row has been changed successfully.
			/// </summary>
			public event ConditionRowChangeEventHandler ConditionRowChanged;
			
			/// <summary>
			/// Occurs when a Condition row is changing.
			/// </summary>
			public event ConditionRowChangeEventHandler ConditionRowChanging;
			
			/// <summary>
			/// Occurs after a Condition row in the table has been deleted.
			/// </summary>
			public event ConditionRowChangeEventHandler ConditionRowDeleted;
			
			/// <summary>
			/// Occurs before a Condition row in the table is about to be deleted.
			/// </summary>
			public event ConditionRowChangeEventHandler ConditionRowDeleting;
			
			/// <summary>
			/// Returns the type of the row in a Condition table.
			/// </summary>
			/// <returns>The ConditionRow type.</returns>
			protected override global::System.Type GetRowType()
			{
				return typeof(ConditionRow);
			}
			
			/// <summary>
			/// Initializes the relation fields with the parent and child relations.
			/// </summary>
			internal void InitializeRelations()
			{
			}
			
			/// <summary>
			/// Initializes a new instance of a Condition row.  Constructs a row from the builder.  Only for internal usage.
			/// </summary>
			/// <returns>A new row with the same schema as the table.</returns>
			protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder dataRowBuilder)
			{
				return new ConditionRow(dataRowBuilder);
			}
			
			/// <summary>
			/// Raises the ConditionRowChanged event.
			/// </summary>
			/// <param name="e">Provides data for the ConditionRow changing and deleting events.</param>
			protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowChanged(e);
				if ((this.ConditionRowChanged != null))
				{
					this.ConditionRowChanged(this, new ConditionRowChangeEventArgs(((ConditionRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the ConditionRowChanging event.
			/// </summary>
			/// <param name="e">Provides data for the ConditionRow changing and deleting events.</param>
			protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowChanging(e);
				if ((this.ConditionRowChanging != null))
				{
					this.ConditionRowChanging(this, new ConditionRowChangeEventArgs(((ConditionRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the ConditionRowDeleted event.
			/// </summary>
			/// <param name="e">Provides data for the ConditionRow changing and deleting events.</param>
			protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowDeleted(e);
				if ((this.ConditionRowDeleted != null))
				{
					this.ConditionRowDeleted(this, new ConditionRowChangeEventArgs(((ConditionRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the ConditionRowDeleting event.
			/// </summary>
			/// <param name="e">Provides data for the ConditionRow changing and deleting events.</param>
			protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowDeleting(e);
				if ((this.ConditionRowDeleting != null))
				{
					this.ConditionRowDeleting(this, new ConditionRowChangeEventArgs(((ConditionRow)(e.Row)), e.Action));
				}
			}
		}
		
		/// <summary>
		/// The Configuration table.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public partial class ConfigurationDataTable : global::System.Data.TypedTableBase<DataModel.ConfigurationRow>
		{
			
			private global::System.Data.DataColumn columnConfigurationId;
			
			private global::System.Data.DataColumn columnIndexName;
			
			private global::System.Data.DataColumn columnRelationName;
			
			private global::System.Data.DataColumn columnRowVersion;
			
			private global::Teraque.DataIndexCollection dataIndices;
			
			private global::Teraque.DataIndex indexConfigurationKey;
			
			/// <summary>
			/// Creates the Configuration table.
			/// </summary>
			internal ConfigurationDataTable()
			{
				// Initialize the object.
				this.TableName = "Configuration";
				this.dataIndices = new global::Teraque.DataIndexCollection();
				// The ConfigurationId Column
				this.columnConfigurationId = new global::System.Data.DataColumn("ConfigurationId", typeof(string), null, global::System.Data.MappingType.Element);
				this.columnConfigurationId.AllowDBNull = false;
				this.columnConfigurationId.DefaultValue = "";
				this.Columns.Add(this.columnConfigurationId);
				// The IndexName Column
				this.columnIndexName = new global::System.Data.DataColumn("IndexName", typeof(string), null, global::System.Data.MappingType.Element);
				this.columnIndexName.AllowDBNull = false;
				this.columnIndexName.DefaultValue = "";
				this.Columns.Add(this.columnIndexName);
				// The RelationName Column
				this.columnRelationName = new global::System.Data.DataColumn("RelationName", typeof(string), null, global::System.Data.MappingType.Element);
				this.columnRelationName.AllowDBNull = false;
				this.columnRelationName.DefaultValue = "";
				this.Columns.Add(this.columnRelationName);
				// The RowVersion Column
				this.columnRowVersion = new global::System.Data.DataColumn("RowVersion", typeof(long), null, global::System.Data.MappingType.Element);
				this.columnRowVersion.AllowDBNull = false;
				this.Columns.Add(this.columnRowVersion);
				// The ConfigurationKey Index
				this.indexConfigurationKey = new ConfigurationKeyIndex("ConfigurationKey", new global::System.Data.DataColumn[] {
							this.columnConfigurationId,
							this.columnRelationName});
				this.Indices.Add(this.indexConfigurationKey);
			}
			
			/// <summary>
			/// Gets the ConfigurationId column of the Configuration table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn ConfigurationIdColumn
			{
				get
				{
					return this.columnConfigurationId;
				}
			}
			
			/// <summary>
			/// Gets the ConfigurationKey index on the Configuration table.
			/// </summary>
			public ConfigurationKeyIndex ConfigurationKey
			{
				get
				{
					return ((ConfigurationKeyIndex)(this.indexConfigurationKey));
				}
			}
			
			/// <summary>
			/// Gets the number of rows in the Configuration table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public int Count
			{
				get
				{
					return this.Rows.Count;
				}
			}
			
			/// <summary>
			/// Gets the IndexName column of the Configuration table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn IndexNameColumn
			{
				get
				{
					return this.columnIndexName;
				}
			}
			
			/// <summary>
			/// Gets a collection of Teraque.DataModelGenerator.DataIndices on a table.
			/// </summary>
			public global::Teraque.DataIndexCollection Indices
			{
				get
				{
					return this.dataIndices;
				}
			}
			
			/// <summary>
			/// Indexer to a row in the Configuration table.
			/// </summary>
			/// <param name="index">The integer index of the row.</param>
			/// <returns>The Configuration row found at the given index.</returns>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public DataModel.ConfigurationRow this[int index]
			{
				get
				{
					return ((DataModel.ConfigurationRow)(this.Rows[index]));
				}
			}
			
			/// <summary>
			/// Gets the RelationName column of the Configuration table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn RelationNameColumn
			{
				get
				{
					return this.columnRelationName;
				}
			}
			
			/// <summary>
			/// Gets the RowVersion column of the Configuration table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn RowVersionColumn
			{
				get
				{
					return this.columnRowVersion;
				}
			}
			
			/// <summary>
			/// Occurs after a Configuration row has been changed successfully.
			/// </summary>
			public event ConfigurationRowChangeEventHandler ConfigurationRowChanged;
			
			/// <summary>
			/// Occurs when a Configuration row is changing.
			/// </summary>
			public event ConfigurationRowChangeEventHandler ConfigurationRowChanging;
			
			/// <summary>
			/// Occurs after a Configuration row in the table has been deleted.
			/// </summary>
			public event ConfigurationRowChangeEventHandler ConfigurationRowDeleted;
			
			/// <summary>
			/// Occurs before a Configuration row in the table is about to be deleted.
			/// </summary>
			public event ConfigurationRowChangeEventHandler ConfigurationRowDeleting;
			
			/// <summary>
			/// Returns the type of the row in a Configuration table.
			/// </summary>
			/// <returns>The ConfigurationRow type.</returns>
			protected override global::System.Type GetRowType()
			{
				return typeof(ConfigurationRow);
			}
			
			/// <summary>
			/// Initializes the relation fields with the parent and child relations.
			/// </summary>
			internal void InitializeRelations()
			{
			}
			
			/// <summary>
			/// Initializes a new instance of a Configuration row.  Constructs a row from the builder.  Only for internal usage.
			/// </summary>
			/// <returns>A new row with the same schema as the table.</returns>
			protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder dataRowBuilder)
			{
				return new ConfigurationRow(dataRowBuilder);
			}
			
			/// <summary>
			/// Raises the ConfigurationRowChanged event.
			/// </summary>
			/// <param name="e">Provides data for the ConfigurationRow changing and deleting events.</param>
			protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowChanged(e);
				if ((this.ConfigurationRowChanged != null))
				{
					this.ConfigurationRowChanged(this, new ConfigurationRowChangeEventArgs(((ConfigurationRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the ConfigurationRowChanging event.
			/// </summary>
			/// <param name="e">Provides data for the ConfigurationRow changing and deleting events.</param>
			protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowChanging(e);
				if ((this.ConfigurationRowChanging != null))
				{
					this.ConfigurationRowChanging(this, new ConfigurationRowChangeEventArgs(((ConfigurationRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the ConfigurationRowDeleted event.
			/// </summary>
			/// <param name="e">Provides data for the ConfigurationRow changing and deleting events.</param>
			protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowDeleted(e);
				if ((this.ConfigurationRowDeleted != null))
				{
					this.ConfigurationRowDeleted(this, new ConfigurationRowChangeEventArgs(((ConfigurationRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the ConfigurationRowDeleting event.
			/// </summary>
			/// <param name="e">Provides data for the ConfigurationRow changing and deleting events.</param>
			protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowDeleting(e);
				if ((this.ConfigurationRowDeleting != null))
				{
					this.ConfigurationRowDeleting(this, new ConfigurationRowChangeEventArgs(((ConfigurationRow)(e.Row)), e.Action));
				}
			}
		}
		
		/// <summary>
		/// The Country table.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public partial class CountryDataTable : global::System.Data.TypedTableBase<DataModel.CountryRow>
		{
			
			private global::System.Data.DataColumn columnAbbreviation;
			
			private global::System.Data.DataColumn columnCountryId;
			
			private global::System.Data.DataColumn columnExternalId0;
			
			private global::System.Data.DataColumn columnExternalId1;
			
			private global::System.Data.DataColumn columnName;
			
			private global::System.Data.DataColumn columnRowVersion;
			
			private global::Teraque.DataIndexCollection dataIndices;
			
			private global::Teraque.DataIndex indexCountryKey;
			
			private global::Teraque.DataIndex indexCountryKeyExternalId0;
			
			private global::Teraque.DataIndex indexCountryKeyExternalId1;
			
			private global::System.Data.DataRelation relationCountryExchange;
			
			private global::System.Data.DataRelation relationCountryHoliday;
			
			private global::System.Data.DataRelation relationCountryProvince;
			
			private global::System.Data.DataRelation relationCountrySecurity;
			
			private global::System.Data.DataRelation relationCountrySingleAccount;
			
			/// <summary>
			/// Creates the Country table.
			/// </summary>
			internal CountryDataTable()
			{
				// Initialize the object.
				this.TableName = "Country";
				this.dataIndices = new global::Teraque.DataIndexCollection();
				// The Abbreviation Column
				this.columnAbbreviation = new global::System.Data.DataColumn("Abbreviation", typeof(string), null, global::System.Data.MappingType.Element);
				this.columnAbbreviation.AllowDBNull = false;
				this.columnAbbreviation.DefaultValue = "";
				this.Columns.Add(this.columnAbbreviation);
				// The CountryId Column
				this.columnCountryId = new global::System.Data.DataColumn("CountryId", typeof(System.Guid), null, global::System.Data.MappingType.Element);
				this.columnCountryId.AllowDBNull = false;
				this.Columns.Add(this.columnCountryId);
				// The ExternalId0 Column
				this.columnExternalId0 = new global::System.Data.DataColumn("ExternalId0", typeof(string), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnExternalId0);
				// The ExternalId1 Column
				this.columnExternalId1 = new global::System.Data.DataColumn("ExternalId1", typeof(string), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnExternalId1);
				// The Name Column
				this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Element);
				this.columnName.AllowDBNull = false;
				this.columnName.DefaultValue = "";
				this.Columns.Add(this.columnName);
				// The RowVersion Column
				this.columnRowVersion = new global::System.Data.DataColumn("RowVersion", typeof(long), null, global::System.Data.MappingType.Element);
				this.columnRowVersion.AllowDBNull = false;
				this.Columns.Add(this.columnRowVersion);
				// The CountryKey Index
				this.indexCountryKey = new CountryKeyIndex("CountryKey", new global::System.Data.DataColumn[] {
							this.columnCountryId});
				this.Indices.Add(this.indexCountryKey);
				// The CountryKeyExternalId0 Index
				this.indexCountryKeyExternalId0 = new CountryKeyExternalId0Index("CountryKeyExternalId0", new global::System.Data.DataColumn[] {
							this.columnExternalId0});
				this.Indices.Add(this.indexCountryKeyExternalId0);
				// The CountryKeyExternalId1 Index
				this.indexCountryKeyExternalId1 = new CountryKeyExternalId1Index("CountryKeyExternalId1", new global::System.Data.DataColumn[] {
							this.columnExternalId1});
				this.Indices.Add(this.indexCountryKeyExternalId1);
			}
			
			/// <summary>
			/// Gets the Abbreviation column of the Country table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn AbbreviationColumn
			{
				get
				{
					return this.columnAbbreviation;
				}
			}
			
			/// <summary>
			/// Gets the number of rows in the Country table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public int Count
			{
				get
				{
					return this.Rows.Count;
				}
			}
			
			/// <summary>
			/// Gets the child relation between the Country and Exchange tables.
			/// </summary>
			internal global::System.Data.DataRelation CountryExchangeRelation
			{
				get
				{
					return this.relationCountryExchange;
				}
			}
			
			/// <summary>
			/// Gets the child relation between the Country and Holiday tables.
			/// </summary>
			internal global::System.Data.DataRelation CountryHolidayRelation
			{
				get
				{
					return this.relationCountryHoliday;
				}
			}
			
			/// <summary>
			/// Gets the CountryId column of the Country table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn CountryIdColumn
			{
				get
				{
					return this.columnCountryId;
				}
			}
			
			/// <summary>
			/// Gets the CountryKey index on the Country table.
			/// </summary>
			public CountryKeyIndex CountryKey
			{
				get
				{
					return ((CountryKeyIndex)(this.indexCountryKey));
				}
			}
			
			/// <summary>
			/// Gets the CountryKeyExternalId0 index on the Country table.
			/// </summary>
			public CountryKeyExternalId0Index CountryKeyExternalId0
			{
				get
				{
					return ((CountryKeyExternalId0Index)(this.indexCountryKeyExternalId0));
				}
			}
			
			/// <summary>
			/// Gets the CountryKeyExternalId1 index on the Country table.
			/// </summary>
			public CountryKeyExternalId1Index CountryKeyExternalId1
			{
				get
				{
					return ((CountryKeyExternalId1Index)(this.indexCountryKeyExternalId1));
				}
			}
			
			/// <summary>
			/// Gets the child relation between the Country and Province tables.
			/// </summary>
			internal global::System.Data.DataRelation CountryProvinceRelation
			{
				get
				{
					return this.relationCountryProvince;
				}
			}
			
			/// <summary>
			/// Gets the child relation between the Country and Security tables.
			/// </summary>
			internal global::System.Data.DataRelation CountrySecurityRelation
			{
				get
				{
					return this.relationCountrySecurity;
				}
			}
			
			/// <summary>
			/// Gets the child relation between the Country and SingleAccount tables.
			/// </summary>
			internal global::System.Data.DataRelation CountrySingleAccountRelation
			{
				get
				{
					return this.relationCountrySingleAccount;
				}
			}
			
			/// <summary>
			/// Gets the ExternalId0 column of the Country table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn ExternalId0Column
			{
				get
				{
					return this.columnExternalId0;
				}
			}
			
			/// <summary>
			/// Gets the ExternalId1 column of the Country table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn ExternalId1Column
			{
				get
				{
					return this.columnExternalId1;
				}
			}
			
			/// <summary>
			/// Gets a collection of Teraque.DataModelGenerator.DataIndices on a table.
			/// </summary>
			public global::Teraque.DataIndexCollection Indices
			{
				get
				{
					return this.dataIndices;
				}
			}
			
			/// <summary>
			/// Indexer to a row in the Country table.
			/// </summary>
			/// <param name="index">The integer index of the row.</param>
			/// <returns>The Country row found at the given index.</returns>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public DataModel.CountryRow this[int index]
			{
				get
				{
					return ((DataModel.CountryRow)(this.Rows[index]));
				}
			}
			
			/// <summary>
			/// Gets the Name column of the Country table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn NameColumn
			{
				get
				{
					return this.columnName;
				}
			}
			
			/// <summary>
			/// Gets the RowVersion column of the Country table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn RowVersionColumn
			{
				get
				{
					return this.columnRowVersion;
				}
			}
			
			/// <summary>
			/// Occurs after a Country row has been changed successfully.
			/// </summary>
			public event CountryRowChangeEventHandler CountryRowChanged;
			
			/// <summary>
			/// Occurs when a Country row is changing.
			/// </summary>
			public event CountryRowChangeEventHandler CountryRowChanging;
			
			/// <summary>
			/// Occurs after a Country row in the table has been deleted.
			/// </summary>
			public event CountryRowChangeEventHandler CountryRowDeleted;
			
			/// <summary>
			/// Occurs before a Country row in the table is about to be deleted.
			/// </summary>
			public event CountryRowChangeEventHandler CountryRowDeleting;
			
			/// <summary>
			/// Returns the type of the row in a Country table.
			/// </summary>
			/// <returns>The CountryRow type.</returns>
			protected override global::System.Type GetRowType()
			{
				return typeof(CountryRow);
			}
			
			/// <summary>
			/// Initializes the relation fields with the parent and child relations.
			/// </summary>
			internal void InitializeRelations()
			{
				this.relationCountryExchange = this.ChildRelations["FK_Country_Exchange"];
				this.relationCountryHoliday = this.ChildRelations["FK_Country_Holiday"];
				this.relationCountryProvince = this.ChildRelations["FK_Country_Province"];
				this.relationCountrySecurity = this.ChildRelations["FK_Country_Security"];
				this.relationCountrySingleAccount = this.ChildRelations["FK_Country_SingleAccount"];
			}
			
			/// <summary>
			/// Initializes a new instance of a Country row.  Constructs a row from the builder.  Only for internal usage.
			/// </summary>
			/// <returns>A new row with the same schema as the table.</returns>
			protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder dataRowBuilder)
			{
				return new CountryRow(dataRowBuilder);
			}
			
			/// <summary>
			/// Raises the CountryRowChanged event.
			/// </summary>
			/// <param name="e">Provides data for the CountryRow changing and deleting events.</param>
			protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowChanged(e);
				if ((this.CountryRowChanged != null))
				{
					this.CountryRowChanged(this, new CountryRowChangeEventArgs(((CountryRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the CountryRowChanging event.
			/// </summary>
			/// <param name="e">Provides data for the CountryRow changing and deleting events.</param>
			protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowChanging(e);
				if ((this.CountryRowChanging != null))
				{
					this.CountryRowChanging(this, new CountryRowChangeEventArgs(((CountryRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the CountryRowDeleted event.
			/// </summary>
			/// <param name="e">Provides data for the CountryRow changing and deleting events.</param>
			protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowDeleted(e);
				if ((this.CountryRowDeleted != null))
				{
					this.CountryRowDeleted(this, new CountryRowChangeEventArgs(((CountryRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the CountryRowDeleting event.
			/// </summary>
			/// <param name="e">Provides data for the CountryRow changing and deleting events.</param>
			protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowDeleting(e);
				if ((this.CountryRowDeleting != null))
				{
					this.CountryRowDeleting(this, new CountryRowChangeEventArgs(((CountryRow)(e.Row)), e.Action));
				}
			}
		}
		
		/// <summary>
		/// The CreditRating table.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public partial class CreditRatingDataTable : global::System.Data.TypedTableBase<DataModel.CreditRatingRow>
		{
			
			private global::System.Data.DataColumn columnCreditRatingId;
			
			private global::System.Data.DataColumn columnCreditRatingServiceId;
			
			private global::System.Data.DataColumn columnExternalId0;
			
			private global::System.Data.DataColumn columnExternalId1;
			
			private global::System.Data.DataColumn columnRowVersion;
			
			private global::System.Data.DataColumn columnScale;
			
			private global::System.Data.DataColumn columnValue;
			
			private global::Teraque.DataIndexCollection dataIndices;
			
			private global::Teraque.DataIndex indexCreditRatingKey;
			
			private global::Teraque.DataIndex indexCreditRatingKeyExternalId0;
			
			private global::Teraque.DataIndex indexCreditRatingKeyExternalId1;
			
			private global::System.Data.DataRelation relationCreditRatingSecuritySeriesByFK_CreditRating_SecuritySeries_CreditRatingId0;
			
			private global::System.Data.DataRelation relationCreditRatingSecuritySeriesByFK_CreditRating_SecuritySeries_CreditRatingId1;
			
			private global::System.Data.DataRelation relationCreditRatingSecuritySeriesByFK_CreditRating_SecuritySeries_CreditRatingId2;
			
			private global::System.Data.DataRelation relationCreditRatingSecuritySeriesByFK_CreditRating_SecuritySeries_CreditRatingId3;
			
			private global::System.Data.DataRelation relationCreditRatingSecuritySeriesByFK_CreditRating_SecuritySeries_CreditRatingId4;
			
			private global::System.Data.DataRelation relationCreditRatingSecuritySeriesByFK_CreditRating_SecuritySeries_CreditRatingId5;
			
			private global::System.Data.DataRelation relationCreditRatingServiceCreditRating;
			
			/// <summary>
			/// Creates the CreditRating table.
			/// </summary>
			internal CreditRatingDataTable()
			{
				// Initialize the object.
				this.TableName = "CreditRating";
				this.dataIndices = new global::Teraque.DataIndexCollection();
				// The CreditRatingId Column
				this.columnCreditRatingId = new global::System.Data.DataColumn("CreditRatingId", typeof(System.Guid), null, global::System.Data.MappingType.Element);
				this.columnCreditRatingId.AllowDBNull = false;
				this.Columns.Add(this.columnCreditRatingId);
				// The CreditRatingServiceId Column
				this.columnCreditRatingServiceId = new global::System.Data.DataColumn("CreditRatingServiceId", typeof(System.Guid), null, global::System.Data.MappingType.Element);
				this.columnCreditRatingServiceId.AllowDBNull = false;
				this.Columns.Add(this.columnCreditRatingServiceId);
				// The ExternalId0 Column
				this.columnExternalId0 = new global::System.Data.DataColumn("ExternalId0", typeof(string), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnExternalId0);
				// The ExternalId1 Column
				this.columnExternalId1 = new global::System.Data.DataColumn("ExternalId1", typeof(string), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnExternalId1);
				// The RowVersion Column
				this.columnRowVersion = new global::System.Data.DataColumn("RowVersion", typeof(long), null, global::System.Data.MappingType.Element);
				this.columnRowVersion.AllowDBNull = false;
				this.Columns.Add(this.columnRowVersion);
				// The Scale Column
				this.columnScale = new global::System.Data.DataColumn("Scale", typeof(string), null, global::System.Data.MappingType.Element);
				this.columnScale.AllowDBNull = false;
				this.columnScale.DefaultValue = "";
				this.Columns.Add(this.columnScale);
				// The Value Column
				this.columnValue = new global::System.Data.DataColumn("Value", typeof(int), null, global::System.Data.MappingType.Element);
				this.columnValue.AllowDBNull = false;
				this.columnValue.DefaultValue = 0;
				this.Columns.Add(this.columnValue);
				// The CreditRatingKey Index
				this.indexCreditRatingKey = new CreditRatingKeyIndex("CreditRatingKey", new global::System.Data.DataColumn[] {
							this.columnCreditRatingId});
				this.Indices.Add(this.indexCreditRatingKey);
				// The CreditRatingKeyExternalId0 Index
				this.indexCreditRatingKeyExternalId0 = new CreditRatingKeyExternalId0Index("CreditRatingKeyExternalId0", new global::System.Data.DataColumn[] {
							this.columnExternalId0});
				this.Indices.Add(this.indexCreditRatingKeyExternalId0);
				// The CreditRatingKeyExternalId1 Index
				this.indexCreditRatingKeyExternalId1 = new CreditRatingKeyExternalId1Index("CreditRatingKeyExternalId1", new global::System.Data.DataColumn[] {
							this.columnExternalId1});
				this.Indices.Add(this.indexCreditRatingKeyExternalId1);
			}
			
			/// <summary>
			/// Gets the number of rows in the CreditRating table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public int Count
			{
				get
				{
					return this.Rows.Count;
				}
			}
			
			/// <summary>
			/// Gets the CreditRatingId column of the CreditRating table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn CreditRatingIdColumn
			{
				get
				{
					return this.columnCreditRatingId;
				}
			}
			
			/// <summary>
			/// Gets the CreditRatingKey index on the CreditRating table.
			/// </summary>
			public CreditRatingKeyIndex CreditRatingKey
			{
				get
				{
					return ((CreditRatingKeyIndex)(this.indexCreditRatingKey));
				}
			}
			
			/// <summary>
			/// Gets the CreditRatingKeyExternalId0 index on the CreditRating table.
			/// </summary>
			public CreditRatingKeyExternalId0Index CreditRatingKeyExternalId0
			{
				get
				{
					return ((CreditRatingKeyExternalId0Index)(this.indexCreditRatingKeyExternalId0));
				}
			}
			
			/// <summary>
			/// Gets the CreditRatingKeyExternalId1 index on the CreditRating table.
			/// </summary>
			public CreditRatingKeyExternalId1Index CreditRatingKeyExternalId1
			{
				get
				{
					return ((CreditRatingKeyExternalId1Index)(this.indexCreditRatingKeyExternalId1));
				}
			}
			
			/// <summary>
			/// Gets the child relation between the CreditRating and SecuritySeries tables.
			/// </summary>
			internal global::System.Data.DataRelation CreditRatingSecuritySeriesByFK_CreditRating_SecuritySeries_CreditRatingId0Relation
			{
				get
				{
					return this.relationCreditRatingSecuritySeriesByFK_CreditRating_SecuritySeries_CreditRatingId0;
				}
			}
			
			/// <summary>
			/// Gets the child relation between the CreditRating and SecuritySeries tables.
			/// </summary>
			internal global::System.Data.DataRelation CreditRatingSecuritySeriesByFK_CreditRating_SecuritySeries_CreditRatingId1Relation
			{
				get
				{
					return this.relationCreditRatingSecuritySeriesByFK_CreditRating_SecuritySeries_CreditRatingId1;
				}
			}
			
			/// <summary>
			/// Gets the child relation between the CreditRating and SecuritySeries tables.
			/// </summary>
			internal global::System.Data.DataRelation CreditRatingSecuritySeriesByFK_CreditRating_SecuritySeries_CreditRatingId2Relation
			{
				get
				{
					return this.relationCreditRatingSecuritySeriesByFK_CreditRating_SecuritySeries_CreditRatingId2;
				}
			}
			
			/// <summary>
			/// Gets the child relation between the CreditRating and SecuritySeries tables.
			/// </summary>
			internal global::System.Data.DataRelation CreditRatingSecuritySeriesByFK_CreditRating_SecuritySeries_CreditRatingId3Relation
			{
				get
				{
					return this.relationCreditRatingSecuritySeriesByFK_CreditRating_SecuritySeries_CreditRatingId3;
				}
			}
			
			/// <summary>
			/// Gets the child relation between the CreditRating and SecuritySeries tables.
			/// </summary>
			internal global::System.Data.DataRelation CreditRatingSecuritySeriesByFK_CreditRating_SecuritySeries_CreditRatingId4Relation
			{
				get
				{
					return this.relationCreditRatingSecuritySeriesByFK_CreditRating_SecuritySeries_CreditRatingId4;
				}
			}
			
			/// <summary>
			/// Gets the child relation between the CreditRating and SecuritySeries tables.
			/// </summary>
			internal global::System.Data.DataRelation CreditRatingSecuritySeriesByFK_CreditRating_SecuritySeries_CreditRatingId5Relation
			{
				get
				{
					return this.relationCreditRatingSecuritySeriesByFK_CreditRating_SecuritySeries_CreditRatingId5;
				}
			}
			
			/// <summary>
			/// Gets the parent relation between the CreditRatingService and CreditRating tables.
			/// </summary>
			public global::System.Data.DataRelation CreditRatingServiceCreditRatingRelation
			{
				get
				{
					return this.relationCreditRatingServiceCreditRating;
				}
			}
			
			/// <summary>
			/// Gets the CreditRatingServiceId column of the CreditRating table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn CreditRatingServiceIdColumn
			{
				get
				{
					return this.columnCreditRatingServiceId;
				}
			}
			
			/// <summary>
			/// Gets the ExternalId0 column of the CreditRating table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn ExternalId0Column
			{
				get
				{
					return this.columnExternalId0;
				}
			}
			
			/// <summary>
			/// Gets the ExternalId1 column of the CreditRating table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn ExternalId1Column
			{
				get
				{
					return this.columnExternalId1;
				}
			}
			
			/// <summary>
			/// Gets a collection of Teraque.DataModelGenerator.DataIndices on a table.
			/// </summary>
			public global::Teraque.DataIndexCollection Indices
			{
				get
				{
					return this.dataIndices;
				}
			}
			
			/// <summary>
			/// Indexer to a row in the CreditRating table.
			/// </summary>
			/// <param name="index">The integer index of the row.</param>
			/// <returns>The CreditRating row found at the given index.</returns>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public DataModel.CreditRatingRow this[int index]
			{
				get
				{
					return ((DataModel.CreditRatingRow)(this.Rows[index]));
				}
			}
			
			/// <summary>
			/// Gets the RowVersion column of the CreditRating table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn RowVersionColumn
			{
				get
				{
					return this.columnRowVersion;
				}
			}
			
			/// <summary>
			/// Gets the Scale column of the CreditRating table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn ScaleColumn
			{
				get
				{
					return this.columnScale;
				}
			}
			
			/// <summary>
			/// Gets the Value column of the CreditRating table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn ValueColumn
			{
				get
				{
					return this.columnValue;
				}
			}
			
			/// <summary>
			/// Occurs after a CreditRating row has been changed successfully.
			/// </summary>
			public event CreditRatingRowChangeEventHandler CreditRatingRowChanged;
			
			/// <summary>
			/// Occurs when a CreditRating row is changing.
			/// </summary>
			public event CreditRatingRowChangeEventHandler CreditRatingRowChanging;
			
			/// <summary>
			/// Occurs after a CreditRating row in the table has been deleted.
			/// </summary>
			public event CreditRatingRowChangeEventHandler CreditRatingRowDeleted;
			
			/// <summary>
			/// Occurs before a CreditRating row in the table is about to be deleted.
			/// </summary>
			public event CreditRatingRowChangeEventHandler CreditRatingRowDeleting;
			
			/// <summary>
			/// Returns the type of the row in a CreditRating table.
			/// </summary>
			/// <returns>The CreditRatingRow type.</returns>
			protected override global::System.Type GetRowType()
			{
				return typeof(CreditRatingRow);
			}
			
			/// <summary>
			/// Initializes the relation fields with the parent and child relations.
			/// </summary>
			internal void InitializeRelations()
			{
				this.relationCreditRatingServiceCreditRating = this.ParentRelations["FK_CreditRatingService_CreditRating"];
				this.relationCreditRatingSecuritySeriesByFK_CreditRating_SecuritySeries_CreditRatingId0 = this.ChildRelations["FK_CreditRating_SecuritySeries_CreditRatingId0"];
				this.relationCreditRatingSecuritySeriesByFK_CreditRating_SecuritySeries_CreditRatingId1 = this.ChildRelations["FK_CreditRating_SecuritySeries_CreditRatingId1"];
				this.relationCreditRatingSecuritySeriesByFK_CreditRating_SecuritySeries_CreditRatingId2 = this.ChildRelations["FK_CreditRating_SecuritySeries_CreditRatingId2"];
				this.relationCreditRatingSecuritySeriesByFK_CreditRating_SecuritySeries_CreditRatingId3 = this.ChildRelations["FK_CreditRating_SecuritySeries_CreditRatingId3"];
				this.relationCreditRatingSecuritySeriesByFK_CreditRating_SecuritySeries_CreditRatingId4 = this.ChildRelations["FK_CreditRating_SecuritySeries_CreditRatingId4"];
				this.relationCreditRatingSecuritySeriesByFK_CreditRating_SecuritySeries_CreditRatingId5 = this.ChildRelations["FK_CreditRating_SecuritySeries_CreditRatingId5"];
			}
			
			/// <summary>
			/// Initializes a new instance of a CreditRating row.  Constructs a row from the builder.  Only for internal usage.
			/// </summary>
			/// <returns>A new row with the same schema as the table.</returns>
			protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder dataRowBuilder)
			{
				return new CreditRatingRow(dataRowBuilder);
			}
			
			/// <summary>
			/// Raises the CreditRatingRowChanged event.
			/// </summary>
			/// <param name="e">Provides data for the CreditRatingRow changing and deleting events.</param>
			protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowChanged(e);
				if ((this.CreditRatingRowChanged != null))
				{
					this.CreditRatingRowChanged(this, new CreditRatingRowChangeEventArgs(((CreditRatingRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the CreditRatingRowChanging event.
			/// </summary>
			/// <param name="e">Provides data for the CreditRatingRow changing and deleting events.</param>
			protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowChanging(e);
				if ((this.CreditRatingRowChanging != null))
				{
					this.CreditRatingRowChanging(this, new CreditRatingRowChangeEventArgs(((CreditRatingRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the CreditRatingRowDeleted event.
			/// </summary>
			/// <param name="e">Provides data for the CreditRatingRow changing and deleting events.</param>
			protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowDeleted(e);
				if ((this.CreditRatingRowDeleted != null))
				{
					this.CreditRatingRowDeleted(this, new CreditRatingRowChangeEventArgs(((CreditRatingRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the CreditRatingRowDeleting event.
			/// </summary>
			/// <param name="e">Provides data for the CreditRatingRow changing and deleting events.</param>
			protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowDeleting(e);
				if ((this.CreditRatingRowDeleting != null))
				{
					this.CreditRatingRowDeleting(this, new CreditRatingRowChangeEventArgs(((CreditRatingRow)(e.Row)), e.Action));
				}
			}
		}
		
		/// <summary>
		/// The CreditRatingService table.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public partial class CreditRatingServiceDataTable : global::System.Data.TypedTableBase<DataModel.CreditRatingServiceRow>
		{
			
			private global::System.Data.DataColumn columnCreditRatingServiceId;
			
			private global::System.Data.DataColumn columnExternalId0;
			
			private global::System.Data.DataColumn columnExternalId1;
			
			private global::System.Data.DataColumn columnName;
			
			private global::System.Data.DataColumn columnRowVersion;
			
			private global::Teraque.DataIndexCollection dataIndices;
			
			private global::Teraque.DataIndex indexCreditRatingServiceKey;
			
			private global::Teraque.DataIndex indexCreditRatingServiceKeyExternalId0;
			
			private global::Teraque.DataIndex indexCreditRatingServiceKeyExternalId1;
			
			private global::System.Data.DataRelation relationCreditRatingServiceCreditRating;
			
			/// <summary>
			/// Creates the CreditRatingService table.
			/// </summary>
			internal CreditRatingServiceDataTable()
			{
				// Initialize the object.
				this.TableName = "CreditRatingService";
				this.dataIndices = new global::Teraque.DataIndexCollection();
				// The CreditRatingServiceId Column
				this.columnCreditRatingServiceId = new global::System.Data.DataColumn("CreditRatingServiceId", typeof(System.Guid), null, global::System.Data.MappingType.Element);
				this.columnCreditRatingServiceId.AllowDBNull = false;
				this.Columns.Add(this.columnCreditRatingServiceId);
				// The ExternalId0 Column
				this.columnExternalId0 = new global::System.Data.DataColumn("ExternalId0", typeof(string), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnExternalId0);
				// The ExternalId1 Column
				this.columnExternalId1 = new global::System.Data.DataColumn("ExternalId1", typeof(string), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnExternalId1);
				// The Name Column
				this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Element);
				this.columnName.AllowDBNull = false;
				this.columnName.DefaultValue = "";
				this.Columns.Add(this.columnName);
				// The RowVersion Column
				this.columnRowVersion = new global::System.Data.DataColumn("RowVersion", typeof(long), null, global::System.Data.MappingType.Element);
				this.columnRowVersion.AllowDBNull = false;
				this.Columns.Add(this.columnRowVersion);
				// The CreditRatingServiceKey Index
				this.indexCreditRatingServiceKey = new CreditRatingServiceKeyIndex("CreditRatingServiceKey", new global::System.Data.DataColumn[] {
							this.columnCreditRatingServiceId});
				this.Indices.Add(this.indexCreditRatingServiceKey);
				// The CreditRatingServiceKeyExternalId0 Index
				this.indexCreditRatingServiceKeyExternalId0 = new CreditRatingServiceKeyExternalId0Index("CreditRatingServiceKeyExternalId0", new global::System.Data.DataColumn[] {
							this.columnExternalId0});
				this.Indices.Add(this.indexCreditRatingServiceKeyExternalId0);
				// The CreditRatingServiceKeyExternalId1 Index
				this.indexCreditRatingServiceKeyExternalId1 = new CreditRatingServiceKeyExternalId1Index("CreditRatingServiceKeyExternalId1", new global::System.Data.DataColumn[] {
							this.columnExternalId1});
				this.Indices.Add(this.indexCreditRatingServiceKeyExternalId1);
			}
			
			/// <summary>
			/// Gets the number of rows in the CreditRatingService table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public int Count
			{
				get
				{
					return this.Rows.Count;
				}
			}
			
			/// <summary>
			/// Gets the child relation between the CreditRatingService and CreditRating tables.
			/// </summary>
			internal global::System.Data.DataRelation CreditRatingServiceCreditRatingRelation
			{
				get
				{
					return this.relationCreditRatingServiceCreditRating;
				}
			}
			
			/// <summary>
			/// Gets the CreditRatingServiceId column of the CreditRatingService table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn CreditRatingServiceIdColumn
			{
				get
				{
					return this.columnCreditRatingServiceId;
				}
			}
			
			/// <summary>
			/// Gets the CreditRatingServiceKey index on the CreditRatingService table.
			/// </summary>
			public CreditRatingServiceKeyIndex CreditRatingServiceKey
			{
				get
				{
					return ((CreditRatingServiceKeyIndex)(this.indexCreditRatingServiceKey));
				}
			}
			
			/// <summary>
			/// Gets the CreditRatingServiceKeyExternalId0 index on the CreditRatingService table.
			/// </summary>
			public CreditRatingServiceKeyExternalId0Index CreditRatingServiceKeyExternalId0
			{
				get
				{
					return ((CreditRatingServiceKeyExternalId0Index)(this.indexCreditRatingServiceKeyExternalId0));
				}
			}
			
			/// <summary>
			/// Gets the CreditRatingServiceKeyExternalId1 index on the CreditRatingService table.
			/// </summary>
			public CreditRatingServiceKeyExternalId1Index CreditRatingServiceKeyExternalId1
			{
				get
				{
					return ((CreditRatingServiceKeyExternalId1Index)(this.indexCreditRatingServiceKeyExternalId1));
				}
			}
			
			/// <summary>
			/// Gets the ExternalId0 column of the CreditRatingService table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn ExternalId0Column
			{
				get
				{
					return this.columnExternalId0;
				}
			}
			
			/// <summary>
			/// Gets the ExternalId1 column of the CreditRatingService table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn ExternalId1Column
			{
				get
				{
					return this.columnExternalId1;
				}
			}
			
			/// <summary>
			/// Gets a collection of Teraque.DataModelGenerator.DataIndices on a table.
			/// </summary>
			public global::Teraque.DataIndexCollection Indices
			{
				get
				{
					return this.dataIndices;
				}
			}
			
			/// <summary>
			/// Indexer to a row in the CreditRatingService table.
			/// </summary>
			/// <param name="index">The integer index of the row.</param>
			/// <returns>The CreditRatingService row found at the given index.</returns>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public DataModel.CreditRatingServiceRow this[int index]
			{
				get
				{
					return ((DataModel.CreditRatingServiceRow)(this.Rows[index]));
				}
			}
			
			/// <summary>
			/// Gets the Name column of the CreditRatingService table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn NameColumn
			{
				get
				{
					return this.columnName;
				}
			}
			
			/// <summary>
			/// Gets the RowVersion column of the CreditRatingService table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn RowVersionColumn
			{
				get
				{
					return this.columnRowVersion;
				}
			}
			
			/// <summary>
			/// Occurs after a CreditRatingService row has been changed successfully.
			/// </summary>
			public event CreditRatingServiceRowChangeEventHandler CreditRatingServiceRowChanged;
			
			/// <summary>
			/// Occurs when a CreditRatingService row is changing.
			/// </summary>
			public event CreditRatingServiceRowChangeEventHandler CreditRatingServiceRowChanging;
			
			/// <summary>
			/// Occurs after a CreditRatingService row in the table has been deleted.
			/// </summary>
			public event CreditRatingServiceRowChangeEventHandler CreditRatingServiceRowDeleted;
			
			/// <summary>
			/// Occurs before a CreditRatingService row in the table is about to be deleted.
			/// </summary>
			public event CreditRatingServiceRowChangeEventHandler CreditRatingServiceRowDeleting;
			
			/// <summary>
			/// Returns the type of the row in a CreditRatingService table.
			/// </summary>
			/// <returns>The CreditRatingServiceRow type.</returns>
			protected override global::System.Type GetRowType()
			{
				return typeof(CreditRatingServiceRow);
			}
			
			/// <summary>
			/// Initializes the relation fields with the parent and child relations.
			/// </summary>
			internal void InitializeRelations()
			{
				this.relationCreditRatingServiceCreditRating = this.ChildRelations["FK_CreditRatingService_CreditRating"];
			}
			
			/// <summary>
			/// Initializes a new instance of a CreditRatingService row.  Constructs a row from the builder.  Only for internal usage.
			/// </summary>
			/// <returns>A new row with the same schema as the table.</returns>
			protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder dataRowBuilder)
			{
				return new CreditRatingServiceRow(dataRowBuilder);
			}
			
			/// <summary>
			/// Raises the CreditRatingServiceRowChanged event.
			/// </summary>
			/// <param name="e">Provides data for the CreditRatingServiceRow changing and deleting events.</param>
			protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowChanged(e);
				if ((this.CreditRatingServiceRowChanged != null))
				{
					this.CreditRatingServiceRowChanged(this, new CreditRatingServiceRowChangeEventArgs(((CreditRatingServiceRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the CreditRatingServiceRowChanging event.
			/// </summary>
			/// <param name="e">Provides data for the CreditRatingServiceRow changing and deleting events.</param>
			protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowChanging(e);
				if ((this.CreditRatingServiceRowChanging != null))
				{
					this.CreditRatingServiceRowChanging(this, new CreditRatingServiceRowChangeEventArgs(((CreditRatingServiceRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the CreditRatingServiceRowDeleted event.
			/// </summary>
			/// <param name="e">Provides data for the CreditRatingServiceRow changing and deleting events.</param>
			protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowDeleted(e);
				if ((this.CreditRatingServiceRowDeleted != null))
				{
					this.CreditRatingServiceRowDeleted(this, new CreditRatingServiceRowChangeEventArgs(((CreditRatingServiceRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the CreditRatingServiceRowDeleting event.
			/// </summary>
			/// <param name="e">Provides data for the CreditRatingServiceRow changing and deleting events.</param>
			protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowDeleting(e);
				if ((this.CreditRatingServiceRowDeleting != null))
				{
					this.CreditRatingServiceRowDeleting(this, new CreditRatingServiceRowChangeEventArgs(((CreditRatingServiceRow)(e.Row)), e.Action));
				}
			}
		}
		
		/// <summary>
		/// The Crossing table.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public partial class CrossingDataTable : global::System.Data.TypedTableBase<DataModel.CrossingRow>
		{
			
			private global::System.Data.DataColumn columnCrossingCode;
			
			private global::System.Data.DataColumn columnDescription;
			
			private global::System.Data.DataColumn columnExternalId0;
			
			private global::System.Data.DataColumn columnExternalId1;
			
			private global::System.Data.DataColumn columnName;
			
			private global::System.Data.DataColumn columnRowVersion;
			
			private global::Teraque.DataIndexCollection dataIndices;
			
			private global::Teraque.DataIndex indexCrossingKey;
			
			private global::Teraque.DataIndex indexCrossingKeyExternalId0;
			
			private global::Teraque.DataIndex indexCrossingKeyExternalId1;
			
			private global::System.Data.DataRelation relationCrossingWorkingOrder;
			
			/// <summary>
			/// Creates the Crossing table.
			/// </summary>
			internal CrossingDataTable()
			{
				// Initialize the object.
				this.TableName = "Crossing";
				this.dataIndices = new global::Teraque.DataIndexCollection();
				// The CrossingCode Column
				this.columnCrossingCode = new global::System.Data.DataColumn("CrossingCode", typeof(Teraque.CrossingCode), null, global::System.Data.MappingType.Element);
				this.columnCrossingCode.AllowDBNull = false;
				this.Columns.Add(this.columnCrossingCode);
				// The Description Column
				this.columnDescription = new global::System.Data.DataColumn("Description", typeof(string), null, global::System.Data.MappingType.Element);
				this.columnDescription.AllowDBNull = false;
				this.columnDescription.DefaultValue = "";
				this.Columns.Add(this.columnDescription);
				// The ExternalId0 Column
				this.columnExternalId0 = new global::System.Data.DataColumn("ExternalId0", typeof(string), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnExternalId0);
				// The ExternalId1 Column
				this.columnExternalId1 = new global::System.Data.DataColumn("ExternalId1", typeof(string), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnExternalId1);
				// The Name Column
				this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Element);
				this.columnName.AllowDBNull = false;
				this.columnName.DefaultValue = "";
				this.Columns.Add(this.columnName);
				// The RowVersion Column
				this.columnRowVersion = new global::System.Data.DataColumn("RowVersion", typeof(long), null, global::System.Data.MappingType.Element);
				this.columnRowVersion.AllowDBNull = false;
				this.Columns.Add(this.columnRowVersion);
				// The CrossingKey Index
				this.indexCrossingKey = new CrossingKeyIndex("CrossingKey", new global::System.Data.DataColumn[] {
							this.columnCrossingCode});
				this.Indices.Add(this.indexCrossingKey);
				// The CrossingKeyExternalId0 Index
				this.indexCrossingKeyExternalId0 = new CrossingKeyExternalId0Index("CrossingKeyExternalId0", new global::System.Data.DataColumn[] {
							this.columnExternalId0});
				this.Indices.Add(this.indexCrossingKeyExternalId0);
				// The CrossingKeyExternalId1 Index
				this.indexCrossingKeyExternalId1 = new CrossingKeyExternalId1Index("CrossingKeyExternalId1", new global::System.Data.DataColumn[] {
							this.columnExternalId1});
				this.Indices.Add(this.indexCrossingKeyExternalId1);
			}
			
			/// <summary>
			/// Gets the number of rows in the Crossing table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public int Count
			{
				get
				{
					return this.Rows.Count;
				}
			}
			
			/// <summary>
			/// Gets the CrossingCode column of the Crossing table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn CrossingCodeColumn
			{
				get
				{
					return this.columnCrossingCode;
				}
			}
			
			/// <summary>
			/// Gets the CrossingKey index on the Crossing table.
			/// </summary>
			public CrossingKeyIndex CrossingKey
			{
				get
				{
					return ((CrossingKeyIndex)(this.indexCrossingKey));
				}
			}
			
			/// <summary>
			/// Gets the CrossingKeyExternalId0 index on the Crossing table.
			/// </summary>
			public CrossingKeyExternalId0Index CrossingKeyExternalId0
			{
				get
				{
					return ((CrossingKeyExternalId0Index)(this.indexCrossingKeyExternalId0));
				}
			}
			
			/// <summary>
			/// Gets the CrossingKeyExternalId1 index on the Crossing table.
			/// </summary>
			public CrossingKeyExternalId1Index CrossingKeyExternalId1
			{
				get
				{
					return ((CrossingKeyExternalId1Index)(this.indexCrossingKeyExternalId1));
				}
			}
			
			/// <summary>
			/// Gets the child relation between the Crossing and WorkingOrder tables.
			/// </summary>
			internal global::System.Data.DataRelation CrossingWorkingOrderRelation
			{
				get
				{
					return this.relationCrossingWorkingOrder;
				}
			}
			
			/// <summary>
			/// Gets the Description column of the Crossing table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn DescriptionColumn
			{
				get
				{
					return this.columnDescription;
				}
			}
			
			/// <summary>
			/// Gets the ExternalId0 column of the Crossing table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn ExternalId0Column
			{
				get
				{
					return this.columnExternalId0;
				}
			}
			
			/// <summary>
			/// Gets the ExternalId1 column of the Crossing table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn ExternalId1Column
			{
				get
				{
					return this.columnExternalId1;
				}
			}
			
			/// <summary>
			/// Gets a collection of Teraque.DataModelGenerator.DataIndices on a table.
			/// </summary>
			public global::Teraque.DataIndexCollection Indices
			{
				get
				{
					return this.dataIndices;
				}
			}
			
			/// <summary>
			/// Indexer to a row in the Crossing table.
			/// </summary>
			/// <param name="index">The integer index of the row.</param>
			/// <returns>The Crossing row found at the given index.</returns>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public DataModel.CrossingRow this[int index]
			{
				get
				{
					return ((DataModel.CrossingRow)(this.Rows[index]));
				}
			}
			
			/// <summary>
			/// Gets the Name column of the Crossing table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn NameColumn
			{
				get
				{
					return this.columnName;
				}
			}
			
			/// <summary>
			/// Gets the RowVersion column of the Crossing table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn RowVersionColumn
			{
				get
				{
					return this.columnRowVersion;
				}
			}
			
			/// <summary>
			/// Occurs after a Crossing row has been changed successfully.
			/// </summary>
			public event CrossingRowChangeEventHandler CrossingRowChanged;
			
			/// <summary>
			/// Occurs when a Crossing row is changing.
			/// </summary>
			public event CrossingRowChangeEventHandler CrossingRowChanging;
			
			/// <summary>
			/// Occurs after a Crossing row in the table has been deleted.
			/// </summary>
			public event CrossingRowChangeEventHandler CrossingRowDeleted;
			
			/// <summary>
			/// Occurs before a Crossing row in the table is about to be deleted.
			/// </summary>
			public event CrossingRowChangeEventHandler CrossingRowDeleting;
			
			/// <summary>
			/// Returns the type of the row in a Crossing table.
			/// </summary>
			/// <returns>The CrossingRow type.</returns>
			protected override global::System.Type GetRowType()
			{
				return typeof(CrossingRow);
			}
			
			/// <summary>
			/// Initializes the relation fields with the parent and child relations.
			/// </summary>
			internal void InitializeRelations()
			{
				this.relationCrossingWorkingOrder = this.ChildRelations["FK_Crossing_WorkingOrder"];
			}
			
			/// <summary>
			/// Initializes a new instance of a Crossing row.  Constructs a row from the builder.  Only for internal usage.
			/// </summary>
			/// <returns>A new row with the same schema as the table.</returns>
			protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder dataRowBuilder)
			{
				return new CrossingRow(dataRowBuilder);
			}
			
			/// <summary>
			/// Raises the CrossingRowChanged event.
			/// </summary>
			/// <param name="e">Provides data for the CrossingRow changing and deleting events.</param>
			protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowChanged(e);
				if ((this.CrossingRowChanged != null))
				{
					this.CrossingRowChanged(this, new CrossingRowChangeEventArgs(((CrossingRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the CrossingRowChanging event.
			/// </summary>
			/// <param name="e">Provides data for the CrossingRow changing and deleting events.</param>
			protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowChanging(e);
				if ((this.CrossingRowChanging != null))
				{
					this.CrossingRowChanging(this, new CrossingRowChangeEventArgs(((CrossingRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the CrossingRowDeleted event.
			/// </summary>
			/// <param name="e">Provides data for the CrossingRow changing and deleting events.</param>
			protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowDeleted(e);
				if ((this.CrossingRowDeleted != null))
				{
					this.CrossingRowDeleted(this, new CrossingRowChangeEventArgs(((CrossingRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the CrossingRowDeleting event.
			/// </summary>
			/// <param name="e">Provides data for the CrossingRow changing and deleting events.</param>
			protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowDeleting(e);
				if ((this.CrossingRowDeleting != null))
				{
					this.CrossingRowDeleting(this, new CrossingRowChangeEventArgs(((CrossingRow)(e.Row)), e.Action));
				}
			}
		}
		
		/// <summary>
		/// The Currency table.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public partial class CurrencyDataTable : global::System.Data.TypedTableBase<DataModel.CurrencyRow>
		{
			
			private global::System.Data.DataColumn columnCurrencyId;
			
			private global::System.Data.DataColumn columnRowVersion;
			
			private global::Teraque.DataIndexCollection dataIndices;
			
			private global::Teraque.DataIndex indexCurrencyKey;
			
			private global::System.Data.DataRelation relationCurrencyAccount;
			
			private global::System.Data.DataRelation relationSecurityCurrency;
			
			/// <summary>
			/// Creates the Currency table.
			/// </summary>
			internal CurrencyDataTable()
			{
				// Initialize the object.
				this.TableName = "Currency";
				this.dataIndices = new global::Teraque.DataIndexCollection();
				// The CurrencyId Column
				this.columnCurrencyId = new global::System.Data.DataColumn("CurrencyId", typeof(System.Guid), null, global::System.Data.MappingType.Element);
				this.columnCurrencyId.AllowDBNull = false;
				this.Columns.Add(this.columnCurrencyId);
				// The RowVersion Column
				this.columnRowVersion = new global::System.Data.DataColumn("RowVersion", typeof(long), null, global::System.Data.MappingType.Element);
				this.columnRowVersion.AllowDBNull = false;
				this.Columns.Add(this.columnRowVersion);
				// The CurrencyKey Index
				this.indexCurrencyKey = new CurrencyKeyIndex("CurrencyKey", new global::System.Data.DataColumn[] {
							this.columnCurrencyId});
				this.Indices.Add(this.indexCurrencyKey);
			}
			
			/// <summary>
			/// Gets the number of rows in the Currency table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public int Count
			{
				get
				{
					return this.Rows.Count;
				}
			}
			
			/// <summary>
			/// Gets the child relation between the Currency and Account tables.
			/// </summary>
			internal global::System.Data.DataRelation CurrencyAccountRelation
			{
				get
				{
					return this.relationCurrencyAccount;
				}
			}
			
			/// <summary>
			/// Gets the CurrencyId column of the Currency table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn CurrencyIdColumn
			{
				get
				{
					return this.columnCurrencyId;
				}
			}
			
			/// <summary>
			/// Gets the CurrencyKey index on the Currency table.
			/// </summary>
			public CurrencyKeyIndex CurrencyKey
			{
				get
				{
					return ((CurrencyKeyIndex)(this.indexCurrencyKey));
				}
			}
			
			/// <summary>
			/// Gets a collection of Teraque.DataModelGenerator.DataIndices on a table.
			/// </summary>
			public global::Teraque.DataIndexCollection Indices
			{
				get
				{
					return this.dataIndices;
				}
			}
			
			/// <summary>
			/// Indexer to a row in the Currency table.
			/// </summary>
			/// <param name="index">The integer index of the row.</param>
			/// <returns>The Currency row found at the given index.</returns>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public DataModel.CurrencyRow this[int index]
			{
				get
				{
					return ((DataModel.CurrencyRow)(this.Rows[index]));
				}
			}
			
			/// <summary>
			/// Gets the RowVersion column of the Currency table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn RowVersionColumn
			{
				get
				{
					return this.columnRowVersion;
				}
			}
			
			/// <summary>
			/// Gets the parent relation between the Security and Currency tables.
			/// </summary>
			public global::System.Data.DataRelation SecurityCurrencyRelation
			{
				get
				{
					return this.relationSecurityCurrency;
				}
			}
			
			/// <summary>
			/// Occurs after a Currency row has been changed successfully.
			/// </summary>
			public event CurrencyRowChangeEventHandler CurrencyRowChanged;
			
			/// <summary>
			/// Occurs when a Currency row is changing.
			/// </summary>
			public event CurrencyRowChangeEventHandler CurrencyRowChanging;
			
			/// <summary>
			/// Occurs after a Currency row in the table has been deleted.
			/// </summary>
			public event CurrencyRowChangeEventHandler CurrencyRowDeleted;
			
			/// <summary>
			/// Occurs before a Currency row in the table is about to be deleted.
			/// </summary>
			public event CurrencyRowChangeEventHandler CurrencyRowDeleting;
			
			/// <summary>
			/// Returns the type of the row in a Currency table.
			/// </summary>
			/// <returns>The CurrencyRow type.</returns>
			protected override global::System.Type GetRowType()
			{
				return typeof(CurrencyRow);
			}
			
			/// <summary>
			/// Initializes the relation fields with the parent and child relations.
			/// </summary>
			internal void InitializeRelations()
			{
				this.relationSecurityCurrency = this.ParentRelations["FK_Security_Currency"];
				this.relationCurrencyAccount = this.ChildRelations["FK_Currency_Account"];
			}
			
			/// <summary>
			/// Initializes a new instance of a Currency row.  Constructs a row from the builder.  Only for internal usage.
			/// </summary>
			/// <returns>A new row with the same schema as the table.</returns>
			protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder dataRowBuilder)
			{
				return new CurrencyRow(dataRowBuilder);
			}
			
			/// <summary>
			/// Raises the CurrencyRowChanged event.
			/// </summary>
			/// <param name="e">Provides data for the CurrencyRow changing and deleting events.</param>
			protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowChanged(e);
				if ((this.CurrencyRowChanged != null))
				{
					this.CurrencyRowChanged(this, new CurrencyRowChangeEventArgs(((CurrencyRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the CurrencyRowChanging event.
			/// </summary>
			/// <param name="e">Provides data for the CurrencyRow changing and deleting events.</param>
			protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowChanging(e);
				if ((this.CurrencyRowChanging != null))
				{
					this.CurrencyRowChanging(this, new CurrencyRowChangeEventArgs(((CurrencyRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the CurrencyRowDeleted event.
			/// </summary>
			/// <param name="e">Provides data for the CurrencyRow changing and deleting events.</param>
			protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowDeleted(e);
				if ((this.CurrencyRowDeleted != null))
				{
					this.CurrencyRowDeleted(this, new CurrencyRowChangeEventArgs(((CurrencyRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the CurrencyRowDeleting event.
			/// </summary>
			/// <param name="e">Provides data for the CurrencyRow changing and deleting events.</param>
			protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowDeleting(e);
				if ((this.CurrencyRowDeleting != null))
				{
					this.CurrencyRowDeleting(this, new CurrencyRowChangeEventArgs(((CurrencyRow)(e.Row)), e.Action));
				}
			}
		}
		
		/// <summary>
		/// The Debt table.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public partial class DebtDataTable : global::System.Data.TypedTableBase<DataModel.DebtRow>
		{
			
			private global::System.Data.DataColumn columnDebtId;
			
			private global::System.Data.DataColumn columnExdividendDays;
			
			private global::System.Data.DataColumn columnFaceOutstanding;
			
			private global::System.Data.DataColumn columnFirstCoupon;
			
			private global::System.Data.DataColumn columnFrequency;
			
			private global::System.Data.DataColumn columnIssuePrice;
			
			private global::System.Data.DataColumn columnMaturityDate;
			
			private global::System.Data.DataColumn columnRedemptionValue;
			
			private global::System.Data.DataColumn columnRowVersion;
			
			private global::System.Data.DataColumn columnSettlementId;
			
			private global::System.Data.DataColumn columnWeekendCode;
			
			private global::Teraque.DataIndexCollection dataIndices;
			
			private global::Teraque.DataIndex indexDebtKey;
			
			private global::System.Data.DataRelation relationSecurityDebtByFK_Security_Debt_DebtId;
			
			private global::System.Data.DataRelation relationSecurityDebtByFK_Security_Debt_SettlementId;
			
			private global::System.Data.DataRelation relationWeekendDebt;
			
			/// <summary>
			/// Creates the Debt table.
			/// </summary>
			internal DebtDataTable()
			{
				// Initialize the object.
				this.TableName = "Debt";
				this.dataIndices = new global::Teraque.DataIndexCollection();
				// The DebtId Column
				this.columnDebtId = new global::System.Data.DataColumn("DebtId", typeof(System.Guid), null, global::System.Data.MappingType.Element);
				this.columnDebtId.AllowDBNull = false;
				this.Columns.Add(this.columnDebtId);
				// The ExdividendDays Column
				this.columnExdividendDays = new global::System.Data.DataColumn("ExdividendDays", typeof(int), null, global::System.Data.MappingType.Element);
				this.columnExdividendDays.AllowDBNull = false;
				this.columnExdividendDays.DefaultValue = 0;
				this.Columns.Add(this.columnExdividendDays);
				// The FaceOutstanding Column
				this.columnFaceOutstanding = new global::System.Data.DataColumn("FaceOutstanding", typeof(decimal), null, global::System.Data.MappingType.Element);
				this.columnFaceOutstanding.AllowDBNull = false;
				this.columnFaceOutstanding.DefaultValue = 0.0m;
				this.Columns.Add(this.columnFaceOutstanding);
				// The FirstCoupon Column
				this.columnFirstCoupon = new global::System.Data.DataColumn("FirstCoupon", typeof(System.DateTime), null, global::System.Data.MappingType.Element);
				this.columnFirstCoupon.AllowDBNull = false;
				this.Columns.Add(this.columnFirstCoupon);
				// The Frequency Column
				this.columnFrequency = new global::System.Data.DataColumn("Frequency", typeof(int), null, global::System.Data.MappingType.Element);
				this.columnFrequency.AllowDBNull = false;
				this.columnFrequency.DefaultValue = 0;
				this.Columns.Add(this.columnFrequency);
				// The IssuePrice Column
				this.columnIssuePrice = new global::System.Data.DataColumn("IssuePrice", typeof(int), null, global::System.Data.MappingType.Element);
				this.columnIssuePrice.AllowDBNull = false;
				this.columnIssuePrice.DefaultValue = 0;
				this.Columns.Add(this.columnIssuePrice);
				// The MaturityDate Column
				this.columnMaturityDate = new global::System.Data.DataColumn("MaturityDate", typeof(System.DateTime), null, global::System.Data.MappingType.Element);
				this.columnMaturityDate.AllowDBNull = false;
				this.Columns.Add(this.columnMaturityDate);
				// The RedemptionValue Column
				this.columnRedemptionValue = new global::System.Data.DataColumn("RedemptionValue", typeof(decimal), null, global::System.Data.MappingType.Element);
				this.columnRedemptionValue.AllowDBNull = false;
				this.columnRedemptionValue.DefaultValue = 0.0m;
				this.Columns.Add(this.columnRedemptionValue);
				// The RowVersion Column
				this.columnRowVersion = new global::System.Data.DataColumn("RowVersion", typeof(long), null, global::System.Data.MappingType.Element);
				this.columnRowVersion.AllowDBNull = false;
				this.Columns.Add(this.columnRowVersion);
				// The SettlementId Column
				this.columnSettlementId = new global::System.Data.DataColumn("SettlementId", typeof(System.Guid), null, global::System.Data.MappingType.Element);
				this.columnSettlementId.AllowDBNull = false;
				this.Columns.Add(this.columnSettlementId);
				// The WeekendCode Column
				this.columnWeekendCode = new global::System.Data.DataColumn("WeekendCode", typeof(Teraque.WeekendCode), null, global::System.Data.MappingType.Element);
				this.columnWeekendCode.AllowDBNull = false;
				this.Columns.Add(this.columnWeekendCode);
				// The DebtKey Index
				this.indexDebtKey = new DebtKeyIndex("DebtKey", new global::System.Data.DataColumn[] {
							this.columnDebtId});
				this.Indices.Add(this.indexDebtKey);
			}
			
			/// <summary>
			/// Gets the number of rows in the Debt table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public int Count
			{
				get
				{
					return this.Rows.Count;
				}
			}
			
			/// <summary>
			/// Gets the DebtId column of the Debt table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn DebtIdColumn
			{
				get
				{
					return this.columnDebtId;
				}
			}
			
			/// <summary>
			/// Gets the DebtKey index on the Debt table.
			/// </summary>
			public DebtKeyIndex DebtKey
			{
				get
				{
					return ((DebtKeyIndex)(this.indexDebtKey));
				}
			}
			
			/// <summary>
			/// Gets the ExdividendDays column of the Debt table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn ExdividendDaysColumn
			{
				get
				{
					return this.columnExdividendDays;
				}
			}
			
			/// <summary>
			/// Gets the FaceOutstanding column of the Debt table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn FaceOutstandingColumn
			{
				get
				{
					return this.columnFaceOutstanding;
				}
			}
			
			/// <summary>
			/// Gets the FirstCoupon column of the Debt table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn FirstCouponColumn
			{
				get
				{
					return this.columnFirstCoupon;
				}
			}
			
			/// <summary>
			/// Gets the Frequency column of the Debt table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn FrequencyColumn
			{
				get
				{
					return this.columnFrequency;
				}
			}
			
			/// <summary>
			/// Gets a collection of Teraque.DataModelGenerator.DataIndices on a table.
			/// </summary>
			public global::Teraque.DataIndexCollection Indices
			{
				get
				{
					return this.dataIndices;
				}
			}
			
			/// <summary>
			/// Gets the IssuePrice column of the Debt table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn IssuePriceColumn
			{
				get
				{
					return this.columnIssuePrice;
				}
			}
			
			/// <summary>
			/// Indexer to a row in the Debt table.
			/// </summary>
			/// <param name="index">The integer index of the row.</param>
			/// <returns>The Debt row found at the given index.</returns>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public DataModel.DebtRow this[int index]
			{
				get
				{
					return ((DataModel.DebtRow)(this.Rows[index]));
				}
			}
			
			/// <summary>
			/// Gets the MaturityDate column of the Debt table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn MaturityDateColumn
			{
				get
				{
					return this.columnMaturityDate;
				}
			}
			
			/// <summary>
			/// Gets the RedemptionValue column of the Debt table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn RedemptionValueColumn
			{
				get
				{
					return this.columnRedemptionValue;
				}
			}
			
			/// <summary>
			/// Gets the RowVersion column of the Debt table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn RowVersionColumn
			{
				get
				{
					return this.columnRowVersion;
				}
			}
			
			/// <summary>
			/// Gets the parent relation between the Security and Debt tables.
			/// </summary>
			public global::System.Data.DataRelation SecurityDebtByFK_Security_Debt_DebtIdRelation
			{
				get
				{
					return this.relationSecurityDebtByFK_Security_Debt_DebtId;
				}
			}
			
			/// <summary>
			/// Gets the parent relation between the Security and Debt tables.
			/// </summary>
			public global::System.Data.DataRelation SecurityDebtByFK_Security_Debt_SettlementIdRelation
			{
				get
				{
					return this.relationSecurityDebtByFK_Security_Debt_SettlementId;
				}
			}
			
			/// <summary>
			/// Gets the SettlementId column of the Debt table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn SettlementIdColumn
			{
				get
				{
					return this.columnSettlementId;
				}
			}
			
			/// <summary>
			/// Gets the WeekendCode column of the Debt table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn WeekendCodeColumn
			{
				get
				{
					return this.columnWeekendCode;
				}
			}
			
			/// <summary>
			/// Gets the parent relation between the Weekend and Debt tables.
			/// </summary>
			public global::System.Data.DataRelation WeekendDebtRelation
			{
				get
				{
					return this.relationWeekendDebt;
				}
			}
			
			/// <summary>
			/// Occurs after a Debt row has been changed successfully.
			/// </summary>
			public event DebtRowChangeEventHandler DebtRowChanged;
			
			/// <summary>
			/// Occurs when a Debt row is changing.
			/// </summary>
			public event DebtRowChangeEventHandler DebtRowChanging;
			
			/// <summary>
			/// Occurs after a Debt row in the table has been deleted.
			/// </summary>
			public event DebtRowChangeEventHandler DebtRowDeleted;
			
			/// <summary>
			/// Occurs before a Debt row in the table is about to be deleted.
			/// </summary>
			public event DebtRowChangeEventHandler DebtRowDeleting;
			
			/// <summary>
			/// Returns the type of the row in a Debt table.
			/// </summary>
			/// <returns>The DebtRow type.</returns>
			protected override global::System.Type GetRowType()
			{
				return typeof(DebtRow);
			}
			
			/// <summary>
			/// Initializes the relation fields with the parent and child relations.
			/// </summary>
			internal void InitializeRelations()
			{
				this.relationSecurityDebtByFK_Security_Debt_DebtId = this.ParentRelations["FK_Security_Debt_DebtId"];
				this.relationSecurityDebtByFK_Security_Debt_SettlementId = this.ParentRelations["FK_Security_Debt_SettlementId"];
				this.relationWeekendDebt = this.ParentRelations["FK_Weekend_Debt"];
			}
			
			/// <summary>
			/// Initializes a new instance of a Debt row.  Constructs a row from the builder.  Only for internal usage.
			/// </summary>
			/// <returns>A new row with the same schema as the table.</returns>
			protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder dataRowBuilder)
			{
				return new DebtRow(dataRowBuilder);
			}
			
			/// <summary>
			/// Raises the DebtRowChanged event.
			/// </summary>
			/// <param name="e">Provides data for the DebtRow changing and deleting events.</param>
			protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowChanged(e);
				if ((this.DebtRowChanged != null))
				{
					this.DebtRowChanged(this, new DebtRowChangeEventArgs(((DebtRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the DebtRowChanging event.
			/// </summary>
			/// <param name="e">Provides data for the DebtRow changing and deleting events.</param>
			protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowChanging(e);
				if ((this.DebtRowChanging != null))
				{
					this.DebtRowChanging(this, new DebtRowChangeEventArgs(((DebtRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the DebtRowDeleted event.
			/// </summary>
			/// <param name="e">Provides data for the DebtRow changing and deleting events.</param>
			protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowDeleted(e);
				if ((this.DebtRowDeleted != null))
				{
					this.DebtRowDeleted(this, new DebtRowChangeEventArgs(((DebtRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the DebtRowDeleting event.
			/// </summary>
			/// <param name="e">Provides data for the DebtRow changing and deleting events.</param>
			protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowDeleting(e);
				if ((this.DebtRowDeleting != null))
				{
					this.DebtRowDeleting(this, new DebtRowChangeEventArgs(((DebtRow)(e.Row)), e.Action));
				}
			}
		}
		
		/// <summary>
		/// The Destination table.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public partial class DestinationDataTable : global::System.Data.TypedTableBase<DataModel.DestinationRow>
		{
			
			private global::System.Data.DataColumn columnCancelCustomFixTag;
			
			private global::System.Data.DataColumn columnClearingFirmId;
			
			private global::System.Data.DataColumn columnDestinationId;
			
			private global::System.Data.DataColumn columnExternalId0;
			
			private global::System.Data.DataColumn columnExternalId1;
			
			private global::System.Data.DataColumn columnFixAccount;
			
			private global::System.Data.DataColumn columnFixAccountSuffixLength;
			
			private global::System.Data.DataColumn columnFixExchangeMnemonic;
			
			private global::System.Data.DataColumn columnFixExecBroker;
			
			private global::System.Data.DataColumn columnFixExecDestinationListed;
			
			private global::System.Data.DataColumn columnFixExecDestinationUnlisted;
			
			private global::System.Data.DataColumn columnFixHandleInstListed;
			
			private global::System.Data.DataColumn columnFixHandleInstUnlisted;
			
			private global::System.Data.DataColumn columnFixIoiRoutingId;
			
			private global::System.Data.DataColumn columnFixIoiRoutingType;
			
			private global::System.Data.DataColumn columnFixNetCommissionType;
			
			private global::System.Data.DataColumn columnFixNoteTagId;
			
			private global::System.Data.DataColumn columnFixOnBehalfOf;
			
			private global::System.Data.DataColumn columnFixOnBehalfOfSub;
			
			private global::System.Data.DataColumn columnFixOrderIdFormat;
			
			private global::System.Data.DataColumn columnFixPassiveTag;
			
			private global::System.Data.DataColumn columnFixProactiveTag;
			
			private global::System.Data.DataColumn columnFixSourceCompany;
			
			private global::System.Data.DataColumn columnFixSourceId;
			
			private global::System.Data.DataColumn columnFixSourceTrader;
			
			private global::System.Data.DataColumn columnFixTargetCompany;
			
			private global::System.Data.DataColumn columnFixTargetLocationId;
			
			private global::System.Data.DataColumn columnFixTargetTrader;
			
			private global::System.Data.DataColumn columnFixVersion;
			
			private global::System.Data.DataColumn columnIsBroker;
			
			private global::System.Data.DataColumn columnIsCancelAllowed;
			
			private global::System.Data.DataColumn columnIsCancelReplaceAllowed;
			
			private global::System.Data.DataColumn columnIsEcn;
			
			private global::System.Data.DataColumn columnIsExchange;
			
			private global::System.Data.DataColumn columnIsInternal;
			
			private global::System.Data.DataColumn columnIsIoiAllowed;
			
			private global::System.Data.DataColumn columnIsLimitPricingAllowed;
			
			private global::System.Data.DataColumn columnIsMarketOnClosePricingAllowed;
			
			private global::System.Data.DataColumn columnIsMarketPricingAllowed;
			
			private global::System.Data.DataColumn columnIsSystemUp;
			
			private global::System.Data.DataColumn columnIsTagEligible;
			
			private global::System.Data.DataColumn columnIsTradeAwayAllowed;
			
			private global::System.Data.DataColumn columnIsUnsolicitedTradeAllowed;
			
			private global::System.Data.DataColumn columnLotSize;
			
			private global::System.Data.DataColumn columnMaximumQuantityListedLimit;
			
			private global::System.Data.DataColumn columnMaximumQuantityListedMarket;
			
			private global::System.Data.DataColumn columnMaximumQuantityUnlistedLimit;
			
			private global::System.Data.DataColumn columnMaximumQuantityUnlistedMarket;
			
			private global::System.Data.DataColumn columnModifiedTime;
			
			private global::System.Data.DataColumn columnName;
			
			private global::System.Data.DataColumn columnNewOrderCustomFixTag;
			
			private global::System.Data.DataColumn columnOatsDepartmentId;
			
			private global::System.Data.DataColumn columnOatsDestinationCode;
			
			private global::System.Data.DataColumn columnOatsReceivingMpi;
			
			private global::System.Data.DataColumn columnOatsRouteMethod;
			
			private global::System.Data.DataColumn columnOatsRoutingMpi;
			
			private global::System.Data.DataColumn columnOatsSentMpi;
			
			private global::System.Data.DataColumn columnOatsTerminalId;
			
			private global::System.Data.DataColumn columnOnCloseCancelTime;
			
			private global::System.Data.DataColumn columnOnCloseOrderTime;
			
			private global::System.Data.DataColumn columnPerShareUsageFee;
			
			private global::System.Data.DataColumn columnPostMarketLogic;
			
			private global::System.Data.DataColumn columnPrimaryBackupDestinationId;
			
			private global::System.Data.DataColumn columnRowVersion;
			
			private global::System.Data.DataColumn columnSecondaryBackupDestinationId;
			
			private global::System.Data.DataColumn columnSelectnetFlag;
			
			private global::System.Data.DataColumn columnShortName;
			
			private global::System.Data.DataColumn columnSourceId0;
			
			private global::System.Data.DataColumn columnSourceId1;
			
			private global::System.Data.DataColumn columnSourceId2;
			
			private global::System.Data.DataColumn columnSourceId3;
			
			private global::System.Data.DataColumn columnSourceId4;
			
			private global::System.Data.DataColumn columnSourceId5;
			
			private global::System.Data.DataColumn columnSourceId6;
			
			private global::System.Data.DataColumn columnSourceId7;
			
			private global::System.Data.DataColumn columnUniqueShortName;
			
			private global::Teraque.DataIndexCollection dataIndices;
			
			private global::Teraque.DataIndex indexDestinationKey;
			
			private global::Teraque.DataIndex indexDestinationKeyExternalId0;
			
			private global::Teraque.DataIndex indexDestinationKeyExternalId1;
			
			private global::System.Data.DataRelation relationDestinationBlotterDestinationMap;
			
			private global::System.Data.DataRelation relationDestinationDestinationExchangeMap;
			
			private global::System.Data.DataRelation relationDestinationDestinationOrder;
			
			private global::System.Data.DataRelation relationDestinationSourceOrder;
			
			private global::System.Data.DataRelation relationDestinationWorkingOrder;
			
			/// <summary>
			/// Creates the Destination table.
			/// </summary>
			internal DestinationDataTable()
			{
				// Initialize the object.
				this.TableName = "Destination";
				this.dataIndices = new global::Teraque.DataIndexCollection();
				// The CancelCustomFixTag Column
				this.columnCancelCustomFixTag = new global::System.Data.DataColumn("CancelCustomFixTag", typeof(string), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnCancelCustomFixTag);
				// The ClearingFirmId Column
				this.columnClearingFirmId = new global::System.Data.DataColumn("ClearingFirmId", typeof(string), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnClearingFirmId);
				// The DestinationId Column
				this.columnDestinationId = new global::System.Data.DataColumn("DestinationId", typeof(System.Guid), null, global::System.Data.MappingType.Element);
				this.columnDestinationId.AllowDBNull = false;
				this.Columns.Add(this.columnDestinationId);
				// The ExternalId0 Column
				this.columnExternalId0 = new global::System.Data.DataColumn("ExternalId0", typeof(string), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnExternalId0);
				// The ExternalId1 Column
				this.columnExternalId1 = new global::System.Data.DataColumn("ExternalId1", typeof(string), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnExternalId1);
				// The FixAccount Column
				this.columnFixAccount = new global::System.Data.DataColumn("FixAccount", typeof(string), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnFixAccount);
				// The FixAccountSuffixLength Column
				this.columnFixAccountSuffixLength = new global::System.Data.DataColumn("FixAccountSuffixLength", typeof(int), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnFixAccountSuffixLength);
				// The FixExchangeMnemonic Column
				this.columnFixExchangeMnemonic = new global::System.Data.DataColumn("FixExchangeMnemonic", typeof(string), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnFixExchangeMnemonic);
				// The FixExecBroker Column
				this.columnFixExecBroker = new global::System.Data.DataColumn("FixExecBroker", typeof(string), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnFixExecBroker);
				// The FixExecDestinationListed Column
				this.columnFixExecDestinationListed = new global::System.Data.DataColumn("FixExecDestinationListed", typeof(string), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnFixExecDestinationListed);
				// The FixExecDestinationUnlisted Column
				this.columnFixExecDestinationUnlisted = new global::System.Data.DataColumn("FixExecDestinationUnlisted", typeof(string), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnFixExecDestinationUnlisted);
				// The FixHandleInstListed Column
				this.columnFixHandleInstListed = new global::System.Data.DataColumn("FixHandleInstListed", typeof(string), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnFixHandleInstListed);
				// The FixHandleInstUnlisted Column
				this.columnFixHandleInstUnlisted = new global::System.Data.DataColumn("FixHandleInstUnlisted", typeof(string), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnFixHandleInstUnlisted);
				// The FixIoiRoutingId Column
				this.columnFixIoiRoutingId = new global::System.Data.DataColumn("FixIoiRoutingId", typeof(string), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnFixIoiRoutingId);
				// The FixIoiRoutingType Column
				this.columnFixIoiRoutingType = new global::System.Data.DataColumn("FixIoiRoutingType", typeof(string), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnFixIoiRoutingType);
				// The FixNetCommissionType Column
				this.columnFixNetCommissionType = new global::System.Data.DataColumn("FixNetCommissionType", typeof(string), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnFixNetCommissionType);
				// The FixNoteTagId Column
				this.columnFixNoteTagId = new global::System.Data.DataColumn("FixNoteTagId", typeof(string), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnFixNoteTagId);
				// The FixOnBehalfOf Column
				this.columnFixOnBehalfOf = new global::System.Data.DataColumn("FixOnBehalfOf", typeof(string), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnFixOnBehalfOf);
				// The FixOnBehalfOfSub Column
				this.columnFixOnBehalfOfSub = new global::System.Data.DataColumn("FixOnBehalfOfSub", typeof(string), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnFixOnBehalfOfSub);
				// The FixOrderIdFormat Column
				this.columnFixOrderIdFormat = new global::System.Data.DataColumn("FixOrderIdFormat", typeof(string), null, global::System.Data.MappingType.Element);
				this.columnFixOrderIdFormat.AllowDBNull = false;
				this.columnFixOrderIdFormat.DefaultValue = "";
				this.Columns.Add(this.columnFixOrderIdFormat);
				// The FixPassiveTag Column
				this.columnFixPassiveTag = new global::System.Data.DataColumn("FixPassiveTag", typeof(string), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnFixPassiveTag);
				// The FixProactiveTag Column
				this.columnFixProactiveTag = new global::System.Data.DataColumn("FixProactiveTag", typeof(string), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnFixProactiveTag);
				// The FixSourceCompany Column
				this.columnFixSourceCompany = new global::System.Data.DataColumn("FixSourceCompany", typeof(string), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnFixSourceCompany);
				// The FixSourceId Column
				this.columnFixSourceId = new global::System.Data.DataColumn("FixSourceId", typeof(string), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnFixSourceId);
				// The FixSourceTrader Column
				this.columnFixSourceTrader = new global::System.Data.DataColumn("FixSourceTrader", typeof(string), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnFixSourceTrader);
				// The FixTargetCompany Column
				this.columnFixTargetCompany = new global::System.Data.DataColumn("FixTargetCompany", typeof(string), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnFixTargetCompany);
				// The FixTargetLocationId Column
				this.columnFixTargetLocationId = new global::System.Data.DataColumn("FixTargetLocationId", typeof(string), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnFixTargetLocationId);
				// The FixTargetTrader Column
				this.columnFixTargetTrader = new global::System.Data.DataColumn("FixTargetTrader", typeof(string), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnFixTargetTrader);
				// The FixVersion Column
				this.columnFixVersion = new global::System.Data.DataColumn("FixVersion", typeof(string), null, global::System.Data.MappingType.Element);
				this.columnFixVersion.AllowDBNull = false;
				this.columnFixVersion.DefaultValue = "";
				this.Columns.Add(this.columnFixVersion);
				// The IsBroker Column
				this.columnIsBroker = new global::System.Data.DataColumn("IsBroker", typeof(bool), null, global::System.Data.MappingType.Element);
				this.columnIsBroker.AllowDBNull = false;
				this.columnIsBroker.DefaultValue = false;
				this.Columns.Add(this.columnIsBroker);
				// The IsCancelAllowed Column
				this.columnIsCancelAllowed = new global::System.Data.DataColumn("IsCancelAllowed", typeof(bool), null, global::System.Data.MappingType.Element);
				this.columnIsCancelAllowed.AllowDBNull = false;
				this.columnIsCancelAllowed.DefaultValue = false;
				this.Columns.Add(this.columnIsCancelAllowed);
				// The IsCancelReplaceAllowed Column
				this.columnIsCancelReplaceAllowed = new global::System.Data.DataColumn("IsCancelReplaceAllowed", typeof(bool), null, global::System.Data.MappingType.Element);
				this.columnIsCancelReplaceAllowed.AllowDBNull = false;
				this.columnIsCancelReplaceAllowed.DefaultValue = false;
				this.Columns.Add(this.columnIsCancelReplaceAllowed);
				// The IsEcn Column
				this.columnIsEcn = new global::System.Data.DataColumn("IsEcn", typeof(bool), null, global::System.Data.MappingType.Element);
				this.columnIsEcn.AllowDBNull = false;
				this.columnIsEcn.DefaultValue = false;
				this.Columns.Add(this.columnIsEcn);
				// The IsExchange Column
				this.columnIsExchange = new global::System.Data.DataColumn("IsExchange", typeof(bool), null, global::System.Data.MappingType.Element);
				this.columnIsExchange.AllowDBNull = false;
				this.columnIsExchange.DefaultValue = false;
				this.Columns.Add(this.columnIsExchange);
				// The IsInternal Column
				this.columnIsInternal = new global::System.Data.DataColumn("IsInternal", typeof(bool), null, global::System.Data.MappingType.Element);
				this.columnIsInternal.AllowDBNull = false;
				this.columnIsInternal.DefaultValue = false;
				this.Columns.Add(this.columnIsInternal);
				// The IsIoiAllowed Column
				this.columnIsIoiAllowed = new global::System.Data.DataColumn("IsIoiAllowed", typeof(bool), null, global::System.Data.MappingType.Element);
				this.columnIsIoiAllowed.AllowDBNull = false;
				this.columnIsIoiAllowed.DefaultValue = false;
				this.Columns.Add(this.columnIsIoiAllowed);
				// The IsLimitPricingAllowed Column
				this.columnIsLimitPricingAllowed = new global::System.Data.DataColumn("IsLimitPricingAllowed", typeof(bool), null, global::System.Data.MappingType.Element);
				this.columnIsLimitPricingAllowed.AllowDBNull = false;
				this.columnIsLimitPricingAllowed.DefaultValue = false;
				this.Columns.Add(this.columnIsLimitPricingAllowed);
				// The IsMarketOnClosePricingAllowed Column
				this.columnIsMarketOnClosePricingAllowed = new global::System.Data.DataColumn("IsMarketOnClosePricingAllowed", typeof(bool), null, global::System.Data.MappingType.Element);
				this.columnIsMarketOnClosePricingAllowed.AllowDBNull = false;
				this.columnIsMarketOnClosePricingAllowed.DefaultValue = false;
				this.Columns.Add(this.columnIsMarketOnClosePricingAllowed);
				// The IsMarketPricingAllowed Column
				this.columnIsMarketPricingAllowed = new global::System.Data.DataColumn("IsMarketPricingAllowed", typeof(bool), null, global::System.Data.MappingType.Element);
				this.columnIsMarketPricingAllowed.AllowDBNull = false;
				this.columnIsMarketPricingAllowed.DefaultValue = false;
				this.Columns.Add(this.columnIsMarketPricingAllowed);
				// The IsSystemUp Column
				this.columnIsSystemUp = new global::System.Data.DataColumn("IsSystemUp", typeof(bool), null, global::System.Data.MappingType.Element);
				this.columnIsSystemUp.AllowDBNull = false;
				this.columnIsSystemUp.DefaultValue = false;
				this.Columns.Add(this.columnIsSystemUp);
				// The IsTagEligible Column
				this.columnIsTagEligible = new global::System.Data.DataColumn("IsTagEligible", typeof(bool), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnIsTagEligible);
				// The IsTradeAwayAllowed Column
				this.columnIsTradeAwayAllowed = new global::System.Data.DataColumn("IsTradeAwayAllowed", typeof(bool), null, global::System.Data.MappingType.Element);
				this.columnIsTradeAwayAllowed.AllowDBNull = false;
				this.columnIsTradeAwayAllowed.DefaultValue = false;
				this.Columns.Add(this.columnIsTradeAwayAllowed);
				// The IsUnsolicitedTradeAllowed Column
				this.columnIsUnsolicitedTradeAllowed = new global::System.Data.DataColumn("IsUnsolicitedTradeAllowed", typeof(bool), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnIsUnsolicitedTradeAllowed);
				// The LotSize Column
				this.columnLotSize = new global::System.Data.DataColumn("LotSize", typeof(int), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnLotSize);
				// The MaximumQuantityListedLimit Column
				this.columnMaximumQuantityListedLimit = new global::System.Data.DataColumn("MaximumQuantityListedLimit", typeof(decimal), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnMaximumQuantityListedLimit);
				// The MaximumQuantityListedMarket Column
				this.columnMaximumQuantityListedMarket = new global::System.Data.DataColumn("MaximumQuantityListedMarket", typeof(decimal), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnMaximumQuantityListedMarket);
				// The MaximumQuantityUnlistedLimit Column
				this.columnMaximumQuantityUnlistedLimit = new global::System.Data.DataColumn("MaximumQuantityUnlistedLimit", typeof(decimal), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnMaximumQuantityUnlistedLimit);
				// The MaximumQuantityUnlistedMarket Column
				this.columnMaximumQuantityUnlistedMarket = new global::System.Data.DataColumn("MaximumQuantityUnlistedMarket", typeof(decimal), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnMaximumQuantityUnlistedMarket);
				// The ModifiedTime Column
				this.columnModifiedTime = new global::System.Data.DataColumn("ModifiedTime", typeof(System.DateTime), null, global::System.Data.MappingType.Element);
				this.columnModifiedTime.AllowDBNull = false;
				this.Columns.Add(this.columnModifiedTime);
				// The Name Column
				this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnName);
				// The NewOrderCustomFixTag Column
				this.columnNewOrderCustomFixTag = new global::System.Data.DataColumn("NewOrderCustomFixTag", typeof(string), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnNewOrderCustomFixTag);
				// The OatsDepartmentId Column
				this.columnOatsDepartmentId = new global::System.Data.DataColumn("OatsDepartmentId", typeof(string), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnOatsDepartmentId);
				// The OatsDestinationCode Column
				this.columnOatsDestinationCode = new global::System.Data.DataColumn("OatsDestinationCode", typeof(string), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnOatsDestinationCode);
				// The OatsReceivingMpi Column
				this.columnOatsReceivingMpi = new global::System.Data.DataColumn("OatsReceivingMpi", typeof(string), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnOatsReceivingMpi);
				// The OatsRouteMethod Column
				this.columnOatsRouteMethod = new global::System.Data.DataColumn("OatsRouteMethod", typeof(string), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnOatsRouteMethod);
				// The OatsRoutingMpi Column
				this.columnOatsRoutingMpi = new global::System.Data.DataColumn("OatsRoutingMpi", typeof(string), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnOatsRoutingMpi);
				// The OatsSentMpi Column
				this.columnOatsSentMpi = new global::System.Data.DataColumn("OatsSentMpi", typeof(string), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnOatsSentMpi);
				// The OatsTerminalId Column
				this.columnOatsTerminalId = new global::System.Data.DataColumn("OatsTerminalId", typeof(string), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnOatsTerminalId);
				// The OnCloseCancelTime Column
				this.columnOnCloseCancelTime = new global::System.Data.DataColumn("OnCloseCancelTime", typeof(int), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnOnCloseCancelTime);
				// The OnCloseOrderTime Column
				this.columnOnCloseOrderTime = new global::System.Data.DataColumn("OnCloseOrderTime", typeof(int), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnOnCloseOrderTime);
				// The PerShareUsageFee Column
				this.columnPerShareUsageFee = new global::System.Data.DataColumn("PerShareUsageFee", typeof(decimal), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnPerShareUsageFee);
				// The PostMarketLogic Column
				this.columnPostMarketLogic = new global::System.Data.DataColumn("PostMarketLogic", typeof(string), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnPostMarketLogic);
				// The PrimaryBackupDestinationId Column
				this.columnPrimaryBackupDestinationId = new global::System.Data.DataColumn("PrimaryBackupDestinationId", typeof(System.Guid), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnPrimaryBackupDestinationId);
				// The RowVersion Column
				this.columnRowVersion = new global::System.Data.DataColumn("RowVersion", typeof(long), null, global::System.Data.MappingType.Element);
				this.columnRowVersion.AllowDBNull = false;
				this.Columns.Add(this.columnRowVersion);
				// The SecondaryBackupDestinationId Column
				this.columnSecondaryBackupDestinationId = new global::System.Data.DataColumn("SecondaryBackupDestinationId", typeof(System.Guid), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnSecondaryBackupDestinationId);
				// The SelectnetFlag Column
				this.columnSelectnetFlag = new global::System.Data.DataColumn("SelectnetFlag", typeof(bool), null, global::System.Data.MappingType.Element);
				this.columnSelectnetFlag.AllowDBNull = false;
				this.columnSelectnetFlag.DefaultValue = false;
				this.Columns.Add(this.columnSelectnetFlag);
				// The ShortName Column
				this.columnShortName = new global::System.Data.DataColumn("ShortName", typeof(string), null, global::System.Data.MappingType.Element);
				this.columnShortName.AllowDBNull = false;
				this.columnShortName.DefaultValue = "";
				this.Columns.Add(this.columnShortName);
				// The SourceId0 Column
				this.columnSourceId0 = new global::System.Data.DataColumn("SourceId0", typeof(string), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnSourceId0);
				// The SourceId1 Column
				this.columnSourceId1 = new global::System.Data.DataColumn("SourceId1", typeof(string), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnSourceId1);
				// The SourceId2 Column
				this.columnSourceId2 = new global::System.Data.DataColumn("SourceId2", typeof(string), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnSourceId2);
				// The SourceId3 Column
				this.columnSourceId3 = new global::System.Data.DataColumn("SourceId3", typeof(string), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnSourceId3);
				// The SourceId4 Column
				this.columnSourceId4 = new global::System.Data.DataColumn("SourceId4", typeof(string), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnSourceId4);
				// The SourceId5 Column
				this.columnSourceId5 = new global::System.Data.DataColumn("SourceId5", typeof(string), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnSourceId5);
				// The SourceId6 Column
				this.columnSourceId6 = new global::System.Data.DataColumn("SourceId6", typeof(string), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnSourceId6);
				// The SourceId7 Column
				this.columnSourceId7 = new global::System.Data.DataColumn("SourceId7", typeof(string), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnSourceId7);
				// The UniqueShortName Column
				this.columnUniqueShortName = new global::System.Data.DataColumn("UniqueShortName", typeof(string), null, global::System.Data.MappingType.Element);
				this.columnUniqueShortName.AllowDBNull = false;
				this.columnUniqueShortName.DefaultValue = "";
				this.Columns.Add(this.columnUniqueShortName);
				// The DestinationKey Index
				this.indexDestinationKey = new DestinationKeyIndex("DestinationKey", new global::System.Data.DataColumn[] {
							this.columnDestinationId});
				this.Indices.Add(this.indexDestinationKey);
				// The DestinationKeyExternalId0 Index
				this.indexDestinationKeyExternalId0 = new DestinationKeyExternalId0Index("DestinationKeyExternalId0", new global::System.Data.DataColumn[] {
							this.columnExternalId0});
				this.Indices.Add(this.indexDestinationKeyExternalId0);
				// The DestinationKeyExternalId1 Index
				this.indexDestinationKeyExternalId1 = new DestinationKeyExternalId1Index("DestinationKeyExternalId1", new global::System.Data.DataColumn[] {
							this.columnExternalId1});
				this.Indices.Add(this.indexDestinationKeyExternalId1);
			}
			
			/// <summary>
			/// Gets the CancelCustomFixTag column of the Destination table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn CancelCustomFixTagColumn
			{
				get
				{
					return this.columnCancelCustomFixTag;
				}
			}
			
			/// <summary>
			/// Gets the ClearingFirmId column of the Destination table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn ClearingFirmIdColumn
			{
				get
				{
					return this.columnClearingFirmId;
				}
			}
			
			/// <summary>
			/// Gets the number of rows in the Destination table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public int Count
			{
				get
				{
					return this.Rows.Count;
				}
			}
			
			/// <summary>
			/// Gets the child relation between the Destination and BlotterDestinationMap tables.
			/// </summary>
			internal global::System.Data.DataRelation DestinationBlotterDestinationMapRelation
			{
				get
				{
					return this.relationDestinationBlotterDestinationMap;
				}
			}
			
			/// <summary>
			/// Gets the child relation between the Destination and DestinationExchangeMap tables.
			/// </summary>
			internal global::System.Data.DataRelation DestinationDestinationExchangeMapRelation
			{
				get
				{
					return this.relationDestinationDestinationExchangeMap;
				}
			}
			
			/// <summary>
			/// Gets the child relation between the Destination and DestinationOrder tables.
			/// </summary>
			internal global::System.Data.DataRelation DestinationDestinationOrderRelation
			{
				get
				{
					return this.relationDestinationDestinationOrder;
				}
			}
			
			/// <summary>
			/// Gets the DestinationId column of the Destination table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn DestinationIdColumn
			{
				get
				{
					return this.columnDestinationId;
				}
			}
			
			/// <summary>
			/// Gets the DestinationKey index on the Destination table.
			/// </summary>
			public DestinationKeyIndex DestinationKey
			{
				get
				{
					return ((DestinationKeyIndex)(this.indexDestinationKey));
				}
			}
			
			/// <summary>
			/// Gets the DestinationKeyExternalId0 index on the Destination table.
			/// </summary>
			public DestinationKeyExternalId0Index DestinationKeyExternalId0
			{
				get
				{
					return ((DestinationKeyExternalId0Index)(this.indexDestinationKeyExternalId0));
				}
			}
			
			/// <summary>
			/// Gets the DestinationKeyExternalId1 index on the Destination table.
			/// </summary>
			public DestinationKeyExternalId1Index DestinationKeyExternalId1
			{
				get
				{
					return ((DestinationKeyExternalId1Index)(this.indexDestinationKeyExternalId1));
				}
			}
			
			/// <summary>
			/// Gets the child relation between the Destination and SourceOrder tables.
			/// </summary>
			internal global::System.Data.DataRelation DestinationSourceOrderRelation
			{
				get
				{
					return this.relationDestinationSourceOrder;
				}
			}
			
			/// <summary>
			/// Gets the child relation between the Destination and WorkingOrder tables.
			/// </summary>
			internal global::System.Data.DataRelation DestinationWorkingOrderRelation
			{
				get
				{
					return this.relationDestinationWorkingOrder;
				}
			}
			
			/// <summary>
			/// Gets the ExternalId0 column of the Destination table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn ExternalId0Column
			{
				get
				{
					return this.columnExternalId0;
				}
			}
			
			/// <summary>
			/// Gets the ExternalId1 column of the Destination table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn ExternalId1Column
			{
				get
				{
					return this.columnExternalId1;
				}
			}
			
			/// <summary>
			/// Gets the FixAccount column of the Destination table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn FixAccountColumn
			{
				get
				{
					return this.columnFixAccount;
				}
			}
			
			/// <summary>
			/// Gets the FixAccountSuffixLength column of the Destination table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn FixAccountSuffixLengthColumn
			{
				get
				{
					return this.columnFixAccountSuffixLength;
				}
			}
			
			/// <summary>
			/// Gets the FixExchangeMnemonic column of the Destination table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn FixExchangeMnemonicColumn
			{
				get
				{
					return this.columnFixExchangeMnemonic;
				}
			}
			
			/// <summary>
			/// Gets the FixExecBroker column of the Destination table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn FixExecBrokerColumn
			{
				get
				{
					return this.columnFixExecBroker;
				}
			}
			
			/// <summary>
			/// Gets the FixExecDestinationListed column of the Destination table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn FixExecDestinationListedColumn
			{
				get
				{
					return this.columnFixExecDestinationListed;
				}
			}
			
			/// <summary>
			/// Gets the FixExecDestinationUnlisted column of the Destination table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn FixExecDestinationUnlistedColumn
			{
				get
				{
					return this.columnFixExecDestinationUnlisted;
				}
			}
			
			/// <summary>
			/// Gets the FixHandleInstListed column of the Destination table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn FixHandleInstListedColumn
			{
				get
				{
					return this.columnFixHandleInstListed;
				}
			}
			
			/// <summary>
			/// Gets the FixHandleInstUnlisted column of the Destination table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn FixHandleInstUnlistedColumn
			{
				get
				{
					return this.columnFixHandleInstUnlisted;
				}
			}
			
			/// <summary>
			/// Gets the FixIoiRoutingId column of the Destination table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn FixIoiRoutingIdColumn
			{
				get
				{
					return this.columnFixIoiRoutingId;
				}
			}
			
			/// <summary>
			/// Gets the FixIoiRoutingType column of the Destination table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn FixIoiRoutingTypeColumn
			{
				get
				{
					return this.columnFixIoiRoutingType;
				}
			}
			
			/// <summary>
			/// Gets the FixNetCommissionType column of the Destination table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn FixNetCommissionTypeColumn
			{
				get
				{
					return this.columnFixNetCommissionType;
				}
			}
			
			/// <summary>
			/// Gets the FixNoteTagId column of the Destination table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn FixNoteTagIdColumn
			{
				get
				{
					return this.columnFixNoteTagId;
				}
			}
			
			/// <summary>
			/// Gets the FixOnBehalfOf column of the Destination table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn FixOnBehalfOfColumn
			{
				get
				{
					return this.columnFixOnBehalfOf;
				}
			}
			
			/// <summary>
			/// Gets the FixOnBehalfOfSub column of the Destination table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn FixOnBehalfOfSubColumn
			{
				get
				{
					return this.columnFixOnBehalfOfSub;
				}
			}
			
			/// <summary>
			/// Gets the FixOrderIdFormat column of the Destination table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn FixOrderIdFormatColumn
			{
				get
				{
					return this.columnFixOrderIdFormat;
				}
			}
			
			/// <summary>
			/// Gets the FixPassiveTag column of the Destination table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn FixPassiveTagColumn
			{
				get
				{
					return this.columnFixPassiveTag;
				}
			}
			
			/// <summary>
			/// Gets the FixProactiveTag column of the Destination table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn FixProactiveTagColumn
			{
				get
				{
					return this.columnFixProactiveTag;
				}
			}
			
			/// <summary>
			/// Gets the FixSourceCompany column of the Destination table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn FixSourceCompanyColumn
			{
				get
				{
					return this.columnFixSourceCompany;
				}
			}
			
			/// <summary>
			/// Gets the FixSourceId column of the Destination table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn FixSourceIdColumn
			{
				get
				{
					return this.columnFixSourceId;
				}
			}
			
			/// <summary>
			/// Gets the FixSourceTrader column of the Destination table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn FixSourceTraderColumn
			{
				get
				{
					return this.columnFixSourceTrader;
				}
			}
			
			/// <summary>
			/// Gets the FixTargetCompany column of the Destination table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn FixTargetCompanyColumn
			{
				get
				{
					return this.columnFixTargetCompany;
				}
			}
			
			/// <summary>
			/// Gets the FixTargetLocationId column of the Destination table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn FixTargetLocationIdColumn
			{
				get
				{
					return this.columnFixTargetLocationId;
				}
			}
			
			/// <summary>
			/// Gets the FixTargetTrader column of the Destination table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn FixTargetTraderColumn
			{
				get
				{
					return this.columnFixTargetTrader;
				}
			}
			
			/// <summary>
			/// Gets the FixVersion column of the Destination table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn FixVersionColumn
			{
				get
				{
					return this.columnFixVersion;
				}
			}
			
			/// <summary>
			/// Gets a collection of Teraque.DataModelGenerator.DataIndices on a table.
			/// </summary>
			public global::Teraque.DataIndexCollection Indices
			{
				get
				{
					return this.dataIndices;
				}
			}
			
			/// <summary>
			/// Gets the IsBroker column of the Destination table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn IsBrokerColumn
			{
				get
				{
					return this.columnIsBroker;
				}
			}
			
			/// <summary>
			/// Gets the IsCancelAllowed column of the Destination table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn IsCancelAllowedColumn
			{
				get
				{
					return this.columnIsCancelAllowed;
				}
			}
			
			/// <summary>
			/// Gets the IsCancelReplaceAllowed column of the Destination table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn IsCancelReplaceAllowedColumn
			{
				get
				{
					return this.columnIsCancelReplaceAllowed;
				}
			}
			
			/// <summary>
			/// Gets the IsEcn column of the Destination table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn IsEcnColumn
			{
				get
				{
					return this.columnIsEcn;
				}
			}
			
			/// <summary>
			/// Gets the IsExchange column of the Destination table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn IsExchangeColumn
			{
				get
				{
					return this.columnIsExchange;
				}
			}
			
			/// <summary>
			/// Gets the IsInternal column of the Destination table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn IsInternalColumn
			{
				get
				{
					return this.columnIsInternal;
				}
			}
			
			/// <summary>
			/// Gets the IsIoiAllowed column of the Destination table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn IsIoiAllowedColumn
			{
				get
				{
					return this.columnIsIoiAllowed;
				}
			}
			
			/// <summary>
			/// Gets the IsLimitPricingAllowed column of the Destination table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn IsLimitPricingAllowedColumn
			{
				get
				{
					return this.columnIsLimitPricingAllowed;
				}
			}
			
			/// <summary>
			/// Gets the IsMarketOnClosePricingAllowed column of the Destination table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn IsMarketOnClosePricingAllowedColumn
			{
				get
				{
					return this.columnIsMarketOnClosePricingAllowed;
				}
			}
			
			/// <summary>
			/// Gets the IsMarketPricingAllowed column of the Destination table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn IsMarketPricingAllowedColumn
			{
				get
				{
					return this.columnIsMarketPricingAllowed;
				}
			}
			
			/// <summary>
			/// Gets the IsSystemUp column of the Destination table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn IsSystemUpColumn
			{
				get
				{
					return this.columnIsSystemUp;
				}
			}
			
			/// <summary>
			/// Gets the IsTagEligible column of the Destination table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn IsTagEligibleColumn
			{
				get
				{
					return this.columnIsTagEligible;
				}
			}
			
			/// <summary>
			/// Gets the IsTradeAwayAllowed column of the Destination table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn IsTradeAwayAllowedColumn
			{
				get
				{
					return this.columnIsTradeAwayAllowed;
				}
			}
			
			/// <summary>
			/// Gets the IsUnsolicitedTradeAllowed column of the Destination table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn IsUnsolicitedTradeAllowedColumn
			{
				get
				{
					return this.columnIsUnsolicitedTradeAllowed;
				}
			}
			
			/// <summary>
			/// Indexer to a row in the Destination table.
			/// </summary>
			/// <param name="index">The integer index of the row.</param>
			/// <returns>The Destination row found at the given index.</returns>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public DataModel.DestinationRow this[int index]
			{
				get
				{
					return ((DataModel.DestinationRow)(this.Rows[index]));
				}
			}
			
			/// <summary>
			/// Gets the LotSize column of the Destination table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn LotSizeColumn
			{
				get
				{
					return this.columnLotSize;
				}
			}
			
			/// <summary>
			/// Gets the MaximumQuantityListedLimit column of the Destination table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn MaximumQuantityListedLimitColumn
			{
				get
				{
					return this.columnMaximumQuantityListedLimit;
				}
			}
			
			/// <summary>
			/// Gets the MaximumQuantityListedMarket column of the Destination table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn MaximumQuantityListedMarketColumn
			{
				get
				{
					return this.columnMaximumQuantityListedMarket;
				}
			}
			
			/// <summary>
			/// Gets the MaximumQuantityUnlistedLimit column of the Destination table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn MaximumQuantityUnlistedLimitColumn
			{
				get
				{
					return this.columnMaximumQuantityUnlistedLimit;
				}
			}
			
			/// <summary>
			/// Gets the MaximumQuantityUnlistedMarket column of the Destination table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn MaximumQuantityUnlistedMarketColumn
			{
				get
				{
					return this.columnMaximumQuantityUnlistedMarket;
				}
			}
			
			/// <summary>
			/// Gets the ModifiedTime column of the Destination table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn ModifiedTimeColumn
			{
				get
				{
					return this.columnModifiedTime;
				}
			}
			
			/// <summary>
			/// Gets the Name column of the Destination table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn NameColumn
			{
				get
				{
					return this.columnName;
				}
			}
			
			/// <summary>
			/// Gets the NewOrderCustomFixTag column of the Destination table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn NewOrderCustomFixTagColumn
			{
				get
				{
					return this.columnNewOrderCustomFixTag;
				}
			}
			
			/// <summary>
			/// Gets the OatsDepartmentId column of the Destination table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn OatsDepartmentIdColumn
			{
				get
				{
					return this.columnOatsDepartmentId;
				}
			}
			
			/// <summary>
			/// Gets the OatsDestinationCode column of the Destination table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn OatsDestinationCodeColumn
			{
				get
				{
					return this.columnOatsDestinationCode;
				}
			}
			
			/// <summary>
			/// Gets the OatsReceivingMpi column of the Destination table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn OatsReceivingMpiColumn
			{
				get
				{
					return this.columnOatsReceivingMpi;
				}
			}
			
			/// <summary>
			/// Gets the OatsRouteMethod column of the Destination table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn OatsRouteMethodColumn
			{
				get
				{
					return this.columnOatsRouteMethod;
				}
			}
			
			/// <summary>
			/// Gets the OatsRoutingMpi column of the Destination table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn OatsRoutingMpiColumn
			{
				get
				{
					return this.columnOatsRoutingMpi;
				}
			}
			
			/// <summary>
			/// Gets the OatsSentMpi column of the Destination table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn OatsSentMpiColumn
			{
				get
				{
					return this.columnOatsSentMpi;
				}
			}
			
			/// <summary>
			/// Gets the OatsTerminalId column of the Destination table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn OatsTerminalIdColumn
			{
				get
				{
					return this.columnOatsTerminalId;
				}
			}
			
			/// <summary>
			/// Gets the OnCloseCancelTime column of the Destination table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn OnCloseCancelTimeColumn
			{
				get
				{
					return this.columnOnCloseCancelTime;
				}
			}
			
			/// <summary>
			/// Gets the OnCloseOrderTime column of the Destination table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn OnCloseOrderTimeColumn
			{
				get
				{
					return this.columnOnCloseOrderTime;
				}
			}
			
			/// <summary>
			/// Gets the PerShareUsageFee column of the Destination table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn PerShareUsageFeeColumn
			{
				get
				{
					return this.columnPerShareUsageFee;
				}
			}
			
			/// <summary>
			/// Gets the PostMarketLogic column of the Destination table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn PostMarketLogicColumn
			{
				get
				{
					return this.columnPostMarketLogic;
				}
			}
			
			/// <summary>
			/// Gets the PrimaryBackupDestinationId column of the Destination table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn PrimaryBackupDestinationIdColumn
			{
				get
				{
					return this.columnPrimaryBackupDestinationId;
				}
			}
			
			/// <summary>
			/// Gets the RowVersion column of the Destination table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn RowVersionColumn
			{
				get
				{
					return this.columnRowVersion;
				}
			}
			
			/// <summary>
			/// Gets the SecondaryBackupDestinationId column of the Destination table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn SecondaryBackupDestinationIdColumn
			{
				get
				{
					return this.columnSecondaryBackupDestinationId;
				}
			}
			
			/// <summary>
			/// Gets the SelectnetFlag column of the Destination table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn SelectnetFlagColumn
			{
				get
				{
					return this.columnSelectnetFlag;
				}
			}
			
			/// <summary>
			/// Gets the ShortName column of the Destination table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn ShortNameColumn
			{
				get
				{
					return this.columnShortName;
				}
			}
			
			/// <summary>
			/// Gets the SourceId0 column of the Destination table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn SourceId0Column
			{
				get
				{
					return this.columnSourceId0;
				}
			}
			
			/// <summary>
			/// Gets the SourceId1 column of the Destination table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn SourceId1Column
			{
				get
				{
					return this.columnSourceId1;
				}
			}
			
			/// <summary>
			/// Gets the SourceId2 column of the Destination table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn SourceId2Column
			{
				get
				{
					return this.columnSourceId2;
				}
			}
			
			/// <summary>
			/// Gets the SourceId3 column of the Destination table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn SourceId3Column
			{
				get
				{
					return this.columnSourceId3;
				}
			}
			
			/// <summary>
			/// Gets the SourceId4 column of the Destination table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn SourceId4Column
			{
				get
				{
					return this.columnSourceId4;
				}
			}
			
			/// <summary>
			/// Gets the SourceId5 column of the Destination table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn SourceId5Column
			{
				get
				{
					return this.columnSourceId5;
				}
			}
			
			/// <summary>
			/// Gets the SourceId6 column of the Destination table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn SourceId6Column
			{
				get
				{
					return this.columnSourceId6;
				}
			}
			
			/// <summary>
			/// Gets the SourceId7 column of the Destination table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn SourceId7Column
			{
				get
				{
					return this.columnSourceId7;
				}
			}
			
			/// <summary>
			/// Gets the UniqueShortName column of the Destination table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn UniqueShortNameColumn
			{
				get
				{
					return this.columnUniqueShortName;
				}
			}
			
			/// <summary>
			/// Occurs after a Destination row has been changed successfully.
			/// </summary>
			public event DestinationRowChangeEventHandler DestinationRowChanged;
			
			/// <summary>
			/// Occurs when a Destination row is changing.
			/// </summary>
			public event DestinationRowChangeEventHandler DestinationRowChanging;
			
			/// <summary>
			/// Occurs after a Destination row in the table has been deleted.
			/// </summary>
			public event DestinationRowChangeEventHandler DestinationRowDeleted;
			
			/// <summary>
			/// Occurs before a Destination row in the table is about to be deleted.
			/// </summary>
			public event DestinationRowChangeEventHandler DestinationRowDeleting;
			
			/// <summary>
			/// Returns the type of the row in a Destination table.
			/// </summary>
			/// <returns>The DestinationRow type.</returns>
			protected override global::System.Type GetRowType()
			{
				return typeof(DestinationRow);
			}
			
			/// <summary>
			/// Initializes the relation fields with the parent and child relations.
			/// </summary>
			internal void InitializeRelations()
			{
				this.relationDestinationBlotterDestinationMap = this.ChildRelations["FK_Destination_BlotterDestinationMap"];
				this.relationDestinationDestinationExchangeMap = this.ChildRelations["FK_Destination_DestinationExchangeMap"];
				this.relationDestinationDestinationOrder = this.ChildRelations["FK_Destination_DestinationOrder"];
				this.relationDestinationSourceOrder = this.ChildRelations["FK_Destination_SourceOrder"];
				this.relationDestinationWorkingOrder = this.ChildRelations["FK_Destination_WorkingOrder"];
			}
			
			/// <summary>
			/// Initializes a new instance of a Destination row.  Constructs a row from the builder.  Only for internal usage.
			/// </summary>
			/// <returns>A new row with the same schema as the table.</returns>
			protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder dataRowBuilder)
			{
				return new DestinationRow(dataRowBuilder);
			}
			
			/// <summary>
			/// Raises the DestinationRowChanged event.
			/// </summary>
			/// <param name="e">Provides data for the DestinationRow changing and deleting events.</param>
			protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowChanged(e);
				if ((this.DestinationRowChanged != null))
				{
					this.DestinationRowChanged(this, new DestinationRowChangeEventArgs(((DestinationRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the DestinationRowChanging event.
			/// </summary>
			/// <param name="e">Provides data for the DestinationRow changing and deleting events.</param>
			protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowChanging(e);
				if ((this.DestinationRowChanging != null))
				{
					this.DestinationRowChanging(this, new DestinationRowChangeEventArgs(((DestinationRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the DestinationRowDeleted event.
			/// </summary>
			/// <param name="e">Provides data for the DestinationRow changing and deleting events.</param>
			protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowDeleted(e);
				if ((this.DestinationRowDeleted != null))
				{
					this.DestinationRowDeleted(this, new DestinationRowChangeEventArgs(((DestinationRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the DestinationRowDeleting event.
			/// </summary>
			/// <param name="e">Provides data for the DestinationRow changing and deleting events.</param>
			protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowDeleting(e);
				if ((this.DestinationRowDeleting != null))
				{
					this.DestinationRowDeleting(this, new DestinationRowChangeEventArgs(((DestinationRow)(e.Row)), e.Action));
				}
			}
		}
		
		/// <summary>
		/// The DestinationExchangeMap table.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public partial class DestinationExchangeMapDataTable : global::System.Data.TypedTableBase<DataModel.DestinationExchangeMapRow>
		{
			
			private global::System.Data.DataColumn columnDestinationExchangeMapId;
			
			private global::System.Data.DataColumn columnDestinationId;
			
			private global::System.Data.DataColumn columnExchangeId;
			
			private global::System.Data.DataColumn columnExternalId0;
			
			private global::System.Data.DataColumn columnRowVersion;
			
			private global::Teraque.DataIndexCollection dataIndices;
			
			private global::Teraque.DataIndex indexDestinationExchangeMapKey;
			
			private global::Teraque.DataIndex indexDestinationExchangeMapKeyDestinationIdExchangeId;
			
			private global::System.Data.DataRelation relationDestinationDestinationExchangeMap;
			
			private global::System.Data.DataRelation relationExchangeDestinationExchangeMap;
			
			/// <summary>
			/// Creates the DestinationExchangeMap table.
			/// </summary>
			internal DestinationExchangeMapDataTable()
			{
				// Initialize the object.
				this.TableName = "DestinationExchangeMap";
				this.dataIndices = new global::Teraque.DataIndexCollection();
				// The DestinationExchangeMapId Column
				this.columnDestinationExchangeMapId = new global::System.Data.DataColumn("DestinationExchangeMapId", typeof(System.Guid), null, global::System.Data.MappingType.Element);
				this.columnDestinationExchangeMapId.AllowDBNull = false;
				this.Columns.Add(this.columnDestinationExchangeMapId);
				// The DestinationId Column
				this.columnDestinationId = new global::System.Data.DataColumn("DestinationId", typeof(System.Guid), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnDestinationId);
				// The ExchangeId Column
				this.columnExchangeId = new global::System.Data.DataColumn("ExchangeId", typeof(System.Guid), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnExchangeId);
				// The ExternalId0 Column
				this.columnExternalId0 = new global::System.Data.DataColumn("ExternalId0", typeof(string), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnExternalId0);
				// The RowVersion Column
				this.columnRowVersion = new global::System.Data.DataColumn("RowVersion", typeof(long), null, global::System.Data.MappingType.Element);
				this.columnRowVersion.AllowDBNull = false;
				this.Columns.Add(this.columnRowVersion);
				// The DestinationExchangeMapKey Index
				this.indexDestinationExchangeMapKey = new DestinationExchangeMapKeyIndex("DestinationExchangeMapKey", new global::System.Data.DataColumn[] {
							this.columnDestinationExchangeMapId});
				this.Indices.Add(this.indexDestinationExchangeMapKey);
				// The DestinationExchangeMapKeyDestinationIdExchangeId Index
				this.indexDestinationExchangeMapKeyDestinationIdExchangeId = new DestinationExchangeMapKeyDestinationIdExchangeIdIndex("DestinationExchangeMapKeyDestinationIdExchangeId", new global::System.Data.DataColumn[] {
							this.columnDestinationId,
							this.columnExchangeId});
				this.Indices.Add(this.indexDestinationExchangeMapKeyDestinationIdExchangeId);
			}
			
			/// <summary>
			/// Gets the number of rows in the DestinationExchangeMap table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public int Count
			{
				get
				{
					return this.Rows.Count;
				}
			}
			
			/// <summary>
			/// Gets the parent relation between the Destination and DestinationExchangeMap tables.
			/// </summary>
			public global::System.Data.DataRelation DestinationDestinationExchangeMapRelation
			{
				get
				{
					return this.relationDestinationDestinationExchangeMap;
				}
			}
			
			/// <summary>
			/// Gets the DestinationExchangeMapId column of the DestinationExchangeMap table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn DestinationExchangeMapIdColumn
			{
				get
				{
					return this.columnDestinationExchangeMapId;
				}
			}
			
			/// <summary>
			/// Gets the DestinationExchangeMapKey index on the DestinationExchangeMap table.
			/// </summary>
			public DestinationExchangeMapKeyIndex DestinationExchangeMapKey
			{
				get
				{
					return ((DestinationExchangeMapKeyIndex)(this.indexDestinationExchangeMapKey));
				}
			}
			
			/// <summary>
			/// Gets the DestinationExchangeMapKeyDestinationIdExchangeId index on the DestinationExchangeMap table.
			/// </summary>
			public DestinationExchangeMapKeyDestinationIdExchangeIdIndex DestinationExchangeMapKeyDestinationIdExchangeId
			{
				get
				{
					return ((DestinationExchangeMapKeyDestinationIdExchangeIdIndex)(this.indexDestinationExchangeMapKeyDestinationIdExchangeId));
				}
			}
			
			/// <summary>
			/// Gets the DestinationId column of the DestinationExchangeMap table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn DestinationIdColumn
			{
				get
				{
					return this.columnDestinationId;
				}
			}
			
			/// <summary>
			/// Gets the parent relation between the Exchange and DestinationExchangeMap tables.
			/// </summary>
			public global::System.Data.DataRelation ExchangeDestinationExchangeMapRelation
			{
				get
				{
					return this.relationExchangeDestinationExchangeMap;
				}
			}
			
			/// <summary>
			/// Gets the ExchangeId column of the DestinationExchangeMap table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn ExchangeIdColumn
			{
				get
				{
					return this.columnExchangeId;
				}
			}
			
			/// <summary>
			/// Gets the ExternalId0 column of the DestinationExchangeMap table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn ExternalId0Column
			{
				get
				{
					return this.columnExternalId0;
				}
			}
			
			/// <summary>
			/// Gets a collection of Teraque.DataModelGenerator.DataIndices on a table.
			/// </summary>
			public global::Teraque.DataIndexCollection Indices
			{
				get
				{
					return this.dataIndices;
				}
			}
			
			/// <summary>
			/// Indexer to a row in the DestinationExchangeMap table.
			/// </summary>
			/// <param name="index">The integer index of the row.</param>
			/// <returns>The DestinationExchangeMap row found at the given index.</returns>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public DataModel.DestinationExchangeMapRow this[int index]
			{
				get
				{
					return ((DataModel.DestinationExchangeMapRow)(this.Rows[index]));
				}
			}
			
			/// <summary>
			/// Gets the RowVersion column of the DestinationExchangeMap table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn RowVersionColumn
			{
				get
				{
					return this.columnRowVersion;
				}
			}
			
			/// <summary>
			/// Occurs after a DestinationExchangeMap row has been changed successfully.
			/// </summary>
			public event DestinationExchangeMapRowChangeEventHandler DestinationExchangeMapRowChanged;
			
			/// <summary>
			/// Occurs when a DestinationExchangeMap row is changing.
			/// </summary>
			public event DestinationExchangeMapRowChangeEventHandler DestinationExchangeMapRowChanging;
			
			/// <summary>
			/// Occurs after a DestinationExchangeMap row in the table has been deleted.
			/// </summary>
			public event DestinationExchangeMapRowChangeEventHandler DestinationExchangeMapRowDeleted;
			
			/// <summary>
			/// Occurs before a DestinationExchangeMap row in the table is about to be deleted.
			/// </summary>
			public event DestinationExchangeMapRowChangeEventHandler DestinationExchangeMapRowDeleting;
			
			/// <summary>
			/// Returns the type of the row in a DestinationExchangeMap table.
			/// </summary>
			/// <returns>The DestinationExchangeMapRow type.</returns>
			protected override global::System.Type GetRowType()
			{
				return typeof(DestinationExchangeMapRow);
			}
			
			/// <summary>
			/// Initializes the relation fields with the parent and child relations.
			/// </summary>
			internal void InitializeRelations()
			{
				this.relationDestinationDestinationExchangeMap = this.ParentRelations["FK_Destination_DestinationExchangeMap"];
				this.relationExchangeDestinationExchangeMap = this.ParentRelations["FK_Exchange_DestinationExchangeMap"];
			}
			
			/// <summary>
			/// Initializes a new instance of a DestinationExchangeMap row.  Constructs a row from the builder.  Only for internal usage.
			/// </summary>
			/// <returns>A new row with the same schema as the table.</returns>
			protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder dataRowBuilder)
			{
				return new DestinationExchangeMapRow(dataRowBuilder);
			}
			
			/// <summary>
			/// Raises the DestinationExchangeMapRowChanged event.
			/// </summary>
			/// <param name="e">Provides data for the DestinationExchangeMapRow changing and deleting events.</param>
			protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowChanged(e);
				if ((this.DestinationExchangeMapRowChanged != null))
				{
					this.DestinationExchangeMapRowChanged(this, new DestinationExchangeMapRowChangeEventArgs(((DestinationExchangeMapRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the DestinationExchangeMapRowChanging event.
			/// </summary>
			/// <param name="e">Provides data for the DestinationExchangeMapRow changing and deleting events.</param>
			protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowChanging(e);
				if ((this.DestinationExchangeMapRowChanging != null))
				{
					this.DestinationExchangeMapRowChanging(this, new DestinationExchangeMapRowChangeEventArgs(((DestinationExchangeMapRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the DestinationExchangeMapRowDeleted event.
			/// </summary>
			/// <param name="e">Provides data for the DestinationExchangeMapRow changing and deleting events.</param>
			protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowDeleted(e);
				if ((this.DestinationExchangeMapRowDeleted != null))
				{
					this.DestinationExchangeMapRowDeleted(this, new DestinationExchangeMapRowChangeEventArgs(((DestinationExchangeMapRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the DestinationExchangeMapRowDeleting event.
			/// </summary>
			/// <param name="e">Provides data for the DestinationExchangeMapRow changing and deleting events.</param>
			protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowDeleting(e);
				if ((this.DestinationExchangeMapRowDeleting != null))
				{
					this.DestinationExchangeMapRowDeleting(this, new DestinationExchangeMapRowChangeEventArgs(((DestinationExchangeMapRow)(e.Row)), e.Action));
				}
			}
		}
		
		/// <summary>
		/// The DestinationOrder table.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public partial class DestinationOrderDataTable : global::System.Data.TypedTableBase<DataModel.DestinationOrderRow>
		{
			
			private global::System.Data.DataColumn columnCanceledQuantity;
			
			private global::System.Data.DataColumn columnCanceledTime;
			
			private global::System.Data.DataColumn columnCreatedTime;
			
			private global::System.Data.DataColumn columnCreatedUserId;
			
			private global::System.Data.DataColumn columnDestinationId;
			
			private global::System.Data.DataColumn columnDestinationOrderId;
			
			private global::System.Data.DataColumn columnExternalId0;
			
			private global::System.Data.DataColumn columnIsCanceledByUser;
			
			private global::System.Data.DataColumn columnIsHidden;
			
			private global::System.Data.DataColumn columnLimitPrice;
			
			private global::System.Data.DataColumn columnModifiedTime;
			
			private global::System.Data.DataColumn columnModifiedUserId;
			
			private global::System.Data.DataColumn columnOrderedQuantity;
			
			private global::System.Data.DataColumn columnOrderTypeCode;
			
			private global::System.Data.DataColumn columnRowVersion;
			
			private global::System.Data.DataColumn columnSecurityId;
			
			private global::System.Data.DataColumn columnSettlementDate;
			
			private global::System.Data.DataColumn columnSettlementId;
			
			private global::System.Data.DataColumn columnSideCode;
			
			private global::System.Data.DataColumn columnStateCode;
			
			private global::System.Data.DataColumn columnStatusCode;
			
			private global::System.Data.DataColumn columnStopPrice;
			
			private global::System.Data.DataColumn columnTimeInForceCode;
			
			private global::System.Data.DataColumn columnTradeDate;
			
			private global::System.Data.DataColumn columnTraderId;
			
			private global::System.Data.DataColumn columnWorkingOrderId;
			
			private global::Teraque.DataIndexCollection dataIndices;
			
			private global::Teraque.DataIndex indexDestinationOrderKey;
			
			private global::Teraque.DataIndex indexDestinationOrderKeyExternalId0;
			
			private global::System.Data.DataRelation relationDestinationDestinationOrder;
			
			private global::System.Data.DataRelation relationDestinationOrderExecution;
			
			private global::System.Data.DataRelation relationOrderTypeDestinationOrder;
			
			private global::System.Data.DataRelation relationSecurityDestinationOrderByFK_Security_DestinationOrder_SecurityId;
			
			private global::System.Data.DataRelation relationSecurityDestinationOrderByFK_Security_DestinationOrder_SettlementId;
			
			private global::System.Data.DataRelation relationSideDestinationOrder;
			
			private global::System.Data.DataRelation relationStateDestinationOrder;
			
			private global::System.Data.DataRelation relationStatusDestinationOrder;
			
			private global::System.Data.DataRelation relationTimeInForceDestinationOrder;
			
			private global::System.Data.DataRelation relationTraderDestinationOrder;
			
			private global::System.Data.DataRelation relationUserDestinationOrderByFK_User_DestinationOrder_CreatedUserId;
			
			private global::System.Data.DataRelation relationUserDestinationOrderByFK_User_DestinationOrder_ModifiedUserId;
			
			private global::System.Data.DataRelation relationWorkingOrderDestinationOrder;
			
			/// <summary>
			/// Creates the DestinationOrder table.
			/// </summary>
			internal DestinationOrderDataTable()
			{
				// Initialize the object.
				this.TableName = "DestinationOrder";
				this.dataIndices = new global::Teraque.DataIndexCollection();
				// The CanceledQuantity Column
				this.columnCanceledQuantity = new global::System.Data.DataColumn("CanceledQuantity", typeof(decimal), null, global::System.Data.MappingType.Element);
				this.columnCanceledQuantity.AllowDBNull = false;
				this.columnCanceledQuantity.DefaultValue = 0.0m;
				this.Columns.Add(this.columnCanceledQuantity);
				// The CanceledTime Column
				this.columnCanceledTime = new global::System.Data.DataColumn("CanceledTime", typeof(System.DateTime), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnCanceledTime);
				// The CreatedTime Column
				this.columnCreatedTime = new global::System.Data.DataColumn("CreatedTime", typeof(System.DateTime), null, global::System.Data.MappingType.Element);
				this.columnCreatedTime.AllowDBNull = false;
				this.Columns.Add(this.columnCreatedTime);
				// The CreatedUserId Column
				this.columnCreatedUserId = new global::System.Data.DataColumn("CreatedUserId", typeof(System.Guid), null, global::System.Data.MappingType.Element);
				this.columnCreatedUserId.AllowDBNull = false;
				this.Columns.Add(this.columnCreatedUserId);
				// The DestinationId Column
				this.columnDestinationId = new global::System.Data.DataColumn("DestinationId", typeof(System.Guid), null, global::System.Data.MappingType.Element);
				this.columnDestinationId.AllowDBNull = false;
				this.Columns.Add(this.columnDestinationId);
				// The DestinationOrderId Column
				this.columnDestinationOrderId = new global::System.Data.DataColumn("DestinationOrderId", typeof(System.Guid), null, global::System.Data.MappingType.Element);
				this.columnDestinationOrderId.AllowDBNull = false;
				this.Columns.Add(this.columnDestinationOrderId);
				// The ExternalId0 Column
				this.columnExternalId0 = new global::System.Data.DataColumn("ExternalId0", typeof(string), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnExternalId0);
				// The IsCanceledByUser Column
				this.columnIsCanceledByUser = new global::System.Data.DataColumn("IsCanceledByUser", typeof(bool), null, global::System.Data.MappingType.Element);
				this.columnIsCanceledByUser.AllowDBNull = false;
				this.columnIsCanceledByUser.DefaultValue = false;
				this.Columns.Add(this.columnIsCanceledByUser);
				// The IsHidden Column
				this.columnIsHidden = new global::System.Data.DataColumn("IsHidden", typeof(bool), null, global::System.Data.MappingType.Element);
				this.columnIsHidden.AllowDBNull = false;
				this.columnIsHidden.DefaultValue = false;
				this.Columns.Add(this.columnIsHidden);
				// The LimitPrice Column
				this.columnLimitPrice = new global::System.Data.DataColumn("LimitPrice", typeof(decimal), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnLimitPrice);
				// The ModifiedTime Column
				this.columnModifiedTime = new global::System.Data.DataColumn("ModifiedTime", typeof(System.DateTime), null, global::System.Data.MappingType.Element);
				this.columnModifiedTime.AllowDBNull = false;
				this.Columns.Add(this.columnModifiedTime);
				// The ModifiedUserId Column
				this.columnModifiedUserId = new global::System.Data.DataColumn("ModifiedUserId", typeof(System.Guid), null, global::System.Data.MappingType.Element);
				this.columnModifiedUserId.AllowDBNull = false;
				this.Columns.Add(this.columnModifiedUserId);
				// The OrderedQuantity Column
				this.columnOrderedQuantity = new global::System.Data.DataColumn("OrderedQuantity", typeof(decimal), null, global::System.Data.MappingType.Element);
				this.columnOrderedQuantity.AllowDBNull = false;
				this.columnOrderedQuantity.DefaultValue = 0.0m;
				this.Columns.Add(this.columnOrderedQuantity);
				// The OrderTypeCode Column
				this.columnOrderTypeCode = new global::System.Data.DataColumn("OrderTypeCode", typeof(Teraque.OrderTypeCode), null, global::System.Data.MappingType.Element);
				this.columnOrderTypeCode.AllowDBNull = false;
				this.Columns.Add(this.columnOrderTypeCode);
				// The RowVersion Column
				this.columnRowVersion = new global::System.Data.DataColumn("RowVersion", typeof(long), null, global::System.Data.MappingType.Element);
				this.columnRowVersion.AllowDBNull = false;
				this.Columns.Add(this.columnRowVersion);
				// The SecurityId Column
				this.columnSecurityId = new global::System.Data.DataColumn("SecurityId", typeof(System.Guid), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnSecurityId);
				// The SettlementDate Column
				this.columnSettlementDate = new global::System.Data.DataColumn("SettlementDate", typeof(System.DateTime), null, global::System.Data.MappingType.Element);
				this.columnSettlementDate.AllowDBNull = false;
				this.Columns.Add(this.columnSettlementDate);
				// The SettlementId Column
				this.columnSettlementId = new global::System.Data.DataColumn("SettlementId", typeof(System.Guid), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnSettlementId);
				// The SideCode Column
				this.columnSideCode = new global::System.Data.DataColumn("SideCode", typeof(Teraque.SideCode), null, global::System.Data.MappingType.Element);
				this.columnSideCode.AllowDBNull = false;
				this.Columns.Add(this.columnSideCode);
				// The StateCode Column
				this.columnStateCode = new global::System.Data.DataColumn("StateCode", typeof(Teraque.StateCode), null, global::System.Data.MappingType.Element);
				this.columnStateCode.AllowDBNull = false;
				this.Columns.Add(this.columnStateCode);
				// The StatusCode Column
				this.columnStatusCode = new global::System.Data.DataColumn("StatusCode", typeof(Teraque.StatusCode), null, global::System.Data.MappingType.Element);
				this.columnStatusCode.AllowDBNull = false;
				this.Columns.Add(this.columnStatusCode);
				// The StopPrice Column
				this.columnStopPrice = new global::System.Data.DataColumn("StopPrice", typeof(decimal), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnStopPrice);
				// The TimeInForceCode Column
				this.columnTimeInForceCode = new global::System.Data.DataColumn("TimeInForceCode", typeof(Teraque.TimeInForceCode), null, global::System.Data.MappingType.Element);
				this.columnTimeInForceCode.AllowDBNull = false;
				this.Columns.Add(this.columnTimeInForceCode);
				// The TradeDate Column
				this.columnTradeDate = new global::System.Data.DataColumn("TradeDate", typeof(System.DateTime), null, global::System.Data.MappingType.Element);
				this.columnTradeDate.AllowDBNull = false;
				this.Columns.Add(this.columnTradeDate);
				// The TraderId Column
				this.columnTraderId = new global::System.Data.DataColumn("TraderId", typeof(System.Guid), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnTraderId);
				// The WorkingOrderId Column
				this.columnWorkingOrderId = new global::System.Data.DataColumn("WorkingOrderId", typeof(System.Guid), null, global::System.Data.MappingType.Element);
				this.columnWorkingOrderId.AllowDBNull = false;
				this.Columns.Add(this.columnWorkingOrderId);
				// The DestinationOrderKey Index
				this.indexDestinationOrderKey = new DestinationOrderKeyIndex("DestinationOrderKey", new global::System.Data.DataColumn[] {
							this.columnDestinationOrderId});
				this.Indices.Add(this.indexDestinationOrderKey);
				// The DestinationOrderKeyExternalId0 Index
				this.indexDestinationOrderKeyExternalId0 = new DestinationOrderKeyExternalId0Index("DestinationOrderKeyExternalId0", new global::System.Data.DataColumn[] {
							this.columnExternalId0});
				this.Indices.Add(this.indexDestinationOrderKeyExternalId0);
			}
			
			/// <summary>
			/// Gets the CanceledQuantity column of the DestinationOrder table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn CanceledQuantityColumn
			{
				get
				{
					return this.columnCanceledQuantity;
				}
			}
			
			/// <summary>
			/// Gets the CanceledTime column of the DestinationOrder table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn CanceledTimeColumn
			{
				get
				{
					return this.columnCanceledTime;
				}
			}
			
			/// <summary>
			/// Gets the number of rows in the DestinationOrder table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public int Count
			{
				get
				{
					return this.Rows.Count;
				}
			}
			
			/// <summary>
			/// Gets the CreatedTime column of the DestinationOrder table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn CreatedTimeColumn
			{
				get
				{
					return this.columnCreatedTime;
				}
			}
			
			/// <summary>
			/// Gets the CreatedUserId column of the DestinationOrder table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn CreatedUserIdColumn
			{
				get
				{
					return this.columnCreatedUserId;
				}
			}
			
			/// <summary>
			/// Gets the parent relation between the Destination and DestinationOrder tables.
			/// </summary>
			public global::System.Data.DataRelation DestinationDestinationOrderRelation
			{
				get
				{
					return this.relationDestinationDestinationOrder;
				}
			}
			
			/// <summary>
			/// Gets the DestinationId column of the DestinationOrder table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn DestinationIdColumn
			{
				get
				{
					return this.columnDestinationId;
				}
			}
			
			/// <summary>
			/// Gets the child relation between the DestinationOrder and Execution tables.
			/// </summary>
			internal global::System.Data.DataRelation DestinationOrderExecutionRelation
			{
				get
				{
					return this.relationDestinationOrderExecution;
				}
			}
			
			/// <summary>
			/// Gets the DestinationOrderId column of the DestinationOrder table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn DestinationOrderIdColumn
			{
				get
				{
					return this.columnDestinationOrderId;
				}
			}
			
			/// <summary>
			/// Gets the DestinationOrderKey index on the DestinationOrder table.
			/// </summary>
			public DestinationOrderKeyIndex DestinationOrderKey
			{
				get
				{
					return ((DestinationOrderKeyIndex)(this.indexDestinationOrderKey));
				}
			}
			
			/// <summary>
			/// Gets the DestinationOrderKeyExternalId0 index on the DestinationOrder table.
			/// </summary>
			public DestinationOrderKeyExternalId0Index DestinationOrderKeyExternalId0
			{
				get
				{
					return ((DestinationOrderKeyExternalId0Index)(this.indexDestinationOrderKeyExternalId0));
				}
			}
			
			/// <summary>
			/// Gets the ExternalId0 column of the DestinationOrder table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn ExternalId0Column
			{
				get
				{
					return this.columnExternalId0;
				}
			}
			
			/// <summary>
			/// Gets a collection of Teraque.DataModelGenerator.DataIndices on a table.
			/// </summary>
			public global::Teraque.DataIndexCollection Indices
			{
				get
				{
					return this.dataIndices;
				}
			}
			
			/// <summary>
			/// Gets the IsCanceledByUser column of the DestinationOrder table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn IsCanceledByUserColumn
			{
				get
				{
					return this.columnIsCanceledByUser;
				}
			}
			
			/// <summary>
			/// Gets the IsHidden column of the DestinationOrder table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn IsHiddenColumn
			{
				get
				{
					return this.columnIsHidden;
				}
			}
			
			/// <summary>
			/// Indexer to a row in the DestinationOrder table.
			/// </summary>
			/// <param name="index">The integer index of the row.</param>
			/// <returns>The DestinationOrder row found at the given index.</returns>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public DataModel.DestinationOrderRow this[int index]
			{
				get
				{
					return ((DataModel.DestinationOrderRow)(this.Rows[index]));
				}
			}
			
			/// <summary>
			/// Gets the LimitPrice column of the DestinationOrder table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn LimitPriceColumn
			{
				get
				{
					return this.columnLimitPrice;
				}
			}
			
			/// <summary>
			/// Gets the ModifiedTime column of the DestinationOrder table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn ModifiedTimeColumn
			{
				get
				{
					return this.columnModifiedTime;
				}
			}
			
			/// <summary>
			/// Gets the ModifiedUserId column of the DestinationOrder table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn ModifiedUserIdColumn
			{
				get
				{
					return this.columnModifiedUserId;
				}
			}
			
			/// <summary>
			/// Gets the OrderedQuantity column of the DestinationOrder table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn OrderedQuantityColumn
			{
				get
				{
					return this.columnOrderedQuantity;
				}
			}
			
			/// <summary>
			/// Gets the OrderTypeCode column of the DestinationOrder table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn OrderTypeCodeColumn
			{
				get
				{
					return this.columnOrderTypeCode;
				}
			}
			
			/// <summary>
			/// Gets the parent relation between the OrderType and DestinationOrder tables.
			/// </summary>
			public global::System.Data.DataRelation OrderTypeDestinationOrderRelation
			{
				get
				{
					return this.relationOrderTypeDestinationOrder;
				}
			}
			
			/// <summary>
			/// Gets the RowVersion column of the DestinationOrder table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn RowVersionColumn
			{
				get
				{
					return this.columnRowVersion;
				}
			}
			
			/// <summary>
			/// Gets the parent relation between the Security and DestinationOrder tables.
			/// </summary>
			public global::System.Data.DataRelation SecurityDestinationOrderByFK_Security_DestinationOrder_SecurityIdRelation
			{
				get
				{
					return this.relationSecurityDestinationOrderByFK_Security_DestinationOrder_SecurityId;
				}
			}
			
			/// <summary>
			/// Gets the parent relation between the Security and DestinationOrder tables.
			/// </summary>
			public global::System.Data.DataRelation SecurityDestinationOrderByFK_Security_DestinationOrder_SettlementIdRelation
			{
				get
				{
					return this.relationSecurityDestinationOrderByFK_Security_DestinationOrder_SettlementId;
				}
			}
			
			/// <summary>
			/// Gets the SecurityId column of the DestinationOrder table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn SecurityIdColumn
			{
				get
				{
					return this.columnSecurityId;
				}
			}
			
			/// <summary>
			/// Gets the SettlementDate column of the DestinationOrder table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn SettlementDateColumn
			{
				get
				{
					return this.columnSettlementDate;
				}
			}
			
			/// <summary>
			/// Gets the SettlementId column of the DestinationOrder table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn SettlementIdColumn
			{
				get
				{
					return this.columnSettlementId;
				}
			}
			
			/// <summary>
			/// Gets the SideCode column of the DestinationOrder table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn SideCodeColumn
			{
				get
				{
					return this.columnSideCode;
				}
			}
			
			/// <summary>
			/// Gets the parent relation between the Side and DestinationOrder tables.
			/// </summary>
			public global::System.Data.DataRelation SideDestinationOrderRelation
			{
				get
				{
					return this.relationSideDestinationOrder;
				}
			}
			
			/// <summary>
			/// Gets the StateCode column of the DestinationOrder table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn StateCodeColumn
			{
				get
				{
					return this.columnStateCode;
				}
			}
			
			/// <summary>
			/// Gets the parent relation between the State and DestinationOrder tables.
			/// </summary>
			public global::System.Data.DataRelation StateDestinationOrderRelation
			{
				get
				{
					return this.relationStateDestinationOrder;
				}
			}
			
			/// <summary>
			/// Gets the StatusCode column of the DestinationOrder table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn StatusCodeColumn
			{
				get
				{
					return this.columnStatusCode;
				}
			}
			
			/// <summary>
			/// Gets the parent relation between the Status and DestinationOrder tables.
			/// </summary>
			public global::System.Data.DataRelation StatusDestinationOrderRelation
			{
				get
				{
					return this.relationStatusDestinationOrder;
				}
			}
			
			/// <summary>
			/// Gets the StopPrice column of the DestinationOrder table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn StopPriceColumn
			{
				get
				{
					return this.columnStopPrice;
				}
			}
			
			/// <summary>
			/// Gets the TimeInForceCode column of the DestinationOrder table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn TimeInForceCodeColumn
			{
				get
				{
					return this.columnTimeInForceCode;
				}
			}
			
			/// <summary>
			/// Gets the parent relation between the TimeInForce and DestinationOrder tables.
			/// </summary>
			public global::System.Data.DataRelation TimeInForceDestinationOrderRelation
			{
				get
				{
					return this.relationTimeInForceDestinationOrder;
				}
			}
			
			/// <summary>
			/// Gets the TradeDate column of the DestinationOrder table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn TradeDateColumn
			{
				get
				{
					return this.columnTradeDate;
				}
			}
			
			/// <summary>
			/// Gets the parent relation between the Trader and DestinationOrder tables.
			/// </summary>
			public global::System.Data.DataRelation TraderDestinationOrderRelation
			{
				get
				{
					return this.relationTraderDestinationOrder;
				}
			}
			
			/// <summary>
			/// Gets the TraderId column of the DestinationOrder table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn TraderIdColumn
			{
				get
				{
					return this.columnTraderId;
				}
			}
			
			/// <summary>
			/// Gets the parent relation between the User and DestinationOrder tables.
			/// </summary>
			public global::System.Data.DataRelation UserDestinationOrderByFK_User_DestinationOrder_CreatedUserIdRelation
			{
				get
				{
					return this.relationUserDestinationOrderByFK_User_DestinationOrder_CreatedUserId;
				}
			}
			
			/// <summary>
			/// Gets the parent relation between the User and DestinationOrder tables.
			/// </summary>
			public global::System.Data.DataRelation UserDestinationOrderByFK_User_DestinationOrder_ModifiedUserIdRelation
			{
				get
				{
					return this.relationUserDestinationOrderByFK_User_DestinationOrder_ModifiedUserId;
				}
			}
			
			/// <summary>
			/// Gets the parent relation between the WorkingOrder and DestinationOrder tables.
			/// </summary>
			public global::System.Data.DataRelation WorkingOrderDestinationOrderRelation
			{
				get
				{
					return this.relationWorkingOrderDestinationOrder;
				}
			}
			
			/// <summary>
			/// Gets the WorkingOrderId column of the DestinationOrder table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn WorkingOrderIdColumn
			{
				get
				{
					return this.columnWorkingOrderId;
				}
			}
			
			/// <summary>
			/// Occurs after a DestinationOrder row has been changed successfully.
			/// </summary>
			public event DestinationOrderRowChangeEventHandler DestinationOrderRowChanged;
			
			/// <summary>
			/// Occurs when a DestinationOrder row is changing.
			/// </summary>
			public event DestinationOrderRowChangeEventHandler DestinationOrderRowChanging;
			
			/// <summary>
			/// Occurs after a DestinationOrder row in the table has been deleted.
			/// </summary>
			public event DestinationOrderRowChangeEventHandler DestinationOrderRowDeleted;
			
			/// <summary>
			/// Occurs before a DestinationOrder row in the table is about to be deleted.
			/// </summary>
			public event DestinationOrderRowChangeEventHandler DestinationOrderRowDeleting;
			
			/// <summary>
			/// Returns the type of the row in a DestinationOrder table.
			/// </summary>
			/// <returns>The DestinationOrderRow type.</returns>
			protected override global::System.Type GetRowType()
			{
				return typeof(DestinationOrderRow);
			}
			
			/// <summary>
			/// Initializes the relation fields with the parent and child relations.
			/// </summary>
			internal void InitializeRelations()
			{
				this.relationDestinationDestinationOrder = this.ParentRelations["FK_Destination_DestinationOrder"];
				this.relationOrderTypeDestinationOrder = this.ParentRelations["FK_OrderType_DestinationOrder"];
				this.relationSecurityDestinationOrderByFK_Security_DestinationOrder_SecurityId = this.ParentRelations["FK_Security_DestinationOrder_SecurityId"];
				this.relationSecurityDestinationOrderByFK_Security_DestinationOrder_SettlementId = this.ParentRelations["FK_Security_DestinationOrder_SettlementId"];
				this.relationSideDestinationOrder = this.ParentRelations["FK_Side_DestinationOrder"];
				this.relationStateDestinationOrder = this.ParentRelations["FK_State_DestinationOrder"];
				this.relationStatusDestinationOrder = this.ParentRelations["FK_Status_DestinationOrder"];
				this.relationTimeInForceDestinationOrder = this.ParentRelations["FK_TimeInForce_DestinationOrder"];
				this.relationTraderDestinationOrder = this.ParentRelations["FK_Trader_DestinationOrder"];
				this.relationUserDestinationOrderByFK_User_DestinationOrder_CreatedUserId = this.ParentRelations["FK_User_DestinationOrder_CreatedUserId"];
				this.relationUserDestinationOrderByFK_User_DestinationOrder_ModifiedUserId = this.ParentRelations["FK_User_DestinationOrder_ModifiedUserId"];
				this.relationWorkingOrderDestinationOrder = this.ParentRelations["FK_WorkingOrder_DestinationOrder"];
				this.relationDestinationOrderExecution = this.ChildRelations["FK_DestinationOrder_Execution"];
			}
			
			/// <summary>
			/// Initializes a new instance of a DestinationOrder row.  Constructs a row from the builder.  Only for internal usage.
			/// </summary>
			/// <returns>A new row with the same schema as the table.</returns>
			protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder dataRowBuilder)
			{
				return new DestinationOrderRow(dataRowBuilder);
			}
			
			/// <summary>
			/// Raises the DestinationOrderRowChanged event.
			/// </summary>
			/// <param name="e">Provides data for the DestinationOrderRow changing and deleting events.</param>
			protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowChanged(e);
				if ((this.DestinationOrderRowChanged != null))
				{
					this.DestinationOrderRowChanged(this, new DestinationOrderRowChangeEventArgs(((DestinationOrderRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the DestinationOrderRowChanging event.
			/// </summary>
			/// <param name="e">Provides data for the DestinationOrderRow changing and deleting events.</param>
			protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowChanging(e);
				if ((this.DestinationOrderRowChanging != null))
				{
					this.DestinationOrderRowChanging(this, new DestinationOrderRowChangeEventArgs(((DestinationOrderRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the DestinationOrderRowDeleted event.
			/// </summary>
			/// <param name="e">Provides data for the DestinationOrderRow changing and deleting events.</param>
			protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowDeleted(e);
				if ((this.DestinationOrderRowDeleted != null))
				{
					this.DestinationOrderRowDeleted(this, new DestinationOrderRowChangeEventArgs(((DestinationOrderRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the DestinationOrderRowDeleting event.
			/// </summary>
			/// <param name="e">Provides data for the DestinationOrderRow changing and deleting events.</param>
			protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowDeleting(e);
				if ((this.DestinationOrderRowDeleting != null))
				{
					this.DestinationOrderRowDeleting(this, new DestinationOrderRowChangeEventArgs(((DestinationOrderRow)(e.Row)), e.Action));
				}
			}
		}
		
		/// <summary>
		/// The Entity table.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public partial class EntityDataTable : global::System.Data.TypedTableBase<DataModel.EntityRow>
		{
			
			private global::System.Data.DataColumn columnCreatedTime;
			
			private global::System.Data.DataColumn columnDescription;
			
			private global::System.Data.DataColumn columnEntityId;
			
			private global::System.Data.DataColumn columnExternalId0;
			
			private global::System.Data.DataColumn columnExternalId1;
			
			private global::System.Data.DataColumn columnExternalId2;
			
			private global::System.Data.DataColumn columnExternalId3;
			
			private global::System.Data.DataColumn columnExternalId4;
			
			private global::System.Data.DataColumn columnExternalId5;
			
			private global::System.Data.DataColumn columnExternalId6;
			
			private global::System.Data.DataColumn columnExternalId7;
			
			private global::System.Data.DataColumn columnImageId;
			
			private global::System.Data.DataColumn columnIsContainer;
			
			private global::System.Data.DataColumn columnIsHidden;
			
			private global::System.Data.DataColumn columnIsReadOnly;
			
			private global::System.Data.DataColumn columnModifiedTime;
			
			private global::System.Data.DataColumn columnName;
			
			private global::System.Data.DataColumn columnRowVersion;
			
			private global::System.Data.DataColumn columnTypeId;
			
			private global::Teraque.DataIndexCollection dataIndices;
			
			private global::Teraque.DataIndex indexEntityKey;
			
			private global::Teraque.DataIndex indexEntityKeyExternalId0;
			
			private global::Teraque.DataIndex indexEntityKeyExternalId1;
			
			private global::Teraque.DataIndex indexEntityKeyExternalId2;
			
			private global::Teraque.DataIndex indexEntityKeyExternalId3;
			
			private global::Teraque.DataIndex indexEntityKeyExternalId4;
			
			private global::Teraque.DataIndex indexEntityKeyExternalId5;
			
			private global::Teraque.DataIndex indexEntityKeyExternalId6;
			
			private global::Teraque.DataIndex indexEntityKeyExternalId7;
			
			private global::System.Data.DataRelation relationEntityAccount;
			
			private global::System.Data.DataRelation relationEntityBlotter;
			
			private global::System.Data.DataRelation relationEntityEntityTreeByFK_Entity_EntityTree_ChildId;
			
			private global::System.Data.DataRelation relationEntityEntityTreeByFK_Entity_EntityTree_ParentId;
			
			private global::System.Data.DataRelation relationEntityFolder;
			
			private global::System.Data.DataRelation relationEntityIssuer;
			
			private global::System.Data.DataRelation relationEntityPropertyStore;
			
			private global::System.Data.DataRelation relationEntitySecurity;
			
			private global::System.Data.DataRelation relationEntityUser;
			
			private global::System.Data.DataRelation relationImageEntity;
			
			private global::System.Data.DataRelation relationTypeEntity;
			
			/// <summary>
			/// Creates the Entity table.
			/// </summary>
			internal EntityDataTable()
			{
				// Initialize the object.
				this.TableName = "Entity";
				this.dataIndices = new global::Teraque.DataIndexCollection();
				// The CreatedTime Column
				this.columnCreatedTime = new global::System.Data.DataColumn("CreatedTime", typeof(System.DateTime), null, global::System.Data.MappingType.Element);
				this.columnCreatedTime.AllowDBNull = false;
				this.Columns.Add(this.columnCreatedTime);
				// The Description Column
				this.columnDescription = new global::System.Data.DataColumn("Description", typeof(string), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnDescription);
				// The EntityId Column
				this.columnEntityId = new global::System.Data.DataColumn("EntityId", typeof(System.Guid), null, global::System.Data.MappingType.Element);
				this.columnEntityId.AllowDBNull = false;
				this.Columns.Add(this.columnEntityId);
				// The ExternalId0 Column
				this.columnExternalId0 = new global::System.Data.DataColumn("ExternalId0", typeof(string), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnExternalId0);
				// The ExternalId1 Column
				this.columnExternalId1 = new global::System.Data.DataColumn("ExternalId1", typeof(string), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnExternalId1);
				// The ExternalId2 Column
				this.columnExternalId2 = new global::System.Data.DataColumn("ExternalId2", typeof(string), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnExternalId2);
				// The ExternalId3 Column
				this.columnExternalId3 = new global::System.Data.DataColumn("ExternalId3", typeof(string), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnExternalId3);
				// The ExternalId4 Column
				this.columnExternalId4 = new global::System.Data.DataColumn("ExternalId4", typeof(string), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnExternalId4);
				// The ExternalId5 Column
				this.columnExternalId5 = new global::System.Data.DataColumn("ExternalId5", typeof(string), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnExternalId5);
				// The ExternalId6 Column
				this.columnExternalId6 = new global::System.Data.DataColumn("ExternalId6", typeof(string), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnExternalId6);
				// The ExternalId7 Column
				this.columnExternalId7 = new global::System.Data.DataColumn("ExternalId7", typeof(string), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnExternalId7);
				// The ImageId Column
				this.columnImageId = new global::System.Data.DataColumn("ImageId", typeof(System.Guid), null, global::System.Data.MappingType.Element);
				this.columnImageId.AllowDBNull = false;
				this.Columns.Add(this.columnImageId);
				// The IsContainer Column
				this.columnIsContainer = new global::System.Data.DataColumn("IsContainer", typeof(bool), null, global::System.Data.MappingType.Element);
				this.columnIsContainer.AllowDBNull = false;
				this.columnIsContainer.DefaultValue = true;
				this.Columns.Add(this.columnIsContainer);
				// The IsHidden Column
				this.columnIsHidden = new global::System.Data.DataColumn("IsHidden", typeof(bool), null, global::System.Data.MappingType.Element);
				this.columnIsHidden.AllowDBNull = false;
				this.columnIsHidden.DefaultValue = false;
				this.Columns.Add(this.columnIsHidden);
				// The IsReadOnly Column
				this.columnIsReadOnly = new global::System.Data.DataColumn("IsReadOnly", typeof(bool), null, global::System.Data.MappingType.Element);
				this.columnIsReadOnly.AllowDBNull = false;
				this.columnIsReadOnly.DefaultValue = false;
				this.Columns.Add(this.columnIsReadOnly);
				// The ModifiedTime Column
				this.columnModifiedTime = new global::System.Data.DataColumn("ModifiedTime", typeof(System.DateTime), null, global::System.Data.MappingType.Element);
				this.columnModifiedTime.AllowDBNull = false;
				this.Columns.Add(this.columnModifiedTime);
				// The Name Column
				this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Element);
				this.columnName.AllowDBNull = false;
				this.columnName.DefaultValue = "";
				this.Columns.Add(this.columnName);
				// The RowVersion Column
				this.columnRowVersion = new global::System.Data.DataColumn("RowVersion", typeof(long), null, global::System.Data.MappingType.Element);
				this.columnRowVersion.AllowDBNull = false;
				this.Columns.Add(this.columnRowVersion);
				// The TypeId Column
				this.columnTypeId = new global::System.Data.DataColumn("TypeId", typeof(System.Guid), null, global::System.Data.MappingType.Element);
				this.columnTypeId.AllowDBNull = false;
				this.Columns.Add(this.columnTypeId);
				// The EntityKey Index
				this.indexEntityKey = new EntityKeyIndex("EntityKey", new global::System.Data.DataColumn[] {
							this.columnEntityId});
				this.Indices.Add(this.indexEntityKey);
				// The EntityKeyExternalId0 Index
				this.indexEntityKeyExternalId0 = new EntityKeyExternalId0Index("EntityKeyExternalId0", new global::System.Data.DataColumn[] {
							this.columnExternalId0});
				this.Indices.Add(this.indexEntityKeyExternalId0);
				// The EntityKeyExternalId1 Index
				this.indexEntityKeyExternalId1 = new EntityKeyExternalId1Index("EntityKeyExternalId1", new global::System.Data.DataColumn[] {
							this.columnExternalId1});
				this.Indices.Add(this.indexEntityKeyExternalId1);
				// The EntityKeyExternalId2 Index
				this.indexEntityKeyExternalId2 = new EntityKeyExternalId2Index("EntityKeyExternalId2", new global::System.Data.DataColumn[] {
							this.columnExternalId2});
				this.Indices.Add(this.indexEntityKeyExternalId2);
				// The EntityKeyExternalId3 Index
				this.indexEntityKeyExternalId3 = new EntityKeyExternalId3Index("EntityKeyExternalId3", new global::System.Data.DataColumn[] {
							this.columnExternalId3});
				this.Indices.Add(this.indexEntityKeyExternalId3);
				// The EntityKeyExternalId4 Index
				this.indexEntityKeyExternalId4 = new EntityKeyExternalId4Index("EntityKeyExternalId4", new global::System.Data.DataColumn[] {
							this.columnExternalId4});
				this.Indices.Add(this.indexEntityKeyExternalId4);
				// The EntityKeyExternalId5 Index
				this.indexEntityKeyExternalId5 = new EntityKeyExternalId5Index("EntityKeyExternalId5", new global::System.Data.DataColumn[] {
							this.columnExternalId5});
				this.Indices.Add(this.indexEntityKeyExternalId5);
				// The EntityKeyExternalId6 Index
				this.indexEntityKeyExternalId6 = new EntityKeyExternalId6Index("EntityKeyExternalId6", new global::System.Data.DataColumn[] {
							this.columnExternalId6});
				this.Indices.Add(this.indexEntityKeyExternalId6);
				// The EntityKeyExternalId7 Index
				this.indexEntityKeyExternalId7 = new EntityKeyExternalId7Index("EntityKeyExternalId7", new global::System.Data.DataColumn[] {
							this.columnExternalId7});
				this.Indices.Add(this.indexEntityKeyExternalId7);
			}
			
			/// <summary>
			/// Gets the number of rows in the Entity table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public int Count
			{
				get
				{
					return this.Rows.Count;
				}
			}
			
			/// <summary>
			/// Gets the CreatedTime column of the Entity table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn CreatedTimeColumn
			{
				get
				{
					return this.columnCreatedTime;
				}
			}
			
			/// <summary>
			/// Gets the Description column of the Entity table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn DescriptionColumn
			{
				get
				{
					return this.columnDescription;
				}
			}
			
			/// <summary>
			/// Gets the child relation between the Entity and Account tables.
			/// </summary>
			internal global::System.Data.DataRelation EntityAccountRelation
			{
				get
				{
					return this.relationEntityAccount;
				}
			}
			
			/// <summary>
			/// Gets the child relation between the Entity and Blotter tables.
			/// </summary>
			internal global::System.Data.DataRelation EntityBlotterRelation
			{
				get
				{
					return this.relationEntityBlotter;
				}
			}
			
			/// <summary>
			/// Gets the child relation between the Entity and EntityTree tables.
			/// </summary>
			internal global::System.Data.DataRelation EntityEntityTreeByFK_Entity_EntityTree_ChildIdRelation
			{
				get
				{
					return this.relationEntityEntityTreeByFK_Entity_EntityTree_ChildId;
				}
			}
			
			/// <summary>
			/// Gets the child relation between the Entity and EntityTree tables.
			/// </summary>
			internal global::System.Data.DataRelation EntityEntityTreeByFK_Entity_EntityTree_ParentIdRelation
			{
				get
				{
					return this.relationEntityEntityTreeByFK_Entity_EntityTree_ParentId;
				}
			}
			
			/// <summary>
			/// Gets the child relation between the Entity and Folder tables.
			/// </summary>
			internal global::System.Data.DataRelation EntityFolderRelation
			{
				get
				{
					return this.relationEntityFolder;
				}
			}
			
			/// <summary>
			/// Gets the EntityId column of the Entity table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn EntityIdColumn
			{
				get
				{
					return this.columnEntityId;
				}
			}
			
			/// <summary>
			/// Gets the child relation between the Entity and Issuer tables.
			/// </summary>
			internal global::System.Data.DataRelation EntityIssuerRelation
			{
				get
				{
					return this.relationEntityIssuer;
				}
			}
			
			/// <summary>
			/// Gets the EntityKey index on the Entity table.
			/// </summary>
			public EntityKeyIndex EntityKey
			{
				get
				{
					return ((EntityKeyIndex)(this.indexEntityKey));
				}
			}
			
			/// <summary>
			/// Gets the EntityKeyExternalId0 index on the Entity table.
			/// </summary>
			public EntityKeyExternalId0Index EntityKeyExternalId0
			{
				get
				{
					return ((EntityKeyExternalId0Index)(this.indexEntityKeyExternalId0));
				}
			}
			
			/// <summary>
			/// Gets the EntityKeyExternalId1 index on the Entity table.
			/// </summary>
			public EntityKeyExternalId1Index EntityKeyExternalId1
			{
				get
				{
					return ((EntityKeyExternalId1Index)(this.indexEntityKeyExternalId1));
				}
			}
			
			/// <summary>
			/// Gets the EntityKeyExternalId2 index on the Entity table.
			/// </summary>
			public EntityKeyExternalId2Index EntityKeyExternalId2
			{
				get
				{
					return ((EntityKeyExternalId2Index)(this.indexEntityKeyExternalId2));
				}
			}
			
			/// <summary>
			/// Gets the EntityKeyExternalId3 index on the Entity table.
			/// </summary>
			public EntityKeyExternalId3Index EntityKeyExternalId3
			{
				get
				{
					return ((EntityKeyExternalId3Index)(this.indexEntityKeyExternalId3));
				}
			}
			
			/// <summary>
			/// Gets the EntityKeyExternalId4 index on the Entity table.
			/// </summary>
			public EntityKeyExternalId4Index EntityKeyExternalId4
			{
				get
				{
					return ((EntityKeyExternalId4Index)(this.indexEntityKeyExternalId4));
				}
			}
			
			/// <summary>
			/// Gets the EntityKeyExternalId5 index on the Entity table.
			/// </summary>
			public EntityKeyExternalId5Index EntityKeyExternalId5
			{
				get
				{
					return ((EntityKeyExternalId5Index)(this.indexEntityKeyExternalId5));
				}
			}
			
			/// <summary>
			/// Gets the EntityKeyExternalId6 index on the Entity table.
			/// </summary>
			public EntityKeyExternalId6Index EntityKeyExternalId6
			{
				get
				{
					return ((EntityKeyExternalId6Index)(this.indexEntityKeyExternalId6));
				}
			}
			
			/// <summary>
			/// Gets the EntityKeyExternalId7 index on the Entity table.
			/// </summary>
			public EntityKeyExternalId7Index EntityKeyExternalId7
			{
				get
				{
					return ((EntityKeyExternalId7Index)(this.indexEntityKeyExternalId7));
				}
			}
			
			/// <summary>
			/// Gets the child relation between the Entity and PropertyStore tables.
			/// </summary>
			internal global::System.Data.DataRelation EntityPropertyStoreRelation
			{
				get
				{
					return this.relationEntityPropertyStore;
				}
			}
			
			/// <summary>
			/// Gets the child relation between the Entity and Security tables.
			/// </summary>
			internal global::System.Data.DataRelation EntitySecurityRelation
			{
				get
				{
					return this.relationEntitySecurity;
				}
			}
			
			/// <summary>
			/// Gets the child relation between the Entity and User tables.
			/// </summary>
			internal global::System.Data.DataRelation EntityUserRelation
			{
				get
				{
					return this.relationEntityUser;
				}
			}
			
			/// <summary>
			/// Gets the ExternalId0 column of the Entity table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn ExternalId0Column
			{
				get
				{
					return this.columnExternalId0;
				}
			}
			
			/// <summary>
			/// Gets the ExternalId1 column of the Entity table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn ExternalId1Column
			{
				get
				{
					return this.columnExternalId1;
				}
			}
			
			/// <summary>
			/// Gets the ExternalId2 column of the Entity table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn ExternalId2Column
			{
				get
				{
					return this.columnExternalId2;
				}
			}
			
			/// <summary>
			/// Gets the ExternalId3 column of the Entity table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn ExternalId3Column
			{
				get
				{
					return this.columnExternalId3;
				}
			}
			
			/// <summary>
			/// Gets the ExternalId4 column of the Entity table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn ExternalId4Column
			{
				get
				{
					return this.columnExternalId4;
				}
			}
			
			/// <summary>
			/// Gets the ExternalId5 column of the Entity table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn ExternalId5Column
			{
				get
				{
					return this.columnExternalId5;
				}
			}
			
			/// <summary>
			/// Gets the ExternalId6 column of the Entity table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn ExternalId6Column
			{
				get
				{
					return this.columnExternalId6;
				}
			}
			
			/// <summary>
			/// Gets the ExternalId7 column of the Entity table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn ExternalId7Column
			{
				get
				{
					return this.columnExternalId7;
				}
			}
			
			/// <summary>
			/// Gets the parent relation between the Image and Entity tables.
			/// </summary>
			public global::System.Data.DataRelation ImageEntityRelation
			{
				get
				{
					return this.relationImageEntity;
				}
			}
			
			/// <summary>
			/// Gets the ImageId column of the Entity table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn ImageIdColumn
			{
				get
				{
					return this.columnImageId;
				}
			}
			
			/// <summary>
			/// Gets a collection of Teraque.DataModelGenerator.DataIndices on a table.
			/// </summary>
			public global::Teraque.DataIndexCollection Indices
			{
				get
				{
					return this.dataIndices;
				}
			}
			
			/// <summary>
			/// Gets the IsContainer column of the Entity table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn IsContainerColumn
			{
				get
				{
					return this.columnIsContainer;
				}
			}
			
			/// <summary>
			/// Gets the IsHidden column of the Entity table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn IsHiddenColumn
			{
				get
				{
					return this.columnIsHidden;
				}
			}
			
			/// <summary>
			/// Gets the IsReadOnly column of the Entity table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn IsReadOnlyColumn
			{
				get
				{
					return this.columnIsReadOnly;
				}
			}
			
			/// <summary>
			/// Indexer to a row in the Entity table.
			/// </summary>
			/// <param name="index">The integer index of the row.</param>
			/// <returns>The Entity row found at the given index.</returns>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public DataModel.EntityRow this[int index]
			{
				get
				{
					return ((DataModel.EntityRow)(this.Rows[index]));
				}
			}
			
			/// <summary>
			/// Gets the ModifiedTime column of the Entity table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn ModifiedTimeColumn
			{
				get
				{
					return this.columnModifiedTime;
				}
			}
			
			/// <summary>
			/// Gets the Name column of the Entity table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn NameColumn
			{
				get
				{
					return this.columnName;
				}
			}
			
			/// <summary>
			/// Gets the RowVersion column of the Entity table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn RowVersionColumn
			{
				get
				{
					return this.columnRowVersion;
				}
			}
			
			/// <summary>
			/// Gets the parent relation between the Type and Entity tables.
			/// </summary>
			public global::System.Data.DataRelation TypeEntityRelation
			{
				get
				{
					return this.relationTypeEntity;
				}
			}
			
			/// <summary>
			/// Gets the TypeId column of the Entity table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn TypeIdColumn
			{
				get
				{
					return this.columnTypeId;
				}
			}
			
			/// <summary>
			/// Occurs after a Entity row has been changed successfully.
			/// </summary>
			public event EntityRowChangeEventHandler EntityRowChanged;
			
			/// <summary>
			/// Occurs when a Entity row is changing.
			/// </summary>
			public event EntityRowChangeEventHandler EntityRowChanging;
			
			/// <summary>
			/// Occurs after a Entity row in the table has been deleted.
			/// </summary>
			public event EntityRowChangeEventHandler EntityRowDeleted;
			
			/// <summary>
			/// Occurs before a Entity row in the table is about to be deleted.
			/// </summary>
			public event EntityRowChangeEventHandler EntityRowDeleting;
			
			/// <summary>
			/// Returns the type of the row in a Entity table.
			/// </summary>
			/// <returns>The EntityRow type.</returns>
			protected override global::System.Type GetRowType()
			{
				return typeof(EntityRow);
			}
			
			/// <summary>
			/// Initializes the relation fields with the parent and child relations.
			/// </summary>
			internal void InitializeRelations()
			{
				this.relationImageEntity = this.ParentRelations["FK_Image_Entity"];
				this.relationTypeEntity = this.ParentRelations["FK_Type_Entity"];
				this.relationEntityAccount = this.ChildRelations["FK_Entity_Account"];
				this.relationEntityBlotter = this.ChildRelations["FK_Entity_Blotter"];
				this.relationEntityEntityTreeByFK_Entity_EntityTree_ChildId = this.ChildRelations["FK_Entity_EntityTree_ChildId"];
				this.relationEntityEntityTreeByFK_Entity_EntityTree_ParentId = this.ChildRelations["FK_Entity_EntityTree_ParentId"];
				this.relationEntityFolder = this.ChildRelations["FK_Entity_Folder"];
				this.relationEntityIssuer = this.ChildRelations["FK_Entity_Issuer"];
				this.relationEntityPropertyStore = this.ChildRelations["FK_Entity_PropertyStore"];
				this.relationEntitySecurity = this.ChildRelations["FK_Entity_Security"];
				this.relationEntityUser = this.ChildRelations["FK_Entity_User"];
			}
			
			/// <summary>
			/// Initializes a new instance of a Entity row.  Constructs a row from the builder.  Only for internal usage.
			/// </summary>
			/// <returns>A new row with the same schema as the table.</returns>
			protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder dataRowBuilder)
			{
				return new EntityRow(dataRowBuilder);
			}
			
			/// <summary>
			/// Raises the EntityRowChanged event.
			/// </summary>
			/// <param name="e">Provides data for the EntityRow changing and deleting events.</param>
			protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowChanged(e);
				if ((this.EntityRowChanged != null))
				{
					this.EntityRowChanged(this, new EntityRowChangeEventArgs(((EntityRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the EntityRowChanging event.
			/// </summary>
			/// <param name="e">Provides data for the EntityRow changing and deleting events.</param>
			protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowChanging(e);
				if ((this.EntityRowChanging != null))
				{
					this.EntityRowChanging(this, new EntityRowChangeEventArgs(((EntityRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the EntityRowDeleted event.
			/// </summary>
			/// <param name="e">Provides data for the EntityRow changing and deleting events.</param>
			protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowDeleted(e);
				if ((this.EntityRowDeleted != null))
				{
					this.EntityRowDeleted(this, new EntityRowChangeEventArgs(((EntityRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the EntityRowDeleting event.
			/// </summary>
			/// <param name="e">Provides data for the EntityRow changing and deleting events.</param>
			protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowDeleting(e);
				if ((this.EntityRowDeleting != null))
				{
					this.EntityRowDeleting(this, new EntityRowChangeEventArgs(((EntityRow)(e.Row)), e.Action));
				}
			}
		}
		
		/// <summary>
		/// The EntityTree table.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public partial class EntityTreeDataTable : global::System.Data.TypedTableBase<DataModel.EntityTreeRow>
		{
			
			private global::System.Data.DataColumn columnChildId;
			
			private global::System.Data.DataColumn columnEntityTreeId;
			
			private global::System.Data.DataColumn columnExternalId0;
			
			private global::System.Data.DataColumn columnParentId;
			
			private global::System.Data.DataColumn columnRowVersion;
			
			private global::Teraque.DataIndexCollection dataIndices;
			
			private global::Teraque.DataIndex indexEntityTreeKey;
			
			private global::Teraque.DataIndex indexEntityTreeKeyChildIdParentId;
			
			private global::Teraque.DataIndex indexEntityTreeKeyExternalId0;
			
			private global::System.Data.DataRelation relationEntityEntityTreeByFK_Entity_EntityTree_ChildId;
			
			private global::System.Data.DataRelation relationEntityEntityTreeByFK_Entity_EntityTree_ParentId;
			
			/// <summary>
			/// Creates the EntityTree table.
			/// </summary>
			internal EntityTreeDataTable()
			{
				// Initialize the object.
				this.TableName = "EntityTree";
				this.dataIndices = new global::Teraque.DataIndexCollection();
				// The ChildId Column
				this.columnChildId = new global::System.Data.DataColumn("ChildId", typeof(System.Guid), null, global::System.Data.MappingType.Element);
				this.columnChildId.AllowDBNull = false;
				this.Columns.Add(this.columnChildId);
				// The EntityTreeId Column
				this.columnEntityTreeId = new global::System.Data.DataColumn("EntityTreeId", typeof(System.Guid), null, global::System.Data.MappingType.Element);
				this.columnEntityTreeId.AllowDBNull = false;
				this.Columns.Add(this.columnEntityTreeId);
				// The ExternalId0 Column
				this.columnExternalId0 = new global::System.Data.DataColumn("ExternalId0", typeof(string), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnExternalId0);
				// The ParentId Column
				this.columnParentId = new global::System.Data.DataColumn("ParentId", typeof(System.Guid), null, global::System.Data.MappingType.Element);
				this.columnParentId.AllowDBNull = false;
				this.Columns.Add(this.columnParentId);
				// The RowVersion Column
				this.columnRowVersion = new global::System.Data.DataColumn("RowVersion", typeof(long), null, global::System.Data.MappingType.Element);
				this.columnRowVersion.AllowDBNull = false;
				this.Columns.Add(this.columnRowVersion);
				// The EntityTreeKey Index
				this.indexEntityTreeKey = new EntityTreeKeyIndex("EntityTreeKey", new global::System.Data.DataColumn[] {
							this.columnEntityTreeId});
				this.Indices.Add(this.indexEntityTreeKey);
				// The EntityTreeKeyChildIdParentId Index
				this.indexEntityTreeKeyChildIdParentId = new EntityTreeKeyChildIdParentIdIndex("EntityTreeKeyChildIdParentId", new global::System.Data.DataColumn[] {
							this.columnChildId,
							this.columnParentId});
				this.Constraints.Add(new global::System.Data.UniqueConstraint(new global::System.Data.DataColumn[] {
								this.columnChildId,
								this.columnParentId}));
				this.Indices.Add(this.indexEntityTreeKeyChildIdParentId);
				// The EntityTreeKeyExternalId0 Index
				this.indexEntityTreeKeyExternalId0 = new EntityTreeKeyExternalId0Index("EntityTreeKeyExternalId0", new global::System.Data.DataColumn[] {
							this.columnExternalId0});
				this.Indices.Add(this.indexEntityTreeKeyExternalId0);
			}
			
			/// <summary>
			/// Gets the ChildId column of the EntityTree table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn ChildIdColumn
			{
				get
				{
					return this.columnChildId;
				}
			}
			
			/// <summary>
			/// Gets the number of rows in the EntityTree table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public int Count
			{
				get
				{
					return this.Rows.Count;
				}
			}
			
			/// <summary>
			/// Gets the parent relation between the Entity and EntityTree tables.
			/// </summary>
			public global::System.Data.DataRelation EntityEntityTreeByFK_Entity_EntityTree_ChildIdRelation
			{
				get
				{
					return this.relationEntityEntityTreeByFK_Entity_EntityTree_ChildId;
				}
			}
			
			/// <summary>
			/// Gets the parent relation between the Entity and EntityTree tables.
			/// </summary>
			public global::System.Data.DataRelation EntityEntityTreeByFK_Entity_EntityTree_ParentIdRelation
			{
				get
				{
					return this.relationEntityEntityTreeByFK_Entity_EntityTree_ParentId;
				}
			}
			
			/// <summary>
			/// Gets the EntityTreeId column of the EntityTree table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn EntityTreeIdColumn
			{
				get
				{
					return this.columnEntityTreeId;
				}
			}
			
			/// <summary>
			/// Gets the EntityTreeKey index on the EntityTree table.
			/// </summary>
			public EntityTreeKeyIndex EntityTreeKey
			{
				get
				{
					return ((EntityTreeKeyIndex)(this.indexEntityTreeKey));
				}
			}
			
			/// <summary>
			/// Gets the EntityTreeKeyChildIdParentId index on the EntityTree table.
			/// </summary>
			public EntityTreeKeyChildIdParentIdIndex EntityTreeKeyChildIdParentId
			{
				get
				{
					return ((EntityTreeKeyChildIdParentIdIndex)(this.indexEntityTreeKeyChildIdParentId));
				}
			}
			
			/// <summary>
			/// Gets the EntityTreeKeyExternalId0 index on the EntityTree table.
			/// </summary>
			public EntityTreeKeyExternalId0Index EntityTreeKeyExternalId0
			{
				get
				{
					return ((EntityTreeKeyExternalId0Index)(this.indexEntityTreeKeyExternalId0));
				}
			}
			
			/// <summary>
			/// Gets the ExternalId0 column of the EntityTree table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn ExternalId0Column
			{
				get
				{
					return this.columnExternalId0;
				}
			}
			
			/// <summary>
			/// Gets a collection of Teraque.DataModelGenerator.DataIndices on a table.
			/// </summary>
			public global::Teraque.DataIndexCollection Indices
			{
				get
				{
					return this.dataIndices;
				}
			}
			
			/// <summary>
			/// Indexer to a row in the EntityTree table.
			/// </summary>
			/// <param name="index">The integer index of the row.</param>
			/// <returns>The EntityTree row found at the given index.</returns>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public DataModel.EntityTreeRow this[int index]
			{
				get
				{
					return ((DataModel.EntityTreeRow)(this.Rows[index]));
				}
			}
			
			/// <summary>
			/// Gets the ParentId column of the EntityTree table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn ParentIdColumn
			{
				get
				{
					return this.columnParentId;
				}
			}
			
			/// <summary>
			/// Gets the RowVersion column of the EntityTree table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn RowVersionColumn
			{
				get
				{
					return this.columnRowVersion;
				}
			}
			
			/// <summary>
			/// Occurs after a EntityTree row has been changed successfully.
			/// </summary>
			public event EntityTreeRowChangeEventHandler EntityTreeRowChanged;
			
			/// <summary>
			/// Occurs when a EntityTree row is changing.
			/// </summary>
			public event EntityTreeRowChangeEventHandler EntityTreeRowChanging;
			
			/// <summary>
			/// Occurs after a EntityTree row in the table has been deleted.
			/// </summary>
			public event EntityTreeRowChangeEventHandler EntityTreeRowDeleted;
			
			/// <summary>
			/// Occurs before a EntityTree row in the table is about to be deleted.
			/// </summary>
			public event EntityTreeRowChangeEventHandler EntityTreeRowDeleting;
			
			/// <summary>
			/// Returns the type of the row in a EntityTree table.
			/// </summary>
			/// <returns>The EntityTreeRow type.</returns>
			protected override global::System.Type GetRowType()
			{
				return typeof(EntityTreeRow);
			}
			
			/// <summary>
			/// Initializes the relation fields with the parent and child relations.
			/// </summary>
			internal void InitializeRelations()
			{
				this.relationEntityEntityTreeByFK_Entity_EntityTree_ChildId = this.ParentRelations["FK_Entity_EntityTree_ChildId"];
				this.relationEntityEntityTreeByFK_Entity_EntityTree_ParentId = this.ParentRelations["FK_Entity_EntityTree_ParentId"];
			}
			
			/// <summary>
			/// Initializes a new instance of a EntityTree row.  Constructs a row from the builder.  Only for internal usage.
			/// </summary>
			/// <returns>A new row with the same schema as the table.</returns>
			protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder dataRowBuilder)
			{
				return new EntityTreeRow(dataRowBuilder);
			}
			
			/// <summary>
			/// Raises the EntityTreeRowChanged event.
			/// </summary>
			/// <param name="e">Provides data for the EntityTreeRow changing and deleting events.</param>
			protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowChanged(e);
				if ((this.EntityTreeRowChanged != null))
				{
					this.EntityTreeRowChanged(this, new EntityTreeRowChangeEventArgs(((EntityTreeRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the EntityTreeRowChanging event.
			/// </summary>
			/// <param name="e">Provides data for the EntityTreeRow changing and deleting events.</param>
			protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowChanging(e);
				if ((this.EntityTreeRowChanging != null))
				{
					this.EntityTreeRowChanging(this, new EntityTreeRowChangeEventArgs(((EntityTreeRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the EntityTreeRowDeleted event.
			/// </summary>
			/// <param name="e">Provides data for the EntityTreeRow changing and deleting events.</param>
			protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowDeleted(e);
				if ((this.EntityTreeRowDeleted != null))
				{
					this.EntityTreeRowDeleted(this, new EntityTreeRowChangeEventArgs(((EntityTreeRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the EntityTreeRowDeleting event.
			/// </summary>
			/// <param name="e">Provides data for the EntityTreeRow changing and deleting events.</param>
			protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowDeleting(e);
				if ((this.EntityTreeRowDeleting != null))
				{
					this.EntityTreeRowDeleting(this, new EntityTreeRowChangeEventArgs(((EntityTreeRow)(e.Row)), e.Action));
				}
			}
		}
		
		/// <summary>
		/// The Equity table.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public partial class EquityDataTable : global::System.Data.TypedTableBase<DataModel.EquityRow>
		{
			
			private global::System.Data.DataColumn columnEquityId;
			
			private global::System.Data.DataColumn columnExchangeId;
			
			private global::System.Data.DataColumn columnIssuerId;
			
			private global::System.Data.DataColumn columnRowVersion;
			
			private global::System.Data.DataColumn columnSettlementId;
			
			private global::System.Data.DataColumn columnSharesOutstanding;
			
			private global::Teraque.DataIndexCollection dataIndices;
			
			private global::Teraque.DataIndex indexEquityKey;
			
			private global::System.Data.DataRelation relationExchangeEquity;
			
			private global::System.Data.DataRelation relationSecurityEquityByFK_Security_Equity_EquityId;
			
			private global::System.Data.DataRelation relationSecurityEquityByFK_Security_Equity_SettlementId;
			
			/// <summary>
			/// Creates the Equity table.
			/// </summary>
			internal EquityDataTable()
			{
				// Initialize the object.
				this.TableName = "Equity";
				this.dataIndices = new global::Teraque.DataIndexCollection();
				// The EquityId Column
				this.columnEquityId = new global::System.Data.DataColumn("EquityId", typeof(System.Guid), null, global::System.Data.MappingType.Element);
				this.columnEquityId.AllowDBNull = false;
				this.Columns.Add(this.columnEquityId);
				// The ExchangeId Column
				this.columnExchangeId = new global::System.Data.DataColumn("ExchangeId", typeof(System.Guid), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnExchangeId);
				// The IssuerId Column
				this.columnIssuerId = new global::System.Data.DataColumn("IssuerId", typeof(System.Guid), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnIssuerId);
				// The RowVersion Column
				this.columnRowVersion = new global::System.Data.DataColumn("RowVersion", typeof(long), null, global::System.Data.MappingType.Element);
				this.columnRowVersion.AllowDBNull = false;
				this.Columns.Add(this.columnRowVersion);
				// The SettlementId Column
				this.columnSettlementId = new global::System.Data.DataColumn("SettlementId", typeof(System.Guid), null, global::System.Data.MappingType.Element);
				this.columnSettlementId.AllowDBNull = false;
				this.Columns.Add(this.columnSettlementId);
				// The SharesOutstanding Column
				this.columnSharesOutstanding = new global::System.Data.DataColumn("SharesOutstanding", typeof(decimal), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnSharesOutstanding);
				// The EquityKey Index
				this.indexEquityKey = new EquityKeyIndex("EquityKey", new global::System.Data.DataColumn[] {
							this.columnEquityId});
				this.Indices.Add(this.indexEquityKey);
			}
			
			/// <summary>
			/// Gets the number of rows in the Equity table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public int Count
			{
				get
				{
					return this.Rows.Count;
				}
			}
			
			/// <summary>
			/// Gets the EquityId column of the Equity table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn EquityIdColumn
			{
				get
				{
					return this.columnEquityId;
				}
			}
			
			/// <summary>
			/// Gets the EquityKey index on the Equity table.
			/// </summary>
			public EquityKeyIndex EquityKey
			{
				get
				{
					return ((EquityKeyIndex)(this.indexEquityKey));
				}
			}
			
			/// <summary>
			/// Gets the parent relation between the Exchange and Equity tables.
			/// </summary>
			public global::System.Data.DataRelation ExchangeEquityRelation
			{
				get
				{
					return this.relationExchangeEquity;
				}
			}
			
			/// <summary>
			/// Gets the ExchangeId column of the Equity table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn ExchangeIdColumn
			{
				get
				{
					return this.columnExchangeId;
				}
			}
			
			/// <summary>
			/// Gets a collection of Teraque.DataModelGenerator.DataIndices on a table.
			/// </summary>
			public global::Teraque.DataIndexCollection Indices
			{
				get
				{
					return this.dataIndices;
				}
			}
			
			/// <summary>
			/// Gets the IssuerId column of the Equity table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn IssuerIdColumn
			{
				get
				{
					return this.columnIssuerId;
				}
			}
			
			/// <summary>
			/// Indexer to a row in the Equity table.
			/// </summary>
			/// <param name="index">The integer index of the row.</param>
			/// <returns>The Equity row found at the given index.</returns>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public DataModel.EquityRow this[int index]
			{
				get
				{
					return ((DataModel.EquityRow)(this.Rows[index]));
				}
			}
			
			/// <summary>
			/// Gets the RowVersion column of the Equity table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn RowVersionColumn
			{
				get
				{
					return this.columnRowVersion;
				}
			}
			
			/// <summary>
			/// Gets the parent relation between the Security and Equity tables.
			/// </summary>
			public global::System.Data.DataRelation SecurityEquityByFK_Security_Equity_EquityIdRelation
			{
				get
				{
					return this.relationSecurityEquityByFK_Security_Equity_EquityId;
				}
			}
			
			/// <summary>
			/// Gets the parent relation between the Security and Equity tables.
			/// </summary>
			public global::System.Data.DataRelation SecurityEquityByFK_Security_Equity_SettlementIdRelation
			{
				get
				{
					return this.relationSecurityEquityByFK_Security_Equity_SettlementId;
				}
			}
			
			/// <summary>
			/// Gets the SettlementId column of the Equity table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn SettlementIdColumn
			{
				get
				{
					return this.columnSettlementId;
				}
			}
			
			/// <summary>
			/// Gets the SharesOutstanding column of the Equity table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn SharesOutstandingColumn
			{
				get
				{
					return this.columnSharesOutstanding;
				}
			}
			
			/// <summary>
			/// Occurs after a Equity row has been changed successfully.
			/// </summary>
			public event EquityRowChangeEventHandler EquityRowChanged;
			
			/// <summary>
			/// Occurs when a Equity row is changing.
			/// </summary>
			public event EquityRowChangeEventHandler EquityRowChanging;
			
			/// <summary>
			/// Occurs after a Equity row in the table has been deleted.
			/// </summary>
			public event EquityRowChangeEventHandler EquityRowDeleted;
			
			/// <summary>
			/// Occurs before a Equity row in the table is about to be deleted.
			/// </summary>
			public event EquityRowChangeEventHandler EquityRowDeleting;
			
			/// <summary>
			/// Returns the type of the row in a Equity table.
			/// </summary>
			/// <returns>The EquityRow type.</returns>
			protected override global::System.Type GetRowType()
			{
				return typeof(EquityRow);
			}
			
			/// <summary>
			/// Initializes the relation fields with the parent and child relations.
			/// </summary>
			internal void InitializeRelations()
			{
				this.relationExchangeEquity = this.ParentRelations["FK_Exchange_Equity"];
				this.relationSecurityEquityByFK_Security_Equity_EquityId = this.ParentRelations["FK_Security_Equity_EquityId"];
				this.relationSecurityEquityByFK_Security_Equity_SettlementId = this.ParentRelations["FK_Security_Equity_SettlementId"];
			}
			
			/// <summary>
			/// Initializes a new instance of a Equity row.  Constructs a row from the builder.  Only for internal usage.
			/// </summary>
			/// <returns>A new row with the same schema as the table.</returns>
			protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder dataRowBuilder)
			{
				return new EquityRow(dataRowBuilder);
			}
			
			/// <summary>
			/// Raises the EquityRowChanged event.
			/// </summary>
			/// <param name="e">Provides data for the EquityRow changing and deleting events.</param>
			protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowChanged(e);
				if ((this.EquityRowChanged != null))
				{
					this.EquityRowChanged(this, new EquityRowChangeEventArgs(((EquityRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the EquityRowChanging event.
			/// </summary>
			/// <param name="e">Provides data for the EquityRow changing and deleting events.</param>
			protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowChanging(e);
				if ((this.EquityRowChanging != null))
				{
					this.EquityRowChanging(this, new EquityRowChangeEventArgs(((EquityRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the EquityRowDeleted event.
			/// </summary>
			/// <param name="e">Provides data for the EquityRow changing and deleting events.</param>
			protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowDeleted(e);
				if ((this.EquityRowDeleted != null))
				{
					this.EquityRowDeleted(this, new EquityRowChangeEventArgs(((EquityRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the EquityRowDeleting event.
			/// </summary>
			/// <param name="e">Provides data for the EquityRow changing and deleting events.</param>
			protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowDeleting(e);
				if ((this.EquityRowDeleting != null))
				{
					this.EquityRowDeleting(this, new EquityRowChangeEventArgs(((EquityRow)(e.Row)), e.Action));
				}
			}
		}
		
		/// <summary>
		/// The Exchange table.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public partial class ExchangeDataTable : global::System.Data.TypedTableBase<DataModel.ExchangeRow>
		{
			
			private global::System.Data.DataColumn columnCountryId;
			
			private global::System.Data.DataColumn columnExchangeId;
			
			private global::System.Data.DataColumn columnExternalId0;
			
			private global::System.Data.DataColumn columnExternalId1;
			
			private global::System.Data.DataColumn columnExternalId2;
			
			private global::System.Data.DataColumn columnExternalId3;
			
			private global::System.Data.DataColumn columnIsListed;
			
			private global::System.Data.DataColumn columnMnemonic;
			
			private global::System.Data.DataColumn columnName;
			
			private global::System.Data.DataColumn columnRowVersion;
			
			private global::Teraque.DataIndexCollection dataIndices;
			
			private global::Teraque.DataIndex indexExchangeKey;
			
			private global::Teraque.DataIndex indexExchangeKeyExternalId0;
			
			private global::Teraque.DataIndex indexExchangeKeyExternalId1;
			
			private global::Teraque.DataIndex indexExchangeKeyExternalId2;
			
			private global::Teraque.DataIndex indexExchangeKeyExternalId3;
			
			private global::System.Data.DataRelation relationCountryExchange;
			
			private global::System.Data.DataRelation relationExchangeDestinationExchangeMap;
			
			private global::System.Data.DataRelation relationExchangeEquity;
			
			/// <summary>
			/// Creates the Exchange table.
			/// </summary>
			internal ExchangeDataTable()
			{
				// Initialize the object.
				this.TableName = "Exchange";
				this.dataIndices = new global::Teraque.DataIndexCollection();
				// The CountryId Column
				this.columnCountryId = new global::System.Data.DataColumn("CountryId", typeof(System.Guid), null, global::System.Data.MappingType.Element);
				this.columnCountryId.AllowDBNull = false;
				this.Columns.Add(this.columnCountryId);
				// The ExchangeId Column
				this.columnExchangeId = new global::System.Data.DataColumn("ExchangeId", typeof(System.Guid), null, global::System.Data.MappingType.Element);
				this.columnExchangeId.AllowDBNull = false;
				this.Columns.Add(this.columnExchangeId);
				// The ExternalId0 Column
				this.columnExternalId0 = new global::System.Data.DataColumn("ExternalId0", typeof(string), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnExternalId0);
				// The ExternalId1 Column
				this.columnExternalId1 = new global::System.Data.DataColumn("ExternalId1", typeof(string), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnExternalId1);
				// The ExternalId2 Column
				this.columnExternalId2 = new global::System.Data.DataColumn("ExternalId2", typeof(string), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnExternalId2);
				// The ExternalId3 Column
				this.columnExternalId3 = new global::System.Data.DataColumn("ExternalId3", typeof(string), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnExternalId3);
				// The IsListed Column
				this.columnIsListed = new global::System.Data.DataColumn("IsListed", typeof(bool), null, global::System.Data.MappingType.Element);
				this.columnIsListed.AllowDBNull = false;
				this.columnIsListed.DefaultValue = false;
				this.Columns.Add(this.columnIsListed);
				// The Mnemonic Column
				this.columnMnemonic = new global::System.Data.DataColumn("Mnemonic", typeof(string), null, global::System.Data.MappingType.Element);
				this.columnMnemonic.AllowDBNull = false;
				this.columnMnemonic.DefaultValue = "";
				this.Columns.Add(this.columnMnemonic);
				// The Name Column
				this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Element);
				this.columnName.AllowDBNull = false;
				this.columnName.DefaultValue = "";
				this.Columns.Add(this.columnName);
				// The RowVersion Column
				this.columnRowVersion = new global::System.Data.DataColumn("RowVersion", typeof(long), null, global::System.Data.MappingType.Element);
				this.columnRowVersion.AllowDBNull = false;
				this.Columns.Add(this.columnRowVersion);
				// The ExchangeKey Index
				this.indexExchangeKey = new ExchangeKeyIndex("ExchangeKey", new global::System.Data.DataColumn[] {
							this.columnExchangeId});
				this.Indices.Add(this.indexExchangeKey);
				// The ExchangeKeyExternalId0 Index
				this.indexExchangeKeyExternalId0 = new ExchangeKeyExternalId0Index("ExchangeKeyExternalId0", new global::System.Data.DataColumn[] {
							this.columnExternalId0});
				this.Indices.Add(this.indexExchangeKeyExternalId0);
				// The ExchangeKeyExternalId1 Index
				this.indexExchangeKeyExternalId1 = new ExchangeKeyExternalId1Index("ExchangeKeyExternalId1", new global::System.Data.DataColumn[] {
							this.columnExternalId1});
				this.Indices.Add(this.indexExchangeKeyExternalId1);
				// The ExchangeKeyExternalId2 Index
				this.indexExchangeKeyExternalId2 = new ExchangeKeyExternalId2Index("ExchangeKeyExternalId2", new global::System.Data.DataColumn[] {
							this.columnExternalId2});
				this.Indices.Add(this.indexExchangeKeyExternalId2);
				// The ExchangeKeyExternalId3 Index
				this.indexExchangeKeyExternalId3 = new ExchangeKeyExternalId3Index("ExchangeKeyExternalId3", new global::System.Data.DataColumn[] {
							this.columnExternalId3});
				this.Indices.Add(this.indexExchangeKeyExternalId3);
			}
			
			/// <summary>
			/// Gets the number of rows in the Exchange table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public int Count
			{
				get
				{
					return this.Rows.Count;
				}
			}
			
			/// <summary>
			/// Gets the parent relation between the Country and Exchange tables.
			/// </summary>
			public global::System.Data.DataRelation CountryExchangeRelation
			{
				get
				{
					return this.relationCountryExchange;
				}
			}
			
			/// <summary>
			/// Gets the CountryId column of the Exchange table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn CountryIdColumn
			{
				get
				{
					return this.columnCountryId;
				}
			}
			
			/// <summary>
			/// Gets the child relation between the Exchange and DestinationExchangeMap tables.
			/// </summary>
			internal global::System.Data.DataRelation ExchangeDestinationExchangeMapRelation
			{
				get
				{
					return this.relationExchangeDestinationExchangeMap;
				}
			}
			
			/// <summary>
			/// Gets the child relation between the Exchange and Equity tables.
			/// </summary>
			internal global::System.Data.DataRelation ExchangeEquityRelation
			{
				get
				{
					return this.relationExchangeEquity;
				}
			}
			
			/// <summary>
			/// Gets the ExchangeId column of the Exchange table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn ExchangeIdColumn
			{
				get
				{
					return this.columnExchangeId;
				}
			}
			
			/// <summary>
			/// Gets the ExchangeKey index on the Exchange table.
			/// </summary>
			public ExchangeKeyIndex ExchangeKey
			{
				get
				{
					return ((ExchangeKeyIndex)(this.indexExchangeKey));
				}
			}
			
			/// <summary>
			/// Gets the ExchangeKeyExternalId0 index on the Exchange table.
			/// </summary>
			public ExchangeKeyExternalId0Index ExchangeKeyExternalId0
			{
				get
				{
					return ((ExchangeKeyExternalId0Index)(this.indexExchangeKeyExternalId0));
				}
			}
			
			/// <summary>
			/// Gets the ExchangeKeyExternalId1 index on the Exchange table.
			/// </summary>
			public ExchangeKeyExternalId1Index ExchangeKeyExternalId1
			{
				get
				{
					return ((ExchangeKeyExternalId1Index)(this.indexExchangeKeyExternalId1));
				}
			}
			
			/// <summary>
			/// Gets the ExchangeKeyExternalId2 index on the Exchange table.
			/// </summary>
			public ExchangeKeyExternalId2Index ExchangeKeyExternalId2
			{
				get
				{
					return ((ExchangeKeyExternalId2Index)(this.indexExchangeKeyExternalId2));
				}
			}
			
			/// <summary>
			/// Gets the ExchangeKeyExternalId3 index on the Exchange table.
			/// </summary>
			public ExchangeKeyExternalId3Index ExchangeKeyExternalId3
			{
				get
				{
					return ((ExchangeKeyExternalId3Index)(this.indexExchangeKeyExternalId3));
				}
			}
			
			/// <summary>
			/// Gets the ExternalId0 column of the Exchange table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn ExternalId0Column
			{
				get
				{
					return this.columnExternalId0;
				}
			}
			
			/// <summary>
			/// Gets the ExternalId1 column of the Exchange table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn ExternalId1Column
			{
				get
				{
					return this.columnExternalId1;
				}
			}
			
			/// <summary>
			/// Gets the ExternalId2 column of the Exchange table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn ExternalId2Column
			{
				get
				{
					return this.columnExternalId2;
				}
			}
			
			/// <summary>
			/// Gets the ExternalId3 column of the Exchange table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn ExternalId3Column
			{
				get
				{
					return this.columnExternalId3;
				}
			}
			
			/// <summary>
			/// Gets a collection of Teraque.DataModelGenerator.DataIndices on a table.
			/// </summary>
			public global::Teraque.DataIndexCollection Indices
			{
				get
				{
					return this.dataIndices;
				}
			}
			
			/// <summary>
			/// Gets the IsListed column of the Exchange table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn IsListedColumn
			{
				get
				{
					return this.columnIsListed;
				}
			}
			
			/// <summary>
			/// Indexer to a row in the Exchange table.
			/// </summary>
			/// <param name="index">The integer index of the row.</param>
			/// <returns>The Exchange row found at the given index.</returns>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public DataModel.ExchangeRow this[int index]
			{
				get
				{
					return ((DataModel.ExchangeRow)(this.Rows[index]));
				}
			}
			
			/// <summary>
			/// Gets the Mnemonic column of the Exchange table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn MnemonicColumn
			{
				get
				{
					return this.columnMnemonic;
				}
			}
			
			/// <summary>
			/// Gets the Name column of the Exchange table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn NameColumn
			{
				get
				{
					return this.columnName;
				}
			}
			
			/// <summary>
			/// Gets the RowVersion column of the Exchange table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn RowVersionColumn
			{
				get
				{
					return this.columnRowVersion;
				}
			}
			
			/// <summary>
			/// Occurs after a Exchange row has been changed successfully.
			/// </summary>
			public event ExchangeRowChangeEventHandler ExchangeRowChanged;
			
			/// <summary>
			/// Occurs when a Exchange row is changing.
			/// </summary>
			public event ExchangeRowChangeEventHandler ExchangeRowChanging;
			
			/// <summary>
			/// Occurs after a Exchange row in the table has been deleted.
			/// </summary>
			public event ExchangeRowChangeEventHandler ExchangeRowDeleted;
			
			/// <summary>
			/// Occurs before a Exchange row in the table is about to be deleted.
			/// </summary>
			public event ExchangeRowChangeEventHandler ExchangeRowDeleting;
			
			/// <summary>
			/// Returns the type of the row in a Exchange table.
			/// </summary>
			/// <returns>The ExchangeRow type.</returns>
			protected override global::System.Type GetRowType()
			{
				return typeof(ExchangeRow);
			}
			
			/// <summary>
			/// Initializes the relation fields with the parent and child relations.
			/// </summary>
			internal void InitializeRelations()
			{
				this.relationCountryExchange = this.ParentRelations["FK_Country_Exchange"];
				this.relationExchangeDestinationExchangeMap = this.ChildRelations["FK_Exchange_DestinationExchangeMap"];
				this.relationExchangeEquity = this.ChildRelations["FK_Exchange_Equity"];
			}
			
			/// <summary>
			/// Initializes a new instance of a Exchange row.  Constructs a row from the builder.  Only for internal usage.
			/// </summary>
			/// <returns>A new row with the same schema as the table.</returns>
			protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder dataRowBuilder)
			{
				return new ExchangeRow(dataRowBuilder);
			}
			
			/// <summary>
			/// Raises the ExchangeRowChanged event.
			/// </summary>
			/// <param name="e">Provides data for the ExchangeRow changing and deleting events.</param>
			protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowChanged(e);
				if ((this.ExchangeRowChanged != null))
				{
					this.ExchangeRowChanged(this, new ExchangeRowChangeEventArgs(((ExchangeRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the ExchangeRowChanging event.
			/// </summary>
			/// <param name="e">Provides data for the ExchangeRow changing and deleting events.</param>
			protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowChanging(e);
				if ((this.ExchangeRowChanging != null))
				{
					this.ExchangeRowChanging(this, new ExchangeRowChangeEventArgs(((ExchangeRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the ExchangeRowDeleted event.
			/// </summary>
			/// <param name="e">Provides data for the ExchangeRow changing and deleting events.</param>
			protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowDeleted(e);
				if ((this.ExchangeRowDeleted != null))
				{
					this.ExchangeRowDeleted(this, new ExchangeRowChangeEventArgs(((ExchangeRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the ExchangeRowDeleting event.
			/// </summary>
			/// <param name="e">Provides data for the ExchangeRow changing and deleting events.</param>
			protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowDeleting(e);
				if ((this.ExchangeRowDeleting != null))
				{
					this.ExchangeRowDeleting(this, new ExchangeRowChangeEventArgs(((ExchangeRow)(e.Row)), e.Action));
				}
			}
		}
		
		/// <summary>
		/// The Execution table.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public partial class ExecutionDataTable : global::System.Data.TypedTableBase<DataModel.ExecutionRow>
		{
			
			private global::System.Data.DataColumn columnAccruedInterest;
			
			private global::System.Data.DataColumn columnBrokerAccountId;
			
			private global::System.Data.DataColumn columnBrokerId;
			
			private global::System.Data.DataColumn columnCommission;
			
			private global::System.Data.DataColumn columnCreatedTime;
			
			private global::System.Data.DataColumn columnCreatedUserId;
			
			private global::System.Data.DataColumn columnDestinationOrderId;
			
			private global::System.Data.DataColumn columnDestinationStateCode;
			
			private global::System.Data.DataColumn columnExecutionId;
			
			private global::System.Data.DataColumn columnExecutionPrice;
			
			private global::System.Data.DataColumn columnExecutionQuantity;
			
			private global::System.Data.DataColumn columnExternalId0;
			
			private global::System.Data.DataColumn columnIsHidden;
			
			private global::System.Data.DataColumn columnModifiedTime;
			
			private global::System.Data.DataColumn columnModifiedUserId;
			
			private global::System.Data.DataColumn columnOriginalDestinationOrderId;
			
			private global::System.Data.DataColumn columnOriginalPrice;
			
			private global::System.Data.DataColumn columnOriginalQuantity;
			
			private global::System.Data.DataColumn columnRowVersion;
			
			private global::System.Data.DataColumn columnSourceExecutionId;
			
			private global::System.Data.DataColumn columnSourceStateCode;
			
			private global::System.Data.DataColumn columnUserFee0;
			
			private global::System.Data.DataColumn columnUserFee1;
			
			private global::System.Data.DataColumn columnUserFee2;
			
			private global::System.Data.DataColumn columnUserFee3;
			
			private global::Teraque.DataIndexCollection dataIndices;
			
			private global::Teraque.DataIndex indexExecutionKey;
			
			private global::Teraque.DataIndex indexExecutionKeyExternalId0;
			
			private global::System.Data.DataRelation relationBrokerAccountExecution;
			
			private global::System.Data.DataRelation relationBrokerExecution;
			
			private global::System.Data.DataRelation relationDestinationOrderExecution;
			
			private global::System.Data.DataRelation relationExecutionNegotiation;
			
			private global::System.Data.DataRelation relationStateExecutionByFK_State_Execution_DestinationStateCode;
			
			private global::System.Data.DataRelation relationStateExecutionByFK_State_Execution_SourceStateCode;
			
			private global::System.Data.DataRelation relationUserExecutionByFK_User_Execution_CreatedUserId;
			
			private global::System.Data.DataRelation relationUserExecutionByFK_User_Execution_ModifiedUserId;
			
			/// <summary>
			/// Creates the Execution table.
			/// </summary>
			internal ExecutionDataTable()
			{
				// Initialize the object.
				this.TableName = "Execution";
				this.dataIndices = new global::Teraque.DataIndexCollection();
				// The AccruedInterest Column
				this.columnAccruedInterest = new global::System.Data.DataColumn("AccruedInterest", typeof(decimal), null, global::System.Data.MappingType.Element);
				this.columnAccruedInterest.AllowDBNull = false;
				this.columnAccruedInterest.DefaultValue = 0.0m;
				this.Columns.Add(this.columnAccruedInterest);
				// The BrokerAccountId Column
				this.columnBrokerAccountId = new global::System.Data.DataColumn("BrokerAccountId", typeof(System.Guid), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnBrokerAccountId);
				// The BrokerId Column
				this.columnBrokerId = new global::System.Data.DataColumn("BrokerId", typeof(System.Guid), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnBrokerId);
				// The Commission Column
				this.columnCommission = new global::System.Data.DataColumn("Commission", typeof(decimal), null, global::System.Data.MappingType.Element);
				this.columnCommission.AllowDBNull = false;
				this.columnCommission.DefaultValue = 0.0m;
				this.Columns.Add(this.columnCommission);
				// The CreatedTime Column
				this.columnCreatedTime = new global::System.Data.DataColumn("CreatedTime", typeof(System.DateTime), null, global::System.Data.MappingType.Element);
				this.columnCreatedTime.AllowDBNull = false;
				this.Columns.Add(this.columnCreatedTime);
				// The CreatedUserId Column
				this.columnCreatedUserId = new global::System.Data.DataColumn("CreatedUserId", typeof(System.Guid), null, global::System.Data.MappingType.Element);
				this.columnCreatedUserId.AllowDBNull = false;
				this.Columns.Add(this.columnCreatedUserId);
				// The DestinationOrderId Column
				this.columnDestinationOrderId = new global::System.Data.DataColumn("DestinationOrderId", typeof(System.Guid), null, global::System.Data.MappingType.Element);
				this.columnDestinationOrderId.AllowDBNull = false;
				this.Columns.Add(this.columnDestinationOrderId);
				// The DestinationStateCode Column
				this.columnDestinationStateCode = new global::System.Data.DataColumn("DestinationStateCode", typeof(Teraque.StateCode), null, global::System.Data.MappingType.Element);
				this.columnDestinationStateCode.AllowDBNull = false;
				this.Columns.Add(this.columnDestinationStateCode);
				// The ExecutionId Column
				this.columnExecutionId = new global::System.Data.DataColumn("ExecutionId", typeof(System.Guid), null, global::System.Data.MappingType.Element);
				this.columnExecutionId.AllowDBNull = false;
				this.Columns.Add(this.columnExecutionId);
				// The ExecutionPrice Column
				this.columnExecutionPrice = new global::System.Data.DataColumn("ExecutionPrice", typeof(decimal), null, global::System.Data.MappingType.Element);
				this.columnExecutionPrice.AllowDBNull = false;
				this.columnExecutionPrice.DefaultValue = 0.0m;
				this.Columns.Add(this.columnExecutionPrice);
				// The ExecutionQuantity Column
				this.columnExecutionQuantity = new global::System.Data.DataColumn("ExecutionQuantity", typeof(decimal), null, global::System.Data.MappingType.Element);
				this.columnExecutionQuantity.AllowDBNull = false;
				this.columnExecutionQuantity.DefaultValue = 0.0m;
				this.Columns.Add(this.columnExecutionQuantity);
				// The ExternalId0 Column
				this.columnExternalId0 = new global::System.Data.DataColumn("ExternalId0", typeof(string), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnExternalId0);
				// The IsHidden Column
				this.columnIsHidden = new global::System.Data.DataColumn("IsHidden", typeof(bool), null, global::System.Data.MappingType.Element);
				this.columnIsHidden.AllowDBNull = false;
				this.columnIsHidden.DefaultValue = false;
				this.Columns.Add(this.columnIsHidden);
				// The ModifiedTime Column
				this.columnModifiedTime = new global::System.Data.DataColumn("ModifiedTime", typeof(System.DateTime), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnModifiedTime);
				// The ModifiedUserId Column
				this.columnModifiedUserId = new global::System.Data.DataColumn("ModifiedUserId", typeof(System.Guid), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnModifiedUserId);
				// The OriginalDestinationOrderId Column
				this.columnOriginalDestinationOrderId = new global::System.Data.DataColumn("OriginalDestinationOrderId", typeof(System.Guid), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnOriginalDestinationOrderId);
				// The OriginalPrice Column
				this.columnOriginalPrice = new global::System.Data.DataColumn("OriginalPrice", typeof(decimal), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnOriginalPrice);
				// The OriginalQuantity Column
				this.columnOriginalQuantity = new global::System.Data.DataColumn("OriginalQuantity", typeof(decimal), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnOriginalQuantity);
				// The RowVersion Column
				this.columnRowVersion = new global::System.Data.DataColumn("RowVersion", typeof(long), null, global::System.Data.MappingType.Element);
				this.columnRowVersion.AllowDBNull = false;
				this.Columns.Add(this.columnRowVersion);
				// The SourceExecutionId Column
				this.columnSourceExecutionId = new global::System.Data.DataColumn("SourceExecutionId", typeof(string), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnSourceExecutionId);
				// The SourceStateCode Column
				this.columnSourceStateCode = new global::System.Data.DataColumn("SourceStateCode", typeof(Teraque.StateCode), null, global::System.Data.MappingType.Element);
				this.columnSourceStateCode.AllowDBNull = false;
				this.Columns.Add(this.columnSourceStateCode);
				// The UserFee0 Column
				this.columnUserFee0 = new global::System.Data.DataColumn("UserFee0", typeof(decimal), null, global::System.Data.MappingType.Element);
				this.columnUserFee0.AllowDBNull = false;
				this.columnUserFee0.DefaultValue = 0.0m;
				this.Columns.Add(this.columnUserFee0);
				// The UserFee1 Column
				this.columnUserFee1 = new global::System.Data.DataColumn("UserFee1", typeof(decimal), null, global::System.Data.MappingType.Element);
				this.columnUserFee1.AllowDBNull = false;
				this.columnUserFee1.DefaultValue = 0.0m;
				this.Columns.Add(this.columnUserFee1);
				// The UserFee2 Column
				this.columnUserFee2 = new global::System.Data.DataColumn("UserFee2", typeof(decimal), null, global::System.Data.MappingType.Element);
				this.columnUserFee2.AllowDBNull = false;
				this.columnUserFee2.DefaultValue = 0.0m;
				this.Columns.Add(this.columnUserFee2);
				// The UserFee3 Column
				this.columnUserFee3 = new global::System.Data.DataColumn("UserFee3", typeof(decimal), null, global::System.Data.MappingType.Element);
				this.columnUserFee3.AllowDBNull = false;
				this.columnUserFee3.DefaultValue = 0.0m;
				this.Columns.Add(this.columnUserFee3);
				// The ExecutionKey Index
				this.indexExecutionKey = new ExecutionKeyIndex("ExecutionKey", new global::System.Data.DataColumn[] {
							this.columnExecutionId});
				this.Indices.Add(this.indexExecutionKey);
				// The ExecutionKeyExternalId0 Index
				this.indexExecutionKeyExternalId0 = new ExecutionKeyExternalId0Index("ExecutionKeyExternalId0", new global::System.Data.DataColumn[] {
							this.columnExternalId0});
				this.Indices.Add(this.indexExecutionKeyExternalId0);
			}
			
			/// <summary>
			/// Gets the AccruedInterest column of the Execution table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn AccruedInterestColumn
			{
				get
				{
					return this.columnAccruedInterest;
				}
			}
			
			/// <summary>
			/// Gets the parent relation between the BrokerAccount and Execution tables.
			/// </summary>
			public global::System.Data.DataRelation BrokerAccountExecutionRelation
			{
				get
				{
					return this.relationBrokerAccountExecution;
				}
			}
			
			/// <summary>
			/// Gets the BrokerAccountId column of the Execution table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn BrokerAccountIdColumn
			{
				get
				{
					return this.columnBrokerAccountId;
				}
			}
			
			/// <summary>
			/// Gets the parent relation between the Broker and Execution tables.
			/// </summary>
			public global::System.Data.DataRelation BrokerExecutionRelation
			{
				get
				{
					return this.relationBrokerExecution;
				}
			}
			
			/// <summary>
			/// Gets the BrokerId column of the Execution table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn BrokerIdColumn
			{
				get
				{
					return this.columnBrokerId;
				}
			}
			
			/// <summary>
			/// Gets the Commission column of the Execution table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn CommissionColumn
			{
				get
				{
					return this.columnCommission;
				}
			}
			
			/// <summary>
			/// Gets the number of rows in the Execution table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public int Count
			{
				get
				{
					return this.Rows.Count;
				}
			}
			
			/// <summary>
			/// Gets the CreatedTime column of the Execution table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn CreatedTimeColumn
			{
				get
				{
					return this.columnCreatedTime;
				}
			}
			
			/// <summary>
			/// Gets the CreatedUserId column of the Execution table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn CreatedUserIdColumn
			{
				get
				{
					return this.columnCreatedUserId;
				}
			}
			
			/// <summary>
			/// Gets the parent relation between the DestinationOrder and Execution tables.
			/// </summary>
			public global::System.Data.DataRelation DestinationOrderExecutionRelation
			{
				get
				{
					return this.relationDestinationOrderExecution;
				}
			}
			
			/// <summary>
			/// Gets the DestinationOrderId column of the Execution table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn DestinationOrderIdColumn
			{
				get
				{
					return this.columnDestinationOrderId;
				}
			}
			
			/// <summary>
			/// Gets the DestinationStateCode column of the Execution table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn DestinationStateCodeColumn
			{
				get
				{
					return this.columnDestinationStateCode;
				}
			}
			
			/// <summary>
			/// Gets the ExecutionId column of the Execution table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn ExecutionIdColumn
			{
				get
				{
					return this.columnExecutionId;
				}
			}
			
			/// <summary>
			/// Gets the ExecutionKey index on the Execution table.
			/// </summary>
			public ExecutionKeyIndex ExecutionKey
			{
				get
				{
					return ((ExecutionKeyIndex)(this.indexExecutionKey));
				}
			}
			
			/// <summary>
			/// Gets the ExecutionKeyExternalId0 index on the Execution table.
			/// </summary>
			public ExecutionKeyExternalId0Index ExecutionKeyExternalId0
			{
				get
				{
					return ((ExecutionKeyExternalId0Index)(this.indexExecutionKeyExternalId0));
				}
			}
			
			/// <summary>
			/// Gets the child relation between the Execution and Negotiation tables.
			/// </summary>
			internal global::System.Data.DataRelation ExecutionNegotiationRelation
			{
				get
				{
					return this.relationExecutionNegotiation;
				}
			}
			
			/// <summary>
			/// Gets the ExecutionPrice column of the Execution table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn ExecutionPriceColumn
			{
				get
				{
					return this.columnExecutionPrice;
				}
			}
			
			/// <summary>
			/// Gets the ExecutionQuantity column of the Execution table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn ExecutionQuantityColumn
			{
				get
				{
					return this.columnExecutionQuantity;
				}
			}
			
			/// <summary>
			/// Gets the ExternalId0 column of the Execution table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn ExternalId0Column
			{
				get
				{
					return this.columnExternalId0;
				}
			}
			
			/// <summary>
			/// Gets a collection of Teraque.DataModelGenerator.DataIndices on a table.
			/// </summary>
			public global::Teraque.DataIndexCollection Indices
			{
				get
				{
					return this.dataIndices;
				}
			}
			
			/// <summary>
			/// Gets the IsHidden column of the Execution table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn IsHiddenColumn
			{
				get
				{
					return this.columnIsHidden;
				}
			}
			
			/// <summary>
			/// Indexer to a row in the Execution table.
			/// </summary>
			/// <param name="index">The integer index of the row.</param>
			/// <returns>The Execution row found at the given index.</returns>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public DataModel.ExecutionRow this[int index]
			{
				get
				{
					return ((DataModel.ExecutionRow)(this.Rows[index]));
				}
			}
			
			/// <summary>
			/// Gets the ModifiedTime column of the Execution table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn ModifiedTimeColumn
			{
				get
				{
					return this.columnModifiedTime;
				}
			}
			
			/// <summary>
			/// Gets the ModifiedUserId column of the Execution table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn ModifiedUserIdColumn
			{
				get
				{
					return this.columnModifiedUserId;
				}
			}
			
			/// <summary>
			/// Gets the OriginalDestinationOrderId column of the Execution table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn OriginalDestinationOrderIdColumn
			{
				get
				{
					return this.columnOriginalDestinationOrderId;
				}
			}
			
			/// <summary>
			/// Gets the OriginalPrice column of the Execution table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn OriginalPriceColumn
			{
				get
				{
					return this.columnOriginalPrice;
				}
			}
			
			/// <summary>
			/// Gets the OriginalQuantity column of the Execution table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn OriginalQuantityColumn
			{
				get
				{
					return this.columnOriginalQuantity;
				}
			}
			
			/// <summary>
			/// Gets the RowVersion column of the Execution table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn RowVersionColumn
			{
				get
				{
					return this.columnRowVersion;
				}
			}
			
			/// <summary>
			/// Gets the SourceExecutionId column of the Execution table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn SourceExecutionIdColumn
			{
				get
				{
					return this.columnSourceExecutionId;
				}
			}
			
			/// <summary>
			/// Gets the SourceStateCode column of the Execution table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn SourceStateCodeColumn
			{
				get
				{
					return this.columnSourceStateCode;
				}
			}
			
			/// <summary>
			/// Gets the parent relation between the State and Execution tables.
			/// </summary>
			public global::System.Data.DataRelation StateExecutionByFK_State_Execution_DestinationStateCodeRelation
			{
				get
				{
					return this.relationStateExecutionByFK_State_Execution_DestinationStateCode;
				}
			}
			
			/// <summary>
			/// Gets the parent relation between the State and Execution tables.
			/// </summary>
			public global::System.Data.DataRelation StateExecutionByFK_State_Execution_SourceStateCodeRelation
			{
				get
				{
					return this.relationStateExecutionByFK_State_Execution_SourceStateCode;
				}
			}
			
			/// <summary>
			/// Gets the parent relation between the User and Execution tables.
			/// </summary>
			public global::System.Data.DataRelation UserExecutionByFK_User_Execution_CreatedUserIdRelation
			{
				get
				{
					return this.relationUserExecutionByFK_User_Execution_CreatedUserId;
				}
			}
			
			/// <summary>
			/// Gets the parent relation between the User and Execution tables.
			/// </summary>
			public global::System.Data.DataRelation UserExecutionByFK_User_Execution_ModifiedUserIdRelation
			{
				get
				{
					return this.relationUserExecutionByFK_User_Execution_ModifiedUserId;
				}
			}
			
			/// <summary>
			/// Gets the UserFee0 column of the Execution table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn UserFee0Column
			{
				get
				{
					return this.columnUserFee0;
				}
			}
			
			/// <summary>
			/// Gets the UserFee1 column of the Execution table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn UserFee1Column
			{
				get
				{
					return this.columnUserFee1;
				}
			}
			
			/// <summary>
			/// Gets the UserFee2 column of the Execution table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn UserFee2Column
			{
				get
				{
					return this.columnUserFee2;
				}
			}
			
			/// <summary>
			/// Gets the UserFee3 column of the Execution table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn UserFee3Column
			{
				get
				{
					return this.columnUserFee3;
				}
			}
			
			/// <summary>
			/// Occurs after a Execution row has been changed successfully.
			/// </summary>
			public event ExecutionRowChangeEventHandler ExecutionRowChanged;
			
			/// <summary>
			/// Occurs when a Execution row is changing.
			/// </summary>
			public event ExecutionRowChangeEventHandler ExecutionRowChanging;
			
			/// <summary>
			/// Occurs after a Execution row in the table has been deleted.
			/// </summary>
			public event ExecutionRowChangeEventHandler ExecutionRowDeleted;
			
			/// <summary>
			/// Occurs before a Execution row in the table is about to be deleted.
			/// </summary>
			public event ExecutionRowChangeEventHandler ExecutionRowDeleting;
			
			/// <summary>
			/// Returns the type of the row in a Execution table.
			/// </summary>
			/// <returns>The ExecutionRow type.</returns>
			protected override global::System.Type GetRowType()
			{
				return typeof(ExecutionRow);
			}
			
			/// <summary>
			/// Initializes the relation fields with the parent and child relations.
			/// </summary>
			internal void InitializeRelations()
			{
				this.relationBrokerExecution = this.ParentRelations["FK_Broker_Execution"];
				this.relationBrokerAccountExecution = this.ParentRelations["FK_BrokerAccount_Execution"];
				this.relationDestinationOrderExecution = this.ParentRelations["FK_DestinationOrder_Execution"];
				this.relationStateExecutionByFK_State_Execution_DestinationStateCode = this.ParentRelations["FK_State_Execution_DestinationStateCode"];
				this.relationStateExecutionByFK_State_Execution_SourceStateCode = this.ParentRelations["FK_State_Execution_SourceStateCode"];
				this.relationUserExecutionByFK_User_Execution_CreatedUserId = this.ParentRelations["FK_User_Execution_CreatedUserId"];
				this.relationUserExecutionByFK_User_Execution_ModifiedUserId = this.ParentRelations["FK_User_Execution_ModifiedUserId"];
				this.relationExecutionNegotiation = this.ChildRelations["FK_Execution_Negotiation"];
			}
			
			/// <summary>
			/// Initializes a new instance of a Execution row.  Constructs a row from the builder.  Only for internal usage.
			/// </summary>
			/// <returns>A new row with the same schema as the table.</returns>
			protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder dataRowBuilder)
			{
				return new ExecutionRow(dataRowBuilder);
			}
			
			/// <summary>
			/// Raises the ExecutionRowChanged event.
			/// </summary>
			/// <param name="e">Provides data for the ExecutionRow changing and deleting events.</param>
			protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowChanged(e);
				if ((this.ExecutionRowChanged != null))
				{
					this.ExecutionRowChanged(this, new ExecutionRowChangeEventArgs(((ExecutionRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the ExecutionRowChanging event.
			/// </summary>
			/// <param name="e">Provides data for the ExecutionRow changing and deleting events.</param>
			protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowChanging(e);
				if ((this.ExecutionRowChanging != null))
				{
					this.ExecutionRowChanging(this, new ExecutionRowChangeEventArgs(((ExecutionRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the ExecutionRowDeleted event.
			/// </summary>
			/// <param name="e">Provides data for the ExecutionRow changing and deleting events.</param>
			protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowDeleted(e);
				if ((this.ExecutionRowDeleted != null))
				{
					this.ExecutionRowDeleted(this, new ExecutionRowChangeEventArgs(((ExecutionRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the ExecutionRowDeleting event.
			/// </summary>
			/// <param name="e">Provides data for the ExecutionRow changing and deleting events.</param>
			protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowDeleting(e);
				if ((this.ExecutionRowDeleting != null))
				{
					this.ExecutionRowDeleting(this, new ExecutionRowChangeEventArgs(((ExecutionRow)(e.Row)), e.Action));
				}
			}
		}
		
		/// <summary>
		/// The Folder table.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public partial class FolderDataTable : global::System.Data.TypedTableBase<DataModel.FolderRow>
		{
			
			private global::System.Data.DataColumn columnFolderId;
			
			private global::System.Data.DataColumn columnRowVersion;
			
			private global::Teraque.DataIndexCollection dataIndices;
			
			private global::Teraque.DataIndex indexFolderKey;
			
			private global::System.Data.DataRelation relationEntityFolder;
			
			/// <summary>
			/// Creates the Folder table.
			/// </summary>
			internal FolderDataTable()
			{
				// Initialize the object.
				this.TableName = "Folder";
				this.dataIndices = new global::Teraque.DataIndexCollection();
				// The FolderId Column
				this.columnFolderId = new global::System.Data.DataColumn("FolderId", typeof(System.Guid), null, global::System.Data.MappingType.Element);
				this.columnFolderId.AllowDBNull = false;
				this.Columns.Add(this.columnFolderId);
				// The RowVersion Column
				this.columnRowVersion = new global::System.Data.DataColumn("RowVersion", typeof(long), null, global::System.Data.MappingType.Element);
				this.columnRowVersion.AllowDBNull = false;
				this.Columns.Add(this.columnRowVersion);
				// The FolderKey Index
				this.indexFolderKey = new FolderKeyIndex("FolderKey", new global::System.Data.DataColumn[] {
							this.columnFolderId});
				this.Indices.Add(this.indexFolderKey);
			}
			
			/// <summary>
			/// Gets the number of rows in the Folder table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public int Count
			{
				get
				{
					return this.Rows.Count;
				}
			}
			
			/// <summary>
			/// Gets the parent relation between the Entity and Folder tables.
			/// </summary>
			public global::System.Data.DataRelation EntityFolderRelation
			{
				get
				{
					return this.relationEntityFolder;
				}
			}
			
			/// <summary>
			/// Gets the FolderId column of the Folder table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn FolderIdColumn
			{
				get
				{
					return this.columnFolderId;
				}
			}
			
			/// <summary>
			/// Gets the FolderKey index on the Folder table.
			/// </summary>
			public FolderKeyIndex FolderKey
			{
				get
				{
					return ((FolderKeyIndex)(this.indexFolderKey));
				}
			}
			
			/// <summary>
			/// Gets a collection of Teraque.DataModelGenerator.DataIndices on a table.
			/// </summary>
			public global::Teraque.DataIndexCollection Indices
			{
				get
				{
					return this.dataIndices;
				}
			}
			
			/// <summary>
			/// Indexer to a row in the Folder table.
			/// </summary>
			/// <param name="index">The integer index of the row.</param>
			/// <returns>The Folder row found at the given index.</returns>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public DataModel.FolderRow this[int index]
			{
				get
				{
					return ((DataModel.FolderRow)(this.Rows[index]));
				}
			}
			
			/// <summary>
			/// Gets the RowVersion column of the Folder table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn RowVersionColumn
			{
				get
				{
					return this.columnRowVersion;
				}
			}
			
			/// <summary>
			/// Occurs after a Folder row has been changed successfully.
			/// </summary>
			public event FolderRowChangeEventHandler FolderRowChanged;
			
			/// <summary>
			/// Occurs when a Folder row is changing.
			/// </summary>
			public event FolderRowChangeEventHandler FolderRowChanging;
			
			/// <summary>
			/// Occurs after a Folder row in the table has been deleted.
			/// </summary>
			public event FolderRowChangeEventHandler FolderRowDeleted;
			
			/// <summary>
			/// Occurs before a Folder row in the table is about to be deleted.
			/// </summary>
			public event FolderRowChangeEventHandler FolderRowDeleting;
			
			/// <summary>
			/// Returns the type of the row in a Folder table.
			/// </summary>
			/// <returns>The FolderRow type.</returns>
			protected override global::System.Type GetRowType()
			{
				return typeof(FolderRow);
			}
			
			/// <summary>
			/// Initializes the relation fields with the parent and child relations.
			/// </summary>
			internal void InitializeRelations()
			{
				this.relationEntityFolder = this.ParentRelations["FK_Entity_Folder"];
			}
			
			/// <summary>
			/// Initializes a new instance of a Folder row.  Constructs a row from the builder.  Only for internal usage.
			/// </summary>
			/// <returns>A new row with the same schema as the table.</returns>
			protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder dataRowBuilder)
			{
				return new FolderRow(dataRowBuilder);
			}
			
			/// <summary>
			/// Raises the FolderRowChanged event.
			/// </summary>
			/// <param name="e">Provides data for the FolderRow changing and deleting events.</param>
			protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowChanged(e);
				if ((this.FolderRowChanged != null))
				{
					this.FolderRowChanged(this, new FolderRowChangeEventArgs(((FolderRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the FolderRowChanging event.
			/// </summary>
			/// <param name="e">Provides data for the FolderRow changing and deleting events.</param>
			protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowChanging(e);
				if ((this.FolderRowChanging != null))
				{
					this.FolderRowChanging(this, new FolderRowChangeEventArgs(((FolderRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the FolderRowDeleted event.
			/// </summary>
			/// <param name="e">Provides data for the FolderRow changing and deleting events.</param>
			protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowDeleted(e);
				if ((this.FolderRowDeleted != null))
				{
					this.FolderRowDeleted(this, new FolderRowChangeEventArgs(((FolderRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the FolderRowDeleting event.
			/// </summary>
			/// <param name="e">Provides data for the FolderRow changing and deleting events.</param>
			protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowDeleting(e);
				if ((this.FolderRowDeleting != null))
				{
					this.FolderRowDeleting(this, new FolderRowChangeEventArgs(((FolderRow)(e.Row)), e.Action));
				}
			}
		}
		
		/// <summary>
		/// The GroupAccount table.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public partial class GroupAccountDataTable : global::System.Data.TypedTableBase<DataModel.GroupAccountRow>
		{
			
			private global::System.Data.DataColumn columnGroupAccountId;
			
			private global::System.Data.DataColumn columnRowVersion;
			
			private global::Teraque.DataIndexCollection dataIndices;
			
			private global::Teraque.DataIndex indexGroupAccountKey;
			
			private global::System.Data.DataRelation relationAccountGroupAccount;
			
			/// <summary>
			/// Creates the GroupAccount table.
			/// </summary>
			internal GroupAccountDataTable()
			{
				// Initialize the object.
				this.TableName = "GroupAccount";
				this.dataIndices = new global::Teraque.DataIndexCollection();
				// The GroupAccountId Column
				this.columnGroupAccountId = new global::System.Data.DataColumn("GroupAccountId", typeof(System.Guid), null, global::System.Data.MappingType.Element);
				this.columnGroupAccountId.AllowDBNull = false;
				this.Columns.Add(this.columnGroupAccountId);
				// The RowVersion Column
				this.columnRowVersion = new global::System.Data.DataColumn("RowVersion", typeof(long), null, global::System.Data.MappingType.Element);
				this.columnRowVersion.AllowDBNull = false;
				this.Columns.Add(this.columnRowVersion);
				// The GroupAccountKey Index
				this.indexGroupAccountKey = new GroupAccountKeyIndex("GroupAccountKey", new global::System.Data.DataColumn[] {
							this.columnGroupAccountId});
				this.Indices.Add(this.indexGroupAccountKey);
			}
			
			/// <summary>
			/// Gets the parent relation between the Account and GroupAccount tables.
			/// </summary>
			public global::System.Data.DataRelation AccountGroupAccountRelation
			{
				get
				{
					return this.relationAccountGroupAccount;
				}
			}
			
			/// <summary>
			/// Gets the number of rows in the GroupAccount table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public int Count
			{
				get
				{
					return this.Rows.Count;
				}
			}
			
			/// <summary>
			/// Gets the GroupAccountId column of the GroupAccount table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn GroupAccountIdColumn
			{
				get
				{
					return this.columnGroupAccountId;
				}
			}
			
			/// <summary>
			/// Gets the GroupAccountKey index on the GroupAccount table.
			/// </summary>
			public GroupAccountKeyIndex GroupAccountKey
			{
				get
				{
					return ((GroupAccountKeyIndex)(this.indexGroupAccountKey));
				}
			}
			
			/// <summary>
			/// Gets a collection of Teraque.DataModelGenerator.DataIndices on a table.
			/// </summary>
			public global::Teraque.DataIndexCollection Indices
			{
				get
				{
					return this.dataIndices;
				}
			}
			
			/// <summary>
			/// Indexer to a row in the GroupAccount table.
			/// </summary>
			/// <param name="index">The integer index of the row.</param>
			/// <returns>The GroupAccount row found at the given index.</returns>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public DataModel.GroupAccountRow this[int index]
			{
				get
				{
					return ((DataModel.GroupAccountRow)(this.Rows[index]));
				}
			}
			
			/// <summary>
			/// Gets the RowVersion column of the GroupAccount table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn RowVersionColumn
			{
				get
				{
					return this.columnRowVersion;
				}
			}
			
			/// <summary>
			/// Occurs after a GroupAccount row has been changed successfully.
			/// </summary>
			public event GroupAccountRowChangeEventHandler GroupAccountRowChanged;
			
			/// <summary>
			/// Occurs when a GroupAccount row is changing.
			/// </summary>
			public event GroupAccountRowChangeEventHandler GroupAccountRowChanging;
			
			/// <summary>
			/// Occurs after a GroupAccount row in the table has been deleted.
			/// </summary>
			public event GroupAccountRowChangeEventHandler GroupAccountRowDeleted;
			
			/// <summary>
			/// Occurs before a GroupAccount row in the table is about to be deleted.
			/// </summary>
			public event GroupAccountRowChangeEventHandler GroupAccountRowDeleting;
			
			/// <summary>
			/// Returns the type of the row in a GroupAccount table.
			/// </summary>
			/// <returns>The GroupAccountRow type.</returns>
			protected override global::System.Type GetRowType()
			{
				return typeof(GroupAccountRow);
			}
			
			/// <summary>
			/// Initializes the relation fields with the parent and child relations.
			/// </summary>
			internal void InitializeRelations()
			{
				this.relationAccountGroupAccount = this.ParentRelations["FK_Account_GroupAccount"];
			}
			
			/// <summary>
			/// Initializes a new instance of a GroupAccount row.  Constructs a row from the builder.  Only for internal usage.
			/// </summary>
			/// <returns>A new row with the same schema as the table.</returns>
			protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder dataRowBuilder)
			{
				return new GroupAccountRow(dataRowBuilder);
			}
			
			/// <summary>
			/// Raises the GroupAccountRowChanged event.
			/// </summary>
			/// <param name="e">Provides data for the GroupAccountRow changing and deleting events.</param>
			protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowChanged(e);
				if ((this.GroupAccountRowChanged != null))
				{
					this.GroupAccountRowChanged(this, new GroupAccountRowChangeEventArgs(((GroupAccountRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the GroupAccountRowChanging event.
			/// </summary>
			/// <param name="e">Provides data for the GroupAccountRow changing and deleting events.</param>
			protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowChanging(e);
				if ((this.GroupAccountRowChanging != null))
				{
					this.GroupAccountRowChanging(this, new GroupAccountRowChangeEventArgs(((GroupAccountRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the GroupAccountRowDeleted event.
			/// </summary>
			/// <param name="e">Provides data for the GroupAccountRow changing and deleting events.</param>
			protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowDeleted(e);
				if ((this.GroupAccountRowDeleted != null))
				{
					this.GroupAccountRowDeleted(this, new GroupAccountRowChangeEventArgs(((GroupAccountRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the GroupAccountRowDeleting event.
			/// </summary>
			/// <param name="e">Provides data for the GroupAccountRow changing and deleting events.</param>
			protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowDeleting(e);
				if ((this.GroupAccountRowDeleting != null))
				{
					this.GroupAccountRowDeleting(this, new GroupAccountRowChangeEventArgs(((GroupAccountRow)(e.Row)), e.Action));
				}
			}
		}
		
		/// <summary>
		/// The Holiday table.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public partial class HolidayDataTable : global::System.Data.TypedTableBase<DataModel.HolidayRow>
		{
			
			private global::System.Data.DataColumn columnCountryId;
			
			private global::System.Data.DataColumn columnDate;
			
			private global::System.Data.DataColumn columnExternalId0;
			
			private global::System.Data.DataColumn columnExternalId1;
			
			private global::System.Data.DataColumn columnHolidayId;
			
			private global::System.Data.DataColumn columnHolidayTypeCode;
			
			private global::System.Data.DataColumn columnRowVersion;
			
			private global::Teraque.DataIndexCollection dataIndices;
			
			private global::Teraque.DataIndex indexHolidayKey;
			
			private global::Teraque.DataIndex indexHolidayKeyExternalId0;
			
			private global::Teraque.DataIndex indexHolidayKeyExternalId1;
			
			private global::System.Data.DataRelation relationCountryHoliday;
			
			private global::System.Data.DataRelation relationHolidayTypeHoliday;
			
			/// <summary>
			/// Creates the Holiday table.
			/// </summary>
			internal HolidayDataTable()
			{
				// Initialize the object.
				this.TableName = "Holiday";
				this.dataIndices = new global::Teraque.DataIndexCollection();
				// The CountryId Column
				this.columnCountryId = new global::System.Data.DataColumn("CountryId", typeof(System.Guid), null, global::System.Data.MappingType.Element);
				this.columnCountryId.AllowDBNull = false;
				this.Columns.Add(this.columnCountryId);
				// The Date Column
				this.columnDate = new global::System.Data.DataColumn("Date", typeof(System.DateTime), null, global::System.Data.MappingType.Element);
				this.columnDate.AllowDBNull = false;
				this.Columns.Add(this.columnDate);
				// The ExternalId0 Column
				this.columnExternalId0 = new global::System.Data.DataColumn("ExternalId0", typeof(string), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnExternalId0);
				// The ExternalId1 Column
				this.columnExternalId1 = new global::System.Data.DataColumn("ExternalId1", typeof(string), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnExternalId1);
				// The HolidayId Column
				this.columnHolidayId = new global::System.Data.DataColumn("HolidayId", typeof(System.Guid), null, global::System.Data.MappingType.Element);
				this.columnHolidayId.AllowDBNull = false;
				this.Columns.Add(this.columnHolidayId);
				// The HolidayTypeCode Column
				this.columnHolidayTypeCode = new global::System.Data.DataColumn("HolidayTypeCode", typeof(Teraque.HolidayTypeCode), null, global::System.Data.MappingType.Element);
				this.columnHolidayTypeCode.AllowDBNull = false;
				this.Columns.Add(this.columnHolidayTypeCode);
				// The RowVersion Column
				this.columnRowVersion = new global::System.Data.DataColumn("RowVersion", typeof(long), null, global::System.Data.MappingType.Element);
				this.columnRowVersion.AllowDBNull = false;
				this.Columns.Add(this.columnRowVersion);
				// The HolidayKey Index
				this.indexHolidayKey = new HolidayKeyIndex("HolidayKey", new global::System.Data.DataColumn[] {
							this.columnHolidayId});
				this.Indices.Add(this.indexHolidayKey);
				// The HolidayKeyExternalId0 Index
				this.indexHolidayKeyExternalId0 = new HolidayKeyExternalId0Index("HolidayKeyExternalId0", new global::System.Data.DataColumn[] {
							this.columnExternalId0});
				this.Indices.Add(this.indexHolidayKeyExternalId0);
				// The HolidayKeyExternalId1 Index
				this.indexHolidayKeyExternalId1 = new HolidayKeyExternalId1Index("HolidayKeyExternalId1", new global::System.Data.DataColumn[] {
							this.columnExternalId1});
				this.Indices.Add(this.indexHolidayKeyExternalId1);
			}
			
			/// <summary>
			/// Gets the number of rows in the Holiday table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public int Count
			{
				get
				{
					return this.Rows.Count;
				}
			}
			
			/// <summary>
			/// Gets the parent relation between the Country and Holiday tables.
			/// </summary>
			public global::System.Data.DataRelation CountryHolidayRelation
			{
				get
				{
					return this.relationCountryHoliday;
				}
			}
			
			/// <summary>
			/// Gets the CountryId column of the Holiday table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn CountryIdColumn
			{
				get
				{
					return this.columnCountryId;
				}
			}
			
			/// <summary>
			/// Gets the Date column of the Holiday table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn DateColumn
			{
				get
				{
					return this.columnDate;
				}
			}
			
			/// <summary>
			/// Gets the ExternalId0 column of the Holiday table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn ExternalId0Column
			{
				get
				{
					return this.columnExternalId0;
				}
			}
			
			/// <summary>
			/// Gets the ExternalId1 column of the Holiday table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn ExternalId1Column
			{
				get
				{
					return this.columnExternalId1;
				}
			}
			
			/// <summary>
			/// Gets the HolidayId column of the Holiday table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn HolidayIdColumn
			{
				get
				{
					return this.columnHolidayId;
				}
			}
			
			/// <summary>
			/// Gets the HolidayKey index on the Holiday table.
			/// </summary>
			public HolidayKeyIndex HolidayKey
			{
				get
				{
					return ((HolidayKeyIndex)(this.indexHolidayKey));
				}
			}
			
			/// <summary>
			/// Gets the HolidayKeyExternalId0 index on the Holiday table.
			/// </summary>
			public HolidayKeyExternalId0Index HolidayKeyExternalId0
			{
				get
				{
					return ((HolidayKeyExternalId0Index)(this.indexHolidayKeyExternalId0));
				}
			}
			
			/// <summary>
			/// Gets the HolidayKeyExternalId1 index on the Holiday table.
			/// </summary>
			public HolidayKeyExternalId1Index HolidayKeyExternalId1
			{
				get
				{
					return ((HolidayKeyExternalId1Index)(this.indexHolidayKeyExternalId1));
				}
			}
			
			/// <summary>
			/// Gets the HolidayTypeCode column of the Holiday table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn HolidayTypeCodeColumn
			{
				get
				{
					return this.columnHolidayTypeCode;
				}
			}
			
			/// <summary>
			/// Gets the parent relation between the HolidayType and Holiday tables.
			/// </summary>
			public global::System.Data.DataRelation HolidayTypeHolidayRelation
			{
				get
				{
					return this.relationHolidayTypeHoliday;
				}
			}
			
			/// <summary>
			/// Gets a collection of Teraque.DataModelGenerator.DataIndices on a table.
			/// </summary>
			public global::Teraque.DataIndexCollection Indices
			{
				get
				{
					return this.dataIndices;
				}
			}
			
			/// <summary>
			/// Indexer to a row in the Holiday table.
			/// </summary>
			/// <param name="index">The integer index of the row.</param>
			/// <returns>The Holiday row found at the given index.</returns>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public DataModel.HolidayRow this[int index]
			{
				get
				{
					return ((DataModel.HolidayRow)(this.Rows[index]));
				}
			}
			
			/// <summary>
			/// Gets the RowVersion column of the Holiday table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn RowVersionColumn
			{
				get
				{
					return this.columnRowVersion;
				}
			}
			
			/// <summary>
			/// Occurs after a Holiday row has been changed successfully.
			/// </summary>
			public event HolidayRowChangeEventHandler HolidayRowChanged;
			
			/// <summary>
			/// Occurs when a Holiday row is changing.
			/// </summary>
			public event HolidayRowChangeEventHandler HolidayRowChanging;
			
			/// <summary>
			/// Occurs after a Holiday row in the table has been deleted.
			/// </summary>
			public event HolidayRowChangeEventHandler HolidayRowDeleted;
			
			/// <summary>
			/// Occurs before a Holiday row in the table is about to be deleted.
			/// </summary>
			public event HolidayRowChangeEventHandler HolidayRowDeleting;
			
			/// <summary>
			/// Returns the type of the row in a Holiday table.
			/// </summary>
			/// <returns>The HolidayRow type.</returns>
			protected override global::System.Type GetRowType()
			{
				return typeof(HolidayRow);
			}
			
			/// <summary>
			/// Initializes the relation fields with the parent and child relations.
			/// </summary>
			internal void InitializeRelations()
			{
				this.relationCountryHoliday = this.ParentRelations["FK_Country_Holiday"];
				this.relationHolidayTypeHoliday = this.ParentRelations["FK_HolidayType_Holiday"];
			}
			
			/// <summary>
			/// Initializes a new instance of a Holiday row.  Constructs a row from the builder.  Only for internal usage.
			/// </summary>
			/// <returns>A new row with the same schema as the table.</returns>
			protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder dataRowBuilder)
			{
				return new HolidayRow(dataRowBuilder);
			}
			
			/// <summary>
			/// Raises the HolidayRowChanged event.
			/// </summary>
			/// <param name="e">Provides data for the HolidayRow changing and deleting events.</param>
			protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowChanged(e);
				if ((this.HolidayRowChanged != null))
				{
					this.HolidayRowChanged(this, new HolidayRowChangeEventArgs(((HolidayRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the HolidayRowChanging event.
			/// </summary>
			/// <param name="e">Provides data for the HolidayRow changing and deleting events.</param>
			protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowChanging(e);
				if ((this.HolidayRowChanging != null))
				{
					this.HolidayRowChanging(this, new HolidayRowChangeEventArgs(((HolidayRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the HolidayRowDeleted event.
			/// </summary>
			/// <param name="e">Provides data for the HolidayRow changing and deleting events.</param>
			protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowDeleted(e);
				if ((this.HolidayRowDeleted != null))
				{
					this.HolidayRowDeleted(this, new HolidayRowChangeEventArgs(((HolidayRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the HolidayRowDeleting event.
			/// </summary>
			/// <param name="e">Provides data for the HolidayRow changing and deleting events.</param>
			protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowDeleting(e);
				if ((this.HolidayRowDeleting != null))
				{
					this.HolidayRowDeleting(this, new HolidayRowChangeEventArgs(((HolidayRow)(e.Row)), e.Action));
				}
			}
		}
		
		/// <summary>
		/// The HolidayType table.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public partial class HolidayTypeDataTable : global::System.Data.TypedTableBase<DataModel.HolidayTypeRow>
		{
			
			private global::System.Data.DataColumn columnDescription;
			
			private global::System.Data.DataColumn columnExternalId0;
			
			private global::System.Data.DataColumn columnExternalId1;
			
			private global::System.Data.DataColumn columnExternalId2;
			
			private global::System.Data.DataColumn columnExternalId3;
			
			private global::System.Data.DataColumn columnHolidayTypeCode;
			
			private global::System.Data.DataColumn columnRowVersion;
			
			private global::Teraque.DataIndexCollection dataIndices;
			
			private global::Teraque.DataIndex indexHolidayTypeKey;
			
			private global::Teraque.DataIndex indexHolidayTypeKeyExternalId0;
			
			private global::System.Data.DataRelation relationHolidayTypeHoliday;
			
			/// <summary>
			/// Creates the HolidayType table.
			/// </summary>
			internal HolidayTypeDataTable()
			{
				// Initialize the object.
				this.TableName = "HolidayType";
				this.dataIndices = new global::Teraque.DataIndexCollection();
				// The Description Column
				this.columnDescription = new global::System.Data.DataColumn("Description", typeof(string), null, global::System.Data.MappingType.Element);
				this.columnDescription.AllowDBNull = false;
				this.columnDescription.DefaultValue = "";
				this.Columns.Add(this.columnDescription);
				// The ExternalId0 Column
				this.columnExternalId0 = new global::System.Data.DataColumn("ExternalId0", typeof(string), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnExternalId0);
				// The ExternalId1 Column
				this.columnExternalId1 = new global::System.Data.DataColumn("ExternalId1", typeof(string), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnExternalId1);
				// The ExternalId2 Column
				this.columnExternalId2 = new global::System.Data.DataColumn("ExternalId2", typeof(string), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnExternalId2);
				// The ExternalId3 Column
				this.columnExternalId3 = new global::System.Data.DataColumn("ExternalId3", typeof(string), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnExternalId3);
				// The HolidayTypeCode Column
				this.columnHolidayTypeCode = new global::System.Data.DataColumn("HolidayTypeCode", typeof(Teraque.HolidayTypeCode), null, global::System.Data.MappingType.Element);
				this.columnHolidayTypeCode.AllowDBNull = false;
				this.Columns.Add(this.columnHolidayTypeCode);
				// The RowVersion Column
				this.columnRowVersion = new global::System.Data.DataColumn("RowVersion", typeof(long), null, global::System.Data.MappingType.Element);
				this.columnRowVersion.AllowDBNull = false;
				this.Columns.Add(this.columnRowVersion);
				// The HolidayTypeKey Index
				this.indexHolidayTypeKey = new HolidayTypeKeyIndex("HolidayTypeKey", new global::System.Data.DataColumn[] {
							this.columnHolidayTypeCode});
				this.Indices.Add(this.indexHolidayTypeKey);
				// The HolidayTypeKeyExternalId0 Index
				this.indexHolidayTypeKeyExternalId0 = new HolidayTypeKeyExternalId0Index("HolidayTypeKeyExternalId0", new global::System.Data.DataColumn[] {
							this.columnExternalId0});
				this.Indices.Add(this.indexHolidayTypeKeyExternalId0);
			}
			
			/// <summary>
			/// Gets the number of rows in the HolidayType table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public int Count
			{
				get
				{
					return this.Rows.Count;
				}
			}
			
			/// <summary>
			/// Gets the Description column of the HolidayType table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn DescriptionColumn
			{
				get
				{
					return this.columnDescription;
				}
			}
			
			/// <summary>
			/// Gets the ExternalId0 column of the HolidayType table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn ExternalId0Column
			{
				get
				{
					return this.columnExternalId0;
				}
			}
			
			/// <summary>
			/// Gets the ExternalId1 column of the HolidayType table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn ExternalId1Column
			{
				get
				{
					return this.columnExternalId1;
				}
			}
			
			/// <summary>
			/// Gets the ExternalId2 column of the HolidayType table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn ExternalId2Column
			{
				get
				{
					return this.columnExternalId2;
				}
			}
			
			/// <summary>
			/// Gets the ExternalId3 column of the HolidayType table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn ExternalId3Column
			{
				get
				{
					return this.columnExternalId3;
				}
			}
			
			/// <summary>
			/// Gets the HolidayTypeCode column of the HolidayType table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn HolidayTypeCodeColumn
			{
				get
				{
					return this.columnHolidayTypeCode;
				}
			}
			
			/// <summary>
			/// Gets the child relation between the HolidayType and Holiday tables.
			/// </summary>
			internal global::System.Data.DataRelation HolidayTypeHolidayRelation
			{
				get
				{
					return this.relationHolidayTypeHoliday;
				}
			}
			
			/// <summary>
			/// Gets the HolidayTypeKey index on the HolidayType table.
			/// </summary>
			public HolidayTypeKeyIndex HolidayTypeKey
			{
				get
				{
					return ((HolidayTypeKeyIndex)(this.indexHolidayTypeKey));
				}
			}
			
			/// <summary>
			/// Gets the HolidayTypeKeyExternalId0 index on the HolidayType table.
			/// </summary>
			public HolidayTypeKeyExternalId0Index HolidayTypeKeyExternalId0
			{
				get
				{
					return ((HolidayTypeKeyExternalId0Index)(this.indexHolidayTypeKeyExternalId0));
				}
			}
			
			/// <summary>
			/// Gets a collection of Teraque.DataModelGenerator.DataIndices on a table.
			/// </summary>
			public global::Teraque.DataIndexCollection Indices
			{
				get
				{
					return this.dataIndices;
				}
			}
			
			/// <summary>
			/// Indexer to a row in the HolidayType table.
			/// </summary>
			/// <param name="index">The integer index of the row.</param>
			/// <returns>The HolidayType row found at the given index.</returns>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public DataModel.HolidayTypeRow this[int index]
			{
				get
				{
					return ((DataModel.HolidayTypeRow)(this.Rows[index]));
				}
			}
			
			/// <summary>
			/// Gets the RowVersion column of the HolidayType table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn RowVersionColumn
			{
				get
				{
					return this.columnRowVersion;
				}
			}
			
			/// <summary>
			/// Occurs after a HolidayType row has been changed successfully.
			/// </summary>
			public event HolidayTypeRowChangeEventHandler HolidayTypeRowChanged;
			
			/// <summary>
			/// Occurs when a HolidayType row is changing.
			/// </summary>
			public event HolidayTypeRowChangeEventHandler HolidayTypeRowChanging;
			
			/// <summary>
			/// Occurs after a HolidayType row in the table has been deleted.
			/// </summary>
			public event HolidayTypeRowChangeEventHandler HolidayTypeRowDeleted;
			
			/// <summary>
			/// Occurs before a HolidayType row in the table is about to be deleted.
			/// </summary>
			public event HolidayTypeRowChangeEventHandler HolidayTypeRowDeleting;
			
			/// <summary>
			/// Returns the type of the row in a HolidayType table.
			/// </summary>
			/// <returns>The HolidayTypeRow type.</returns>
			protected override global::System.Type GetRowType()
			{
				return typeof(HolidayTypeRow);
			}
			
			/// <summary>
			/// Initializes the relation fields with the parent and child relations.
			/// </summary>
			internal void InitializeRelations()
			{
				this.relationHolidayTypeHoliday = this.ChildRelations["FK_HolidayType_Holiday"];
			}
			
			/// <summary>
			/// Initializes a new instance of a HolidayType row.  Constructs a row from the builder.  Only for internal usage.
			/// </summary>
			/// <returns>A new row with the same schema as the table.</returns>
			protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder dataRowBuilder)
			{
				return new HolidayTypeRow(dataRowBuilder);
			}
			
			/// <summary>
			/// Raises the HolidayTypeRowChanged event.
			/// </summary>
			/// <param name="e">Provides data for the HolidayTypeRow changing and deleting events.</param>
			protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowChanged(e);
				if ((this.HolidayTypeRowChanged != null))
				{
					this.HolidayTypeRowChanged(this, new HolidayTypeRowChangeEventArgs(((HolidayTypeRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the HolidayTypeRowChanging event.
			/// </summary>
			/// <param name="e">Provides data for the HolidayTypeRow changing and deleting events.</param>
			protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowChanging(e);
				if ((this.HolidayTypeRowChanging != null))
				{
					this.HolidayTypeRowChanging(this, new HolidayTypeRowChangeEventArgs(((HolidayTypeRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the HolidayTypeRowDeleted event.
			/// </summary>
			/// <param name="e">Provides data for the HolidayTypeRow changing and deleting events.</param>
			protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowDeleted(e);
				if ((this.HolidayTypeRowDeleted != null))
				{
					this.HolidayTypeRowDeleted(this, new HolidayTypeRowChangeEventArgs(((HolidayTypeRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the HolidayTypeRowDeleting event.
			/// </summary>
			/// <param name="e">Provides data for the HolidayTypeRow changing and deleting events.</param>
			protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowDeleting(e);
				if ((this.HolidayTypeRowDeleting != null))
				{
					this.HolidayTypeRowDeleting(this, new HolidayTypeRowChangeEventArgs(((HolidayTypeRow)(e.Row)), e.Action));
				}
			}
		}
		
		/// <summary>
		/// The Image table.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public partial class ImageDataTable : global::System.Data.TypedTableBase<DataModel.ImageRow>
		{
			
			private global::System.Data.DataColumn columnExternalId0;
			
			private global::System.Data.DataColumn columnImage;
			
			private global::System.Data.DataColumn columnImageId;
			
			private global::System.Data.DataColumn columnRowVersion;
			
			private global::Teraque.DataIndexCollection dataIndices;
			
			private global::Teraque.DataIndex indexImageKey;
			
			private global::Teraque.DataIndex indexImageKeyExternalId0;
			
			private global::System.Data.DataRelation relationImageEntity;
			
			private global::System.Data.DataRelation relationImageType;
			
			/// <summary>
			/// Creates the Image table.
			/// </summary>
			internal ImageDataTable()
			{
				// Initialize the object.
				this.TableName = "Image";
				this.dataIndices = new global::Teraque.DataIndexCollection();
				// The ExternalId0 Column
				this.columnExternalId0 = new global::System.Data.DataColumn("ExternalId0", typeof(string), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnExternalId0);
				// The Image Column
				this.columnImage = new global::System.Data.DataColumn("Image", typeof(string), null, global::System.Data.MappingType.Element);
				this.columnImage.AllowDBNull = false;
				this.columnImage.DefaultValue = "";
				this.Columns.Add(this.columnImage);
				// The ImageId Column
				this.columnImageId = new global::System.Data.DataColumn("ImageId", typeof(System.Guid), null, global::System.Data.MappingType.Element);
				this.columnImageId.AllowDBNull = false;
				this.Columns.Add(this.columnImageId);
				// The RowVersion Column
				this.columnRowVersion = new global::System.Data.DataColumn("RowVersion", typeof(long), null, global::System.Data.MappingType.Element);
				this.columnRowVersion.AllowDBNull = false;
				this.Columns.Add(this.columnRowVersion);
				// The ImageKey Index
				this.indexImageKey = new ImageKeyIndex("ImageKey", new global::System.Data.DataColumn[] {
							this.columnImageId});
				this.Indices.Add(this.indexImageKey);
				// The ImageKeyExternalId0 Index
				this.indexImageKeyExternalId0 = new ImageKeyExternalId0Index("ImageKeyExternalId0", new global::System.Data.DataColumn[] {
							this.columnExternalId0});
				this.Indices.Add(this.indexImageKeyExternalId0);
			}
			
			/// <summary>
			/// Gets the number of rows in the Image table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public int Count
			{
				get
				{
					return this.Rows.Count;
				}
			}
			
			/// <summary>
			/// Gets the ExternalId0 column of the Image table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn ExternalId0Column
			{
				get
				{
					return this.columnExternalId0;
				}
			}
			
			/// <summary>
			/// Gets the Image column of the Image table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn ImageColumn
			{
				get
				{
					return this.columnImage;
				}
			}
			
			/// <summary>
			/// Gets the child relation between the Image and Entity tables.
			/// </summary>
			internal global::System.Data.DataRelation ImageEntityRelation
			{
				get
				{
					return this.relationImageEntity;
				}
			}
			
			/// <summary>
			/// Gets the ImageId column of the Image table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn ImageIdColumn
			{
				get
				{
					return this.columnImageId;
				}
			}
			
			/// <summary>
			/// Gets the ImageKey index on the Image table.
			/// </summary>
			public ImageKeyIndex ImageKey
			{
				get
				{
					return ((ImageKeyIndex)(this.indexImageKey));
				}
			}
			
			/// <summary>
			/// Gets the ImageKeyExternalId0 index on the Image table.
			/// </summary>
			public ImageKeyExternalId0Index ImageKeyExternalId0
			{
				get
				{
					return ((ImageKeyExternalId0Index)(this.indexImageKeyExternalId0));
				}
			}
			
			/// <summary>
			/// Gets the child relation between the Image and Type tables.
			/// </summary>
			internal global::System.Data.DataRelation ImageTypeRelation
			{
				get
				{
					return this.relationImageType;
				}
			}
			
			/// <summary>
			/// Gets a collection of Teraque.DataModelGenerator.DataIndices on a table.
			/// </summary>
			public global::Teraque.DataIndexCollection Indices
			{
				get
				{
					return this.dataIndices;
				}
			}
			
			/// <summary>
			/// Indexer to a row in the Image table.
			/// </summary>
			/// <param name="index">The integer index of the row.</param>
			/// <returns>The Image row found at the given index.</returns>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public DataModel.ImageRow this[int index]
			{
				get
				{
					return ((DataModel.ImageRow)(this.Rows[index]));
				}
			}
			
			/// <summary>
			/// Gets the RowVersion column of the Image table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn RowVersionColumn
			{
				get
				{
					return this.columnRowVersion;
				}
			}
			
			/// <summary>
			/// Occurs after a Image row has been changed successfully.
			/// </summary>
			public event ImageRowChangeEventHandler ImageRowChanged;
			
			/// <summary>
			/// Occurs when a Image row is changing.
			/// </summary>
			public event ImageRowChangeEventHandler ImageRowChanging;
			
			/// <summary>
			/// Occurs after a Image row in the table has been deleted.
			/// </summary>
			public event ImageRowChangeEventHandler ImageRowDeleted;
			
			/// <summary>
			/// Occurs before a Image row in the table is about to be deleted.
			/// </summary>
			public event ImageRowChangeEventHandler ImageRowDeleting;
			
			/// <summary>
			/// Returns the type of the row in a Image table.
			/// </summary>
			/// <returns>The ImageRow type.</returns>
			protected override global::System.Type GetRowType()
			{
				return typeof(ImageRow);
			}
			
			/// <summary>
			/// Initializes the relation fields with the parent and child relations.
			/// </summary>
			internal void InitializeRelations()
			{
				this.relationImageEntity = this.ChildRelations["FK_Image_Entity"];
				this.relationImageType = this.ChildRelations["FK_Image_Type"];
			}
			
			/// <summary>
			/// Initializes a new instance of a Image row.  Constructs a row from the builder.  Only for internal usage.
			/// </summary>
			/// <returns>A new row with the same schema as the table.</returns>
			protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder dataRowBuilder)
			{
				return new ImageRow(dataRowBuilder);
			}
			
			/// <summary>
			/// Raises the ImageRowChanged event.
			/// </summary>
			/// <param name="e">Provides data for the ImageRow changing and deleting events.</param>
			protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowChanged(e);
				if ((this.ImageRowChanged != null))
				{
					this.ImageRowChanged(this, new ImageRowChangeEventArgs(((ImageRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the ImageRowChanging event.
			/// </summary>
			/// <param name="e">Provides data for the ImageRow changing and deleting events.</param>
			protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowChanging(e);
				if ((this.ImageRowChanging != null))
				{
					this.ImageRowChanging(this, new ImageRowChangeEventArgs(((ImageRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the ImageRowDeleted event.
			/// </summary>
			/// <param name="e">Provides data for the ImageRow changing and deleting events.</param>
			protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowDeleted(e);
				if ((this.ImageRowDeleted != null))
				{
					this.ImageRowDeleted(this, new ImageRowChangeEventArgs(((ImageRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the ImageRowDeleting event.
			/// </summary>
			/// <param name="e">Provides data for the ImageRow changing and deleting events.</param>
			protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowDeleting(e);
				if ((this.ImageRowDeleting != null))
				{
					this.ImageRowDeleting(this, new ImageRowChangeEventArgs(((ImageRow)(e.Row)), e.Action));
				}
			}
		}
		
		/// <summary>
		/// The Industry table.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public partial class IndustryDataTable : global::System.Data.TypedTableBase<DataModel.IndustryRow>
		{
			
			private global::System.Data.DataColumn columnExternalId0;
			
			private global::System.Data.DataColumn columnExternalId1;
			
			private global::System.Data.DataColumn columnIndustryClassificationId;
			
			private global::System.Data.DataColumn columnIndustryId;
			
			private global::System.Data.DataColumn columnMnemonic;
			
			private global::System.Data.DataColumn columnName;
			
			private global::System.Data.DataColumn columnRowVersion;
			
			private global::Teraque.DataIndexCollection dataIndices;
			
			private global::Teraque.DataIndex indexIndustryKey;
			
			private global::Teraque.DataIndex indexIndustryKeyExternalId0;
			
			private global::Teraque.DataIndex indexIndustryKeyExternalId1;
			
			private global::System.Data.DataRelation relationIndustryClassificationIndustry;
			
			private global::System.Data.DataRelation relationIndustryIndustryLeaf;
			
			private global::System.Data.DataRelation relationIndustryIndustryTreeByFK_Industry_IndustryTree_ChildId;
			
			private global::System.Data.DataRelation relationIndustryIndustryTreeByFK_Industry_IndustryTree_ParentId;
			
			/// <summary>
			/// Creates the Industry table.
			/// </summary>
			internal IndustryDataTable()
			{
				// Initialize the object.
				this.TableName = "Industry";
				this.dataIndices = new global::Teraque.DataIndexCollection();
				// The ExternalId0 Column
				this.columnExternalId0 = new global::System.Data.DataColumn("ExternalId0", typeof(string), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnExternalId0);
				// The ExternalId1 Column
				this.columnExternalId1 = new global::System.Data.DataColumn("ExternalId1", typeof(string), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnExternalId1);
				// The IndustryClassificationId Column
				this.columnIndustryClassificationId = new global::System.Data.DataColumn("IndustryClassificationId", typeof(System.Guid), null, global::System.Data.MappingType.Element);
				this.columnIndustryClassificationId.AllowDBNull = false;
				this.Columns.Add(this.columnIndustryClassificationId);
				// The IndustryId Column
				this.columnIndustryId = new global::System.Data.DataColumn("IndustryId", typeof(System.Guid), null, global::System.Data.MappingType.Element);
				this.columnIndustryId.AllowDBNull = false;
				this.Columns.Add(this.columnIndustryId);
				// The Mnemonic Column
				this.columnMnemonic = new global::System.Data.DataColumn("Mnemonic", typeof(string), null, global::System.Data.MappingType.Element);
				this.columnMnemonic.AllowDBNull = false;
				this.columnMnemonic.DefaultValue = "";
				this.Columns.Add(this.columnMnemonic);
				// The Name Column
				this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Element);
				this.columnName.AllowDBNull = false;
				this.columnName.DefaultValue = "";
				this.Columns.Add(this.columnName);
				// The RowVersion Column
				this.columnRowVersion = new global::System.Data.DataColumn("RowVersion", typeof(long), null, global::System.Data.MappingType.Element);
				this.columnRowVersion.AllowDBNull = false;
				this.Columns.Add(this.columnRowVersion);
				// The IndustryKey Index
				this.indexIndustryKey = new IndustryKeyIndex("IndustryKey", new global::System.Data.DataColumn[] {
							this.columnIndustryId});
				this.Indices.Add(this.indexIndustryKey);
				// The IndustryKeyExternalId0 Index
				this.indexIndustryKeyExternalId0 = new IndustryKeyExternalId0Index("IndustryKeyExternalId0", new global::System.Data.DataColumn[] {
							this.columnExternalId0});
				this.Indices.Add(this.indexIndustryKeyExternalId0);
				// The IndustryKeyExternalId1 Index
				this.indexIndustryKeyExternalId1 = new IndustryKeyExternalId1Index("IndustryKeyExternalId1", new global::System.Data.DataColumn[] {
							this.columnExternalId1});
				this.Indices.Add(this.indexIndustryKeyExternalId1);
			}
			
			/// <summary>
			/// Gets the number of rows in the Industry table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public int Count
			{
				get
				{
					return this.Rows.Count;
				}
			}
			
			/// <summary>
			/// Gets the ExternalId0 column of the Industry table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn ExternalId0Column
			{
				get
				{
					return this.columnExternalId0;
				}
			}
			
			/// <summary>
			/// Gets the ExternalId1 column of the Industry table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn ExternalId1Column
			{
				get
				{
					return this.columnExternalId1;
				}
			}
			
			/// <summary>
			/// Gets a collection of Teraque.DataModelGenerator.DataIndices on a table.
			/// </summary>
			public global::Teraque.DataIndexCollection Indices
			{
				get
				{
					return this.dataIndices;
				}
			}
			
			/// <summary>
			/// Gets the IndustryClassificationId column of the Industry table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn IndustryClassificationIdColumn
			{
				get
				{
					return this.columnIndustryClassificationId;
				}
			}
			
			/// <summary>
			/// Gets the parent relation between the IndustryClassification and Industry tables.
			/// </summary>
			public global::System.Data.DataRelation IndustryClassificationIndustryRelation
			{
				get
				{
					return this.relationIndustryClassificationIndustry;
				}
			}
			
			/// <summary>
			/// Gets the IndustryId column of the Industry table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn IndustryIdColumn
			{
				get
				{
					return this.columnIndustryId;
				}
			}
			
			/// <summary>
			/// Gets the child relation between the Industry and IndustryLeaf tables.
			/// </summary>
			internal global::System.Data.DataRelation IndustryIndustryLeafRelation
			{
				get
				{
					return this.relationIndustryIndustryLeaf;
				}
			}
			
			/// <summary>
			/// Gets the child relation between the Industry and IndustryTree tables.
			/// </summary>
			internal global::System.Data.DataRelation IndustryIndustryTreeByFK_Industry_IndustryTree_ChildIdRelation
			{
				get
				{
					return this.relationIndustryIndustryTreeByFK_Industry_IndustryTree_ChildId;
				}
			}
			
			/// <summary>
			/// Gets the child relation between the Industry and IndustryTree tables.
			/// </summary>
			internal global::System.Data.DataRelation IndustryIndustryTreeByFK_Industry_IndustryTree_ParentIdRelation
			{
				get
				{
					return this.relationIndustryIndustryTreeByFK_Industry_IndustryTree_ParentId;
				}
			}
			
			/// <summary>
			/// Gets the IndustryKey index on the Industry table.
			/// </summary>
			public IndustryKeyIndex IndustryKey
			{
				get
				{
					return ((IndustryKeyIndex)(this.indexIndustryKey));
				}
			}
			
			/// <summary>
			/// Gets the IndustryKeyExternalId0 index on the Industry table.
			/// </summary>
			public IndustryKeyExternalId0Index IndustryKeyExternalId0
			{
				get
				{
					return ((IndustryKeyExternalId0Index)(this.indexIndustryKeyExternalId0));
				}
			}
			
			/// <summary>
			/// Gets the IndustryKeyExternalId1 index on the Industry table.
			/// </summary>
			public IndustryKeyExternalId1Index IndustryKeyExternalId1
			{
				get
				{
					return ((IndustryKeyExternalId1Index)(this.indexIndustryKeyExternalId1));
				}
			}
			
			/// <summary>
			/// Indexer to a row in the Industry table.
			/// </summary>
			/// <param name="index">The integer index of the row.</param>
			/// <returns>The Industry row found at the given index.</returns>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public DataModel.IndustryRow this[int index]
			{
				get
				{
					return ((DataModel.IndustryRow)(this.Rows[index]));
				}
			}
			
			/// <summary>
			/// Gets the Mnemonic column of the Industry table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn MnemonicColumn
			{
				get
				{
					return this.columnMnemonic;
				}
			}
			
			/// <summary>
			/// Gets the Name column of the Industry table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn NameColumn
			{
				get
				{
					return this.columnName;
				}
			}
			
			/// <summary>
			/// Gets the RowVersion column of the Industry table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn RowVersionColumn
			{
				get
				{
					return this.columnRowVersion;
				}
			}
			
			/// <summary>
			/// Occurs after a Industry row has been changed successfully.
			/// </summary>
			public event IndustryRowChangeEventHandler IndustryRowChanged;
			
			/// <summary>
			/// Occurs when a Industry row is changing.
			/// </summary>
			public event IndustryRowChangeEventHandler IndustryRowChanging;
			
			/// <summary>
			/// Occurs after a Industry row in the table has been deleted.
			/// </summary>
			public event IndustryRowChangeEventHandler IndustryRowDeleted;
			
			/// <summary>
			/// Occurs before a Industry row in the table is about to be deleted.
			/// </summary>
			public event IndustryRowChangeEventHandler IndustryRowDeleting;
			
			/// <summary>
			/// Returns the type of the row in a Industry table.
			/// </summary>
			/// <returns>The IndustryRow type.</returns>
			protected override global::System.Type GetRowType()
			{
				return typeof(IndustryRow);
			}
			
			/// <summary>
			/// Initializes the relation fields with the parent and child relations.
			/// </summary>
			internal void InitializeRelations()
			{
				this.relationIndustryClassificationIndustry = this.ParentRelations["FK_IndustryClassification_Industry"];
				this.relationIndustryIndustryLeaf = this.ChildRelations["FK_Industry_IndustryLeaf_ParentId"];
				this.relationIndustryIndustryTreeByFK_Industry_IndustryTree_ChildId = this.ChildRelations["FK_Industry_IndustryTree_ChildId"];
				this.relationIndustryIndustryTreeByFK_Industry_IndustryTree_ParentId = this.ChildRelations["FK_Industry_IndustryTree_ParentId"];
			}
			
			/// <summary>
			/// Initializes a new instance of a Industry row.  Constructs a row from the builder.  Only for internal usage.
			/// </summary>
			/// <returns>A new row with the same schema as the table.</returns>
			protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder dataRowBuilder)
			{
				return new IndustryRow(dataRowBuilder);
			}
			
			/// <summary>
			/// Raises the IndustryRowChanged event.
			/// </summary>
			/// <param name="e">Provides data for the IndustryRow changing and deleting events.</param>
			protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowChanged(e);
				if ((this.IndustryRowChanged != null))
				{
					this.IndustryRowChanged(this, new IndustryRowChangeEventArgs(((IndustryRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the IndustryRowChanging event.
			/// </summary>
			/// <param name="e">Provides data for the IndustryRow changing and deleting events.</param>
			protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowChanging(e);
				if ((this.IndustryRowChanging != null))
				{
					this.IndustryRowChanging(this, new IndustryRowChangeEventArgs(((IndustryRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the IndustryRowDeleted event.
			/// </summary>
			/// <param name="e">Provides data for the IndustryRow changing and deleting events.</param>
			protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowDeleted(e);
				if ((this.IndustryRowDeleted != null))
				{
					this.IndustryRowDeleted(this, new IndustryRowChangeEventArgs(((IndustryRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the IndustryRowDeleting event.
			/// </summary>
			/// <param name="e">Provides data for the IndustryRow changing and deleting events.</param>
			protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowDeleting(e);
				if ((this.IndustryRowDeleting != null))
				{
					this.IndustryRowDeleting(this, new IndustryRowChangeEventArgs(((IndustryRow)(e.Row)), e.Action));
				}
			}
		}
		
		/// <summary>
		/// The IndustryClassification table.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public partial class IndustryClassificationDataTable : global::System.Data.TypedTableBase<DataModel.IndustryClassificationRow>
		{
			
			private global::System.Data.DataColumn columnExternalId0;
			
			private global::System.Data.DataColumn columnExternalId1;
			
			private global::System.Data.DataColumn columnIndustryClassificationId;
			
			private global::System.Data.DataColumn columnMnemonic;
			
			private global::System.Data.DataColumn columnName;
			
			private global::System.Data.DataColumn columnRowVersion;
			
			private global::Teraque.DataIndexCollection dataIndices;
			
			private global::Teraque.DataIndex indexIndustryClassificationKey;
			
			private global::Teraque.DataIndex indexIndustryClassificationKeyExternalId0;
			
			private global::Teraque.DataIndex indexIndustryClassificationKeyExternalId1;
			
			private global::System.Data.DataRelation relationIndustryClassificationIndustry;
			
			/// <summary>
			/// Creates the IndustryClassification table.
			/// </summary>
			internal IndustryClassificationDataTable()
			{
				// Initialize the object.
				this.TableName = "IndustryClassification";
				this.dataIndices = new global::Teraque.DataIndexCollection();
				// The ExternalId0 Column
				this.columnExternalId0 = new global::System.Data.DataColumn("ExternalId0", typeof(string), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnExternalId0);
				// The ExternalId1 Column
				this.columnExternalId1 = new global::System.Data.DataColumn("ExternalId1", typeof(string), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnExternalId1);
				// The IndustryClassificationId Column
				this.columnIndustryClassificationId = new global::System.Data.DataColumn("IndustryClassificationId", typeof(System.Guid), null, global::System.Data.MappingType.Element);
				this.columnIndustryClassificationId.AllowDBNull = false;
				this.Columns.Add(this.columnIndustryClassificationId);
				// The Mnemonic Column
				this.columnMnemonic = new global::System.Data.DataColumn("Mnemonic", typeof(string), null, global::System.Data.MappingType.Element);
				this.columnMnemonic.AllowDBNull = false;
				this.columnMnemonic.DefaultValue = "";
				this.Columns.Add(this.columnMnemonic);
				// The Name Column
				this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Element);
				this.columnName.AllowDBNull = false;
				this.columnName.DefaultValue = "";
				this.Columns.Add(this.columnName);
				// The RowVersion Column
				this.columnRowVersion = new global::System.Data.DataColumn("RowVersion", typeof(long), null, global::System.Data.MappingType.Element);
				this.columnRowVersion.AllowDBNull = false;
				this.Columns.Add(this.columnRowVersion);
				// The IndustryClassificationKey Index
				this.indexIndustryClassificationKey = new IndustryClassificationKeyIndex("IndustryClassificationKey", new global::System.Data.DataColumn[] {
							this.columnIndustryClassificationId});
				this.Indices.Add(this.indexIndustryClassificationKey);
				// The IndustryClassificationKeyExternalId0 Index
				this.indexIndustryClassificationKeyExternalId0 = new IndustryClassificationKeyExternalId0Index("IndustryClassificationKeyExternalId0", new global::System.Data.DataColumn[] {
							this.columnExternalId0});
				this.Indices.Add(this.indexIndustryClassificationKeyExternalId0);
				// The IndustryClassificationKeyExternalId1 Index
				this.indexIndustryClassificationKeyExternalId1 = new IndustryClassificationKeyExternalId1Index("IndustryClassificationKeyExternalId1", new global::System.Data.DataColumn[] {
							this.columnExternalId1});
				this.Indices.Add(this.indexIndustryClassificationKeyExternalId1);
			}
			
			/// <summary>
			/// Gets the number of rows in the IndustryClassification table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public int Count
			{
				get
				{
					return this.Rows.Count;
				}
			}
			
			/// <summary>
			/// Gets the ExternalId0 column of the IndustryClassification table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn ExternalId0Column
			{
				get
				{
					return this.columnExternalId0;
				}
			}
			
			/// <summary>
			/// Gets the ExternalId1 column of the IndustryClassification table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn ExternalId1Column
			{
				get
				{
					return this.columnExternalId1;
				}
			}
			
			/// <summary>
			/// Gets a collection of Teraque.DataModelGenerator.DataIndices on a table.
			/// </summary>
			public global::Teraque.DataIndexCollection Indices
			{
				get
				{
					return this.dataIndices;
				}
			}
			
			/// <summary>
			/// Gets the IndustryClassificationId column of the IndustryClassification table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn IndustryClassificationIdColumn
			{
				get
				{
					return this.columnIndustryClassificationId;
				}
			}
			
			/// <summary>
			/// Gets the child relation between the IndustryClassification and Industry tables.
			/// </summary>
			internal global::System.Data.DataRelation IndustryClassificationIndustryRelation
			{
				get
				{
					return this.relationIndustryClassificationIndustry;
				}
			}
			
			/// <summary>
			/// Gets the IndustryClassificationKey index on the IndustryClassification table.
			/// </summary>
			public IndustryClassificationKeyIndex IndustryClassificationKey
			{
				get
				{
					return ((IndustryClassificationKeyIndex)(this.indexIndustryClassificationKey));
				}
			}
			
			/// <summary>
			/// Gets the IndustryClassificationKeyExternalId0 index on the IndustryClassification table.
			/// </summary>
			public IndustryClassificationKeyExternalId0Index IndustryClassificationKeyExternalId0
			{
				get
				{
					return ((IndustryClassificationKeyExternalId0Index)(this.indexIndustryClassificationKeyExternalId0));
				}
			}
			
			/// <summary>
			/// Gets the IndustryClassificationKeyExternalId1 index on the IndustryClassification table.
			/// </summary>
			public IndustryClassificationKeyExternalId1Index IndustryClassificationKeyExternalId1
			{
				get
				{
					return ((IndustryClassificationKeyExternalId1Index)(this.indexIndustryClassificationKeyExternalId1));
				}
			}
			
			/// <summary>
			/// Indexer to a row in the IndustryClassification table.
			/// </summary>
			/// <param name="index">The integer index of the row.</param>
			/// <returns>The IndustryClassification row found at the given index.</returns>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public DataModel.IndustryClassificationRow this[int index]
			{
				get
				{
					return ((DataModel.IndustryClassificationRow)(this.Rows[index]));
				}
			}
			
			/// <summary>
			/// Gets the Mnemonic column of the IndustryClassification table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn MnemonicColumn
			{
				get
				{
					return this.columnMnemonic;
				}
			}
			
			/// <summary>
			/// Gets the Name column of the IndustryClassification table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn NameColumn
			{
				get
				{
					return this.columnName;
				}
			}
			
			/// <summary>
			/// Gets the RowVersion column of the IndustryClassification table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn RowVersionColumn
			{
				get
				{
					return this.columnRowVersion;
				}
			}
			
			/// <summary>
			/// Occurs after a IndustryClassification row has been changed successfully.
			/// </summary>
			public event IndustryClassificationRowChangeEventHandler IndustryClassificationRowChanged;
			
			/// <summary>
			/// Occurs when a IndustryClassification row is changing.
			/// </summary>
			public event IndustryClassificationRowChangeEventHandler IndustryClassificationRowChanging;
			
			/// <summary>
			/// Occurs after a IndustryClassification row in the table has been deleted.
			/// </summary>
			public event IndustryClassificationRowChangeEventHandler IndustryClassificationRowDeleted;
			
			/// <summary>
			/// Occurs before a IndustryClassification row in the table is about to be deleted.
			/// </summary>
			public event IndustryClassificationRowChangeEventHandler IndustryClassificationRowDeleting;
			
			/// <summary>
			/// Returns the type of the row in a IndustryClassification table.
			/// </summary>
			/// <returns>The IndustryClassificationRow type.</returns>
			protected override global::System.Type GetRowType()
			{
				return typeof(IndustryClassificationRow);
			}
			
			/// <summary>
			/// Initializes the relation fields with the parent and child relations.
			/// </summary>
			internal void InitializeRelations()
			{
				this.relationIndustryClassificationIndustry = this.ChildRelations["FK_IndustryClassification_Industry"];
			}
			
			/// <summary>
			/// Initializes a new instance of a IndustryClassification row.  Constructs a row from the builder.  Only for internal usage.
			/// </summary>
			/// <returns>A new row with the same schema as the table.</returns>
			protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder dataRowBuilder)
			{
				return new IndustryClassificationRow(dataRowBuilder);
			}
			
			/// <summary>
			/// Raises the IndustryClassificationRowChanged event.
			/// </summary>
			/// <param name="e">Provides data for the IndustryClassificationRow changing and deleting events.</param>
			protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowChanged(e);
				if ((this.IndustryClassificationRowChanged != null))
				{
					this.IndustryClassificationRowChanged(this, new IndustryClassificationRowChangeEventArgs(((IndustryClassificationRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the IndustryClassificationRowChanging event.
			/// </summary>
			/// <param name="e">Provides data for the IndustryClassificationRow changing and deleting events.</param>
			protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowChanging(e);
				if ((this.IndustryClassificationRowChanging != null))
				{
					this.IndustryClassificationRowChanging(this, new IndustryClassificationRowChangeEventArgs(((IndustryClassificationRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the IndustryClassificationRowDeleted event.
			/// </summary>
			/// <param name="e">Provides data for the IndustryClassificationRow changing and deleting events.</param>
			protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowDeleted(e);
				if ((this.IndustryClassificationRowDeleted != null))
				{
					this.IndustryClassificationRowDeleted(this, new IndustryClassificationRowChangeEventArgs(((IndustryClassificationRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the IndustryClassificationRowDeleting event.
			/// </summary>
			/// <param name="e">Provides data for the IndustryClassificationRow changing and deleting events.</param>
			protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowDeleting(e);
				if ((this.IndustryClassificationRowDeleting != null))
				{
					this.IndustryClassificationRowDeleting(this, new IndustryClassificationRowChangeEventArgs(((IndustryClassificationRow)(e.Row)), e.Action));
				}
			}
		}
		
		/// <summary>
		/// The IndustryLeaf table.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public partial class IndustryLeafDataTable : global::System.Data.TypedTableBase<DataModel.IndustryLeafRow>
		{
			
			private global::System.Data.DataColumn columnExternalId0;
			
			private global::System.Data.DataColumn columnExternalId1;
			
			private global::System.Data.DataColumn columnIndustryLeafId;
			
			private global::System.Data.DataColumn columnParentId;
			
			private global::System.Data.DataColumn columnRowVersion;
			
			private global::System.Data.DataColumn columnSecurityId;
			
			private global::Teraque.DataIndexCollection dataIndices;
			
			private global::Teraque.DataIndex indexIndustryLeafKey;
			
			private global::Teraque.DataIndex indexIndustryLeafKeyExternalId0;
			
			private global::Teraque.DataIndex indexIndustryLeafKeyExternalId1;
			
			private global::System.Data.DataRelation relationIndustryIndustryLeaf;
			
			private global::System.Data.DataRelation relationSecurityIndustryLeaf;
			
			/// <summary>
			/// Creates the IndustryLeaf table.
			/// </summary>
			internal IndustryLeafDataTable()
			{
				// Initialize the object.
				this.TableName = "IndustryLeaf";
				this.dataIndices = new global::Teraque.DataIndexCollection();
				// The ExternalId0 Column
				this.columnExternalId0 = new global::System.Data.DataColumn("ExternalId0", typeof(string), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnExternalId0);
				// The ExternalId1 Column
				this.columnExternalId1 = new global::System.Data.DataColumn("ExternalId1", typeof(string), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnExternalId1);
				// The IndustryLeafId Column
				this.columnIndustryLeafId = new global::System.Data.DataColumn("IndustryLeafId", typeof(System.Guid), null, global::System.Data.MappingType.Element);
				this.columnIndustryLeafId.AllowDBNull = false;
				this.Columns.Add(this.columnIndustryLeafId);
				// The ParentId Column
				this.columnParentId = new global::System.Data.DataColumn("ParentId", typeof(System.Guid), null, global::System.Data.MappingType.Element);
				this.columnParentId.AllowDBNull = false;
				this.Columns.Add(this.columnParentId);
				// The RowVersion Column
				this.columnRowVersion = new global::System.Data.DataColumn("RowVersion", typeof(long), null, global::System.Data.MappingType.Element);
				this.columnRowVersion.AllowDBNull = false;
				this.Columns.Add(this.columnRowVersion);
				// The SecurityId Column
				this.columnSecurityId = new global::System.Data.DataColumn("SecurityId", typeof(System.Guid), null, global::System.Data.MappingType.Element);
				this.columnSecurityId.AllowDBNull = false;
				this.Columns.Add(this.columnSecurityId);
				// The IndustryLeafKey Index
				this.indexIndustryLeafKey = new IndustryLeafKeyIndex("IndustryLeafKey", new global::System.Data.DataColumn[] {
							this.columnIndustryLeafId});
				this.Indices.Add(this.indexIndustryLeafKey);
				// The IndustryLeafKeyExternalId0 Index
				this.indexIndustryLeafKeyExternalId0 = new IndustryLeafKeyExternalId0Index("IndustryLeafKeyExternalId0", new global::System.Data.DataColumn[] {
							this.columnExternalId0});
				this.Indices.Add(this.indexIndustryLeafKeyExternalId0);
				// The IndustryLeafKeyExternalId1 Index
				this.indexIndustryLeafKeyExternalId1 = new IndustryLeafKeyExternalId1Index("IndustryLeafKeyExternalId1", new global::System.Data.DataColumn[] {
							this.columnExternalId1});
				this.Indices.Add(this.indexIndustryLeafKeyExternalId1);
			}
			
			/// <summary>
			/// Gets the number of rows in the IndustryLeaf table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public int Count
			{
				get
				{
					return this.Rows.Count;
				}
			}
			
			/// <summary>
			/// Gets the ExternalId0 column of the IndustryLeaf table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn ExternalId0Column
			{
				get
				{
					return this.columnExternalId0;
				}
			}
			
			/// <summary>
			/// Gets the ExternalId1 column of the IndustryLeaf table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn ExternalId1Column
			{
				get
				{
					return this.columnExternalId1;
				}
			}
			
			/// <summary>
			/// Gets a collection of Teraque.DataModelGenerator.DataIndices on a table.
			/// </summary>
			public global::Teraque.DataIndexCollection Indices
			{
				get
				{
					return this.dataIndices;
				}
			}
			
			/// <summary>
			/// Gets the parent relation between the Industry and IndustryLeaf tables.
			/// </summary>
			public global::System.Data.DataRelation IndustryIndustryLeafRelation
			{
				get
				{
					return this.relationIndustryIndustryLeaf;
				}
			}
			
			/// <summary>
			/// Gets the IndustryLeafId column of the IndustryLeaf table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn IndustryLeafIdColumn
			{
				get
				{
					return this.columnIndustryLeafId;
				}
			}
			
			/// <summary>
			/// Gets the IndustryLeafKey index on the IndustryLeaf table.
			/// </summary>
			public IndustryLeafKeyIndex IndustryLeafKey
			{
				get
				{
					return ((IndustryLeafKeyIndex)(this.indexIndustryLeafKey));
				}
			}
			
			/// <summary>
			/// Gets the IndustryLeafKeyExternalId0 index on the IndustryLeaf table.
			/// </summary>
			public IndustryLeafKeyExternalId0Index IndustryLeafKeyExternalId0
			{
				get
				{
					return ((IndustryLeafKeyExternalId0Index)(this.indexIndustryLeafKeyExternalId0));
				}
			}
			
			/// <summary>
			/// Gets the IndustryLeafKeyExternalId1 index on the IndustryLeaf table.
			/// </summary>
			public IndustryLeafKeyExternalId1Index IndustryLeafKeyExternalId1
			{
				get
				{
					return ((IndustryLeafKeyExternalId1Index)(this.indexIndustryLeafKeyExternalId1));
				}
			}
			
			/// <summary>
			/// Indexer to a row in the IndustryLeaf table.
			/// </summary>
			/// <param name="index">The integer index of the row.</param>
			/// <returns>The IndustryLeaf row found at the given index.</returns>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public DataModel.IndustryLeafRow this[int index]
			{
				get
				{
					return ((DataModel.IndustryLeafRow)(this.Rows[index]));
				}
			}
			
			/// <summary>
			/// Gets the ParentId column of the IndustryLeaf table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn ParentIdColumn
			{
				get
				{
					return this.columnParentId;
				}
			}
			
			/// <summary>
			/// Gets the RowVersion column of the IndustryLeaf table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn RowVersionColumn
			{
				get
				{
					return this.columnRowVersion;
				}
			}
			
			/// <summary>
			/// Gets the SecurityId column of the IndustryLeaf table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn SecurityIdColumn
			{
				get
				{
					return this.columnSecurityId;
				}
			}
			
			/// <summary>
			/// Gets the parent relation between the Security and IndustryLeaf tables.
			/// </summary>
			public global::System.Data.DataRelation SecurityIndustryLeafRelation
			{
				get
				{
					return this.relationSecurityIndustryLeaf;
				}
			}
			
			/// <summary>
			/// Occurs after a IndustryLeaf row has been changed successfully.
			/// </summary>
			public event IndustryLeafRowChangeEventHandler IndustryLeafRowChanged;
			
			/// <summary>
			/// Occurs when a IndustryLeaf row is changing.
			/// </summary>
			public event IndustryLeafRowChangeEventHandler IndustryLeafRowChanging;
			
			/// <summary>
			/// Occurs after a IndustryLeaf row in the table has been deleted.
			/// </summary>
			public event IndustryLeafRowChangeEventHandler IndustryLeafRowDeleted;
			
			/// <summary>
			/// Occurs before a IndustryLeaf row in the table is about to be deleted.
			/// </summary>
			public event IndustryLeafRowChangeEventHandler IndustryLeafRowDeleting;
			
			/// <summary>
			/// Returns the type of the row in a IndustryLeaf table.
			/// </summary>
			/// <returns>The IndustryLeafRow type.</returns>
			protected override global::System.Type GetRowType()
			{
				return typeof(IndustryLeafRow);
			}
			
			/// <summary>
			/// Initializes the relation fields with the parent and child relations.
			/// </summary>
			internal void InitializeRelations()
			{
				this.relationIndustryIndustryLeaf = this.ParentRelations["FK_Industry_IndustryLeaf_ParentId"];
				this.relationSecurityIndustryLeaf = this.ParentRelations["FK_Security_IndustryLeaf_SecurityId"];
			}
			
			/// <summary>
			/// Initializes a new instance of a IndustryLeaf row.  Constructs a row from the builder.  Only for internal usage.
			/// </summary>
			/// <returns>A new row with the same schema as the table.</returns>
			protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder dataRowBuilder)
			{
				return new IndustryLeafRow(dataRowBuilder);
			}
			
			/// <summary>
			/// Raises the IndustryLeafRowChanged event.
			/// </summary>
			/// <param name="e">Provides data for the IndustryLeafRow changing and deleting events.</param>
			protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowChanged(e);
				if ((this.IndustryLeafRowChanged != null))
				{
					this.IndustryLeafRowChanged(this, new IndustryLeafRowChangeEventArgs(((IndustryLeafRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the IndustryLeafRowChanging event.
			/// </summary>
			/// <param name="e">Provides data for the IndustryLeafRow changing and deleting events.</param>
			protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowChanging(e);
				if ((this.IndustryLeafRowChanging != null))
				{
					this.IndustryLeafRowChanging(this, new IndustryLeafRowChangeEventArgs(((IndustryLeafRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the IndustryLeafRowDeleted event.
			/// </summary>
			/// <param name="e">Provides data for the IndustryLeafRow changing and deleting events.</param>
			protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowDeleted(e);
				if ((this.IndustryLeafRowDeleted != null))
				{
					this.IndustryLeafRowDeleted(this, new IndustryLeafRowChangeEventArgs(((IndustryLeafRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the IndustryLeafRowDeleting event.
			/// </summary>
			/// <param name="e">Provides data for the IndustryLeafRow changing and deleting events.</param>
			protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowDeleting(e);
				if ((this.IndustryLeafRowDeleting != null))
				{
					this.IndustryLeafRowDeleting(this, new IndustryLeafRowChangeEventArgs(((IndustryLeafRow)(e.Row)), e.Action));
				}
			}
		}
		
		/// <summary>
		/// The IndustryTree table.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public partial class IndustryTreeDataTable : global::System.Data.TypedTableBase<DataModel.IndustryTreeRow>
		{
			
			private global::System.Data.DataColumn columnChildId;
			
			private global::System.Data.DataColumn columnExternalId0;
			
			private global::System.Data.DataColumn columnExternalId1;
			
			private global::System.Data.DataColumn columnIndustryTreeId;
			
			private global::System.Data.DataColumn columnParentId;
			
			private global::System.Data.DataColumn columnRowVersion;
			
			private global::Teraque.DataIndexCollection dataIndices;
			
			private global::Teraque.DataIndex indexIndustryTreeKey;
			
			private global::Teraque.DataIndex indexIndustryTreeKeyExternalId0;
			
			private global::Teraque.DataIndex indexIndustryTreeKeyExternalId1;
			
			private global::System.Data.DataRelation relationIndustryIndustryTreeByFK_Industry_IndustryTree_ChildId;
			
			private global::System.Data.DataRelation relationIndustryIndustryTreeByFK_Industry_IndustryTree_ParentId;
			
			/// <summary>
			/// Creates the IndustryTree table.
			/// </summary>
			internal IndustryTreeDataTable()
			{
				// Initialize the object.
				this.TableName = "IndustryTree";
				this.dataIndices = new global::Teraque.DataIndexCollection();
				// The ChildId Column
				this.columnChildId = new global::System.Data.DataColumn("ChildId", typeof(System.Guid), null, global::System.Data.MappingType.Element);
				this.columnChildId.AllowDBNull = false;
				this.Columns.Add(this.columnChildId);
				// The ExternalId0 Column
				this.columnExternalId0 = new global::System.Data.DataColumn("ExternalId0", typeof(string), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnExternalId0);
				// The ExternalId1 Column
				this.columnExternalId1 = new global::System.Data.DataColumn("ExternalId1", typeof(string), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnExternalId1);
				// The IndustryTreeId Column
				this.columnIndustryTreeId = new global::System.Data.DataColumn("IndustryTreeId", typeof(System.Guid), null, global::System.Data.MappingType.Element);
				this.columnIndustryTreeId.AllowDBNull = false;
				this.Columns.Add(this.columnIndustryTreeId);
				// The ParentId Column
				this.columnParentId = new global::System.Data.DataColumn("ParentId", typeof(System.Guid), null, global::System.Data.MappingType.Element);
				this.columnParentId.AllowDBNull = false;
				this.Columns.Add(this.columnParentId);
				// The RowVersion Column
				this.columnRowVersion = new global::System.Data.DataColumn("RowVersion", typeof(long), null, global::System.Data.MappingType.Element);
				this.columnRowVersion.AllowDBNull = false;
				this.Columns.Add(this.columnRowVersion);
				// The IndustryTreeKey Index
				this.indexIndustryTreeKey = new IndustryTreeKeyIndex("IndustryTreeKey", new global::System.Data.DataColumn[] {
							this.columnIndustryTreeId});
				this.Indices.Add(this.indexIndustryTreeKey);
				// The IndustryTreeKeyExternalId0 Index
				this.indexIndustryTreeKeyExternalId0 = new IndustryTreeKeyExternalId0Index("IndustryTreeKeyExternalId0", new global::System.Data.DataColumn[] {
							this.columnExternalId0});
				this.Indices.Add(this.indexIndustryTreeKeyExternalId0);
				// The IndustryTreeKeyExternalId1 Index
				this.indexIndustryTreeKeyExternalId1 = new IndustryTreeKeyExternalId1Index("IndustryTreeKeyExternalId1", new global::System.Data.DataColumn[] {
							this.columnExternalId1});
				this.Indices.Add(this.indexIndustryTreeKeyExternalId1);
			}
			
			/// <summary>
			/// Gets the ChildId column of the IndustryTree table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn ChildIdColumn
			{
				get
				{
					return this.columnChildId;
				}
			}
			
			/// <summary>
			/// Gets the number of rows in the IndustryTree table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public int Count
			{
				get
				{
					return this.Rows.Count;
				}
			}
			
			/// <summary>
			/// Gets the ExternalId0 column of the IndustryTree table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn ExternalId0Column
			{
				get
				{
					return this.columnExternalId0;
				}
			}
			
			/// <summary>
			/// Gets the ExternalId1 column of the IndustryTree table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn ExternalId1Column
			{
				get
				{
					return this.columnExternalId1;
				}
			}
			
			/// <summary>
			/// Gets a collection of Teraque.DataModelGenerator.DataIndices on a table.
			/// </summary>
			public global::Teraque.DataIndexCollection Indices
			{
				get
				{
					return this.dataIndices;
				}
			}
			
			/// <summary>
			/// Gets the parent relation between the Industry and IndustryTree tables.
			/// </summary>
			public global::System.Data.DataRelation IndustryIndustryTreeByFK_Industry_IndustryTree_ChildIdRelation
			{
				get
				{
					return this.relationIndustryIndustryTreeByFK_Industry_IndustryTree_ChildId;
				}
			}
			
			/// <summary>
			/// Gets the parent relation between the Industry and IndustryTree tables.
			/// </summary>
			public global::System.Data.DataRelation IndustryIndustryTreeByFK_Industry_IndustryTree_ParentIdRelation
			{
				get
				{
					return this.relationIndustryIndustryTreeByFK_Industry_IndustryTree_ParentId;
				}
			}
			
			/// <summary>
			/// Gets the IndustryTreeId column of the IndustryTree table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn IndustryTreeIdColumn
			{
				get
				{
					return this.columnIndustryTreeId;
				}
			}
			
			/// <summary>
			/// Gets the IndustryTreeKey index on the IndustryTree table.
			/// </summary>
			public IndustryTreeKeyIndex IndustryTreeKey
			{
				get
				{
					return ((IndustryTreeKeyIndex)(this.indexIndustryTreeKey));
				}
			}
			
			/// <summary>
			/// Gets the IndustryTreeKeyExternalId0 index on the IndustryTree table.
			/// </summary>
			public IndustryTreeKeyExternalId0Index IndustryTreeKeyExternalId0
			{
				get
				{
					return ((IndustryTreeKeyExternalId0Index)(this.indexIndustryTreeKeyExternalId0));
				}
			}
			
			/// <summary>
			/// Gets the IndustryTreeKeyExternalId1 index on the IndustryTree table.
			/// </summary>
			public IndustryTreeKeyExternalId1Index IndustryTreeKeyExternalId1
			{
				get
				{
					return ((IndustryTreeKeyExternalId1Index)(this.indexIndustryTreeKeyExternalId1));
				}
			}
			
			/// <summary>
			/// Indexer to a row in the IndustryTree table.
			/// </summary>
			/// <param name="index">The integer index of the row.</param>
			/// <returns>The IndustryTree row found at the given index.</returns>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public DataModel.IndustryTreeRow this[int index]
			{
				get
				{
					return ((DataModel.IndustryTreeRow)(this.Rows[index]));
				}
			}
			
			/// <summary>
			/// Gets the ParentId column of the IndustryTree table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn ParentIdColumn
			{
				get
				{
					return this.columnParentId;
				}
			}
			
			/// <summary>
			/// Gets the RowVersion column of the IndustryTree table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn RowVersionColumn
			{
				get
				{
					return this.columnRowVersion;
				}
			}
			
			/// <summary>
			/// Occurs after a IndustryTree row has been changed successfully.
			/// </summary>
			public event IndustryTreeRowChangeEventHandler IndustryTreeRowChanged;
			
			/// <summary>
			/// Occurs when a IndustryTree row is changing.
			/// </summary>
			public event IndustryTreeRowChangeEventHandler IndustryTreeRowChanging;
			
			/// <summary>
			/// Occurs after a IndustryTree row in the table has been deleted.
			/// </summary>
			public event IndustryTreeRowChangeEventHandler IndustryTreeRowDeleted;
			
			/// <summary>
			/// Occurs before a IndustryTree row in the table is about to be deleted.
			/// </summary>
			public event IndustryTreeRowChangeEventHandler IndustryTreeRowDeleting;
			
			/// <summary>
			/// Returns the type of the row in a IndustryTree table.
			/// </summary>
			/// <returns>The IndustryTreeRow type.</returns>
			protected override global::System.Type GetRowType()
			{
				return typeof(IndustryTreeRow);
			}
			
			/// <summary>
			/// Initializes the relation fields with the parent and child relations.
			/// </summary>
			internal void InitializeRelations()
			{
				this.relationIndustryIndustryTreeByFK_Industry_IndustryTree_ChildId = this.ParentRelations["FK_Industry_IndustryTree_ChildId"];
				this.relationIndustryIndustryTreeByFK_Industry_IndustryTree_ParentId = this.ParentRelations["FK_Industry_IndustryTree_ParentId"];
			}
			
			/// <summary>
			/// Initializes a new instance of a IndustryTree row.  Constructs a row from the builder.  Only for internal usage.
			/// </summary>
			/// <returns>A new row with the same schema as the table.</returns>
			protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder dataRowBuilder)
			{
				return new IndustryTreeRow(dataRowBuilder);
			}
			
			/// <summary>
			/// Raises the IndustryTreeRowChanged event.
			/// </summary>
			/// <param name="e">Provides data for the IndustryTreeRow changing and deleting events.</param>
			protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowChanged(e);
				if ((this.IndustryTreeRowChanged != null))
				{
					this.IndustryTreeRowChanged(this, new IndustryTreeRowChangeEventArgs(((IndustryTreeRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the IndustryTreeRowChanging event.
			/// </summary>
			/// <param name="e">Provides data for the IndustryTreeRow changing and deleting events.</param>
			protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowChanging(e);
				if ((this.IndustryTreeRowChanging != null))
				{
					this.IndustryTreeRowChanging(this, new IndustryTreeRowChangeEventArgs(((IndustryTreeRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the IndustryTreeRowDeleted event.
			/// </summary>
			/// <param name="e">Provides data for the IndustryTreeRow changing and deleting events.</param>
			protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowDeleted(e);
				if ((this.IndustryTreeRowDeleted != null))
				{
					this.IndustryTreeRowDeleted(this, new IndustryTreeRowChangeEventArgs(((IndustryTreeRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the IndustryTreeRowDeleting event.
			/// </summary>
			/// <param name="e">Provides data for the IndustryTreeRow changing and deleting events.</param>
			protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowDeleting(e);
				if ((this.IndustryTreeRowDeleting != null))
				{
					this.IndustryTreeRowDeleting(this, new IndustryTreeRowChangeEventArgs(((IndustryTreeRow)(e.Row)), e.Action));
				}
			}
		}
		
		/// <summary>
		/// The Institution table.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public partial class InstitutionDataTable : global::System.Data.TypedTableBase<DataModel.InstitutionRow>
		{
			
			private global::System.Data.DataColumn columnInstitutionId;
			
			private global::System.Data.DataColumn columnRowVersion;
			
			private global::Teraque.DataIndexCollection dataIndices;
			
			private global::Teraque.DataIndex indexInstitutionKey;
			
			private global::System.Data.DataRelation relationSourceInstitution;
			
			/// <summary>
			/// Creates the Institution table.
			/// </summary>
			internal InstitutionDataTable()
			{
				// Initialize the object.
				this.TableName = "Institution";
				this.dataIndices = new global::Teraque.DataIndexCollection();
				// The InstitutionId Column
				this.columnInstitutionId = new global::System.Data.DataColumn("InstitutionId", typeof(System.Guid), null, global::System.Data.MappingType.Element);
				this.columnInstitutionId.AllowDBNull = false;
				this.Columns.Add(this.columnInstitutionId);
				// The RowVersion Column
				this.columnRowVersion = new global::System.Data.DataColumn("RowVersion", typeof(long), null, global::System.Data.MappingType.Element);
				this.columnRowVersion.AllowDBNull = false;
				this.Columns.Add(this.columnRowVersion);
				// The InstitutionKey Index
				this.indexInstitutionKey = new InstitutionKeyIndex("InstitutionKey", new global::System.Data.DataColumn[] {
							this.columnInstitutionId});
				this.Indices.Add(this.indexInstitutionKey);
			}
			
			/// <summary>
			/// Gets the number of rows in the Institution table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public int Count
			{
				get
				{
					return this.Rows.Count;
				}
			}
			
			/// <summary>
			/// Gets a collection of Teraque.DataModelGenerator.DataIndices on a table.
			/// </summary>
			public global::Teraque.DataIndexCollection Indices
			{
				get
				{
					return this.dataIndices;
				}
			}
			
			/// <summary>
			/// Gets the InstitutionId column of the Institution table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn InstitutionIdColumn
			{
				get
				{
					return this.columnInstitutionId;
				}
			}
			
			/// <summary>
			/// Gets the InstitutionKey index on the Institution table.
			/// </summary>
			public InstitutionKeyIndex InstitutionKey
			{
				get
				{
					return ((InstitutionKeyIndex)(this.indexInstitutionKey));
				}
			}
			
			/// <summary>
			/// Indexer to a row in the Institution table.
			/// </summary>
			/// <param name="index">The integer index of the row.</param>
			/// <returns>The Institution row found at the given index.</returns>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public DataModel.InstitutionRow this[int index]
			{
				get
				{
					return ((DataModel.InstitutionRow)(this.Rows[index]));
				}
			}
			
			/// <summary>
			/// Gets the RowVersion column of the Institution table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn RowVersionColumn
			{
				get
				{
					return this.columnRowVersion;
				}
			}
			
			/// <summary>
			/// Gets the parent relation between the Source and Institution tables.
			/// </summary>
			public global::System.Data.DataRelation SourceInstitutionRelation
			{
				get
				{
					return this.relationSourceInstitution;
				}
			}
			
			/// <summary>
			/// Occurs after a Institution row has been changed successfully.
			/// </summary>
			public event InstitutionRowChangeEventHandler InstitutionRowChanged;
			
			/// <summary>
			/// Occurs when a Institution row is changing.
			/// </summary>
			public event InstitutionRowChangeEventHandler InstitutionRowChanging;
			
			/// <summary>
			/// Occurs after a Institution row in the table has been deleted.
			/// </summary>
			public event InstitutionRowChangeEventHandler InstitutionRowDeleted;
			
			/// <summary>
			/// Occurs before a Institution row in the table is about to be deleted.
			/// </summary>
			public event InstitutionRowChangeEventHandler InstitutionRowDeleting;
			
			/// <summary>
			/// Returns the type of the row in a Institution table.
			/// </summary>
			/// <returns>The InstitutionRow type.</returns>
			protected override global::System.Type GetRowType()
			{
				return typeof(InstitutionRow);
			}
			
			/// <summary>
			/// Initializes the relation fields with the parent and child relations.
			/// </summary>
			internal void InitializeRelations()
			{
				this.relationSourceInstitution = this.ParentRelations["FK_Source_Institution"];
			}
			
			/// <summary>
			/// Initializes a new instance of a Institution row.  Constructs a row from the builder.  Only for internal usage.
			/// </summary>
			/// <returns>A new row with the same schema as the table.</returns>
			protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder dataRowBuilder)
			{
				return new InstitutionRow(dataRowBuilder);
			}
			
			/// <summary>
			/// Raises the InstitutionRowChanged event.
			/// </summary>
			/// <param name="e">Provides data for the InstitutionRow changing and deleting events.</param>
			protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowChanged(e);
				if ((this.InstitutionRowChanged != null))
				{
					this.InstitutionRowChanged(this, new InstitutionRowChangeEventArgs(((InstitutionRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the InstitutionRowChanging event.
			/// </summary>
			/// <param name="e">Provides data for the InstitutionRow changing and deleting events.</param>
			protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowChanging(e);
				if ((this.InstitutionRowChanging != null))
				{
					this.InstitutionRowChanging(this, new InstitutionRowChangeEventArgs(((InstitutionRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the InstitutionRowDeleted event.
			/// </summary>
			/// <param name="e">Provides data for the InstitutionRow changing and deleting events.</param>
			protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowDeleted(e);
				if ((this.InstitutionRowDeleted != null))
				{
					this.InstitutionRowDeleted(this, new InstitutionRowChangeEventArgs(((InstitutionRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the InstitutionRowDeleting event.
			/// </summary>
			/// <param name="e">Provides data for the InstitutionRow changing and deleting events.</param>
			protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowDeleting(e);
				if ((this.InstitutionRowDeleting != null))
				{
					this.InstitutionRowDeleting(this, new InstitutionRowChangeEventArgs(((InstitutionRow)(e.Row)), e.Action));
				}
			}
		}
		
		/// <summary>
		/// The Issuer table.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public partial class IssuerDataTable : global::System.Data.TypedTableBase<DataModel.IssuerRow>
		{
			
			private global::System.Data.DataColumn columnIssuerId;
			
			private global::System.Data.DataColumn columnRowVersion;
			
			private global::Teraque.DataIndexCollection dataIndices;
			
			private global::Teraque.DataIndex indexIssuerKey;
			
			private global::System.Data.DataRelation relationEntityIssuer;
			
			private global::System.Data.DataRelation relationIssuerSecurity;
			
			/// <summary>
			/// Creates the Issuer table.
			/// </summary>
			internal IssuerDataTable()
			{
				// Initialize the object.
				this.TableName = "Issuer";
				this.dataIndices = new global::Teraque.DataIndexCollection();
				// The IssuerId Column
				this.columnIssuerId = new global::System.Data.DataColumn("IssuerId", typeof(System.Guid), null, global::System.Data.MappingType.Element);
				this.columnIssuerId.AllowDBNull = false;
				this.Columns.Add(this.columnIssuerId);
				// The RowVersion Column
				this.columnRowVersion = new global::System.Data.DataColumn("RowVersion", typeof(long), null, global::System.Data.MappingType.Element);
				this.columnRowVersion.AllowDBNull = false;
				this.Columns.Add(this.columnRowVersion);
				// The IssuerKey Index
				this.indexIssuerKey = new IssuerKeyIndex("IssuerKey", new global::System.Data.DataColumn[] {
							this.columnIssuerId});
				this.Indices.Add(this.indexIssuerKey);
			}
			
			/// <summary>
			/// Gets the number of rows in the Issuer table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public int Count
			{
				get
				{
					return this.Rows.Count;
				}
			}
			
			/// <summary>
			/// Gets the parent relation between the Entity and Issuer tables.
			/// </summary>
			public global::System.Data.DataRelation EntityIssuerRelation
			{
				get
				{
					return this.relationEntityIssuer;
				}
			}
			
			/// <summary>
			/// Gets a collection of Teraque.DataModelGenerator.DataIndices on a table.
			/// </summary>
			public global::Teraque.DataIndexCollection Indices
			{
				get
				{
					return this.dataIndices;
				}
			}
			
			/// <summary>
			/// Gets the IssuerId column of the Issuer table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn IssuerIdColumn
			{
				get
				{
					return this.columnIssuerId;
				}
			}
			
			/// <summary>
			/// Gets the IssuerKey index on the Issuer table.
			/// </summary>
			public IssuerKeyIndex IssuerKey
			{
				get
				{
					return ((IssuerKeyIndex)(this.indexIssuerKey));
				}
			}
			
			/// <summary>
			/// Gets the child relation between the Issuer and Security tables.
			/// </summary>
			internal global::System.Data.DataRelation IssuerSecurityRelation
			{
				get
				{
					return this.relationIssuerSecurity;
				}
			}
			
			/// <summary>
			/// Indexer to a row in the Issuer table.
			/// </summary>
			/// <param name="index">The integer index of the row.</param>
			/// <returns>The Issuer row found at the given index.</returns>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public DataModel.IssuerRow this[int index]
			{
				get
				{
					return ((DataModel.IssuerRow)(this.Rows[index]));
				}
			}
			
			/// <summary>
			/// Gets the RowVersion column of the Issuer table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn RowVersionColumn
			{
				get
				{
					return this.columnRowVersion;
				}
			}
			
			/// <summary>
			/// Occurs after a Issuer row has been changed successfully.
			/// </summary>
			public event IssuerRowChangeEventHandler IssuerRowChanged;
			
			/// <summary>
			/// Occurs when a Issuer row is changing.
			/// </summary>
			public event IssuerRowChangeEventHandler IssuerRowChanging;
			
			/// <summary>
			/// Occurs after a Issuer row in the table has been deleted.
			/// </summary>
			public event IssuerRowChangeEventHandler IssuerRowDeleted;
			
			/// <summary>
			/// Occurs before a Issuer row in the table is about to be deleted.
			/// </summary>
			public event IssuerRowChangeEventHandler IssuerRowDeleting;
			
			/// <summary>
			/// Returns the type of the row in a Issuer table.
			/// </summary>
			/// <returns>The IssuerRow type.</returns>
			protected override global::System.Type GetRowType()
			{
				return typeof(IssuerRow);
			}
			
			/// <summary>
			/// Initializes the relation fields with the parent and child relations.
			/// </summary>
			internal void InitializeRelations()
			{
				this.relationEntityIssuer = this.ParentRelations["FK_Entity_Issuer"];
				this.relationIssuerSecurity = this.ChildRelations["FK_Issuer_Security"];
			}
			
			/// <summary>
			/// Initializes a new instance of a Issuer row.  Constructs a row from the builder.  Only for internal usage.
			/// </summary>
			/// <returns>A new row with the same schema as the table.</returns>
			protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder dataRowBuilder)
			{
				return new IssuerRow(dataRowBuilder);
			}
			
			/// <summary>
			/// Raises the IssuerRowChanged event.
			/// </summary>
			/// <param name="e">Provides data for the IssuerRow changing and deleting events.</param>
			protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowChanged(e);
				if ((this.IssuerRowChanged != null))
				{
					this.IssuerRowChanged(this, new IssuerRowChangeEventArgs(((IssuerRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the IssuerRowChanging event.
			/// </summary>
			/// <param name="e">Provides data for the IssuerRow changing and deleting events.</param>
			protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowChanging(e);
				if ((this.IssuerRowChanging != null))
				{
					this.IssuerRowChanging(this, new IssuerRowChangeEventArgs(((IssuerRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the IssuerRowDeleted event.
			/// </summary>
			/// <param name="e">Provides data for the IssuerRow changing and deleting events.</param>
			protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowDeleted(e);
				if ((this.IssuerRowDeleted != null))
				{
					this.IssuerRowDeleted(this, new IssuerRowChangeEventArgs(((IssuerRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the IssuerRowDeleting event.
			/// </summary>
			/// <param name="e">Provides data for the IssuerRow changing and deleting events.</param>
			protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowDeleting(e);
				if ((this.IssuerRowDeleting != null))
				{
					this.IssuerRowDeleting(this, new IssuerRowChangeEventArgs(((IssuerRow)(e.Row)), e.Action));
				}
			}
		}
		
		/// <summary>
		/// The LotHandling table.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public partial class LotHandlingDataTable : global::System.Data.TypedTableBase<DataModel.LotHandlingRow>
		{
			
			private global::System.Data.DataColumn columnDescription;
			
			private global::System.Data.DataColumn columnExternalId0;
			
			private global::System.Data.DataColumn columnExternalId1;
			
			private global::System.Data.DataColumn columnExternalId2;
			
			private global::System.Data.DataColumn columnExternalId3;
			
			private global::System.Data.DataColumn columnLotHandlingCode;
			
			private global::System.Data.DataColumn columnMnemonic;
			
			private global::System.Data.DataColumn columnRowVersion;
			
			private global::Teraque.DataIndexCollection dataIndices;
			
			private global::Teraque.DataIndex indexLotHandlingKey;
			
			private global::Teraque.DataIndex indexLotHandlingKeyExternalId0;
			
			private global::Teraque.DataIndex indexLotHandlingKeyExternalId1;
			
			private global::Teraque.DataIndex indexLotHandlingKeyExternalId2;
			
			private global::Teraque.DataIndex indexLotHandlingKeyExternalId3;
			
			private global::System.Data.DataRelation relationLotHandlingSingleAccount;
			
			/// <summary>
			/// Creates the LotHandling table.
			/// </summary>
			internal LotHandlingDataTable()
			{
				// Initialize the object.
				this.TableName = "LotHandling";
				this.dataIndices = new global::Teraque.DataIndexCollection();
				// The Description Column
				this.columnDescription = new global::System.Data.DataColumn("Description", typeof(string), null, global::System.Data.MappingType.Element);
				this.columnDescription.AllowDBNull = false;
				this.columnDescription.DefaultValue = "";
				this.Columns.Add(this.columnDescription);
				// The ExternalId0 Column
				this.columnExternalId0 = new global::System.Data.DataColumn("ExternalId0", typeof(string), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnExternalId0);
				// The ExternalId1 Column
				this.columnExternalId1 = new global::System.Data.DataColumn("ExternalId1", typeof(string), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnExternalId1);
				// The ExternalId2 Column
				this.columnExternalId2 = new global::System.Data.DataColumn("ExternalId2", typeof(string), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnExternalId2);
				// The ExternalId3 Column
				this.columnExternalId3 = new global::System.Data.DataColumn("ExternalId3", typeof(string), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnExternalId3);
				// The LotHandlingCode Column
				this.columnLotHandlingCode = new global::System.Data.DataColumn("LotHandlingCode", typeof(Teraque.LotHandlingCode), null, global::System.Data.MappingType.Element);
				this.columnLotHandlingCode.AllowDBNull = false;
				this.Columns.Add(this.columnLotHandlingCode);
				// The Mnemonic Column
				this.columnMnemonic = new global::System.Data.DataColumn("Mnemonic", typeof(string), null, global::System.Data.MappingType.Element);
				this.columnMnemonic.AllowDBNull = false;
				this.columnMnemonic.DefaultValue = "";
				this.Columns.Add(this.columnMnemonic);
				// The RowVersion Column
				this.columnRowVersion = new global::System.Data.DataColumn("RowVersion", typeof(long), null, global::System.Data.MappingType.Element);
				this.columnRowVersion.AllowDBNull = false;
				this.Columns.Add(this.columnRowVersion);
				// The LotHandlingKey Index
				this.indexLotHandlingKey = new LotHandlingKeyIndex("LotHandlingKey", new global::System.Data.DataColumn[] {
							this.columnLotHandlingCode});
				this.Indices.Add(this.indexLotHandlingKey);
				// The LotHandlingKeyExternalId0 Index
				this.indexLotHandlingKeyExternalId0 = new LotHandlingKeyExternalId0Index("LotHandlingKeyExternalId0", new global::System.Data.DataColumn[] {
							this.columnExternalId0});
				this.Indices.Add(this.indexLotHandlingKeyExternalId0);
				// The LotHandlingKeyExternalId1 Index
				this.indexLotHandlingKeyExternalId1 = new LotHandlingKeyExternalId1Index("LotHandlingKeyExternalId1", new global::System.Data.DataColumn[] {
							this.columnExternalId1});
				this.Indices.Add(this.indexLotHandlingKeyExternalId1);
				// The LotHandlingKeyExternalId2 Index
				this.indexLotHandlingKeyExternalId2 = new LotHandlingKeyExternalId2Index("LotHandlingKeyExternalId2", new global::System.Data.DataColumn[] {
							this.columnExternalId2});
				this.Indices.Add(this.indexLotHandlingKeyExternalId2);
				// The LotHandlingKeyExternalId3 Index
				this.indexLotHandlingKeyExternalId3 = new LotHandlingKeyExternalId3Index("LotHandlingKeyExternalId3", new global::System.Data.DataColumn[] {
							this.columnExternalId3});
				this.Indices.Add(this.indexLotHandlingKeyExternalId3);
			}
			
			/// <summary>
			/// Gets the number of rows in the LotHandling table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public int Count
			{
				get
				{
					return this.Rows.Count;
				}
			}
			
			/// <summary>
			/// Gets the Description column of the LotHandling table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn DescriptionColumn
			{
				get
				{
					return this.columnDescription;
				}
			}
			
			/// <summary>
			/// Gets the ExternalId0 column of the LotHandling table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn ExternalId0Column
			{
				get
				{
					return this.columnExternalId0;
				}
			}
			
			/// <summary>
			/// Gets the ExternalId1 column of the LotHandling table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn ExternalId1Column
			{
				get
				{
					return this.columnExternalId1;
				}
			}
			
			/// <summary>
			/// Gets the ExternalId2 column of the LotHandling table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn ExternalId2Column
			{
				get
				{
					return this.columnExternalId2;
				}
			}
			
			/// <summary>
			/// Gets the ExternalId3 column of the LotHandling table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn ExternalId3Column
			{
				get
				{
					return this.columnExternalId3;
				}
			}
			
			/// <summary>
			/// Gets a collection of Teraque.DataModelGenerator.DataIndices on a table.
			/// </summary>
			public global::Teraque.DataIndexCollection Indices
			{
				get
				{
					return this.dataIndices;
				}
			}
			
			/// <summary>
			/// Indexer to a row in the LotHandling table.
			/// </summary>
			/// <param name="index">The integer index of the row.</param>
			/// <returns>The LotHandling row found at the given index.</returns>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public DataModel.LotHandlingRow this[int index]
			{
				get
				{
					return ((DataModel.LotHandlingRow)(this.Rows[index]));
				}
			}
			
			/// <summary>
			/// Gets the LotHandlingCode column of the LotHandling table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn LotHandlingCodeColumn
			{
				get
				{
					return this.columnLotHandlingCode;
				}
			}
			
			/// <summary>
			/// Gets the LotHandlingKey index on the LotHandling table.
			/// </summary>
			public LotHandlingKeyIndex LotHandlingKey
			{
				get
				{
					return ((LotHandlingKeyIndex)(this.indexLotHandlingKey));
				}
			}
			
			/// <summary>
			/// Gets the LotHandlingKeyExternalId0 index on the LotHandling table.
			/// </summary>
			public LotHandlingKeyExternalId0Index LotHandlingKeyExternalId0
			{
				get
				{
					return ((LotHandlingKeyExternalId0Index)(this.indexLotHandlingKeyExternalId0));
				}
			}
			
			/// <summary>
			/// Gets the LotHandlingKeyExternalId1 index on the LotHandling table.
			/// </summary>
			public LotHandlingKeyExternalId1Index LotHandlingKeyExternalId1
			{
				get
				{
					return ((LotHandlingKeyExternalId1Index)(this.indexLotHandlingKeyExternalId1));
				}
			}
			
			/// <summary>
			/// Gets the LotHandlingKeyExternalId2 index on the LotHandling table.
			/// </summary>
			public LotHandlingKeyExternalId2Index LotHandlingKeyExternalId2
			{
				get
				{
					return ((LotHandlingKeyExternalId2Index)(this.indexLotHandlingKeyExternalId2));
				}
			}
			
			/// <summary>
			/// Gets the LotHandlingKeyExternalId3 index on the LotHandling table.
			/// </summary>
			public LotHandlingKeyExternalId3Index LotHandlingKeyExternalId3
			{
				get
				{
					return ((LotHandlingKeyExternalId3Index)(this.indexLotHandlingKeyExternalId3));
				}
			}
			
			/// <summary>
			/// Gets the child relation between the LotHandling and SingleAccount tables.
			/// </summary>
			internal global::System.Data.DataRelation LotHandlingSingleAccountRelation
			{
				get
				{
					return this.relationLotHandlingSingleAccount;
				}
			}
			
			/// <summary>
			/// Gets the Mnemonic column of the LotHandling table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn MnemonicColumn
			{
				get
				{
					return this.columnMnemonic;
				}
			}
			
			/// <summary>
			/// Gets the RowVersion column of the LotHandling table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn RowVersionColumn
			{
				get
				{
					return this.columnRowVersion;
				}
			}
			
			/// <summary>
			/// Occurs after a LotHandling row has been changed successfully.
			/// </summary>
			public event LotHandlingRowChangeEventHandler LotHandlingRowChanged;
			
			/// <summary>
			/// Occurs when a LotHandling row is changing.
			/// </summary>
			public event LotHandlingRowChangeEventHandler LotHandlingRowChanging;
			
			/// <summary>
			/// Occurs after a LotHandling row in the table has been deleted.
			/// </summary>
			public event LotHandlingRowChangeEventHandler LotHandlingRowDeleted;
			
			/// <summary>
			/// Occurs before a LotHandling row in the table is about to be deleted.
			/// </summary>
			public event LotHandlingRowChangeEventHandler LotHandlingRowDeleting;
			
			/// <summary>
			/// Returns the type of the row in a LotHandling table.
			/// </summary>
			/// <returns>The LotHandlingRow type.</returns>
			protected override global::System.Type GetRowType()
			{
				return typeof(LotHandlingRow);
			}
			
			/// <summary>
			/// Initializes the relation fields with the parent and child relations.
			/// </summary>
			internal void InitializeRelations()
			{
				this.relationLotHandlingSingleAccount = this.ChildRelations["FK_LotHandling_SingleAccount"];
			}
			
			/// <summary>
			/// Initializes a new instance of a LotHandling row.  Constructs a row from the builder.  Only for internal usage.
			/// </summary>
			/// <returns>A new row with the same schema as the table.</returns>
			protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder dataRowBuilder)
			{
				return new LotHandlingRow(dataRowBuilder);
			}
			
			/// <summary>
			/// Raises the LotHandlingRowChanged event.
			/// </summary>
			/// <param name="e">Provides data for the LotHandlingRow changing and deleting events.</param>
			protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowChanged(e);
				if ((this.LotHandlingRowChanged != null))
				{
					this.LotHandlingRowChanged(this, new LotHandlingRowChangeEventArgs(((LotHandlingRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the LotHandlingRowChanging event.
			/// </summary>
			/// <param name="e">Provides data for the LotHandlingRow changing and deleting events.</param>
			protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowChanging(e);
				if ((this.LotHandlingRowChanging != null))
				{
					this.LotHandlingRowChanging(this, new LotHandlingRowChangeEventArgs(((LotHandlingRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the LotHandlingRowDeleted event.
			/// </summary>
			/// <param name="e">Provides data for the LotHandlingRow changing and deleting events.</param>
			protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowDeleted(e);
				if ((this.LotHandlingRowDeleted != null))
				{
					this.LotHandlingRowDeleted(this, new LotHandlingRowChangeEventArgs(((LotHandlingRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the LotHandlingRowDeleting event.
			/// </summary>
			/// <param name="e">Provides data for the LotHandlingRow changing and deleting events.</param>
			protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowDeleting(e);
				if ((this.LotHandlingRowDeleting != null))
				{
					this.LotHandlingRowDeleting(this, new LotHandlingRowChangeEventArgs(((LotHandlingRow)(e.Row)), e.Action));
				}
			}
		}
		
		/// <summary>
		/// The MajorInstrumentType table.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public partial class MajorInstrumentTypeDataTable : global::System.Data.TypedTableBase<DataModel.MajorInstrumentTypeRow>
		{
			
			private global::System.Data.DataColumn columnExternalId0;
			
			private global::System.Data.DataColumn columnExternalId1;
			
			private global::System.Data.DataColumn columnMajorInstrumentTypeId;
			
			private global::System.Data.DataColumn columnMnemonic;
			
			private global::System.Data.DataColumn columnName;
			
			private global::System.Data.DataColumn columnRowVersion;
			
			private global::Teraque.DataIndexCollection dataIndices;
			
			private global::Teraque.DataIndex indexMajorInstrumentTypeKey;
			
			private global::Teraque.DataIndex indexMajorInstrumentTypeKeyExternalId0;
			
			private global::Teraque.DataIndex indexMajorInstrumentTypeKeyExternalId1;
			
			private global::System.Data.DataRelation relationMajorInstrumentTypeSecurity;
			
			/// <summary>
			/// Creates the MajorInstrumentType table.
			/// </summary>
			internal MajorInstrumentTypeDataTable()
			{
				// Initialize the object.
				this.TableName = "MajorInstrumentType";
				this.dataIndices = new global::Teraque.DataIndexCollection();
				// The ExternalId0 Column
				this.columnExternalId0 = new global::System.Data.DataColumn("ExternalId0", typeof(string), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnExternalId0);
				// The ExternalId1 Column
				this.columnExternalId1 = new global::System.Data.DataColumn("ExternalId1", typeof(string), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnExternalId1);
				// The MajorInstrumentTypeId Column
				this.columnMajorInstrumentTypeId = new global::System.Data.DataColumn("MajorInstrumentTypeId", typeof(System.Guid), null, global::System.Data.MappingType.Element);
				this.columnMajorInstrumentTypeId.AllowDBNull = false;
				this.Columns.Add(this.columnMajorInstrumentTypeId);
				// The Mnemonic Column
				this.columnMnemonic = new global::System.Data.DataColumn("Mnemonic", typeof(string), null, global::System.Data.MappingType.Element);
				this.columnMnemonic.AllowDBNull = false;
				this.columnMnemonic.DefaultValue = "";
				this.Columns.Add(this.columnMnemonic);
				// The Name Column
				this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Element);
				this.columnName.AllowDBNull = false;
				this.columnName.DefaultValue = "";
				this.Columns.Add(this.columnName);
				// The RowVersion Column
				this.columnRowVersion = new global::System.Data.DataColumn("RowVersion", typeof(long), null, global::System.Data.MappingType.Element);
				this.columnRowVersion.AllowDBNull = false;
				this.Columns.Add(this.columnRowVersion);
				// The MajorInstrumentTypeKey Index
				this.indexMajorInstrumentTypeKey = new MajorInstrumentTypeKeyIndex("MajorInstrumentTypeKey", new global::System.Data.DataColumn[] {
							this.columnMajorInstrumentTypeId});
				this.Indices.Add(this.indexMajorInstrumentTypeKey);
				// The MajorInstrumentTypeKeyExternalId0 Index
				this.indexMajorInstrumentTypeKeyExternalId0 = new MajorInstrumentTypeKeyExternalId0Index("MajorInstrumentTypeKeyExternalId0", new global::System.Data.DataColumn[] {
							this.columnExternalId0});
				this.Indices.Add(this.indexMajorInstrumentTypeKeyExternalId0);
				// The MajorInstrumentTypeKeyExternalId1 Index
				this.indexMajorInstrumentTypeKeyExternalId1 = new MajorInstrumentTypeKeyExternalId1Index("MajorInstrumentTypeKeyExternalId1", new global::System.Data.DataColumn[] {
							this.columnExternalId1});
				this.Indices.Add(this.indexMajorInstrumentTypeKeyExternalId1);
			}
			
			/// <summary>
			/// Gets the number of rows in the MajorInstrumentType table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public int Count
			{
				get
				{
					return this.Rows.Count;
				}
			}
			
			/// <summary>
			/// Gets the ExternalId0 column of the MajorInstrumentType table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn ExternalId0Column
			{
				get
				{
					return this.columnExternalId0;
				}
			}
			
			/// <summary>
			/// Gets the ExternalId1 column of the MajorInstrumentType table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn ExternalId1Column
			{
				get
				{
					return this.columnExternalId1;
				}
			}
			
			/// <summary>
			/// Gets a collection of Teraque.DataModelGenerator.DataIndices on a table.
			/// </summary>
			public global::Teraque.DataIndexCollection Indices
			{
				get
				{
					return this.dataIndices;
				}
			}
			
			/// <summary>
			/// Indexer to a row in the MajorInstrumentType table.
			/// </summary>
			/// <param name="index">The integer index of the row.</param>
			/// <returns>The MajorInstrumentType row found at the given index.</returns>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public DataModel.MajorInstrumentTypeRow this[int index]
			{
				get
				{
					return ((DataModel.MajorInstrumentTypeRow)(this.Rows[index]));
				}
			}
			
			/// <summary>
			/// Gets the MajorInstrumentTypeId column of the MajorInstrumentType table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn MajorInstrumentTypeIdColumn
			{
				get
				{
					return this.columnMajorInstrumentTypeId;
				}
			}
			
			/// <summary>
			/// Gets the MajorInstrumentTypeKey index on the MajorInstrumentType table.
			/// </summary>
			public MajorInstrumentTypeKeyIndex MajorInstrumentTypeKey
			{
				get
				{
					return ((MajorInstrumentTypeKeyIndex)(this.indexMajorInstrumentTypeKey));
				}
			}
			
			/// <summary>
			/// Gets the MajorInstrumentTypeKeyExternalId0 index on the MajorInstrumentType table.
			/// </summary>
			public MajorInstrumentTypeKeyExternalId0Index MajorInstrumentTypeKeyExternalId0
			{
				get
				{
					return ((MajorInstrumentTypeKeyExternalId0Index)(this.indexMajorInstrumentTypeKeyExternalId0));
				}
			}
			
			/// <summary>
			/// Gets the MajorInstrumentTypeKeyExternalId1 index on the MajorInstrumentType table.
			/// </summary>
			public MajorInstrumentTypeKeyExternalId1Index MajorInstrumentTypeKeyExternalId1
			{
				get
				{
					return ((MajorInstrumentTypeKeyExternalId1Index)(this.indexMajorInstrumentTypeKeyExternalId1));
				}
			}
			
			/// <summary>
			/// Gets the child relation between the MajorInstrumentType and Security tables.
			/// </summary>
			internal global::System.Data.DataRelation MajorInstrumentTypeSecurityRelation
			{
				get
				{
					return this.relationMajorInstrumentTypeSecurity;
				}
			}
			
			/// <summary>
			/// Gets the Mnemonic column of the MajorInstrumentType table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn MnemonicColumn
			{
				get
				{
					return this.columnMnemonic;
				}
			}
			
			/// <summary>
			/// Gets the Name column of the MajorInstrumentType table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn NameColumn
			{
				get
				{
					return this.columnName;
				}
			}
			
			/// <summary>
			/// Gets the RowVersion column of the MajorInstrumentType table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn RowVersionColumn
			{
				get
				{
					return this.columnRowVersion;
				}
			}
			
			/// <summary>
			/// Occurs after a MajorInstrumentType row has been changed successfully.
			/// </summary>
			public event MajorInstrumentTypeRowChangeEventHandler MajorInstrumentTypeRowChanged;
			
			/// <summary>
			/// Occurs when a MajorInstrumentType row is changing.
			/// </summary>
			public event MajorInstrumentTypeRowChangeEventHandler MajorInstrumentTypeRowChanging;
			
			/// <summary>
			/// Occurs after a MajorInstrumentType row in the table has been deleted.
			/// </summary>
			public event MajorInstrumentTypeRowChangeEventHandler MajorInstrumentTypeRowDeleted;
			
			/// <summary>
			/// Occurs before a MajorInstrumentType row in the table is about to be deleted.
			/// </summary>
			public event MajorInstrumentTypeRowChangeEventHandler MajorInstrumentTypeRowDeleting;
			
			/// <summary>
			/// Returns the type of the row in a MajorInstrumentType table.
			/// </summary>
			/// <returns>The MajorInstrumentTypeRow type.</returns>
			protected override global::System.Type GetRowType()
			{
				return typeof(MajorInstrumentTypeRow);
			}
			
			/// <summary>
			/// Initializes the relation fields with the parent and child relations.
			/// </summary>
			internal void InitializeRelations()
			{
				this.relationMajorInstrumentTypeSecurity = this.ChildRelations["FK_MajorInstrumentType_Security"];
			}
			
			/// <summary>
			/// Initializes a new instance of a MajorInstrumentType row.  Constructs a row from the builder.  Only for internal usage.
			/// </summary>
			/// <returns>A new row with the same schema as the table.</returns>
			protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder dataRowBuilder)
			{
				return new MajorInstrumentTypeRow(dataRowBuilder);
			}
			
			/// <summary>
			/// Raises the MajorInstrumentTypeRowChanged event.
			/// </summary>
			/// <param name="e">Provides data for the MajorInstrumentTypeRow changing and deleting events.</param>
			protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowChanged(e);
				if ((this.MajorInstrumentTypeRowChanged != null))
				{
					this.MajorInstrumentTypeRowChanged(this, new MajorInstrumentTypeRowChangeEventArgs(((MajorInstrumentTypeRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the MajorInstrumentTypeRowChanging event.
			/// </summary>
			/// <param name="e">Provides data for the MajorInstrumentTypeRow changing and deleting events.</param>
			protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowChanging(e);
				if ((this.MajorInstrumentTypeRowChanging != null))
				{
					this.MajorInstrumentTypeRowChanging(this, new MajorInstrumentTypeRowChangeEventArgs(((MajorInstrumentTypeRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the MajorInstrumentTypeRowDeleted event.
			/// </summary>
			/// <param name="e">Provides data for the MajorInstrumentTypeRow changing and deleting events.</param>
			protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowDeleted(e);
				if ((this.MajorInstrumentTypeRowDeleted != null))
				{
					this.MajorInstrumentTypeRowDeleted(this, new MajorInstrumentTypeRowChangeEventArgs(((MajorInstrumentTypeRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the MajorInstrumentTypeRowDeleting event.
			/// </summary>
			/// <param name="e">Provides data for the MajorInstrumentTypeRow changing and deleting events.</param>
			protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowDeleting(e);
				if ((this.MajorInstrumentTypeRowDeleting != null))
				{
					this.MajorInstrumentTypeRowDeleting(this, new MajorInstrumentTypeRowChangeEventArgs(((MajorInstrumentTypeRow)(e.Row)), e.Action));
				}
			}
		}
		
		/// <summary>
		/// The Match table.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public partial class MatchDataTable : global::System.Data.TypedTableBase<DataModel.MatchRow>
		{
			
			private global::System.Data.DataColumn columnBlotterId;
			
			private global::System.Data.DataColumn columnContraMatchId;
			
			private global::System.Data.DataColumn columnContraOrderId;
			
			private global::System.Data.DataColumn columnHeatIndex;
			
			private global::System.Data.DataColumn columnHeatIndexDetails;
			
			private global::System.Data.DataColumn columnMatchedTime;
			
			private global::System.Data.DataColumn columnMatchId;
			
			private global::System.Data.DataColumn columnRowVersion;
			
			private global::System.Data.DataColumn columnStatusCode;
			
			private global::System.Data.DataColumn columnWorkingOrderId;
			
			private global::Teraque.DataIndexCollection dataIndices;
			
			private global::Teraque.DataIndex indexMatchKey;
			
			private global::Teraque.DataIndex indexMatchKeyWorkingOrderIdContraOrderId;
			
			private global::System.Data.DataRelation relationBlotterMatch;
			
			private global::System.Data.DataRelation relationMatchNegotiation;
			
			private global::System.Data.DataRelation relationStatusMatch;
			
			private global::System.Data.DataRelation relationWorkingOrderMatch;
			
			/// <summary>
			/// Creates the Match table.
			/// </summary>
			internal MatchDataTable()
			{
				// Initialize the object.
				this.TableName = "Match";
				this.dataIndices = new global::Teraque.DataIndexCollection();
				// The BlotterId Column
				this.columnBlotterId = new global::System.Data.DataColumn("BlotterId", typeof(System.Guid), null, global::System.Data.MappingType.Element);
				this.columnBlotterId.AllowDBNull = false;
				this.Columns.Add(this.columnBlotterId);
				// The ContraMatchId Column
				this.columnContraMatchId = new global::System.Data.DataColumn("ContraMatchId", typeof(System.Guid), null, global::System.Data.MappingType.Element);
				this.columnContraMatchId.AllowDBNull = false;
				this.Columns.Add(this.columnContraMatchId);
				// The ContraOrderId Column
				this.columnContraOrderId = new global::System.Data.DataColumn("ContraOrderId", typeof(System.Guid), null, global::System.Data.MappingType.Element);
				this.columnContraOrderId.AllowDBNull = false;
				this.Columns.Add(this.columnContraOrderId);
				// The HeatIndex Column
				this.columnHeatIndex = new global::System.Data.DataColumn("HeatIndex", typeof(decimal), null, global::System.Data.MappingType.Element);
				this.columnHeatIndex.AllowDBNull = false;
				this.columnHeatIndex.DefaultValue = 0.0m;
				this.Columns.Add(this.columnHeatIndex);
				// The HeatIndexDetails Column
				this.columnHeatIndexDetails = new global::System.Data.DataColumn("HeatIndexDetails", typeof(string), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnHeatIndexDetails);
				// The MatchedTime Column
				this.columnMatchedTime = new global::System.Data.DataColumn("MatchedTime", typeof(System.DateTime), null, global::System.Data.MappingType.Element);
				this.columnMatchedTime.AllowDBNull = false;
				this.Columns.Add(this.columnMatchedTime);
				// The MatchId Column
				this.columnMatchId = new global::System.Data.DataColumn("MatchId", typeof(System.Guid), null, global::System.Data.MappingType.Element);
				this.columnMatchId.AllowDBNull = false;
				this.Columns.Add(this.columnMatchId);
				// The RowVersion Column
				this.columnRowVersion = new global::System.Data.DataColumn("RowVersion", typeof(long), null, global::System.Data.MappingType.Element);
				this.columnRowVersion.AllowDBNull = false;
				this.Columns.Add(this.columnRowVersion);
				// The StatusCode Column
				this.columnStatusCode = new global::System.Data.DataColumn("StatusCode", typeof(Teraque.StatusCode), null, global::System.Data.MappingType.Element);
				this.columnStatusCode.AllowDBNull = false;
				this.Columns.Add(this.columnStatusCode);
				// The WorkingOrderId Column
				this.columnWorkingOrderId = new global::System.Data.DataColumn("WorkingOrderId", typeof(System.Guid), null, global::System.Data.MappingType.Element);
				this.columnWorkingOrderId.AllowDBNull = false;
				this.Columns.Add(this.columnWorkingOrderId);
				// The MatchKey Index
				this.indexMatchKey = new MatchKeyIndex("MatchKey", new global::System.Data.DataColumn[] {
							this.columnMatchId});
				this.Indices.Add(this.indexMatchKey);
				// The MatchKeyWorkingOrderIdContraOrderId Index
				this.indexMatchKeyWorkingOrderIdContraOrderId = new MatchKeyWorkingOrderIdContraOrderIdIndex("MatchKeyWorkingOrderIdContraOrderId", new global::System.Data.DataColumn[] {
							this.columnWorkingOrderId,
							this.columnContraOrderId});
				this.Constraints.Add(new global::System.Data.UniqueConstraint(new global::System.Data.DataColumn[] {
								this.columnWorkingOrderId,
								this.columnContraOrderId}));
				this.Indices.Add(this.indexMatchKeyWorkingOrderIdContraOrderId);
			}
			
			/// <summary>
			/// Gets the BlotterId column of the Match table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn BlotterIdColumn
			{
				get
				{
					return this.columnBlotterId;
				}
			}
			
			/// <summary>
			/// Gets the parent relation between the Blotter and Match tables.
			/// </summary>
			public global::System.Data.DataRelation BlotterMatchRelation
			{
				get
				{
					return this.relationBlotterMatch;
				}
			}
			
			/// <summary>
			/// Gets the ContraMatchId column of the Match table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn ContraMatchIdColumn
			{
				get
				{
					return this.columnContraMatchId;
				}
			}
			
			/// <summary>
			/// Gets the ContraOrderId column of the Match table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn ContraOrderIdColumn
			{
				get
				{
					return this.columnContraOrderId;
				}
			}
			
			/// <summary>
			/// Gets the number of rows in the Match table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public int Count
			{
				get
				{
					return this.Rows.Count;
				}
			}
			
			/// <summary>
			/// Gets the HeatIndex column of the Match table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn HeatIndexColumn
			{
				get
				{
					return this.columnHeatIndex;
				}
			}
			
			/// <summary>
			/// Gets the HeatIndexDetails column of the Match table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn HeatIndexDetailsColumn
			{
				get
				{
					return this.columnHeatIndexDetails;
				}
			}
			
			/// <summary>
			/// Gets a collection of Teraque.DataModelGenerator.DataIndices on a table.
			/// </summary>
			public global::Teraque.DataIndexCollection Indices
			{
				get
				{
					return this.dataIndices;
				}
			}
			
			/// <summary>
			/// Indexer to a row in the Match table.
			/// </summary>
			/// <param name="index">The integer index of the row.</param>
			/// <returns>The Match row found at the given index.</returns>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public DataModel.MatchRow this[int index]
			{
				get
				{
					return ((DataModel.MatchRow)(this.Rows[index]));
				}
			}
			
			/// <summary>
			/// Gets the MatchedTime column of the Match table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn MatchedTimeColumn
			{
				get
				{
					return this.columnMatchedTime;
				}
			}
			
			/// <summary>
			/// Gets the MatchId column of the Match table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn MatchIdColumn
			{
				get
				{
					return this.columnMatchId;
				}
			}
			
			/// <summary>
			/// Gets the MatchKey index on the Match table.
			/// </summary>
			public MatchKeyIndex MatchKey
			{
				get
				{
					return ((MatchKeyIndex)(this.indexMatchKey));
				}
			}
			
			/// <summary>
			/// Gets the MatchKeyWorkingOrderIdContraOrderId index on the Match table.
			/// </summary>
			public MatchKeyWorkingOrderIdContraOrderIdIndex MatchKeyWorkingOrderIdContraOrderId
			{
				get
				{
					return ((MatchKeyWorkingOrderIdContraOrderIdIndex)(this.indexMatchKeyWorkingOrderIdContraOrderId));
				}
			}
			
			/// <summary>
			/// Gets the child relation between the Match and Negotiation tables.
			/// </summary>
			internal global::System.Data.DataRelation MatchNegotiationRelation
			{
				get
				{
					return this.relationMatchNegotiation;
				}
			}
			
			/// <summary>
			/// Gets the RowVersion column of the Match table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn RowVersionColumn
			{
				get
				{
					return this.columnRowVersion;
				}
			}
			
			/// <summary>
			/// Gets the StatusCode column of the Match table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn StatusCodeColumn
			{
				get
				{
					return this.columnStatusCode;
				}
			}
			
			/// <summary>
			/// Gets the parent relation between the Status and Match tables.
			/// </summary>
			public global::System.Data.DataRelation StatusMatchRelation
			{
				get
				{
					return this.relationStatusMatch;
				}
			}
			
			/// <summary>
			/// Gets the WorkingOrderId column of the Match table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn WorkingOrderIdColumn
			{
				get
				{
					return this.columnWorkingOrderId;
				}
			}
			
			/// <summary>
			/// Gets the parent relation between the WorkingOrder and Match tables.
			/// </summary>
			public global::System.Data.DataRelation WorkingOrderMatchRelation
			{
				get
				{
					return this.relationWorkingOrderMatch;
				}
			}
			
			/// <summary>
			/// Occurs after a Match row has been changed successfully.
			/// </summary>
			public event MatchRowChangeEventHandler MatchRowChanged;
			
			/// <summary>
			/// Occurs when a Match row is changing.
			/// </summary>
			public event MatchRowChangeEventHandler MatchRowChanging;
			
			/// <summary>
			/// Occurs after a Match row in the table has been deleted.
			/// </summary>
			public event MatchRowChangeEventHandler MatchRowDeleted;
			
			/// <summary>
			/// Occurs before a Match row in the table is about to be deleted.
			/// </summary>
			public event MatchRowChangeEventHandler MatchRowDeleting;
			
			/// <summary>
			/// Returns the type of the row in a Match table.
			/// </summary>
			/// <returns>The MatchRow type.</returns>
			protected override global::System.Type GetRowType()
			{
				return typeof(MatchRow);
			}
			
			/// <summary>
			/// Initializes the relation fields with the parent and child relations.
			/// </summary>
			internal void InitializeRelations()
			{
				this.relationBlotterMatch = this.ParentRelations["FK_Blotter_Match"];
				this.relationStatusMatch = this.ParentRelations["FK_Status_Match"];
				this.relationWorkingOrderMatch = this.ParentRelations["FK_WorkingOrder_Match"];
				this.relationMatchNegotiation = this.ChildRelations["FK_Match_Negotiation"];
			}
			
			/// <summary>
			/// Initializes a new instance of a Match row.  Constructs a row from the builder.  Only for internal usage.
			/// </summary>
			/// <returns>A new row with the same schema as the table.</returns>
			protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder dataRowBuilder)
			{
				return new MatchRow(dataRowBuilder);
			}
			
			/// <summary>
			/// Raises the MatchRowChanged event.
			/// </summary>
			/// <param name="e">Provides data for the MatchRow changing and deleting events.</param>
			protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowChanged(e);
				if ((this.MatchRowChanged != null))
				{
					this.MatchRowChanged(this, new MatchRowChangeEventArgs(((MatchRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the MatchRowChanging event.
			/// </summary>
			/// <param name="e">Provides data for the MatchRow changing and deleting events.</param>
			protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowChanging(e);
				if ((this.MatchRowChanging != null))
				{
					this.MatchRowChanging(this, new MatchRowChangeEventArgs(((MatchRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the MatchRowDeleted event.
			/// </summary>
			/// <param name="e">Provides data for the MatchRow changing and deleting events.</param>
			protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowDeleted(e);
				if ((this.MatchRowDeleted != null))
				{
					this.MatchRowDeleted(this, new MatchRowChangeEventArgs(((MatchRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the MatchRowDeleting event.
			/// </summary>
			/// <param name="e">Provides data for the MatchRow changing and deleting events.</param>
			protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowDeleting(e);
				if ((this.MatchRowDeleting != null))
				{
					this.MatchRowDeleting(this, new MatchRowChangeEventArgs(((MatchRow)(e.Row)), e.Action));
				}
			}
		}
		
		/// <summary>
		/// The MinorInstrumentType table.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public partial class MinorInstrumentTypeDataTable : global::System.Data.TypedTableBase<DataModel.MinorInstrumentTypeRow>
		{
			
			private global::System.Data.DataColumn columnExternalId0;
			
			private global::System.Data.DataColumn columnExternalId1;
			
			private global::System.Data.DataColumn columnMinorInstrumentTypeId;
			
			private global::System.Data.DataColumn columnMnemonic;
			
			private global::System.Data.DataColumn columnName;
			
			private global::System.Data.DataColumn columnRowVersion;
			
			private global::Teraque.DataIndexCollection dataIndices;
			
			private global::Teraque.DataIndex indexMinorInstrumentTypeKey;
			
			private global::Teraque.DataIndex indexMinorInstrumentTypeKeyExternalId0;
			
			private global::Teraque.DataIndex indexMinorInstrumentTypeKeyExternalId1;
			
			private global::System.Data.DataRelation relationMinorInstrumentTypeSecurity;
			
			/// <summary>
			/// Creates the MinorInstrumentType table.
			/// </summary>
			internal MinorInstrumentTypeDataTable()
			{
				// Initialize the object.
				this.TableName = "MinorInstrumentType";
				this.dataIndices = new global::Teraque.DataIndexCollection();
				// The ExternalId0 Column
				this.columnExternalId0 = new global::System.Data.DataColumn("ExternalId0", typeof(string), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnExternalId0);
				// The ExternalId1 Column
				this.columnExternalId1 = new global::System.Data.DataColumn("ExternalId1", typeof(string), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnExternalId1);
				// The MinorInstrumentTypeId Column
				this.columnMinorInstrumentTypeId = new global::System.Data.DataColumn("MinorInstrumentTypeId", typeof(System.Guid), null, global::System.Data.MappingType.Element);
				this.columnMinorInstrumentTypeId.AllowDBNull = false;
				this.Columns.Add(this.columnMinorInstrumentTypeId);
				// The Mnemonic Column
				this.columnMnemonic = new global::System.Data.DataColumn("Mnemonic", typeof(string), null, global::System.Data.MappingType.Element);
				this.columnMnemonic.AllowDBNull = false;
				this.columnMnemonic.DefaultValue = "";
				this.Columns.Add(this.columnMnemonic);
				// The Name Column
				this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Element);
				this.columnName.AllowDBNull = false;
				this.columnName.DefaultValue = "";
				this.Columns.Add(this.columnName);
				// The RowVersion Column
				this.columnRowVersion = new global::System.Data.DataColumn("RowVersion", typeof(long), null, global::System.Data.MappingType.Element);
				this.columnRowVersion.AllowDBNull = false;
				this.Columns.Add(this.columnRowVersion);
				// The MinorInstrumentTypeKey Index
				this.indexMinorInstrumentTypeKey = new MinorInstrumentTypeKeyIndex("MinorInstrumentTypeKey", new global::System.Data.DataColumn[] {
							this.columnMinorInstrumentTypeId});
				this.Indices.Add(this.indexMinorInstrumentTypeKey);
				// The MinorInstrumentTypeKeyExternalId0 Index
				this.indexMinorInstrumentTypeKeyExternalId0 = new MinorInstrumentTypeKeyExternalId0Index("MinorInstrumentTypeKeyExternalId0", new global::System.Data.DataColumn[] {
							this.columnExternalId0});
				this.Indices.Add(this.indexMinorInstrumentTypeKeyExternalId0);
				// The MinorInstrumentTypeKeyExternalId1 Index
				this.indexMinorInstrumentTypeKeyExternalId1 = new MinorInstrumentTypeKeyExternalId1Index("MinorInstrumentTypeKeyExternalId1", new global::System.Data.DataColumn[] {
							this.columnExternalId1});
				this.Indices.Add(this.indexMinorInstrumentTypeKeyExternalId1);
			}
			
			/// <summary>
			/// Gets the number of rows in the MinorInstrumentType table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public int Count
			{
				get
				{
					return this.Rows.Count;
				}
			}
			
			/// <summary>
			/// Gets the ExternalId0 column of the MinorInstrumentType table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn ExternalId0Column
			{
				get
				{
					return this.columnExternalId0;
				}
			}
			
			/// <summary>
			/// Gets the ExternalId1 column of the MinorInstrumentType table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn ExternalId1Column
			{
				get
				{
					return this.columnExternalId1;
				}
			}
			
			/// <summary>
			/// Gets a collection of Teraque.DataModelGenerator.DataIndices on a table.
			/// </summary>
			public global::Teraque.DataIndexCollection Indices
			{
				get
				{
					return this.dataIndices;
				}
			}
			
			/// <summary>
			/// Indexer to a row in the MinorInstrumentType table.
			/// </summary>
			/// <param name="index">The integer index of the row.</param>
			/// <returns>The MinorInstrumentType row found at the given index.</returns>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public DataModel.MinorInstrumentTypeRow this[int index]
			{
				get
				{
					return ((DataModel.MinorInstrumentTypeRow)(this.Rows[index]));
				}
			}
			
			/// <summary>
			/// Gets the MinorInstrumentTypeId column of the MinorInstrumentType table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn MinorInstrumentTypeIdColumn
			{
				get
				{
					return this.columnMinorInstrumentTypeId;
				}
			}
			
			/// <summary>
			/// Gets the MinorInstrumentTypeKey index on the MinorInstrumentType table.
			/// </summary>
			public MinorInstrumentTypeKeyIndex MinorInstrumentTypeKey
			{
				get
				{
					return ((MinorInstrumentTypeKeyIndex)(this.indexMinorInstrumentTypeKey));
				}
			}
			
			/// <summary>
			/// Gets the MinorInstrumentTypeKeyExternalId0 index on the MinorInstrumentType table.
			/// </summary>
			public MinorInstrumentTypeKeyExternalId0Index MinorInstrumentTypeKeyExternalId0
			{
				get
				{
					return ((MinorInstrumentTypeKeyExternalId0Index)(this.indexMinorInstrumentTypeKeyExternalId0));
				}
			}
			
			/// <summary>
			/// Gets the MinorInstrumentTypeKeyExternalId1 index on the MinorInstrumentType table.
			/// </summary>
			public MinorInstrumentTypeKeyExternalId1Index MinorInstrumentTypeKeyExternalId1
			{
				get
				{
					return ((MinorInstrumentTypeKeyExternalId1Index)(this.indexMinorInstrumentTypeKeyExternalId1));
				}
			}
			
			/// <summary>
			/// Gets the child relation between the MinorInstrumentType and Security tables.
			/// </summary>
			internal global::System.Data.DataRelation MinorInstrumentTypeSecurityRelation
			{
				get
				{
					return this.relationMinorInstrumentTypeSecurity;
				}
			}
			
			/// <summary>
			/// Gets the Mnemonic column of the MinorInstrumentType table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn MnemonicColumn
			{
				get
				{
					return this.columnMnemonic;
				}
			}
			
			/// <summary>
			/// Gets the Name column of the MinorInstrumentType table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn NameColumn
			{
				get
				{
					return this.columnName;
				}
			}
			
			/// <summary>
			/// Gets the RowVersion column of the MinorInstrumentType table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn RowVersionColumn
			{
				get
				{
					return this.columnRowVersion;
				}
			}
			
			/// <summary>
			/// Occurs after a MinorInstrumentType row has been changed successfully.
			/// </summary>
			public event MinorInstrumentTypeRowChangeEventHandler MinorInstrumentTypeRowChanged;
			
			/// <summary>
			/// Occurs when a MinorInstrumentType row is changing.
			/// </summary>
			public event MinorInstrumentTypeRowChangeEventHandler MinorInstrumentTypeRowChanging;
			
			/// <summary>
			/// Occurs after a MinorInstrumentType row in the table has been deleted.
			/// </summary>
			public event MinorInstrumentTypeRowChangeEventHandler MinorInstrumentTypeRowDeleted;
			
			/// <summary>
			/// Occurs before a MinorInstrumentType row in the table is about to be deleted.
			/// </summary>
			public event MinorInstrumentTypeRowChangeEventHandler MinorInstrumentTypeRowDeleting;
			
			/// <summary>
			/// Returns the type of the row in a MinorInstrumentType table.
			/// </summary>
			/// <returns>The MinorInstrumentTypeRow type.</returns>
			protected override global::System.Type GetRowType()
			{
				return typeof(MinorInstrumentTypeRow);
			}
			
			/// <summary>
			/// Initializes the relation fields with the parent and child relations.
			/// </summary>
			internal void InitializeRelations()
			{
				this.relationMinorInstrumentTypeSecurity = this.ChildRelations["FK_MinorInstrumentType_Security"];
			}
			
			/// <summary>
			/// Initializes a new instance of a MinorInstrumentType row.  Constructs a row from the builder.  Only for internal usage.
			/// </summary>
			/// <returns>A new row with the same schema as the table.</returns>
			protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder dataRowBuilder)
			{
				return new MinorInstrumentTypeRow(dataRowBuilder);
			}
			
			/// <summary>
			/// Raises the MinorInstrumentTypeRowChanged event.
			/// </summary>
			/// <param name="e">Provides data for the MinorInstrumentTypeRow changing and deleting events.</param>
			protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowChanged(e);
				if ((this.MinorInstrumentTypeRowChanged != null))
				{
					this.MinorInstrumentTypeRowChanged(this, new MinorInstrumentTypeRowChangeEventArgs(((MinorInstrumentTypeRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the MinorInstrumentTypeRowChanging event.
			/// </summary>
			/// <param name="e">Provides data for the MinorInstrumentTypeRow changing and deleting events.</param>
			protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowChanging(e);
				if ((this.MinorInstrumentTypeRowChanging != null))
				{
					this.MinorInstrumentTypeRowChanging(this, new MinorInstrumentTypeRowChangeEventArgs(((MinorInstrumentTypeRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the MinorInstrumentTypeRowDeleted event.
			/// </summary>
			/// <param name="e">Provides data for the MinorInstrumentTypeRow changing and deleting events.</param>
			protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowDeleted(e);
				if ((this.MinorInstrumentTypeRowDeleted != null))
				{
					this.MinorInstrumentTypeRowDeleted(this, new MinorInstrumentTypeRowChangeEventArgs(((MinorInstrumentTypeRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the MinorInstrumentTypeRowDeleting event.
			/// </summary>
			/// <param name="e">Provides data for the MinorInstrumentTypeRow changing and deleting events.</param>
			protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowDeleting(e);
				if ((this.MinorInstrumentTypeRowDeleting != null))
				{
					this.MinorInstrumentTypeRowDeleting(this, new MinorInstrumentTypeRowChangeEventArgs(((MinorInstrumentTypeRow)(e.Row)), e.Action));
				}
			}
		}
		
		/// <summary>
		/// The MssaBucket table.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public partial class MssaBucketDataTable : global::System.Data.TypedTableBase<DataModel.MssaBucketRow>
		{
			
			private global::System.Data.DataColumn columnExternalId0;
			
			private global::System.Data.DataColumn columnExternalId1;
			
			private global::System.Data.DataColumn columnMssaBucketId;
			
			private global::System.Data.DataColumn columnName;
			
			private global::System.Data.DataColumn columnRowVersion;
			
			private global::Teraque.DataIndexCollection dataIndices;
			
			private global::Teraque.DataIndex indexMssaBucketKey;
			
			private global::Teraque.DataIndex indexMssaBucketKeyExternalId0;
			
			private global::Teraque.DataIndex indexMssaBucketKeyExternalId1;
			
			private global::System.Data.DataRelation relationMssaBucketSecuritySeries;
			
			/// <summary>
			/// Creates the MssaBucket table.
			/// </summary>
			internal MssaBucketDataTable()
			{
				// Initialize the object.
				this.TableName = "MssaBucket";
				this.dataIndices = new global::Teraque.DataIndexCollection();
				// The ExternalId0 Column
				this.columnExternalId0 = new global::System.Data.DataColumn("ExternalId0", typeof(string), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnExternalId0);
				// The ExternalId1 Column
				this.columnExternalId1 = new global::System.Data.DataColumn("ExternalId1", typeof(string), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnExternalId1);
				// The MssaBucketId Column
				this.columnMssaBucketId = new global::System.Data.DataColumn("MssaBucketId", typeof(System.Guid), null, global::System.Data.MappingType.Element);
				this.columnMssaBucketId.AllowDBNull = false;
				this.Columns.Add(this.columnMssaBucketId);
				// The Name Column
				this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Element);
				this.columnName.AllowDBNull = false;
				this.columnName.DefaultValue = "";
				this.Columns.Add(this.columnName);
				// The RowVersion Column
				this.columnRowVersion = new global::System.Data.DataColumn("RowVersion", typeof(long), null, global::System.Data.MappingType.Element);
				this.columnRowVersion.AllowDBNull = false;
				this.Columns.Add(this.columnRowVersion);
				// The MssaBucketKey Index
				this.indexMssaBucketKey = new MssaBucketKeyIndex("MssaBucketKey", new global::System.Data.DataColumn[] {
							this.columnMssaBucketId});
				this.Indices.Add(this.indexMssaBucketKey);
				// The MssaBucketKeyExternalId0 Index
				this.indexMssaBucketKeyExternalId0 = new MssaBucketKeyExternalId0Index("MssaBucketKeyExternalId0", new global::System.Data.DataColumn[] {
							this.columnExternalId0});
				this.Indices.Add(this.indexMssaBucketKeyExternalId0);
				// The MssaBucketKeyExternalId1 Index
				this.indexMssaBucketKeyExternalId1 = new MssaBucketKeyExternalId1Index("MssaBucketKeyExternalId1", new global::System.Data.DataColumn[] {
							this.columnExternalId1});
				this.Indices.Add(this.indexMssaBucketKeyExternalId1);
			}
			
			/// <summary>
			/// Gets the number of rows in the MssaBucket table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public int Count
			{
				get
				{
					return this.Rows.Count;
				}
			}
			
			/// <summary>
			/// Gets the ExternalId0 column of the MssaBucket table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn ExternalId0Column
			{
				get
				{
					return this.columnExternalId0;
				}
			}
			
			/// <summary>
			/// Gets the ExternalId1 column of the MssaBucket table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn ExternalId1Column
			{
				get
				{
					return this.columnExternalId1;
				}
			}
			
			/// <summary>
			/// Gets a collection of Teraque.DataModelGenerator.DataIndices on a table.
			/// </summary>
			public global::Teraque.DataIndexCollection Indices
			{
				get
				{
					return this.dataIndices;
				}
			}
			
			/// <summary>
			/// Indexer to a row in the MssaBucket table.
			/// </summary>
			/// <param name="index">The integer index of the row.</param>
			/// <returns>The MssaBucket row found at the given index.</returns>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public DataModel.MssaBucketRow this[int index]
			{
				get
				{
					return ((DataModel.MssaBucketRow)(this.Rows[index]));
				}
			}
			
			/// <summary>
			/// Gets the MssaBucketId column of the MssaBucket table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn MssaBucketIdColumn
			{
				get
				{
					return this.columnMssaBucketId;
				}
			}
			
			/// <summary>
			/// Gets the MssaBucketKey index on the MssaBucket table.
			/// </summary>
			public MssaBucketKeyIndex MssaBucketKey
			{
				get
				{
					return ((MssaBucketKeyIndex)(this.indexMssaBucketKey));
				}
			}
			
			/// <summary>
			/// Gets the MssaBucketKeyExternalId0 index on the MssaBucket table.
			/// </summary>
			public MssaBucketKeyExternalId0Index MssaBucketKeyExternalId0
			{
				get
				{
					return ((MssaBucketKeyExternalId0Index)(this.indexMssaBucketKeyExternalId0));
				}
			}
			
			/// <summary>
			/// Gets the MssaBucketKeyExternalId1 index on the MssaBucket table.
			/// </summary>
			public MssaBucketKeyExternalId1Index MssaBucketKeyExternalId1
			{
				get
				{
					return ((MssaBucketKeyExternalId1Index)(this.indexMssaBucketKeyExternalId1));
				}
			}
			
			/// <summary>
			/// Gets the child relation between the MssaBucket and SecuritySeries tables.
			/// </summary>
			internal global::System.Data.DataRelation MssaBucketSecuritySeriesRelation
			{
				get
				{
					return this.relationMssaBucketSecuritySeries;
				}
			}
			
			/// <summary>
			/// Gets the Name column of the MssaBucket table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn NameColumn
			{
				get
				{
					return this.columnName;
				}
			}
			
			/// <summary>
			/// Gets the RowVersion column of the MssaBucket table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn RowVersionColumn
			{
				get
				{
					return this.columnRowVersion;
				}
			}
			
			/// <summary>
			/// Occurs after a MssaBucket row has been changed successfully.
			/// </summary>
			public event MssaBucketRowChangeEventHandler MssaBucketRowChanged;
			
			/// <summary>
			/// Occurs when a MssaBucket row is changing.
			/// </summary>
			public event MssaBucketRowChangeEventHandler MssaBucketRowChanging;
			
			/// <summary>
			/// Occurs after a MssaBucket row in the table has been deleted.
			/// </summary>
			public event MssaBucketRowChangeEventHandler MssaBucketRowDeleted;
			
			/// <summary>
			/// Occurs before a MssaBucket row in the table is about to be deleted.
			/// </summary>
			public event MssaBucketRowChangeEventHandler MssaBucketRowDeleting;
			
			/// <summary>
			/// Returns the type of the row in a MssaBucket table.
			/// </summary>
			/// <returns>The MssaBucketRow type.</returns>
			protected override global::System.Type GetRowType()
			{
				return typeof(MssaBucketRow);
			}
			
			/// <summary>
			/// Initializes the relation fields with the parent and child relations.
			/// </summary>
			internal void InitializeRelations()
			{
				this.relationMssaBucketSecuritySeries = this.ChildRelations["FK_MssaBucket_SecuritySeries"];
			}
			
			/// <summary>
			/// Initializes a new instance of a MssaBucket row.  Constructs a row from the builder.  Only for internal usage.
			/// </summary>
			/// <returns>A new row with the same schema as the table.</returns>
			protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder dataRowBuilder)
			{
				return new MssaBucketRow(dataRowBuilder);
			}
			
			/// <summary>
			/// Raises the MssaBucketRowChanged event.
			/// </summary>
			/// <param name="e">Provides data for the MssaBucketRow changing and deleting events.</param>
			protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowChanged(e);
				if ((this.MssaBucketRowChanged != null))
				{
					this.MssaBucketRowChanged(this, new MssaBucketRowChangeEventArgs(((MssaBucketRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the MssaBucketRowChanging event.
			/// </summary>
			/// <param name="e">Provides data for the MssaBucketRow changing and deleting events.</param>
			protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowChanging(e);
				if ((this.MssaBucketRowChanging != null))
				{
					this.MssaBucketRowChanging(this, new MssaBucketRowChangeEventArgs(((MssaBucketRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the MssaBucketRowDeleted event.
			/// </summary>
			/// <param name="e">Provides data for the MssaBucketRow changing and deleting events.</param>
			protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowDeleted(e);
				if ((this.MssaBucketRowDeleted != null))
				{
					this.MssaBucketRowDeleted(this, new MssaBucketRowChangeEventArgs(((MssaBucketRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the MssaBucketRowDeleting event.
			/// </summary>
			/// <param name="e">Provides data for the MssaBucketRow changing and deleting events.</param>
			protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowDeleting(e);
				if ((this.MssaBucketRowDeleting != null))
				{
					this.MssaBucketRowDeleting(this, new MssaBucketRowChangeEventArgs(((MssaBucketRow)(e.Row)), e.Action));
				}
			}
		}
		
		/// <summary>
		/// The Negotiation table.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public partial class NegotiationDataTable : global::System.Data.TypedTableBase<DataModel.NegotiationRow>
		{
			
			private global::System.Data.DataColumn columnBlotterId;
			
			private global::System.Data.DataColumn columnExecutionId;
			
			private global::System.Data.DataColumn columnIsRead;
			
			private global::System.Data.DataColumn columnMatchId;
			
			private global::System.Data.DataColumn columnNegotiationId;
			
			private global::System.Data.DataColumn columnQuantity;
			
			private global::System.Data.DataColumn columnRowVersion;
			
			private global::System.Data.DataColumn columnStatusCode;
			
			private global::Teraque.DataIndexCollection dataIndices;
			
			private global::Teraque.DataIndex indexNegotiationKey;
			
			private global::System.Data.DataRelation relationBlotterNegotiation;
			
			private global::System.Data.DataRelation relationExecutionNegotiation;
			
			private global::System.Data.DataRelation relationMatchNegotiation;
			
			private global::System.Data.DataRelation relationStatusNegotiation;
			
			/// <summary>
			/// Creates the Negotiation table.
			/// </summary>
			internal NegotiationDataTable()
			{
				// Initialize the object.
				this.TableName = "Negotiation";
				this.dataIndices = new global::Teraque.DataIndexCollection();
				// The BlotterId Column
				this.columnBlotterId = new global::System.Data.DataColumn("BlotterId", typeof(System.Guid), null, global::System.Data.MappingType.Element);
				this.columnBlotterId.AllowDBNull = false;
				this.Columns.Add(this.columnBlotterId);
				// The ExecutionId Column
				this.columnExecutionId = new global::System.Data.DataColumn("ExecutionId", typeof(System.Guid), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnExecutionId);
				// The IsRead Column
				this.columnIsRead = new global::System.Data.DataColumn("IsRead", typeof(bool), null, global::System.Data.MappingType.Element);
				this.columnIsRead.AllowDBNull = false;
				this.columnIsRead.DefaultValue = false;
				this.Columns.Add(this.columnIsRead);
				// The MatchId Column
				this.columnMatchId = new global::System.Data.DataColumn("MatchId", typeof(System.Guid), null, global::System.Data.MappingType.Element);
				this.columnMatchId.AllowDBNull = false;
				this.Columns.Add(this.columnMatchId);
				// The NegotiationId Column
				this.columnNegotiationId = new global::System.Data.DataColumn("NegotiationId", typeof(System.Guid), null, global::System.Data.MappingType.Element);
				this.columnNegotiationId.AllowDBNull = false;
				this.Columns.Add(this.columnNegotiationId);
				// The Quantity Column
				this.columnQuantity = new global::System.Data.DataColumn("Quantity", typeof(decimal), null, global::System.Data.MappingType.Element);
				this.columnQuantity.AllowDBNull = false;
				this.columnQuantity.DefaultValue = 0.0m;
				this.Columns.Add(this.columnQuantity);
				// The RowVersion Column
				this.columnRowVersion = new global::System.Data.DataColumn("RowVersion", typeof(long), null, global::System.Data.MappingType.Element);
				this.columnRowVersion.AllowDBNull = false;
				this.Columns.Add(this.columnRowVersion);
				// The StatusCode Column
				this.columnStatusCode = new global::System.Data.DataColumn("StatusCode", typeof(Teraque.StatusCode), null, global::System.Data.MappingType.Element);
				this.columnStatusCode.AllowDBNull = false;
				this.Columns.Add(this.columnStatusCode);
				// The NegotiationKey Index
				this.indexNegotiationKey = new NegotiationKeyIndex("NegotiationKey", new global::System.Data.DataColumn[] {
							this.columnNegotiationId});
				this.Indices.Add(this.indexNegotiationKey);
			}
			
			/// <summary>
			/// Gets the BlotterId column of the Negotiation table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn BlotterIdColumn
			{
				get
				{
					return this.columnBlotterId;
				}
			}
			
			/// <summary>
			/// Gets the parent relation between the Blotter and Negotiation tables.
			/// </summary>
			public global::System.Data.DataRelation BlotterNegotiationRelation
			{
				get
				{
					return this.relationBlotterNegotiation;
				}
			}
			
			/// <summary>
			/// Gets the number of rows in the Negotiation table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public int Count
			{
				get
				{
					return this.Rows.Count;
				}
			}
			
			/// <summary>
			/// Gets the ExecutionId column of the Negotiation table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn ExecutionIdColumn
			{
				get
				{
					return this.columnExecutionId;
				}
			}
			
			/// <summary>
			/// Gets the parent relation between the Execution and Negotiation tables.
			/// </summary>
			public global::System.Data.DataRelation ExecutionNegotiationRelation
			{
				get
				{
					return this.relationExecutionNegotiation;
				}
			}
			
			/// <summary>
			/// Gets a collection of Teraque.DataModelGenerator.DataIndices on a table.
			/// </summary>
			public global::Teraque.DataIndexCollection Indices
			{
				get
				{
					return this.dataIndices;
				}
			}
			
			/// <summary>
			/// Gets the IsRead column of the Negotiation table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn IsReadColumn
			{
				get
				{
					return this.columnIsRead;
				}
			}
			
			/// <summary>
			/// Indexer to a row in the Negotiation table.
			/// </summary>
			/// <param name="index">The integer index of the row.</param>
			/// <returns>The Negotiation row found at the given index.</returns>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public DataModel.NegotiationRow this[int index]
			{
				get
				{
					return ((DataModel.NegotiationRow)(this.Rows[index]));
				}
			}
			
			/// <summary>
			/// Gets the MatchId column of the Negotiation table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn MatchIdColumn
			{
				get
				{
					return this.columnMatchId;
				}
			}
			
			/// <summary>
			/// Gets the parent relation between the Match and Negotiation tables.
			/// </summary>
			public global::System.Data.DataRelation MatchNegotiationRelation
			{
				get
				{
					return this.relationMatchNegotiation;
				}
			}
			
			/// <summary>
			/// Gets the NegotiationId column of the Negotiation table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn NegotiationIdColumn
			{
				get
				{
					return this.columnNegotiationId;
				}
			}
			
			/// <summary>
			/// Gets the NegotiationKey index on the Negotiation table.
			/// </summary>
			public NegotiationKeyIndex NegotiationKey
			{
				get
				{
					return ((NegotiationKeyIndex)(this.indexNegotiationKey));
				}
			}
			
			/// <summary>
			/// Gets the Quantity column of the Negotiation table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn QuantityColumn
			{
				get
				{
					return this.columnQuantity;
				}
			}
			
			/// <summary>
			/// Gets the RowVersion column of the Negotiation table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn RowVersionColumn
			{
				get
				{
					return this.columnRowVersion;
				}
			}
			
			/// <summary>
			/// Gets the StatusCode column of the Negotiation table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn StatusCodeColumn
			{
				get
				{
					return this.columnStatusCode;
				}
			}
			
			/// <summary>
			/// Gets the parent relation between the Status and Negotiation tables.
			/// </summary>
			public global::System.Data.DataRelation StatusNegotiationRelation
			{
				get
				{
					return this.relationStatusNegotiation;
				}
			}
			
			/// <summary>
			/// Occurs after a Negotiation row has been changed successfully.
			/// </summary>
			public event NegotiationRowChangeEventHandler NegotiationRowChanged;
			
			/// <summary>
			/// Occurs when a Negotiation row is changing.
			/// </summary>
			public event NegotiationRowChangeEventHandler NegotiationRowChanging;
			
			/// <summary>
			/// Occurs after a Negotiation row in the table has been deleted.
			/// </summary>
			public event NegotiationRowChangeEventHandler NegotiationRowDeleted;
			
			/// <summary>
			/// Occurs before a Negotiation row in the table is about to be deleted.
			/// </summary>
			public event NegotiationRowChangeEventHandler NegotiationRowDeleting;
			
			/// <summary>
			/// Returns the type of the row in a Negotiation table.
			/// </summary>
			/// <returns>The NegotiationRow type.</returns>
			protected override global::System.Type GetRowType()
			{
				return typeof(NegotiationRow);
			}
			
			/// <summary>
			/// Initializes the relation fields with the parent and child relations.
			/// </summary>
			internal void InitializeRelations()
			{
				this.relationBlotterNegotiation = this.ParentRelations["FK_Blotter_Negotiation"];
				this.relationExecutionNegotiation = this.ParentRelations["FK_Execution_Negotiation"];
				this.relationMatchNegotiation = this.ParentRelations["FK_Match_Negotiation"];
				this.relationStatusNegotiation = this.ParentRelations["FK_Status_Negotiation"];
			}
			
			/// <summary>
			/// Initializes a new instance of a Negotiation row.  Constructs a row from the builder.  Only for internal usage.
			/// </summary>
			/// <returns>A new row with the same schema as the table.</returns>
			protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder dataRowBuilder)
			{
				return new NegotiationRow(dataRowBuilder);
			}
			
			/// <summary>
			/// Raises the NegotiationRowChanged event.
			/// </summary>
			/// <param name="e">Provides data for the NegotiationRow changing and deleting events.</param>
			protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowChanged(e);
				if ((this.NegotiationRowChanged != null))
				{
					this.NegotiationRowChanged(this, new NegotiationRowChangeEventArgs(((NegotiationRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the NegotiationRowChanging event.
			/// </summary>
			/// <param name="e">Provides data for the NegotiationRow changing and deleting events.</param>
			protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowChanging(e);
				if ((this.NegotiationRowChanging != null))
				{
					this.NegotiationRowChanging(this, new NegotiationRowChangeEventArgs(((NegotiationRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the NegotiationRowDeleted event.
			/// </summary>
			/// <param name="e">Provides data for the NegotiationRow changing and deleting events.</param>
			protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowDeleted(e);
				if ((this.NegotiationRowDeleted != null))
				{
					this.NegotiationRowDeleted(this, new NegotiationRowChangeEventArgs(((NegotiationRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the NegotiationRowDeleting event.
			/// </summary>
			/// <param name="e">Provides data for the NegotiationRow changing and deleting events.</param>
			protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowDeleting(e);
				if ((this.NegotiationRowDeleting != null))
				{
					this.NegotiationRowDeleting(this, new NegotiationRowChangeEventArgs(((NegotiationRow)(e.Row)), e.Action));
				}
			}
		}
		
		/// <summary>
		/// The OrderType table.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public partial class OrderTypeDataTable : global::System.Data.TypedTableBase<DataModel.OrderTypeRow>
		{
			
			private global::System.Data.DataColumn columnDescription;
			
			private global::System.Data.DataColumn columnExternalId0;
			
			private global::System.Data.DataColumn columnExternalId1;
			
			private global::System.Data.DataColumn columnExternalId2;
			
			private global::System.Data.DataColumn columnExternalId3;
			
			private global::System.Data.DataColumn columnMnemonic;
			
			private global::System.Data.DataColumn columnOrderTypeCode;
			
			private global::System.Data.DataColumn columnRowVersion;
			
			private global::Teraque.DataIndexCollection dataIndices;
			
			private global::Teraque.DataIndex indexOrderTypeKey;
			
			private global::Teraque.DataIndex indexOrderTypeKeyExternalId0;
			
			private global::Teraque.DataIndex indexOrderTypeKeyExternalId1;
			
			private global::Teraque.DataIndex indexOrderTypeKeyExternalId2;
			
			private global::Teraque.DataIndex indexOrderTypeKeyExternalId3;
			
			private global::System.Data.DataRelation relationOrderTypeDestinationOrder;
			
			private global::System.Data.DataRelation relationOrderTypeSourceOrder;
			
			private global::System.Data.DataRelation relationOrderTypeWorkingOrder;
			
			/// <summary>
			/// Creates the OrderType table.
			/// </summary>
			internal OrderTypeDataTable()
			{
				// Initialize the object.
				this.TableName = "OrderType";
				this.dataIndices = new global::Teraque.DataIndexCollection();
				// The Description Column
				this.columnDescription = new global::System.Data.DataColumn("Description", typeof(string), null, global::System.Data.MappingType.Element);
				this.columnDescription.AllowDBNull = false;
				this.columnDescription.DefaultValue = "";
				this.Columns.Add(this.columnDescription);
				// The ExternalId0 Column
				this.columnExternalId0 = new global::System.Data.DataColumn("ExternalId0", typeof(string), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnExternalId0);
				// The ExternalId1 Column
				this.columnExternalId1 = new global::System.Data.DataColumn("ExternalId1", typeof(string), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnExternalId1);
				// The ExternalId2 Column
				this.columnExternalId2 = new global::System.Data.DataColumn("ExternalId2", typeof(string), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnExternalId2);
				// The ExternalId3 Column
				this.columnExternalId3 = new global::System.Data.DataColumn("ExternalId3", typeof(string), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnExternalId3);
				// The Mnemonic Column
				this.columnMnemonic = new global::System.Data.DataColumn("Mnemonic", typeof(string), null, global::System.Data.MappingType.Element);
				this.columnMnemonic.AllowDBNull = false;
				this.columnMnemonic.DefaultValue = "";
				this.Columns.Add(this.columnMnemonic);
				// The OrderTypeCode Column
				this.columnOrderTypeCode = new global::System.Data.DataColumn("OrderTypeCode", typeof(Teraque.OrderTypeCode), null, global::System.Data.MappingType.Element);
				this.columnOrderTypeCode.AllowDBNull = false;
				this.Columns.Add(this.columnOrderTypeCode);
				// The RowVersion Column
				this.columnRowVersion = new global::System.Data.DataColumn("RowVersion", typeof(long), null, global::System.Data.MappingType.Element);
				this.columnRowVersion.AllowDBNull = false;
				this.Columns.Add(this.columnRowVersion);
				// The OrderTypeKey Index
				this.indexOrderTypeKey = new OrderTypeKeyIndex("OrderTypeKey", new global::System.Data.DataColumn[] {
							this.columnOrderTypeCode});
				this.Indices.Add(this.indexOrderTypeKey);
				// The OrderTypeKeyExternalId0 Index
				this.indexOrderTypeKeyExternalId0 = new OrderTypeKeyExternalId0Index("OrderTypeKeyExternalId0", new global::System.Data.DataColumn[] {
							this.columnExternalId0});
				this.Indices.Add(this.indexOrderTypeKeyExternalId0);
				// The OrderTypeKeyExternalId1 Index
				this.indexOrderTypeKeyExternalId1 = new OrderTypeKeyExternalId1Index("OrderTypeKeyExternalId1", new global::System.Data.DataColumn[] {
							this.columnExternalId1});
				this.Indices.Add(this.indexOrderTypeKeyExternalId1);
				// The OrderTypeKeyExternalId2 Index
				this.indexOrderTypeKeyExternalId2 = new OrderTypeKeyExternalId2Index("OrderTypeKeyExternalId2", new global::System.Data.DataColumn[] {
							this.columnExternalId2});
				this.Indices.Add(this.indexOrderTypeKeyExternalId2);
				// The OrderTypeKeyExternalId3 Index
				this.indexOrderTypeKeyExternalId3 = new OrderTypeKeyExternalId3Index("OrderTypeKeyExternalId3", new global::System.Data.DataColumn[] {
							this.columnExternalId3});
				this.Indices.Add(this.indexOrderTypeKeyExternalId3);
			}
			
			/// <summary>
			/// Gets the number of rows in the OrderType table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public int Count
			{
				get
				{
					return this.Rows.Count;
				}
			}
			
			/// <summary>
			/// Gets the Description column of the OrderType table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn DescriptionColumn
			{
				get
				{
					return this.columnDescription;
				}
			}
			
			/// <summary>
			/// Gets the ExternalId0 column of the OrderType table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn ExternalId0Column
			{
				get
				{
					return this.columnExternalId0;
				}
			}
			
			/// <summary>
			/// Gets the ExternalId1 column of the OrderType table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn ExternalId1Column
			{
				get
				{
					return this.columnExternalId1;
				}
			}
			
			/// <summary>
			/// Gets the ExternalId2 column of the OrderType table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn ExternalId2Column
			{
				get
				{
					return this.columnExternalId2;
				}
			}
			
			/// <summary>
			/// Gets the ExternalId3 column of the OrderType table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn ExternalId3Column
			{
				get
				{
					return this.columnExternalId3;
				}
			}
			
			/// <summary>
			/// Gets a collection of Teraque.DataModelGenerator.DataIndices on a table.
			/// </summary>
			public global::Teraque.DataIndexCollection Indices
			{
				get
				{
					return this.dataIndices;
				}
			}
			
			/// <summary>
			/// Indexer to a row in the OrderType table.
			/// </summary>
			/// <param name="index">The integer index of the row.</param>
			/// <returns>The OrderType row found at the given index.</returns>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public DataModel.OrderTypeRow this[int index]
			{
				get
				{
					return ((DataModel.OrderTypeRow)(this.Rows[index]));
				}
			}
			
			/// <summary>
			/// Gets the Mnemonic column of the OrderType table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn MnemonicColumn
			{
				get
				{
					return this.columnMnemonic;
				}
			}
			
			/// <summary>
			/// Gets the OrderTypeCode column of the OrderType table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn OrderTypeCodeColumn
			{
				get
				{
					return this.columnOrderTypeCode;
				}
			}
			
			/// <summary>
			/// Gets the child relation between the OrderType and DestinationOrder tables.
			/// </summary>
			internal global::System.Data.DataRelation OrderTypeDestinationOrderRelation
			{
				get
				{
					return this.relationOrderTypeDestinationOrder;
				}
			}
			
			/// <summary>
			/// Gets the OrderTypeKey index on the OrderType table.
			/// </summary>
			public OrderTypeKeyIndex OrderTypeKey
			{
				get
				{
					return ((OrderTypeKeyIndex)(this.indexOrderTypeKey));
				}
			}
			
			/// <summary>
			/// Gets the OrderTypeKeyExternalId0 index on the OrderType table.
			/// </summary>
			public OrderTypeKeyExternalId0Index OrderTypeKeyExternalId0
			{
				get
				{
					return ((OrderTypeKeyExternalId0Index)(this.indexOrderTypeKeyExternalId0));
				}
			}
			
			/// <summary>
			/// Gets the OrderTypeKeyExternalId1 index on the OrderType table.
			/// </summary>
			public OrderTypeKeyExternalId1Index OrderTypeKeyExternalId1
			{
				get
				{
					return ((OrderTypeKeyExternalId1Index)(this.indexOrderTypeKeyExternalId1));
				}
			}
			
			/// <summary>
			/// Gets the OrderTypeKeyExternalId2 index on the OrderType table.
			/// </summary>
			public OrderTypeKeyExternalId2Index OrderTypeKeyExternalId2
			{
				get
				{
					return ((OrderTypeKeyExternalId2Index)(this.indexOrderTypeKeyExternalId2));
				}
			}
			
			/// <summary>
			/// Gets the OrderTypeKeyExternalId3 index on the OrderType table.
			/// </summary>
			public OrderTypeKeyExternalId3Index OrderTypeKeyExternalId3
			{
				get
				{
					return ((OrderTypeKeyExternalId3Index)(this.indexOrderTypeKeyExternalId3));
				}
			}
			
			/// <summary>
			/// Gets the child relation between the OrderType and SourceOrder tables.
			/// </summary>
			internal global::System.Data.DataRelation OrderTypeSourceOrderRelation
			{
				get
				{
					return this.relationOrderTypeSourceOrder;
				}
			}
			
			/// <summary>
			/// Gets the child relation between the OrderType and WorkingOrder tables.
			/// </summary>
			internal global::System.Data.DataRelation OrderTypeWorkingOrderRelation
			{
				get
				{
					return this.relationOrderTypeWorkingOrder;
				}
			}
			
			/// <summary>
			/// Gets the RowVersion column of the OrderType table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn RowVersionColumn
			{
				get
				{
					return this.columnRowVersion;
				}
			}
			
			/// <summary>
			/// Occurs after a OrderType row has been changed successfully.
			/// </summary>
			public event OrderTypeRowChangeEventHandler OrderTypeRowChanged;
			
			/// <summary>
			/// Occurs when a OrderType row is changing.
			/// </summary>
			public event OrderTypeRowChangeEventHandler OrderTypeRowChanging;
			
			/// <summary>
			/// Occurs after a OrderType row in the table has been deleted.
			/// </summary>
			public event OrderTypeRowChangeEventHandler OrderTypeRowDeleted;
			
			/// <summary>
			/// Occurs before a OrderType row in the table is about to be deleted.
			/// </summary>
			public event OrderTypeRowChangeEventHandler OrderTypeRowDeleting;
			
			/// <summary>
			/// Returns the type of the row in a OrderType table.
			/// </summary>
			/// <returns>The OrderTypeRow type.</returns>
			protected override global::System.Type GetRowType()
			{
				return typeof(OrderTypeRow);
			}
			
			/// <summary>
			/// Initializes the relation fields with the parent and child relations.
			/// </summary>
			internal void InitializeRelations()
			{
				this.relationOrderTypeDestinationOrder = this.ChildRelations["FK_OrderType_DestinationOrder"];
				this.relationOrderTypeSourceOrder = this.ChildRelations["FK_OrderType_SourceOrder"];
				this.relationOrderTypeWorkingOrder = this.ChildRelations["FK_OrderType_WorkingOrder"];
			}
			
			/// <summary>
			/// Initializes a new instance of a OrderType row.  Constructs a row from the builder.  Only for internal usage.
			/// </summary>
			/// <returns>A new row with the same schema as the table.</returns>
			protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder dataRowBuilder)
			{
				return new OrderTypeRow(dataRowBuilder);
			}
			
			/// <summary>
			/// Raises the OrderTypeRowChanged event.
			/// </summary>
			/// <param name="e">Provides data for the OrderTypeRow changing and deleting events.</param>
			protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowChanged(e);
				if ((this.OrderTypeRowChanged != null))
				{
					this.OrderTypeRowChanged(this, new OrderTypeRowChangeEventArgs(((OrderTypeRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the OrderTypeRowChanging event.
			/// </summary>
			/// <param name="e">Provides data for the OrderTypeRow changing and deleting events.</param>
			protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowChanging(e);
				if ((this.OrderTypeRowChanging != null))
				{
					this.OrderTypeRowChanging(this, new OrderTypeRowChangeEventArgs(((OrderTypeRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the OrderTypeRowDeleted event.
			/// </summary>
			/// <param name="e">Provides data for the OrderTypeRow changing and deleting events.</param>
			protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowDeleted(e);
				if ((this.OrderTypeRowDeleted != null))
				{
					this.OrderTypeRowDeleted(this, new OrderTypeRowChangeEventArgs(((OrderTypeRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the OrderTypeRowDeleting event.
			/// </summary>
			/// <param name="e">Provides data for the OrderTypeRow changing and deleting events.</param>
			protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowDeleting(e);
				if ((this.OrderTypeRowDeleting != null))
				{
					this.OrderTypeRowDeleting(this, new OrderTypeRowChangeEventArgs(((OrderTypeRow)(e.Row)), e.Action));
				}
			}
		}
		
		/// <summary>
		/// The PartyType table.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public partial class PartyTypeDataTable : global::System.Data.TypedTableBase<DataModel.PartyTypeRow>
		{
			
			private global::System.Data.DataColumn columnDescription;
			
			private global::System.Data.DataColumn columnExternalId0;
			
			private global::System.Data.DataColumn columnExternalId1;
			
			private global::System.Data.DataColumn columnMnemonic;
			
			private global::System.Data.DataColumn columnPartyTypeCode;
			
			private global::System.Data.DataColumn columnRowVersion;
			
			private global::Teraque.DataIndexCollection dataIndices;
			
			private global::Teraque.DataIndex indexPartyTypeKey;
			
			private global::Teraque.DataIndex indexPartyTypeKeyExternalId0;
			
			private global::Teraque.DataIndex indexPartyTypeKeyExternalId1;
			
			private global::System.Data.DataRelation relationPartyTypeBlotter;
			
			/// <summary>
			/// Creates the PartyType table.
			/// </summary>
			internal PartyTypeDataTable()
			{
				// Initialize the object.
				this.TableName = "PartyType";
				this.dataIndices = new global::Teraque.DataIndexCollection();
				// The Description Column
				this.columnDescription = new global::System.Data.DataColumn("Description", typeof(string), null, global::System.Data.MappingType.Element);
				this.columnDescription.AllowDBNull = false;
				this.columnDescription.DefaultValue = "";
				this.Columns.Add(this.columnDescription);
				// The ExternalId0 Column
				this.columnExternalId0 = new global::System.Data.DataColumn("ExternalId0", typeof(string), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnExternalId0);
				// The ExternalId1 Column
				this.columnExternalId1 = new global::System.Data.DataColumn("ExternalId1", typeof(string), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnExternalId1);
				// The Mnemonic Column
				this.columnMnemonic = new global::System.Data.DataColumn("Mnemonic", typeof(string), null, global::System.Data.MappingType.Element);
				this.columnMnemonic.AllowDBNull = false;
				this.columnMnemonic.DefaultValue = "";
				this.Columns.Add(this.columnMnemonic);
				// The PartyTypeCode Column
				this.columnPartyTypeCode = new global::System.Data.DataColumn("PartyTypeCode", typeof(Teraque.PartyTypeCode), null, global::System.Data.MappingType.Element);
				this.columnPartyTypeCode.AllowDBNull = false;
				this.Columns.Add(this.columnPartyTypeCode);
				// The RowVersion Column
				this.columnRowVersion = new global::System.Data.DataColumn("RowVersion", typeof(long), null, global::System.Data.MappingType.Element);
				this.columnRowVersion.AllowDBNull = false;
				this.Columns.Add(this.columnRowVersion);
				// The PartyTypeKey Index
				this.indexPartyTypeKey = new PartyTypeKeyIndex("PartyTypeKey", new global::System.Data.DataColumn[] {
							this.columnPartyTypeCode});
				this.Indices.Add(this.indexPartyTypeKey);
				// The PartyTypeKeyExternalId0 Index
				this.indexPartyTypeKeyExternalId0 = new PartyTypeKeyExternalId0Index("PartyTypeKeyExternalId0", new global::System.Data.DataColumn[] {
							this.columnExternalId0});
				this.Indices.Add(this.indexPartyTypeKeyExternalId0);
				// The PartyTypeKeyExternalId1 Index
				this.indexPartyTypeKeyExternalId1 = new PartyTypeKeyExternalId1Index("PartyTypeKeyExternalId1", new global::System.Data.DataColumn[] {
							this.columnExternalId1});
				this.Indices.Add(this.indexPartyTypeKeyExternalId1);
			}
			
			/// <summary>
			/// Gets the number of rows in the PartyType table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public int Count
			{
				get
				{
					return this.Rows.Count;
				}
			}
			
			/// <summary>
			/// Gets the Description column of the PartyType table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn DescriptionColumn
			{
				get
				{
					return this.columnDescription;
				}
			}
			
			/// <summary>
			/// Gets the ExternalId0 column of the PartyType table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn ExternalId0Column
			{
				get
				{
					return this.columnExternalId0;
				}
			}
			
			/// <summary>
			/// Gets the ExternalId1 column of the PartyType table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn ExternalId1Column
			{
				get
				{
					return this.columnExternalId1;
				}
			}
			
			/// <summary>
			/// Gets a collection of Teraque.DataModelGenerator.DataIndices on a table.
			/// </summary>
			public global::Teraque.DataIndexCollection Indices
			{
				get
				{
					return this.dataIndices;
				}
			}
			
			/// <summary>
			/// Indexer to a row in the PartyType table.
			/// </summary>
			/// <param name="index">The integer index of the row.</param>
			/// <returns>The PartyType row found at the given index.</returns>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public DataModel.PartyTypeRow this[int index]
			{
				get
				{
					return ((DataModel.PartyTypeRow)(this.Rows[index]));
				}
			}
			
			/// <summary>
			/// Gets the Mnemonic column of the PartyType table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn MnemonicColumn
			{
				get
				{
					return this.columnMnemonic;
				}
			}
			
			/// <summary>
			/// Gets the child relation between the PartyType and Blotter tables.
			/// </summary>
			internal global::System.Data.DataRelation PartyTypeBlotterRelation
			{
				get
				{
					return this.relationPartyTypeBlotter;
				}
			}
			
			/// <summary>
			/// Gets the PartyTypeCode column of the PartyType table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn PartyTypeCodeColumn
			{
				get
				{
					return this.columnPartyTypeCode;
				}
			}
			
			/// <summary>
			/// Gets the PartyTypeKey index on the PartyType table.
			/// </summary>
			public PartyTypeKeyIndex PartyTypeKey
			{
				get
				{
					return ((PartyTypeKeyIndex)(this.indexPartyTypeKey));
				}
			}
			
			/// <summary>
			/// Gets the PartyTypeKeyExternalId0 index on the PartyType table.
			/// </summary>
			public PartyTypeKeyExternalId0Index PartyTypeKeyExternalId0
			{
				get
				{
					return ((PartyTypeKeyExternalId0Index)(this.indexPartyTypeKeyExternalId0));
				}
			}
			
			/// <summary>
			/// Gets the PartyTypeKeyExternalId1 index on the PartyType table.
			/// </summary>
			public PartyTypeKeyExternalId1Index PartyTypeKeyExternalId1
			{
				get
				{
					return ((PartyTypeKeyExternalId1Index)(this.indexPartyTypeKeyExternalId1));
				}
			}
			
			/// <summary>
			/// Gets the RowVersion column of the PartyType table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn RowVersionColumn
			{
				get
				{
					return this.columnRowVersion;
				}
			}
			
			/// <summary>
			/// Occurs after a PartyType row has been changed successfully.
			/// </summary>
			public event PartyTypeRowChangeEventHandler PartyTypeRowChanged;
			
			/// <summary>
			/// Occurs when a PartyType row is changing.
			/// </summary>
			public event PartyTypeRowChangeEventHandler PartyTypeRowChanging;
			
			/// <summary>
			/// Occurs after a PartyType row in the table has been deleted.
			/// </summary>
			public event PartyTypeRowChangeEventHandler PartyTypeRowDeleted;
			
			/// <summary>
			/// Occurs before a PartyType row in the table is about to be deleted.
			/// </summary>
			public event PartyTypeRowChangeEventHandler PartyTypeRowDeleting;
			
			/// <summary>
			/// Returns the type of the row in a PartyType table.
			/// </summary>
			/// <returns>The PartyTypeRow type.</returns>
			protected override global::System.Type GetRowType()
			{
				return typeof(PartyTypeRow);
			}
			
			/// <summary>
			/// Initializes the relation fields with the parent and child relations.
			/// </summary>
			internal void InitializeRelations()
			{
				this.relationPartyTypeBlotter = this.ChildRelations["FK_PartyType_Blotter"];
			}
			
			/// <summary>
			/// Initializes a new instance of a PartyType row.  Constructs a row from the builder.  Only for internal usage.
			/// </summary>
			/// <returns>A new row with the same schema as the table.</returns>
			protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder dataRowBuilder)
			{
				return new PartyTypeRow(dataRowBuilder);
			}
			
			/// <summary>
			/// Raises the PartyTypeRowChanged event.
			/// </summary>
			/// <param name="e">Provides data for the PartyTypeRow changing and deleting events.</param>
			protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowChanged(e);
				if ((this.PartyTypeRowChanged != null))
				{
					this.PartyTypeRowChanged(this, new PartyTypeRowChangeEventArgs(((PartyTypeRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the PartyTypeRowChanging event.
			/// </summary>
			/// <param name="e">Provides data for the PartyTypeRow changing and deleting events.</param>
			protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowChanging(e);
				if ((this.PartyTypeRowChanging != null))
				{
					this.PartyTypeRowChanging(this, new PartyTypeRowChangeEventArgs(((PartyTypeRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the PartyTypeRowDeleted event.
			/// </summary>
			/// <param name="e">Provides data for the PartyTypeRow changing and deleting events.</param>
			protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowDeleted(e);
				if ((this.PartyTypeRowDeleted != null))
				{
					this.PartyTypeRowDeleted(this, new PartyTypeRowChangeEventArgs(((PartyTypeRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the PartyTypeRowDeleting event.
			/// </summary>
			/// <param name="e">Provides data for the PartyTypeRow changing and deleting events.</param>
			protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowDeleting(e);
				if ((this.PartyTypeRowDeleting != null))
				{
					this.PartyTypeRowDeleting(this, new PartyTypeRowChangeEventArgs(((PartyTypeRow)(e.Row)), e.Action));
				}
			}
		}
		
		/// <summary>
		/// The Position table.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public partial class PositionDataTable : global::System.Data.TypedTableBase<DataModel.PositionRow>
		{
			
			private global::System.Data.DataColumn columnAccountId;
			
			private global::System.Data.DataColumn columnExternalId0;
			
			private global::System.Data.DataColumn columnExternalId1;
			
			private global::System.Data.DataColumn columnExternalId2;
			
			private global::System.Data.DataColumn columnExternalId3;
			
			private global::System.Data.DataColumn columnPositionId;
			
			private global::System.Data.DataColumn columnPositionTypeCode;
			
			private global::System.Data.DataColumn columnRowVersion;
			
			private global::System.Data.DataColumn columnSecurityId;
			
			private global::Teraque.DataIndexCollection dataIndices;
			
			private global::Teraque.DataIndex indexPositionKey;
			
			private global::Teraque.DataIndex indexPositionKeyAccountPositionTypeCodeSecurityId;
			
			private global::Teraque.DataIndex indexPositionKeyExternalId0;
			
			private global::Teraque.DataIndex indexPositionKeyExternalId1;
			
			private global::Teraque.DataIndex indexPositionKeyExternalId2;
			
			private global::Teraque.DataIndex indexPositionKeyExternalId3;
			
			private global::System.Data.DataRelation relationAccountPosition;
			
			private global::System.Data.DataRelation relationPositionPositionSeries;
			
			private global::System.Data.DataRelation relationPositionTaxLot;
			
			private global::System.Data.DataRelation relationPositionTypePosition;
			
			private global::System.Data.DataRelation relationSecurityPosition;
			
			/// <summary>
			/// Creates the Position table.
			/// </summary>
			internal PositionDataTable()
			{
				// Initialize the object.
				this.TableName = "Position";
				this.dataIndices = new global::Teraque.DataIndexCollection();
				// The AccountId Column
				this.columnAccountId = new global::System.Data.DataColumn("AccountId", typeof(System.Guid), null, global::System.Data.MappingType.Element);
				this.columnAccountId.AllowDBNull = false;
				this.Columns.Add(this.columnAccountId);
				// The ExternalId0 Column
				this.columnExternalId0 = new global::System.Data.DataColumn("ExternalId0", typeof(string), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnExternalId0);
				// The ExternalId1 Column
				this.columnExternalId1 = new global::System.Data.DataColumn("ExternalId1", typeof(string), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnExternalId1);
				// The ExternalId2 Column
				this.columnExternalId2 = new global::System.Data.DataColumn("ExternalId2", typeof(string), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnExternalId2);
				// The ExternalId3 Column
				this.columnExternalId3 = new global::System.Data.DataColumn("ExternalId3", typeof(string), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnExternalId3);
				// The PositionId Column
				this.columnPositionId = new global::System.Data.DataColumn("PositionId", typeof(System.Guid), null, global::System.Data.MappingType.Element);
				this.columnPositionId.AllowDBNull = false;
				this.Columns.Add(this.columnPositionId);
				// The PositionTypeCode Column
				this.columnPositionTypeCode = new global::System.Data.DataColumn("PositionTypeCode", typeof(Teraque.PositionTypeCode), null, global::System.Data.MappingType.Element);
				this.columnPositionTypeCode.AllowDBNull = false;
				this.Columns.Add(this.columnPositionTypeCode);
				// The RowVersion Column
				this.columnRowVersion = new global::System.Data.DataColumn("RowVersion", typeof(long), null, global::System.Data.MappingType.Element);
				this.columnRowVersion.AllowDBNull = false;
				this.Columns.Add(this.columnRowVersion);
				// The SecurityId Column
				this.columnSecurityId = new global::System.Data.DataColumn("SecurityId", typeof(System.Guid), null, global::System.Data.MappingType.Element);
				this.columnSecurityId.AllowDBNull = false;
				this.Columns.Add(this.columnSecurityId);
				// The PositionKey Index
				this.indexPositionKey = new PositionKeyIndex("PositionKey", new global::System.Data.DataColumn[] {
							this.columnPositionId});
				this.Indices.Add(this.indexPositionKey);
				// The PositionKeyAccountPositionTypeCodeSecurityId Index
				this.indexPositionKeyAccountPositionTypeCodeSecurityId = new PositionKeyAccountPositionTypeCodeSecurityIdIndex("PositionKeyAccountPositionTypeCodeSecurityId", new global::System.Data.DataColumn[] {
							this.columnAccountId,
							this.columnPositionTypeCode,
							this.columnSecurityId});
				this.Constraints.Add(new global::System.Data.UniqueConstraint(new global::System.Data.DataColumn[] {
								this.columnAccountId,
								this.columnPositionTypeCode,
								this.columnSecurityId}));
				this.Indices.Add(this.indexPositionKeyAccountPositionTypeCodeSecurityId);
				// The PositionKeyExternalId0 Index
				this.indexPositionKeyExternalId0 = new PositionKeyExternalId0Index("PositionKeyExternalId0", new global::System.Data.DataColumn[] {
							this.columnExternalId0});
				this.Indices.Add(this.indexPositionKeyExternalId0);
				// The PositionKeyExternalId1 Index
				this.indexPositionKeyExternalId1 = new PositionKeyExternalId1Index("PositionKeyExternalId1", new global::System.Data.DataColumn[] {
							this.columnExternalId1});
				this.Indices.Add(this.indexPositionKeyExternalId1);
				// The PositionKeyExternalId2 Index
				this.indexPositionKeyExternalId2 = new PositionKeyExternalId2Index("PositionKeyExternalId2", new global::System.Data.DataColumn[] {
							this.columnExternalId2});
				this.Indices.Add(this.indexPositionKeyExternalId2);
				// The PositionKeyExternalId3 Index
				this.indexPositionKeyExternalId3 = new PositionKeyExternalId3Index("PositionKeyExternalId3", new global::System.Data.DataColumn[] {
							this.columnExternalId3});
				this.Indices.Add(this.indexPositionKeyExternalId3);
			}
			
			/// <summary>
			/// Gets the AccountId column of the Position table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn AccountIdColumn
			{
				get
				{
					return this.columnAccountId;
				}
			}
			
			/// <summary>
			/// Gets the parent relation between the Account and Position tables.
			/// </summary>
			public global::System.Data.DataRelation AccountPositionRelation
			{
				get
				{
					return this.relationAccountPosition;
				}
			}
			
			/// <summary>
			/// Gets the number of rows in the Position table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public int Count
			{
				get
				{
					return this.Rows.Count;
				}
			}
			
			/// <summary>
			/// Gets the ExternalId0 column of the Position table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn ExternalId0Column
			{
				get
				{
					return this.columnExternalId0;
				}
			}
			
			/// <summary>
			/// Gets the ExternalId1 column of the Position table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn ExternalId1Column
			{
				get
				{
					return this.columnExternalId1;
				}
			}
			
			/// <summary>
			/// Gets the ExternalId2 column of the Position table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn ExternalId2Column
			{
				get
				{
					return this.columnExternalId2;
				}
			}
			
			/// <summary>
			/// Gets the ExternalId3 column of the Position table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn ExternalId3Column
			{
				get
				{
					return this.columnExternalId3;
				}
			}
			
			/// <summary>
			/// Gets a collection of Teraque.DataModelGenerator.DataIndices on a table.
			/// </summary>
			public global::Teraque.DataIndexCollection Indices
			{
				get
				{
					return this.dataIndices;
				}
			}
			
			/// <summary>
			/// Indexer to a row in the Position table.
			/// </summary>
			/// <param name="index">The integer index of the row.</param>
			/// <returns>The Position row found at the given index.</returns>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public DataModel.PositionRow this[int index]
			{
				get
				{
					return ((DataModel.PositionRow)(this.Rows[index]));
				}
			}
			
			/// <summary>
			/// Gets the PositionId column of the Position table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn PositionIdColumn
			{
				get
				{
					return this.columnPositionId;
				}
			}
			
			/// <summary>
			/// Gets the PositionKey index on the Position table.
			/// </summary>
			public PositionKeyIndex PositionKey
			{
				get
				{
					return ((PositionKeyIndex)(this.indexPositionKey));
				}
			}
			
			/// <summary>
			/// Gets the PositionKeyAccountPositionTypeCodeSecurityId index on the Position table.
			/// </summary>
			public PositionKeyAccountPositionTypeCodeSecurityIdIndex PositionKeyAccountPositionTypeCodeSecurityId
			{
				get
				{
					return ((PositionKeyAccountPositionTypeCodeSecurityIdIndex)(this.indexPositionKeyAccountPositionTypeCodeSecurityId));
				}
			}
			
			/// <summary>
			/// Gets the PositionKeyExternalId0 index on the Position table.
			/// </summary>
			public PositionKeyExternalId0Index PositionKeyExternalId0
			{
				get
				{
					return ((PositionKeyExternalId0Index)(this.indexPositionKeyExternalId0));
				}
			}
			
			/// <summary>
			/// Gets the PositionKeyExternalId1 index on the Position table.
			/// </summary>
			public PositionKeyExternalId1Index PositionKeyExternalId1
			{
				get
				{
					return ((PositionKeyExternalId1Index)(this.indexPositionKeyExternalId1));
				}
			}
			
			/// <summary>
			/// Gets the PositionKeyExternalId2 index on the Position table.
			/// </summary>
			public PositionKeyExternalId2Index PositionKeyExternalId2
			{
				get
				{
					return ((PositionKeyExternalId2Index)(this.indexPositionKeyExternalId2));
				}
			}
			
			/// <summary>
			/// Gets the PositionKeyExternalId3 index on the Position table.
			/// </summary>
			public PositionKeyExternalId3Index PositionKeyExternalId3
			{
				get
				{
					return ((PositionKeyExternalId3Index)(this.indexPositionKeyExternalId3));
				}
			}
			
			/// <summary>
			/// Gets the child relation between the Position and PositionSeries tables.
			/// </summary>
			internal global::System.Data.DataRelation PositionPositionSeriesRelation
			{
				get
				{
					return this.relationPositionPositionSeries;
				}
			}
			
			/// <summary>
			/// Gets the child relation between the Position and TaxLot tables.
			/// </summary>
			internal global::System.Data.DataRelation PositionTaxLotRelation
			{
				get
				{
					return this.relationPositionTaxLot;
				}
			}
			
			/// <summary>
			/// Gets the PositionTypeCode column of the Position table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn PositionTypeCodeColumn
			{
				get
				{
					return this.columnPositionTypeCode;
				}
			}
			
			/// <summary>
			/// Gets the parent relation between the PositionType and Position tables.
			/// </summary>
			public global::System.Data.DataRelation PositionTypePositionRelation
			{
				get
				{
					return this.relationPositionTypePosition;
				}
			}
			
			/// <summary>
			/// Gets the RowVersion column of the Position table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn RowVersionColumn
			{
				get
				{
					return this.columnRowVersion;
				}
			}
			
			/// <summary>
			/// Gets the SecurityId column of the Position table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn SecurityIdColumn
			{
				get
				{
					return this.columnSecurityId;
				}
			}
			
			/// <summary>
			/// Gets the parent relation between the Security and Position tables.
			/// </summary>
			public global::System.Data.DataRelation SecurityPositionRelation
			{
				get
				{
					return this.relationSecurityPosition;
				}
			}
			
			/// <summary>
			/// Occurs after a Position row has been changed successfully.
			/// </summary>
			public event PositionRowChangeEventHandler PositionRowChanged;
			
			/// <summary>
			/// Occurs when a Position row is changing.
			/// </summary>
			public event PositionRowChangeEventHandler PositionRowChanging;
			
			/// <summary>
			/// Occurs after a Position row in the table has been deleted.
			/// </summary>
			public event PositionRowChangeEventHandler PositionRowDeleted;
			
			/// <summary>
			/// Occurs before a Position row in the table is about to be deleted.
			/// </summary>
			public event PositionRowChangeEventHandler PositionRowDeleting;
			
			/// <summary>
			/// Returns the type of the row in a Position table.
			/// </summary>
			/// <returns>The PositionRow type.</returns>
			protected override global::System.Type GetRowType()
			{
				return typeof(PositionRow);
			}
			
			/// <summary>
			/// Initializes the relation fields with the parent and child relations.
			/// </summary>
			internal void InitializeRelations()
			{
				this.relationAccountPosition = this.ParentRelations["FK_Account_Position"];
				this.relationPositionTypePosition = this.ParentRelations["FK_PositionType_Position"];
				this.relationSecurityPosition = this.ParentRelations["FK_Security_Position"];
				this.relationPositionPositionSeries = this.ChildRelations["FK_Position_PositionSeries"];
				this.relationPositionTaxLot = this.ChildRelations["FK_Position_TaxLot"];
			}
			
			/// <summary>
			/// Initializes a new instance of a Position row.  Constructs a row from the builder.  Only for internal usage.
			/// </summary>
			/// <returns>A new row with the same schema as the table.</returns>
			protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder dataRowBuilder)
			{
				return new PositionRow(dataRowBuilder);
			}
			
			/// <summary>
			/// Raises the PositionRowChanged event.
			/// </summary>
			/// <param name="e">Provides data for the PositionRow changing and deleting events.</param>
			protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowChanged(e);
				if ((this.PositionRowChanged != null))
				{
					this.PositionRowChanged(this, new PositionRowChangeEventArgs(((PositionRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the PositionRowChanging event.
			/// </summary>
			/// <param name="e">Provides data for the PositionRow changing and deleting events.</param>
			protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowChanging(e);
				if ((this.PositionRowChanging != null))
				{
					this.PositionRowChanging(this, new PositionRowChangeEventArgs(((PositionRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the PositionRowDeleted event.
			/// </summary>
			/// <param name="e">Provides data for the PositionRow changing and deleting events.</param>
			protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowDeleted(e);
				if ((this.PositionRowDeleted != null))
				{
					this.PositionRowDeleted(this, new PositionRowChangeEventArgs(((PositionRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the PositionRowDeleting event.
			/// </summary>
			/// <param name="e">Provides data for the PositionRow changing and deleting events.</param>
			protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowDeleting(e);
				if ((this.PositionRowDeleting != null))
				{
					this.PositionRowDeleting(this, new PositionRowChangeEventArgs(((PositionRow)(e.Row)), e.Action));
				}
			}
		}
		
		/// <summary>
		/// The PositionSeries table.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public partial class PositionSeriesDataTable : global::System.Data.TypedTableBase<DataModel.PositionSeriesRow>
		{
			
			private global::System.Data.DataColumn columnAccountId;
			
			private global::System.Data.DataColumn columnBaseCost;
			
			private global::System.Data.DataColumn columnBasePrice;
			
			private global::System.Data.DataColumn columnDate;
			
			private global::System.Data.DataColumn columnExternalId0;
			
			private global::System.Data.DataColumn columnExternalId1;
			
			private global::System.Data.DataColumn columnLocalCost;
			
			private global::System.Data.DataColumn columnLocalPrice;
			
			private global::System.Data.DataColumn columnPositionId;
			
			private global::System.Data.DataColumn columnPositionSeriesId;
			
			private global::System.Data.DataColumn columnPositionTypeCode;
			
			private global::System.Data.DataColumn columnRowVersion;
			
			private global::System.Data.DataColumn columnSecurityId;
			
			private global::System.Data.DataColumn columnSecuritySeriesId;
			
			private global::Teraque.DataIndexCollection dataIndices;
			
			private global::Teraque.DataIndex indexPositionSeriesKey;
			
			private global::Teraque.DataIndex indexPositionSeriesKeyDatePositionId;
			
			private global::Teraque.DataIndex indexPositionSeriesKeyExternalId0;
			
			private global::Teraque.DataIndex indexPositionSeriesKeyExternalId1;
			
			private global::System.Data.DataRelation relationAccountPositionSeries;
			
			private global::System.Data.DataRelation relationPositionPositionSeries;
			
			private global::System.Data.DataRelation relationPositionSeriesTaxLotSeries;
			
			private global::System.Data.DataRelation relationPositionTypePositionSeries;
			
			private global::System.Data.DataRelation relationSecurityPositionSeries;
			
			private global::System.Data.DataRelation relationSecuritySeriesPositionSeries;
			
			/// <summary>
			/// Creates the PositionSeries table.
			/// </summary>
			internal PositionSeriesDataTable()
			{
				// Initialize the object.
				this.TableName = "PositionSeries";
				this.dataIndices = new global::Teraque.DataIndexCollection();
				// The AccountId Column
				this.columnAccountId = new global::System.Data.DataColumn("AccountId", typeof(System.Guid), null, global::System.Data.MappingType.Element);
				this.columnAccountId.AllowDBNull = false;
				this.Columns.Add(this.columnAccountId);
				// The BaseCost Column
				this.columnBaseCost = new global::System.Data.DataColumn("BaseCost", typeof(decimal), null, global::System.Data.MappingType.Element);
				this.columnBaseCost.AllowDBNull = false;
				this.columnBaseCost.DefaultValue = 0.0m;
				this.Columns.Add(this.columnBaseCost);
				// The BasePrice Column
				this.columnBasePrice = new global::System.Data.DataColumn("BasePrice", typeof(decimal), null, global::System.Data.MappingType.Element);
				this.columnBasePrice.AllowDBNull = false;
				this.columnBasePrice.DefaultValue = 0.0m;
				this.Columns.Add(this.columnBasePrice);
				// The Date Column
				this.columnDate = new global::System.Data.DataColumn("Date", typeof(System.DateTime), null, global::System.Data.MappingType.Element);
				this.columnDate.AllowDBNull = false;
				this.Columns.Add(this.columnDate);
				// The ExternalId0 Column
				this.columnExternalId0 = new global::System.Data.DataColumn("ExternalId0", typeof(string), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnExternalId0);
				// The ExternalId1 Column
				this.columnExternalId1 = new global::System.Data.DataColumn("ExternalId1", typeof(string), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnExternalId1);
				// The LocalCost Column
				this.columnLocalCost = new global::System.Data.DataColumn("LocalCost", typeof(decimal), null, global::System.Data.MappingType.Element);
				this.columnLocalCost.AllowDBNull = false;
				this.columnLocalCost.DefaultValue = 0.0m;
				this.Columns.Add(this.columnLocalCost);
				// The LocalPrice Column
				this.columnLocalPrice = new global::System.Data.DataColumn("LocalPrice", typeof(decimal), null, global::System.Data.MappingType.Element);
				this.columnLocalPrice.AllowDBNull = false;
				this.columnLocalPrice.DefaultValue = 0.0m;
				this.Columns.Add(this.columnLocalPrice);
				// The PositionId Column
				this.columnPositionId = new global::System.Data.DataColumn("PositionId", typeof(System.Guid), null, global::System.Data.MappingType.Element);
				this.columnPositionId.AllowDBNull = false;
				this.Columns.Add(this.columnPositionId);
				// The PositionSeriesId Column
				this.columnPositionSeriesId = new global::System.Data.DataColumn("PositionSeriesId", typeof(System.Guid), null, global::System.Data.MappingType.Element);
				this.columnPositionSeriesId.AllowDBNull = false;
				this.Columns.Add(this.columnPositionSeriesId);
				// The PositionTypeCode Column
				this.columnPositionTypeCode = new global::System.Data.DataColumn("PositionTypeCode", typeof(Teraque.PositionTypeCode), null, global::System.Data.MappingType.Element);
				this.columnPositionTypeCode.AllowDBNull = false;
				this.Columns.Add(this.columnPositionTypeCode);
				// The RowVersion Column
				this.columnRowVersion = new global::System.Data.DataColumn("RowVersion", typeof(long), null, global::System.Data.MappingType.Element);
				this.columnRowVersion.AllowDBNull = false;
				this.Columns.Add(this.columnRowVersion);
				// The SecurityId Column
				this.columnSecurityId = new global::System.Data.DataColumn("SecurityId", typeof(System.Guid), null, global::System.Data.MappingType.Element);
				this.columnSecurityId.AllowDBNull = false;
				this.Columns.Add(this.columnSecurityId);
				// The SecuritySeriesId Column
				this.columnSecuritySeriesId = new global::System.Data.DataColumn("SecuritySeriesId", typeof(System.Guid), null, global::System.Data.MappingType.Element);
				this.columnSecuritySeriesId.AllowDBNull = false;
				this.Columns.Add(this.columnSecuritySeriesId);
				// The PositionSeriesKey Index
				this.indexPositionSeriesKey = new PositionSeriesKeyIndex("PositionSeriesKey", new global::System.Data.DataColumn[] {
							this.columnPositionSeriesId});
				this.Indices.Add(this.indexPositionSeriesKey);
				// The PositionSeriesKeyDatePositionId Index
				this.indexPositionSeriesKeyDatePositionId = new PositionSeriesKeyDatePositionIdIndex("PositionSeriesKeyDatePositionId", new global::System.Data.DataColumn[] {
							this.columnDate,
							this.columnPositionId});
				this.Constraints.Add(new global::System.Data.UniqueConstraint(new global::System.Data.DataColumn[] {
								this.columnDate,
								this.columnPositionId}));
				this.Indices.Add(this.indexPositionSeriesKeyDatePositionId);
				// The PositionSeriesKeyExternalId0 Index
				this.indexPositionSeriesKeyExternalId0 = new PositionSeriesKeyExternalId0Index("PositionSeriesKeyExternalId0", new global::System.Data.DataColumn[] {
							this.columnExternalId0});
				this.Indices.Add(this.indexPositionSeriesKeyExternalId0);
				// The PositionSeriesKeyExternalId1 Index
				this.indexPositionSeriesKeyExternalId1 = new PositionSeriesKeyExternalId1Index("PositionSeriesKeyExternalId1", new global::System.Data.DataColumn[] {
							this.columnExternalId1});
				this.Indices.Add(this.indexPositionSeriesKeyExternalId1);
			}
			
			/// <summary>
			/// Gets the AccountId column of the PositionSeries table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn AccountIdColumn
			{
				get
				{
					return this.columnAccountId;
				}
			}
			
			/// <summary>
			/// Gets the parent relation between the Account and PositionSeries tables.
			/// </summary>
			public global::System.Data.DataRelation AccountPositionSeriesRelation
			{
				get
				{
					return this.relationAccountPositionSeries;
				}
			}
			
			/// <summary>
			/// Gets the BaseCost column of the PositionSeries table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn BaseCostColumn
			{
				get
				{
					return this.columnBaseCost;
				}
			}
			
			/// <summary>
			/// Gets the BasePrice column of the PositionSeries table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn BasePriceColumn
			{
				get
				{
					return this.columnBasePrice;
				}
			}
			
			/// <summary>
			/// Gets the number of rows in the PositionSeries table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public int Count
			{
				get
				{
					return this.Rows.Count;
				}
			}
			
			/// <summary>
			/// Gets the Date column of the PositionSeries table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn DateColumn
			{
				get
				{
					return this.columnDate;
				}
			}
			
			/// <summary>
			/// Gets the ExternalId0 column of the PositionSeries table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn ExternalId0Column
			{
				get
				{
					return this.columnExternalId0;
				}
			}
			
			/// <summary>
			/// Gets the ExternalId1 column of the PositionSeries table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn ExternalId1Column
			{
				get
				{
					return this.columnExternalId1;
				}
			}
			
			/// <summary>
			/// Gets a collection of Teraque.DataModelGenerator.DataIndices on a table.
			/// </summary>
			public global::Teraque.DataIndexCollection Indices
			{
				get
				{
					return this.dataIndices;
				}
			}
			
			/// <summary>
			/// Indexer to a row in the PositionSeries table.
			/// </summary>
			/// <param name="index">The integer index of the row.</param>
			/// <returns>The PositionSeries row found at the given index.</returns>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public DataModel.PositionSeriesRow this[int index]
			{
				get
				{
					return ((DataModel.PositionSeriesRow)(this.Rows[index]));
				}
			}
			
			/// <summary>
			/// Gets the LocalCost column of the PositionSeries table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn LocalCostColumn
			{
				get
				{
					return this.columnLocalCost;
				}
			}
			
			/// <summary>
			/// Gets the LocalPrice column of the PositionSeries table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn LocalPriceColumn
			{
				get
				{
					return this.columnLocalPrice;
				}
			}
			
			/// <summary>
			/// Gets the PositionId column of the PositionSeries table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn PositionIdColumn
			{
				get
				{
					return this.columnPositionId;
				}
			}
			
			/// <summary>
			/// Gets the parent relation between the Position and PositionSeries tables.
			/// </summary>
			public global::System.Data.DataRelation PositionPositionSeriesRelation
			{
				get
				{
					return this.relationPositionPositionSeries;
				}
			}
			
			/// <summary>
			/// Gets the PositionSeriesId column of the PositionSeries table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn PositionSeriesIdColumn
			{
				get
				{
					return this.columnPositionSeriesId;
				}
			}
			
			/// <summary>
			/// Gets the PositionSeriesKey index on the PositionSeries table.
			/// </summary>
			public PositionSeriesKeyIndex PositionSeriesKey
			{
				get
				{
					return ((PositionSeriesKeyIndex)(this.indexPositionSeriesKey));
				}
			}
			
			/// <summary>
			/// Gets the PositionSeriesKeyDatePositionId index on the PositionSeries table.
			/// </summary>
			public PositionSeriesKeyDatePositionIdIndex PositionSeriesKeyDatePositionId
			{
				get
				{
					return ((PositionSeriesKeyDatePositionIdIndex)(this.indexPositionSeriesKeyDatePositionId));
				}
			}
			
			/// <summary>
			/// Gets the PositionSeriesKeyExternalId0 index on the PositionSeries table.
			/// </summary>
			public PositionSeriesKeyExternalId0Index PositionSeriesKeyExternalId0
			{
				get
				{
					return ((PositionSeriesKeyExternalId0Index)(this.indexPositionSeriesKeyExternalId0));
				}
			}
			
			/// <summary>
			/// Gets the PositionSeriesKeyExternalId1 index on the PositionSeries table.
			/// </summary>
			public PositionSeriesKeyExternalId1Index PositionSeriesKeyExternalId1
			{
				get
				{
					return ((PositionSeriesKeyExternalId1Index)(this.indexPositionSeriesKeyExternalId1));
				}
			}
			
			/// <summary>
			/// Gets the child relation between the PositionSeries and TaxLotSeries tables.
			/// </summary>
			internal global::System.Data.DataRelation PositionSeriesTaxLotSeriesRelation
			{
				get
				{
					return this.relationPositionSeriesTaxLotSeries;
				}
			}
			
			/// <summary>
			/// Gets the PositionTypeCode column of the PositionSeries table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn PositionTypeCodeColumn
			{
				get
				{
					return this.columnPositionTypeCode;
				}
			}
			
			/// <summary>
			/// Gets the parent relation between the PositionType and PositionSeries tables.
			/// </summary>
			public global::System.Data.DataRelation PositionTypePositionSeriesRelation
			{
				get
				{
					return this.relationPositionTypePositionSeries;
				}
			}
			
			/// <summary>
			/// Gets the RowVersion column of the PositionSeries table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn RowVersionColumn
			{
				get
				{
					return this.columnRowVersion;
				}
			}
			
			/// <summary>
			/// Gets the SecurityId column of the PositionSeries table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn SecurityIdColumn
			{
				get
				{
					return this.columnSecurityId;
				}
			}
			
			/// <summary>
			/// Gets the parent relation between the Security and PositionSeries tables.
			/// </summary>
			public global::System.Data.DataRelation SecurityPositionSeriesRelation
			{
				get
				{
					return this.relationSecurityPositionSeries;
				}
			}
			
			/// <summary>
			/// Gets the SecuritySeriesId column of the PositionSeries table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn SecuritySeriesIdColumn
			{
				get
				{
					return this.columnSecuritySeriesId;
				}
			}
			
			/// <summary>
			/// Gets the parent relation between the SecuritySeries and PositionSeries tables.
			/// </summary>
			public global::System.Data.DataRelation SecuritySeriesPositionSeriesRelation
			{
				get
				{
					return this.relationSecuritySeriesPositionSeries;
				}
			}
			
			/// <summary>
			/// Occurs after a PositionSeries row has been changed successfully.
			/// </summary>
			public event PositionSeriesRowChangeEventHandler PositionSeriesRowChanged;
			
			/// <summary>
			/// Occurs when a PositionSeries row is changing.
			/// </summary>
			public event PositionSeriesRowChangeEventHandler PositionSeriesRowChanging;
			
			/// <summary>
			/// Occurs after a PositionSeries row in the table has been deleted.
			/// </summary>
			public event PositionSeriesRowChangeEventHandler PositionSeriesRowDeleted;
			
			/// <summary>
			/// Occurs before a PositionSeries row in the table is about to be deleted.
			/// </summary>
			public event PositionSeriesRowChangeEventHandler PositionSeriesRowDeleting;
			
			/// <summary>
			/// Returns the type of the row in a PositionSeries table.
			/// </summary>
			/// <returns>The PositionSeriesRow type.</returns>
			protected override global::System.Type GetRowType()
			{
				return typeof(PositionSeriesRow);
			}
			
			/// <summary>
			/// Initializes the relation fields with the parent and child relations.
			/// </summary>
			internal void InitializeRelations()
			{
				this.relationAccountPositionSeries = this.ParentRelations["FK_Account_PositionSeries"];
				this.relationPositionPositionSeries = this.ParentRelations["FK_Position_PositionSeries"];
				this.relationPositionTypePositionSeries = this.ParentRelations["FK_PositionType_PositionSeries"];
				this.relationSecurityPositionSeries = this.ParentRelations["FK_Security_PositionSeries"];
				this.relationSecuritySeriesPositionSeries = this.ParentRelations["FK_SecuritySeries_PositionSeries"];
				this.relationPositionSeriesTaxLotSeries = this.ChildRelations["FK_PositionSeries_TaxLotSeries"];
			}
			
			/// <summary>
			/// Initializes a new instance of a PositionSeries row.  Constructs a row from the builder.  Only for internal usage.
			/// </summary>
			/// <returns>A new row with the same schema as the table.</returns>
			protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder dataRowBuilder)
			{
				return new PositionSeriesRow(dataRowBuilder);
			}
			
			/// <summary>
			/// Raises the PositionSeriesRowChanged event.
			/// </summary>
			/// <param name="e">Provides data for the PositionSeriesRow changing and deleting events.</param>
			protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowChanged(e);
				if ((this.PositionSeriesRowChanged != null))
				{
					this.PositionSeriesRowChanged(this, new PositionSeriesRowChangeEventArgs(((PositionSeriesRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the PositionSeriesRowChanging event.
			/// </summary>
			/// <param name="e">Provides data for the PositionSeriesRow changing and deleting events.</param>
			protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowChanging(e);
				if ((this.PositionSeriesRowChanging != null))
				{
					this.PositionSeriesRowChanging(this, new PositionSeriesRowChangeEventArgs(((PositionSeriesRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the PositionSeriesRowDeleted event.
			/// </summary>
			/// <param name="e">Provides data for the PositionSeriesRow changing and deleting events.</param>
			protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowDeleted(e);
				if ((this.PositionSeriesRowDeleted != null))
				{
					this.PositionSeriesRowDeleted(this, new PositionSeriesRowChangeEventArgs(((PositionSeriesRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the PositionSeriesRowDeleting event.
			/// </summary>
			/// <param name="e">Provides data for the PositionSeriesRow changing and deleting events.</param>
			protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowDeleting(e);
				if ((this.PositionSeriesRowDeleting != null))
				{
					this.PositionSeriesRowDeleting(this, new PositionSeriesRowChangeEventArgs(((PositionSeriesRow)(e.Row)), e.Action));
				}
			}
		}
		
		/// <summary>
		/// The PositionType table.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public partial class PositionTypeDataTable : global::System.Data.TypedTableBase<DataModel.PositionTypeRow>
		{
			
			private global::System.Data.DataColumn columnExternalId0;
			
			private global::System.Data.DataColumn columnExternalId1;
			
			private global::System.Data.DataColumn columnExternalId2;
			
			private global::System.Data.DataColumn columnExternalId3;
			
			private global::System.Data.DataColumn columnMnemonic;
			
			private global::System.Data.DataColumn columnPositionTypeCode;
			
			private global::System.Data.DataColumn columnRowVersion;
			
			private global::System.Data.DataColumn columnSign;
			
			private global::Teraque.DataIndexCollection dataIndices;
			
			private global::Teraque.DataIndex indexPositionTypeKey;
			
			private global::Teraque.DataIndex indexPositionTypeKeyExternalId0;
			
			private global::Teraque.DataIndex indexPositionTypeKeyExternalId1;
			
			private global::Teraque.DataIndex indexPositionTypeKeyExternalId2;
			
			private global::Teraque.DataIndex indexPositionTypeKeyExternalId3;
			
			private global::System.Data.DataRelation relationPositionTypePosition;
			
			private global::System.Data.DataRelation relationPositionTypePositionSeries;
			
			private global::System.Data.DataRelation relationPositionTypeTaxLot;
			
			private global::System.Data.DataRelation relationPositionTypeTaxLotSeries;
			
			/// <summary>
			/// Creates the PositionType table.
			/// </summary>
			internal PositionTypeDataTable()
			{
				// Initialize the object.
				this.TableName = "PositionType";
				this.dataIndices = new global::Teraque.DataIndexCollection();
				// The ExternalId0 Column
				this.columnExternalId0 = new global::System.Data.DataColumn("ExternalId0", typeof(string), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnExternalId0);
				// The ExternalId1 Column
				this.columnExternalId1 = new global::System.Data.DataColumn("ExternalId1", typeof(string), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnExternalId1);
				// The ExternalId2 Column
				this.columnExternalId2 = new global::System.Data.DataColumn("ExternalId2", typeof(string), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnExternalId2);
				// The ExternalId3 Column
				this.columnExternalId3 = new global::System.Data.DataColumn("ExternalId3", typeof(string), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnExternalId3);
				// The Mnemonic Column
				this.columnMnemonic = new global::System.Data.DataColumn("Mnemonic", typeof(string), null, global::System.Data.MappingType.Element);
				this.columnMnemonic.AllowDBNull = false;
				this.columnMnemonic.DefaultValue = "";
				this.Columns.Add(this.columnMnemonic);
				// The PositionTypeCode Column
				this.columnPositionTypeCode = new global::System.Data.DataColumn("PositionTypeCode", typeof(Teraque.PositionTypeCode), null, global::System.Data.MappingType.Element);
				this.columnPositionTypeCode.AllowDBNull = false;
				this.Columns.Add(this.columnPositionTypeCode);
				// The RowVersion Column
				this.columnRowVersion = new global::System.Data.DataColumn("RowVersion", typeof(long), null, global::System.Data.MappingType.Element);
				this.columnRowVersion.AllowDBNull = false;
				this.Columns.Add(this.columnRowVersion);
				// The Sign Column
				this.columnSign = new global::System.Data.DataColumn("Sign", typeof(decimal), null, global::System.Data.MappingType.Element);
				this.columnSign.AllowDBNull = false;
				this.columnSign.DefaultValue = 0.0m;
				this.Columns.Add(this.columnSign);
				// The PositionTypeKey Index
				this.indexPositionTypeKey = new PositionTypeKeyIndex("PositionTypeKey", new global::System.Data.DataColumn[] {
							this.columnPositionTypeCode});
				this.Indices.Add(this.indexPositionTypeKey);
				// The PositionTypeKeyExternalId0 Index
				this.indexPositionTypeKeyExternalId0 = new PositionTypeKeyExternalId0Index("PositionTypeKeyExternalId0", new global::System.Data.DataColumn[] {
							this.columnExternalId0});
				this.Indices.Add(this.indexPositionTypeKeyExternalId0);
				// The PositionTypeKeyExternalId1 Index
				this.indexPositionTypeKeyExternalId1 = new PositionTypeKeyExternalId1Index("PositionTypeKeyExternalId1", new global::System.Data.DataColumn[] {
							this.columnExternalId1});
				this.Indices.Add(this.indexPositionTypeKeyExternalId1);
				// The PositionTypeKeyExternalId2 Index
				this.indexPositionTypeKeyExternalId2 = new PositionTypeKeyExternalId2Index("PositionTypeKeyExternalId2", new global::System.Data.DataColumn[] {
							this.columnExternalId2});
				this.Indices.Add(this.indexPositionTypeKeyExternalId2);
				// The PositionTypeKeyExternalId3 Index
				this.indexPositionTypeKeyExternalId3 = new PositionTypeKeyExternalId3Index("PositionTypeKeyExternalId3", new global::System.Data.DataColumn[] {
							this.columnExternalId3});
				this.Indices.Add(this.indexPositionTypeKeyExternalId3);
			}
			
			/// <summary>
			/// Gets the number of rows in the PositionType table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public int Count
			{
				get
				{
					return this.Rows.Count;
				}
			}
			
			/// <summary>
			/// Gets the ExternalId0 column of the PositionType table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn ExternalId0Column
			{
				get
				{
					return this.columnExternalId0;
				}
			}
			
			/// <summary>
			/// Gets the ExternalId1 column of the PositionType table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn ExternalId1Column
			{
				get
				{
					return this.columnExternalId1;
				}
			}
			
			/// <summary>
			/// Gets the ExternalId2 column of the PositionType table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn ExternalId2Column
			{
				get
				{
					return this.columnExternalId2;
				}
			}
			
			/// <summary>
			/// Gets the ExternalId3 column of the PositionType table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn ExternalId3Column
			{
				get
				{
					return this.columnExternalId3;
				}
			}
			
			/// <summary>
			/// Gets a collection of Teraque.DataModelGenerator.DataIndices on a table.
			/// </summary>
			public global::Teraque.DataIndexCollection Indices
			{
				get
				{
					return this.dataIndices;
				}
			}
			
			/// <summary>
			/// Indexer to a row in the PositionType table.
			/// </summary>
			/// <param name="index">The integer index of the row.</param>
			/// <returns>The PositionType row found at the given index.</returns>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public DataModel.PositionTypeRow this[int index]
			{
				get
				{
					return ((DataModel.PositionTypeRow)(this.Rows[index]));
				}
			}
			
			/// <summary>
			/// Gets the Mnemonic column of the PositionType table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn MnemonicColumn
			{
				get
				{
					return this.columnMnemonic;
				}
			}
			
			/// <summary>
			/// Gets the PositionTypeCode column of the PositionType table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn PositionTypeCodeColumn
			{
				get
				{
					return this.columnPositionTypeCode;
				}
			}
			
			/// <summary>
			/// Gets the PositionTypeKey index on the PositionType table.
			/// </summary>
			public PositionTypeKeyIndex PositionTypeKey
			{
				get
				{
					return ((PositionTypeKeyIndex)(this.indexPositionTypeKey));
				}
			}
			
			/// <summary>
			/// Gets the PositionTypeKeyExternalId0 index on the PositionType table.
			/// </summary>
			public PositionTypeKeyExternalId0Index PositionTypeKeyExternalId0
			{
				get
				{
					return ((PositionTypeKeyExternalId0Index)(this.indexPositionTypeKeyExternalId0));
				}
			}
			
			/// <summary>
			/// Gets the PositionTypeKeyExternalId1 index on the PositionType table.
			/// </summary>
			public PositionTypeKeyExternalId1Index PositionTypeKeyExternalId1
			{
				get
				{
					return ((PositionTypeKeyExternalId1Index)(this.indexPositionTypeKeyExternalId1));
				}
			}
			
			/// <summary>
			/// Gets the PositionTypeKeyExternalId2 index on the PositionType table.
			/// </summary>
			public PositionTypeKeyExternalId2Index PositionTypeKeyExternalId2
			{
				get
				{
					return ((PositionTypeKeyExternalId2Index)(this.indexPositionTypeKeyExternalId2));
				}
			}
			
			/// <summary>
			/// Gets the PositionTypeKeyExternalId3 index on the PositionType table.
			/// </summary>
			public PositionTypeKeyExternalId3Index PositionTypeKeyExternalId3
			{
				get
				{
					return ((PositionTypeKeyExternalId3Index)(this.indexPositionTypeKeyExternalId3));
				}
			}
			
			/// <summary>
			/// Gets the child relation between the PositionType and Position tables.
			/// </summary>
			internal global::System.Data.DataRelation PositionTypePositionRelation
			{
				get
				{
					return this.relationPositionTypePosition;
				}
			}
			
			/// <summary>
			/// Gets the child relation between the PositionType and PositionSeries tables.
			/// </summary>
			internal global::System.Data.DataRelation PositionTypePositionSeriesRelation
			{
				get
				{
					return this.relationPositionTypePositionSeries;
				}
			}
			
			/// <summary>
			/// Gets the child relation between the PositionType and TaxLot tables.
			/// </summary>
			internal global::System.Data.DataRelation PositionTypeTaxLotRelation
			{
				get
				{
					return this.relationPositionTypeTaxLot;
				}
			}
			
			/// <summary>
			/// Gets the child relation between the PositionType and TaxLotSeries tables.
			/// </summary>
			internal global::System.Data.DataRelation PositionTypeTaxLotSeriesRelation
			{
				get
				{
					return this.relationPositionTypeTaxLotSeries;
				}
			}
			
			/// <summary>
			/// Gets the RowVersion column of the PositionType table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn RowVersionColumn
			{
				get
				{
					return this.columnRowVersion;
				}
			}
			
			/// <summary>
			/// Gets the Sign column of the PositionType table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn SignColumn
			{
				get
				{
					return this.columnSign;
				}
			}
			
			/// <summary>
			/// Occurs after a PositionType row has been changed successfully.
			/// </summary>
			public event PositionTypeRowChangeEventHandler PositionTypeRowChanged;
			
			/// <summary>
			/// Occurs when a PositionType row is changing.
			/// </summary>
			public event PositionTypeRowChangeEventHandler PositionTypeRowChanging;
			
			/// <summary>
			/// Occurs after a PositionType row in the table has been deleted.
			/// </summary>
			public event PositionTypeRowChangeEventHandler PositionTypeRowDeleted;
			
			/// <summary>
			/// Occurs before a PositionType row in the table is about to be deleted.
			/// </summary>
			public event PositionTypeRowChangeEventHandler PositionTypeRowDeleting;
			
			/// <summary>
			/// Returns the type of the row in a PositionType table.
			/// </summary>
			/// <returns>The PositionTypeRow type.</returns>
			protected override global::System.Type GetRowType()
			{
				return typeof(PositionTypeRow);
			}
			
			/// <summary>
			/// Initializes the relation fields with the parent and child relations.
			/// </summary>
			internal void InitializeRelations()
			{
				this.relationPositionTypePosition = this.ChildRelations["FK_PositionType_Position"];
				this.relationPositionTypePositionSeries = this.ChildRelations["FK_PositionType_PositionSeries"];
				this.relationPositionTypeTaxLot = this.ChildRelations["FK_PositionType_TaxLot"];
				this.relationPositionTypeTaxLotSeries = this.ChildRelations["FK_PositionType_TaxLotSeries"];
			}
			
			/// <summary>
			/// Initializes a new instance of a PositionType row.  Constructs a row from the builder.  Only for internal usage.
			/// </summary>
			/// <returns>A new row with the same schema as the table.</returns>
			protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder dataRowBuilder)
			{
				return new PositionTypeRow(dataRowBuilder);
			}
			
			/// <summary>
			/// Raises the PositionTypeRowChanged event.
			/// </summary>
			/// <param name="e">Provides data for the PositionTypeRow changing and deleting events.</param>
			protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowChanged(e);
				if ((this.PositionTypeRowChanged != null))
				{
					this.PositionTypeRowChanged(this, new PositionTypeRowChangeEventArgs(((PositionTypeRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the PositionTypeRowChanging event.
			/// </summary>
			/// <param name="e">Provides data for the PositionTypeRow changing and deleting events.</param>
			protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowChanging(e);
				if ((this.PositionTypeRowChanging != null))
				{
					this.PositionTypeRowChanging(this, new PositionTypeRowChangeEventArgs(((PositionTypeRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the PositionTypeRowDeleted event.
			/// </summary>
			/// <param name="e">Provides data for the PositionTypeRow changing and deleting events.</param>
			protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowDeleted(e);
				if ((this.PositionTypeRowDeleted != null))
				{
					this.PositionTypeRowDeleted(this, new PositionTypeRowChangeEventArgs(((PositionTypeRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the PositionTypeRowDeleting event.
			/// </summary>
			/// <param name="e">Provides data for the PositionTypeRow changing and deleting events.</param>
			protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowDeleting(e);
				if ((this.PositionTypeRowDeleting != null))
				{
					this.PositionTypeRowDeleting(this, new PositionTypeRowChangeEventArgs(((PositionTypeRow)(e.Row)), e.Action));
				}
			}
		}
		
		/// <summary>
		/// The Price table.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public partial class PriceDataTable : global::System.Data.TypedTableBase<DataModel.PriceRow>
		{
			
			private global::System.Data.DataColumn columnAskPrice;
			
			private global::System.Data.DataColumn columnAskSize;
			
			private global::System.Data.DataColumn columnBidPrice;
			
			private global::System.Data.DataColumn columnBidSize;
			
			private global::System.Data.DataColumn columnClosePrice;
			
			private global::System.Data.DataColumn columnCurrencyId;
			
			private global::System.Data.DataColumn columnHighPrice;
			
			private global::System.Data.DataColumn columnLastPrice;
			
			private global::System.Data.DataColumn columnLastSize;
			
			private global::System.Data.DataColumn columnLowPrice;
			
			private global::System.Data.DataColumn columnOpenPrice;
			
			private global::System.Data.DataColumn columnPriceChange;
			
			private global::System.Data.DataColumn columnRowVersion;
			
			private global::System.Data.DataColumn columnSecurityId;
			
			private global::System.Data.DataColumn columnVolume;
			
			private global::System.Data.DataColumn columnVolumeWeightedAveragePrice;
			
			private global::Teraque.DataIndexCollection dataIndices;
			
			private global::Teraque.DataIndex indexPriceKey;
			
			private global::System.Data.DataRelation relationSecurityPriceByFK_Security_Price_CurrencyId;
			
			private global::System.Data.DataRelation relationSecurityPriceByFK_Security_Price_SecurityId;
			
			/// <summary>
			/// Creates the Price table.
			/// </summary>
			internal PriceDataTable()
			{
				// Initialize the object.
				this.TableName = "Price";
				this.dataIndices = new global::Teraque.DataIndexCollection();
				// The AskPrice Column
				this.columnAskPrice = new global::System.Data.DataColumn("AskPrice", typeof(decimal), null, global::System.Data.MappingType.Element);
				this.columnAskPrice.AllowDBNull = false;
				this.columnAskPrice.DefaultValue = 0.0m;
				this.Columns.Add(this.columnAskPrice);
				// The AskSize Column
				this.columnAskSize = new global::System.Data.DataColumn("AskSize", typeof(decimal), null, global::System.Data.MappingType.Element);
				this.columnAskSize.AllowDBNull = false;
				this.columnAskSize.DefaultValue = 0.0m;
				this.Columns.Add(this.columnAskSize);
				// The BidPrice Column
				this.columnBidPrice = new global::System.Data.DataColumn("BidPrice", typeof(decimal), null, global::System.Data.MappingType.Element);
				this.columnBidPrice.AllowDBNull = false;
				this.columnBidPrice.DefaultValue = 0.0m;
				this.Columns.Add(this.columnBidPrice);
				// The BidSize Column
				this.columnBidSize = new global::System.Data.DataColumn("BidSize", typeof(decimal), null, global::System.Data.MappingType.Element);
				this.columnBidSize.AllowDBNull = false;
				this.columnBidSize.DefaultValue = 0.0m;
				this.Columns.Add(this.columnBidSize);
				// The ClosePrice Column
				this.columnClosePrice = new global::System.Data.DataColumn("ClosePrice", typeof(decimal), null, global::System.Data.MappingType.Element);
				this.columnClosePrice.AllowDBNull = false;
				this.columnClosePrice.DefaultValue = 0.0m;
				this.Columns.Add(this.columnClosePrice);
				// The CurrencyId Column
				this.columnCurrencyId = new global::System.Data.DataColumn("CurrencyId", typeof(System.Guid), null, global::System.Data.MappingType.Element);
				this.columnCurrencyId.AllowDBNull = false;
				this.Columns.Add(this.columnCurrencyId);
				// The HighPrice Column
				this.columnHighPrice = new global::System.Data.DataColumn("HighPrice", typeof(decimal), null, global::System.Data.MappingType.Element);
				this.columnHighPrice.AllowDBNull = false;
				this.columnHighPrice.DefaultValue = 0.0m;
				this.Columns.Add(this.columnHighPrice);
				// The LastPrice Column
				this.columnLastPrice = new global::System.Data.DataColumn("LastPrice", typeof(decimal), null, global::System.Data.MappingType.Element);
				this.columnLastPrice.AllowDBNull = false;
				this.columnLastPrice.DefaultValue = 0.0m;
				this.Columns.Add(this.columnLastPrice);
				// The LastSize Column
				this.columnLastSize = new global::System.Data.DataColumn("LastSize", typeof(decimal), null, global::System.Data.MappingType.Element);
				this.columnLastSize.AllowDBNull = false;
				this.columnLastSize.DefaultValue = 0.0m;
				this.Columns.Add(this.columnLastSize);
				// The LowPrice Column
				this.columnLowPrice = new global::System.Data.DataColumn("LowPrice", typeof(decimal), null, global::System.Data.MappingType.Element);
				this.columnLowPrice.AllowDBNull = false;
				this.columnLowPrice.DefaultValue = 0.0m;
				this.Columns.Add(this.columnLowPrice);
				// The OpenPrice Column
				this.columnOpenPrice = new global::System.Data.DataColumn("OpenPrice", typeof(decimal), null, global::System.Data.MappingType.Element);
				this.columnOpenPrice.AllowDBNull = false;
				this.columnOpenPrice.DefaultValue = 0.0m;
				this.Columns.Add(this.columnOpenPrice);
				// The PriceChange Column
				this.columnPriceChange = new global::System.Data.DataColumn("PriceChange", typeof(decimal), null, global::System.Data.MappingType.Element);
				this.columnPriceChange.AllowDBNull = false;
				this.columnPriceChange.DefaultValue = 0.0m;
				this.Columns.Add(this.columnPriceChange);
				// The RowVersion Column
				this.columnRowVersion = new global::System.Data.DataColumn("RowVersion", typeof(long), null, global::System.Data.MappingType.Element);
				this.columnRowVersion.AllowDBNull = false;
				this.Columns.Add(this.columnRowVersion);
				// The SecurityId Column
				this.columnSecurityId = new global::System.Data.DataColumn("SecurityId", typeof(System.Guid), null, global::System.Data.MappingType.Element);
				this.columnSecurityId.AllowDBNull = false;
				this.Columns.Add(this.columnSecurityId);
				// The Volume Column
				this.columnVolume = new global::System.Data.DataColumn("Volume", typeof(decimal), null, global::System.Data.MappingType.Element);
				this.columnVolume.AllowDBNull = false;
				this.columnVolume.DefaultValue = 0.0m;
				this.Columns.Add(this.columnVolume);
				// The VolumeWeightedAveragePrice Column
				this.columnVolumeWeightedAveragePrice = new global::System.Data.DataColumn("VolumeWeightedAveragePrice", typeof(decimal), null, global::System.Data.MappingType.Element);
				this.columnVolumeWeightedAveragePrice.AllowDBNull = false;
				this.columnVolumeWeightedAveragePrice.DefaultValue = 0.0m;
				this.Columns.Add(this.columnVolumeWeightedAveragePrice);
				// The PriceKey Index
				this.indexPriceKey = new PriceKeyIndex("PriceKey", new global::System.Data.DataColumn[] {
							this.columnSecurityId,
							this.columnCurrencyId});
				this.Indices.Add(this.indexPriceKey);
			}
			
			/// <summary>
			/// Gets the AskPrice column of the Price table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn AskPriceColumn
			{
				get
				{
					return this.columnAskPrice;
				}
			}
			
			/// <summary>
			/// Gets the AskSize column of the Price table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn AskSizeColumn
			{
				get
				{
					return this.columnAskSize;
				}
			}
			
			/// <summary>
			/// Gets the BidPrice column of the Price table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn BidPriceColumn
			{
				get
				{
					return this.columnBidPrice;
				}
			}
			
			/// <summary>
			/// Gets the BidSize column of the Price table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn BidSizeColumn
			{
				get
				{
					return this.columnBidSize;
				}
			}
			
			/// <summary>
			/// Gets the ClosePrice column of the Price table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn ClosePriceColumn
			{
				get
				{
					return this.columnClosePrice;
				}
			}
			
			/// <summary>
			/// Gets the number of rows in the Price table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public int Count
			{
				get
				{
					return this.Rows.Count;
				}
			}
			
			/// <summary>
			/// Gets the CurrencyId column of the Price table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn CurrencyIdColumn
			{
				get
				{
					return this.columnCurrencyId;
				}
			}
			
			/// <summary>
			/// Gets the HighPrice column of the Price table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn HighPriceColumn
			{
				get
				{
					return this.columnHighPrice;
				}
			}
			
			/// <summary>
			/// Gets a collection of Teraque.DataModelGenerator.DataIndices on a table.
			/// </summary>
			public global::Teraque.DataIndexCollection Indices
			{
				get
				{
					return this.dataIndices;
				}
			}
			
			/// <summary>
			/// Indexer to a row in the Price table.
			/// </summary>
			/// <param name="index">The integer index of the row.</param>
			/// <returns>The Price row found at the given index.</returns>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public DataModel.PriceRow this[int index]
			{
				get
				{
					return ((DataModel.PriceRow)(this.Rows[index]));
				}
			}
			
			/// <summary>
			/// Gets the LastPrice column of the Price table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn LastPriceColumn
			{
				get
				{
					return this.columnLastPrice;
				}
			}
			
			/// <summary>
			/// Gets the LastSize column of the Price table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn LastSizeColumn
			{
				get
				{
					return this.columnLastSize;
				}
			}
			
			/// <summary>
			/// Gets the LowPrice column of the Price table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn LowPriceColumn
			{
				get
				{
					return this.columnLowPrice;
				}
			}
			
			/// <summary>
			/// Gets the OpenPrice column of the Price table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn OpenPriceColumn
			{
				get
				{
					return this.columnOpenPrice;
				}
			}
			
			/// <summary>
			/// Gets the PriceChange column of the Price table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn PriceChangeColumn
			{
				get
				{
					return this.columnPriceChange;
				}
			}
			
			/// <summary>
			/// Gets the PriceKey index on the Price table.
			/// </summary>
			public PriceKeyIndex PriceKey
			{
				get
				{
					return ((PriceKeyIndex)(this.indexPriceKey));
				}
			}
			
			/// <summary>
			/// Gets the RowVersion column of the Price table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn RowVersionColumn
			{
				get
				{
					return this.columnRowVersion;
				}
			}
			
			/// <summary>
			/// Gets the SecurityId column of the Price table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn SecurityIdColumn
			{
				get
				{
					return this.columnSecurityId;
				}
			}
			
			/// <summary>
			/// Gets the parent relation between the Security and Price tables.
			/// </summary>
			public global::System.Data.DataRelation SecurityPriceByFK_Security_Price_CurrencyIdRelation
			{
				get
				{
					return this.relationSecurityPriceByFK_Security_Price_CurrencyId;
				}
			}
			
			/// <summary>
			/// Gets the parent relation between the Security and Price tables.
			/// </summary>
			public global::System.Data.DataRelation SecurityPriceByFK_Security_Price_SecurityIdRelation
			{
				get
				{
					return this.relationSecurityPriceByFK_Security_Price_SecurityId;
				}
			}
			
			/// <summary>
			/// Gets the Volume column of the Price table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn VolumeColumn
			{
				get
				{
					return this.columnVolume;
				}
			}
			
			/// <summary>
			/// Gets the VolumeWeightedAveragePrice column of the Price table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn VolumeWeightedAveragePriceColumn
			{
				get
				{
					return this.columnVolumeWeightedAveragePrice;
				}
			}
			
			/// <summary>
			/// Occurs after a Price row has been changed successfully.
			/// </summary>
			public event PriceRowChangeEventHandler PriceRowChanged;
			
			/// <summary>
			/// Occurs when a Price row is changing.
			/// </summary>
			public event PriceRowChangeEventHandler PriceRowChanging;
			
			/// <summary>
			/// Occurs after a Price row in the table has been deleted.
			/// </summary>
			public event PriceRowChangeEventHandler PriceRowDeleted;
			
			/// <summary>
			/// Occurs before a Price row in the table is about to be deleted.
			/// </summary>
			public event PriceRowChangeEventHandler PriceRowDeleting;
			
			/// <summary>
			/// Returns the type of the row in a Price table.
			/// </summary>
			/// <returns>The PriceRow type.</returns>
			protected override global::System.Type GetRowType()
			{
				return typeof(PriceRow);
			}
			
			/// <summary>
			/// Initializes the relation fields with the parent and child relations.
			/// </summary>
			internal void InitializeRelations()
			{
				this.relationSecurityPriceByFK_Security_Price_CurrencyId = this.ParentRelations["FK_Security_Price_CurrencyId"];
				this.relationSecurityPriceByFK_Security_Price_SecurityId = this.ParentRelations["FK_Security_Price_SecurityId"];
			}
			
			/// <summary>
			/// Initializes a new instance of a Price row.  Constructs a row from the builder.  Only for internal usage.
			/// </summary>
			/// <returns>A new row with the same schema as the table.</returns>
			protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder dataRowBuilder)
			{
				return new PriceRow(dataRowBuilder);
			}
			
			/// <summary>
			/// Raises the PriceRowChanged event.
			/// </summary>
			/// <param name="e">Provides data for the PriceRow changing and deleting events.</param>
			protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowChanged(e);
				if ((this.PriceRowChanged != null))
				{
					this.PriceRowChanged(this, new PriceRowChangeEventArgs(((PriceRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the PriceRowChanging event.
			/// </summary>
			/// <param name="e">Provides data for the PriceRow changing and deleting events.</param>
			protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowChanging(e);
				if ((this.PriceRowChanging != null))
				{
					this.PriceRowChanging(this, new PriceRowChangeEventArgs(((PriceRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the PriceRowDeleted event.
			/// </summary>
			/// <param name="e">Provides data for the PriceRow changing and deleting events.</param>
			protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowDeleted(e);
				if ((this.PriceRowDeleted != null))
				{
					this.PriceRowDeleted(this, new PriceRowChangeEventArgs(((PriceRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the PriceRowDeleting event.
			/// </summary>
			/// <param name="e">Provides data for the PriceRow changing and deleting events.</param>
			protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowDeleting(e);
				if ((this.PriceRowDeleting != null))
				{
					this.PriceRowDeleting(this, new PriceRowChangeEventArgs(((PriceRow)(e.Row)), e.Action));
				}
			}
		}
		
		/// <summary>
		/// The Property table.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public partial class PropertyDataTable : global::System.Data.TypedTableBase<DataModel.PropertyRow>
		{
			
			private global::System.Data.DataColumn columnExternalId0;
			
			private global::System.Data.DataColumn columnName;
			
			private global::System.Data.DataColumn columnPropertyId;
			
			private global::System.Data.DataColumn columnRowVersion;
			
			private global::Teraque.DataIndexCollection dataIndices;
			
			private global::Teraque.DataIndex indexPropertyKey;
			
			private global::Teraque.DataIndex indexPropertyKeyExternalId0;
			
			private global::System.Data.DataRelation relationPropertyPropertyStore;
			
			/// <summary>
			/// Creates the Property table.
			/// </summary>
			internal PropertyDataTable()
			{
				// Initialize the object.
				this.TableName = "Property";
				this.dataIndices = new global::Teraque.DataIndexCollection();
				// The ExternalId0 Column
				this.columnExternalId0 = new global::System.Data.DataColumn("ExternalId0", typeof(string), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnExternalId0);
				// The Name Column
				this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Element);
				this.columnName.AllowDBNull = false;
				this.columnName.DefaultValue = "";
				this.Columns.Add(this.columnName);
				// The PropertyId Column
				this.columnPropertyId = new global::System.Data.DataColumn("PropertyId", typeof(System.Guid), null, global::System.Data.MappingType.Element);
				this.columnPropertyId.AllowDBNull = false;
				this.Columns.Add(this.columnPropertyId);
				// The RowVersion Column
				this.columnRowVersion = new global::System.Data.DataColumn("RowVersion", typeof(long), null, global::System.Data.MappingType.Element);
				this.columnRowVersion.AllowDBNull = false;
				this.Columns.Add(this.columnRowVersion);
				// The PropertyKey Index
				this.indexPropertyKey = new PropertyKeyIndex("PropertyKey", new global::System.Data.DataColumn[] {
							this.columnPropertyId});
				this.Indices.Add(this.indexPropertyKey);
				// The PropertyKeyExternalId0 Index
				this.indexPropertyKeyExternalId0 = new PropertyKeyExternalId0Index("PropertyKeyExternalId0", new global::System.Data.DataColumn[] {
							this.columnExternalId0});
				this.Indices.Add(this.indexPropertyKeyExternalId0);
			}
			
			/// <summary>
			/// Gets the number of rows in the Property table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public int Count
			{
				get
				{
					return this.Rows.Count;
				}
			}
			
			/// <summary>
			/// Gets the ExternalId0 column of the Property table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn ExternalId0Column
			{
				get
				{
					return this.columnExternalId0;
				}
			}
			
			/// <summary>
			/// Gets a collection of Teraque.DataModelGenerator.DataIndices on a table.
			/// </summary>
			public global::Teraque.DataIndexCollection Indices
			{
				get
				{
					return this.dataIndices;
				}
			}
			
			/// <summary>
			/// Indexer to a row in the Property table.
			/// </summary>
			/// <param name="index">The integer index of the row.</param>
			/// <returns>The Property row found at the given index.</returns>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public DataModel.PropertyRow this[int index]
			{
				get
				{
					return ((DataModel.PropertyRow)(this.Rows[index]));
				}
			}
			
			/// <summary>
			/// Gets the Name column of the Property table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn NameColumn
			{
				get
				{
					return this.columnName;
				}
			}
			
			/// <summary>
			/// Gets the PropertyId column of the Property table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn PropertyIdColumn
			{
				get
				{
					return this.columnPropertyId;
				}
			}
			
			/// <summary>
			/// Gets the PropertyKey index on the Property table.
			/// </summary>
			public PropertyKeyIndex PropertyKey
			{
				get
				{
					return ((PropertyKeyIndex)(this.indexPropertyKey));
				}
			}
			
			/// <summary>
			/// Gets the PropertyKeyExternalId0 index on the Property table.
			/// </summary>
			public PropertyKeyExternalId0Index PropertyKeyExternalId0
			{
				get
				{
					return ((PropertyKeyExternalId0Index)(this.indexPropertyKeyExternalId0));
				}
			}
			
			/// <summary>
			/// Gets the child relation between the Property and PropertyStore tables.
			/// </summary>
			internal global::System.Data.DataRelation PropertyPropertyStoreRelation
			{
				get
				{
					return this.relationPropertyPropertyStore;
				}
			}
			
			/// <summary>
			/// Gets the RowVersion column of the Property table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn RowVersionColumn
			{
				get
				{
					return this.columnRowVersion;
				}
			}
			
			/// <summary>
			/// Occurs after a Property row has been changed successfully.
			/// </summary>
			public event PropertyRowChangeEventHandler PropertyRowChanged;
			
			/// <summary>
			/// Occurs when a Property row is changing.
			/// </summary>
			public event PropertyRowChangeEventHandler PropertyRowChanging;
			
			/// <summary>
			/// Occurs after a Property row in the table has been deleted.
			/// </summary>
			public event PropertyRowChangeEventHandler PropertyRowDeleted;
			
			/// <summary>
			/// Occurs before a Property row in the table is about to be deleted.
			/// </summary>
			public event PropertyRowChangeEventHandler PropertyRowDeleting;
			
			/// <summary>
			/// Returns the type of the row in a Property table.
			/// </summary>
			/// <returns>The PropertyRow type.</returns>
			protected override global::System.Type GetRowType()
			{
				return typeof(PropertyRow);
			}
			
			/// <summary>
			/// Initializes the relation fields with the parent and child relations.
			/// </summary>
			internal void InitializeRelations()
			{
				this.relationPropertyPropertyStore = this.ChildRelations["FK_Property_PropertyStore"];
			}
			
			/// <summary>
			/// Initializes a new instance of a Property row.  Constructs a row from the builder.  Only for internal usage.
			/// </summary>
			/// <returns>A new row with the same schema as the table.</returns>
			protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder dataRowBuilder)
			{
				return new PropertyRow(dataRowBuilder);
			}
			
			/// <summary>
			/// Raises the PropertyRowChanged event.
			/// </summary>
			/// <param name="e">Provides data for the PropertyRow changing and deleting events.</param>
			protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowChanged(e);
				if ((this.PropertyRowChanged != null))
				{
					this.PropertyRowChanged(this, new PropertyRowChangeEventArgs(((PropertyRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the PropertyRowChanging event.
			/// </summary>
			/// <param name="e">Provides data for the PropertyRow changing and deleting events.</param>
			protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowChanging(e);
				if ((this.PropertyRowChanging != null))
				{
					this.PropertyRowChanging(this, new PropertyRowChangeEventArgs(((PropertyRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the PropertyRowDeleted event.
			/// </summary>
			/// <param name="e">Provides data for the PropertyRow changing and deleting events.</param>
			protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowDeleted(e);
				if ((this.PropertyRowDeleted != null))
				{
					this.PropertyRowDeleted(this, new PropertyRowChangeEventArgs(((PropertyRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the PropertyRowDeleting event.
			/// </summary>
			/// <param name="e">Provides data for the PropertyRow changing and deleting events.</param>
			protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowDeleting(e);
				if ((this.PropertyRowDeleting != null))
				{
					this.PropertyRowDeleting(this, new PropertyRowChangeEventArgs(((PropertyRow)(e.Row)), e.Action));
				}
			}
		}
		
		/// <summary>
		/// The PropertyStore table.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public partial class PropertyStoreDataTable : global::System.Data.TypedTableBase<DataModel.PropertyStoreRow>
		{
			
			private global::System.Data.DataColumn columnEntityId;
			
			private global::System.Data.DataColumn columnExternalId0;
			
			private global::System.Data.DataColumn columnPropertyId;
			
			private global::System.Data.DataColumn columnPropertyStoreId;
			
			private global::System.Data.DataColumn columnRowVersion;
			
			private global::System.Data.DataColumn columnValue;
			
			private global::Teraque.DataIndexCollection dataIndices;
			
			private global::Teraque.DataIndex indexPropertyStoreKey;
			
			private global::Teraque.DataIndex indexPropertyStoreKeyEntityIdPropertyId;
			
			private global::Teraque.DataIndex indexPropertyStoreKeyExternalId0;
			
			private global::System.Data.DataRelation relationEntityPropertyStore;
			
			private global::System.Data.DataRelation relationPropertyPropertyStore;
			
			/// <summary>
			/// Creates the PropertyStore table.
			/// </summary>
			internal PropertyStoreDataTable()
			{
				// Initialize the object.
				this.TableName = "PropertyStore";
				this.dataIndices = new global::Teraque.DataIndexCollection();
				// The EntityId Column
				this.columnEntityId = new global::System.Data.DataColumn("EntityId", typeof(System.Guid), null, global::System.Data.MappingType.Element);
				this.columnEntityId.AllowDBNull = false;
				this.Columns.Add(this.columnEntityId);
				// The ExternalId0 Column
				this.columnExternalId0 = new global::System.Data.DataColumn("ExternalId0", typeof(string), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnExternalId0);
				// The PropertyId Column
				this.columnPropertyId = new global::System.Data.DataColumn("PropertyId", typeof(System.Guid), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnPropertyId);
				// The PropertyStoreId Column
				this.columnPropertyStoreId = new global::System.Data.DataColumn("PropertyStoreId", typeof(System.Guid), null, global::System.Data.MappingType.Element);
				this.columnPropertyStoreId.AllowDBNull = false;
				this.Columns.Add(this.columnPropertyStoreId);
				// The RowVersion Column
				this.columnRowVersion = new global::System.Data.DataColumn("RowVersion", typeof(long), null, global::System.Data.MappingType.Element);
				this.columnRowVersion.AllowDBNull = false;
				this.Columns.Add(this.columnRowVersion);
				// The Value Column
				this.columnValue = new global::System.Data.DataColumn("Value", typeof(byte[]), null, global::System.Data.MappingType.Element);
				this.columnValue.AllowDBNull = false;
				this.Columns.Add(this.columnValue);
				// The PropertyStoreKey Index
				this.indexPropertyStoreKey = new PropertyStoreKeyIndex("PropertyStoreKey", new global::System.Data.DataColumn[] {
							this.columnPropertyStoreId});
				this.Indices.Add(this.indexPropertyStoreKey);
				// The PropertyStoreKeyEntityIdPropertyId Index
				this.indexPropertyStoreKeyEntityIdPropertyId = new PropertyStoreKeyEntityIdPropertyIdIndex("PropertyStoreKeyEntityIdPropertyId", new global::System.Data.DataColumn[] {
							this.columnEntityId,
							this.columnPropertyId});
				this.Constraints.Add(new global::System.Data.UniqueConstraint(new global::System.Data.DataColumn[] {
								this.columnEntityId,
								this.columnPropertyId}));
				this.Indices.Add(this.indexPropertyStoreKeyEntityIdPropertyId);
				// The PropertyStoreKeyExternalId0 Index
				this.indexPropertyStoreKeyExternalId0 = new PropertyStoreKeyExternalId0Index("PropertyStoreKeyExternalId0", new global::System.Data.DataColumn[] {
							this.columnExternalId0});
				this.Indices.Add(this.indexPropertyStoreKeyExternalId0);
			}
			
			/// <summary>
			/// Gets the number of rows in the PropertyStore table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public int Count
			{
				get
				{
					return this.Rows.Count;
				}
			}
			
			/// <summary>
			/// Gets the EntityId column of the PropertyStore table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn EntityIdColumn
			{
				get
				{
					return this.columnEntityId;
				}
			}
			
			/// <summary>
			/// Gets the parent relation between the Entity and PropertyStore tables.
			/// </summary>
			public global::System.Data.DataRelation EntityPropertyStoreRelation
			{
				get
				{
					return this.relationEntityPropertyStore;
				}
			}
			
			/// <summary>
			/// Gets the ExternalId0 column of the PropertyStore table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn ExternalId0Column
			{
				get
				{
					return this.columnExternalId0;
				}
			}
			
			/// <summary>
			/// Gets a collection of Teraque.DataModelGenerator.DataIndices on a table.
			/// </summary>
			public global::Teraque.DataIndexCollection Indices
			{
				get
				{
					return this.dataIndices;
				}
			}
			
			/// <summary>
			/// Indexer to a row in the PropertyStore table.
			/// </summary>
			/// <param name="index">The integer index of the row.</param>
			/// <returns>The PropertyStore row found at the given index.</returns>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public DataModel.PropertyStoreRow this[int index]
			{
				get
				{
					return ((DataModel.PropertyStoreRow)(this.Rows[index]));
				}
			}
			
			/// <summary>
			/// Gets the PropertyId column of the PropertyStore table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn PropertyIdColumn
			{
				get
				{
					return this.columnPropertyId;
				}
			}
			
			/// <summary>
			/// Gets the parent relation between the Property and PropertyStore tables.
			/// </summary>
			public global::System.Data.DataRelation PropertyPropertyStoreRelation
			{
				get
				{
					return this.relationPropertyPropertyStore;
				}
			}
			
			/// <summary>
			/// Gets the PropertyStoreId column of the PropertyStore table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn PropertyStoreIdColumn
			{
				get
				{
					return this.columnPropertyStoreId;
				}
			}
			
			/// <summary>
			/// Gets the PropertyStoreKey index on the PropertyStore table.
			/// </summary>
			public PropertyStoreKeyIndex PropertyStoreKey
			{
				get
				{
					return ((PropertyStoreKeyIndex)(this.indexPropertyStoreKey));
				}
			}
			
			/// <summary>
			/// Gets the PropertyStoreKeyEntityIdPropertyId index on the PropertyStore table.
			/// </summary>
			public PropertyStoreKeyEntityIdPropertyIdIndex PropertyStoreKeyEntityIdPropertyId
			{
				get
				{
					return ((PropertyStoreKeyEntityIdPropertyIdIndex)(this.indexPropertyStoreKeyEntityIdPropertyId));
				}
			}
			
			/// <summary>
			/// Gets the PropertyStoreKeyExternalId0 index on the PropertyStore table.
			/// </summary>
			public PropertyStoreKeyExternalId0Index PropertyStoreKeyExternalId0
			{
				get
				{
					return ((PropertyStoreKeyExternalId0Index)(this.indexPropertyStoreKeyExternalId0));
				}
			}
			
			/// <summary>
			/// Gets the RowVersion column of the PropertyStore table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn RowVersionColumn
			{
				get
				{
					return this.columnRowVersion;
				}
			}
			
			/// <summary>
			/// Gets the Value column of the PropertyStore table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn ValueColumn
			{
				get
				{
					return this.columnValue;
				}
			}
			
			/// <summary>
			/// Occurs after a PropertyStore row has been changed successfully.
			/// </summary>
			public event PropertyStoreRowChangeEventHandler PropertyStoreRowChanged;
			
			/// <summary>
			/// Occurs when a PropertyStore row is changing.
			/// </summary>
			public event PropertyStoreRowChangeEventHandler PropertyStoreRowChanging;
			
			/// <summary>
			/// Occurs after a PropertyStore row in the table has been deleted.
			/// </summary>
			public event PropertyStoreRowChangeEventHandler PropertyStoreRowDeleted;
			
			/// <summary>
			/// Occurs before a PropertyStore row in the table is about to be deleted.
			/// </summary>
			public event PropertyStoreRowChangeEventHandler PropertyStoreRowDeleting;
			
			/// <summary>
			/// Returns the type of the row in a PropertyStore table.
			/// </summary>
			/// <returns>The PropertyStoreRow type.</returns>
			protected override global::System.Type GetRowType()
			{
				return typeof(PropertyStoreRow);
			}
			
			/// <summary>
			/// Initializes the relation fields with the parent and child relations.
			/// </summary>
			internal void InitializeRelations()
			{
				this.relationEntityPropertyStore = this.ParentRelations["FK_Entity_PropertyStore"];
				this.relationPropertyPropertyStore = this.ParentRelations["FK_Property_PropertyStore"];
			}
			
			/// <summary>
			/// Initializes a new instance of a PropertyStore row.  Constructs a row from the builder.  Only for internal usage.
			/// </summary>
			/// <returns>A new row with the same schema as the table.</returns>
			protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder dataRowBuilder)
			{
				return new PropertyStoreRow(dataRowBuilder);
			}
			
			/// <summary>
			/// Raises the PropertyStoreRowChanged event.
			/// </summary>
			/// <param name="e">Provides data for the PropertyStoreRow changing and deleting events.</param>
			protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowChanged(e);
				if ((this.PropertyStoreRowChanged != null))
				{
					this.PropertyStoreRowChanged(this, new PropertyStoreRowChangeEventArgs(((PropertyStoreRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the PropertyStoreRowChanging event.
			/// </summary>
			/// <param name="e">Provides data for the PropertyStoreRow changing and deleting events.</param>
			protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowChanging(e);
				if ((this.PropertyStoreRowChanging != null))
				{
					this.PropertyStoreRowChanging(this, new PropertyStoreRowChangeEventArgs(((PropertyStoreRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the PropertyStoreRowDeleted event.
			/// </summary>
			/// <param name="e">Provides data for the PropertyStoreRow changing and deleting events.</param>
			protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowDeleted(e);
				if ((this.PropertyStoreRowDeleted != null))
				{
					this.PropertyStoreRowDeleted(this, new PropertyStoreRowChangeEventArgs(((PropertyStoreRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the PropertyStoreRowDeleting event.
			/// </summary>
			/// <param name="e">Provides data for the PropertyStoreRow changing and deleting events.</param>
			protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowDeleting(e);
				if ((this.PropertyStoreRowDeleting != null))
				{
					this.PropertyStoreRowDeleting(this, new PropertyStoreRowChangeEventArgs(((PropertyStoreRow)(e.Row)), e.Action));
				}
			}
		}
		
		/// <summary>
		/// The Province table.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public partial class ProvinceDataTable : global::System.Data.TypedTableBase<DataModel.ProvinceRow>
		{
			
			private global::System.Data.DataColumn columnAbbreviation;
			
			private global::System.Data.DataColumn columnCountryId;
			
			private global::System.Data.DataColumn columnExternalId0;
			
			private global::System.Data.DataColumn columnExternalId1;
			
			private global::System.Data.DataColumn columnName;
			
			private global::System.Data.DataColumn columnProvinceId;
			
			private global::System.Data.DataColumn columnRowVersion;
			
			private global::Teraque.DataIndexCollection dataIndices;
			
			private global::Teraque.DataIndex indexProvinceKey;
			
			private global::Teraque.DataIndex indexProvinceKeyExternalId0;
			
			private global::Teraque.DataIndex indexProvinceKeyExternalId1;
			
			private global::System.Data.DataRelation relationCountryProvince;
			
			private global::System.Data.DataRelation relationProvinceSingleAccount;
			
			/// <summary>
			/// Creates the Province table.
			/// </summary>
			internal ProvinceDataTable()
			{
				// Initialize the object.
				this.TableName = "Province";
				this.dataIndices = new global::Teraque.DataIndexCollection();
				// The Abbreviation Column
				this.columnAbbreviation = new global::System.Data.DataColumn("Abbreviation", typeof(string), null, global::System.Data.MappingType.Element);
				this.columnAbbreviation.AllowDBNull = false;
				this.columnAbbreviation.DefaultValue = "";
				this.Columns.Add(this.columnAbbreviation);
				// The CountryId Column
				this.columnCountryId = new global::System.Data.DataColumn("CountryId", typeof(System.Guid), null, global::System.Data.MappingType.Element);
				this.columnCountryId.AllowDBNull = false;
				this.Columns.Add(this.columnCountryId);
				// The ExternalId0 Column
				this.columnExternalId0 = new global::System.Data.DataColumn("ExternalId0", typeof(string), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnExternalId0);
				// The ExternalId1 Column
				this.columnExternalId1 = new global::System.Data.DataColumn("ExternalId1", typeof(string), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnExternalId1);
				// The Name Column
				this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Element);
				this.columnName.AllowDBNull = false;
				this.columnName.DefaultValue = "";
				this.Columns.Add(this.columnName);
				// The ProvinceId Column
				this.columnProvinceId = new global::System.Data.DataColumn("ProvinceId", typeof(System.Guid), null, global::System.Data.MappingType.Element);
				this.columnProvinceId.AllowDBNull = false;
				this.Columns.Add(this.columnProvinceId);
				// The RowVersion Column
				this.columnRowVersion = new global::System.Data.DataColumn("RowVersion", typeof(long), null, global::System.Data.MappingType.Element);
				this.columnRowVersion.AllowDBNull = false;
				this.Columns.Add(this.columnRowVersion);
				// The ProvinceKey Index
				this.indexProvinceKey = new ProvinceKeyIndex("ProvinceKey", new global::System.Data.DataColumn[] {
							this.columnProvinceId});
				this.Indices.Add(this.indexProvinceKey);
				// The ProvinceKeyExternalId0 Index
				this.indexProvinceKeyExternalId0 = new ProvinceKeyExternalId0Index("ProvinceKeyExternalId0", new global::System.Data.DataColumn[] {
							this.columnExternalId0});
				this.Indices.Add(this.indexProvinceKeyExternalId0);
				// The ProvinceKeyExternalId1 Index
				this.indexProvinceKeyExternalId1 = new ProvinceKeyExternalId1Index("ProvinceKeyExternalId1", new global::System.Data.DataColumn[] {
							this.columnExternalId1});
				this.Indices.Add(this.indexProvinceKeyExternalId1);
			}
			
			/// <summary>
			/// Gets the Abbreviation column of the Province table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn AbbreviationColumn
			{
				get
				{
					return this.columnAbbreviation;
				}
			}
			
			/// <summary>
			/// Gets the number of rows in the Province table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public int Count
			{
				get
				{
					return this.Rows.Count;
				}
			}
			
			/// <summary>
			/// Gets the CountryId column of the Province table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn CountryIdColumn
			{
				get
				{
					return this.columnCountryId;
				}
			}
			
			/// <summary>
			/// Gets the parent relation between the Country and Province tables.
			/// </summary>
			public global::System.Data.DataRelation CountryProvinceRelation
			{
				get
				{
					return this.relationCountryProvince;
				}
			}
			
			/// <summary>
			/// Gets the ExternalId0 column of the Province table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn ExternalId0Column
			{
				get
				{
					return this.columnExternalId0;
				}
			}
			
			/// <summary>
			/// Gets the ExternalId1 column of the Province table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn ExternalId1Column
			{
				get
				{
					return this.columnExternalId1;
				}
			}
			
			/// <summary>
			/// Gets a collection of Teraque.DataModelGenerator.DataIndices on a table.
			/// </summary>
			public global::Teraque.DataIndexCollection Indices
			{
				get
				{
					return this.dataIndices;
				}
			}
			
			/// <summary>
			/// Indexer to a row in the Province table.
			/// </summary>
			/// <param name="index">The integer index of the row.</param>
			/// <returns>The Province row found at the given index.</returns>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public DataModel.ProvinceRow this[int index]
			{
				get
				{
					return ((DataModel.ProvinceRow)(this.Rows[index]));
				}
			}
			
			/// <summary>
			/// Gets the Name column of the Province table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn NameColumn
			{
				get
				{
					return this.columnName;
				}
			}
			
			/// <summary>
			/// Gets the ProvinceId column of the Province table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn ProvinceIdColumn
			{
				get
				{
					return this.columnProvinceId;
				}
			}
			
			/// <summary>
			/// Gets the ProvinceKey index on the Province table.
			/// </summary>
			public ProvinceKeyIndex ProvinceKey
			{
				get
				{
					return ((ProvinceKeyIndex)(this.indexProvinceKey));
				}
			}
			
			/// <summary>
			/// Gets the ProvinceKeyExternalId0 index on the Province table.
			/// </summary>
			public ProvinceKeyExternalId0Index ProvinceKeyExternalId0
			{
				get
				{
					return ((ProvinceKeyExternalId0Index)(this.indexProvinceKeyExternalId0));
				}
			}
			
			/// <summary>
			/// Gets the ProvinceKeyExternalId1 index on the Province table.
			/// </summary>
			public ProvinceKeyExternalId1Index ProvinceKeyExternalId1
			{
				get
				{
					return ((ProvinceKeyExternalId1Index)(this.indexProvinceKeyExternalId1));
				}
			}
			
			/// <summary>
			/// Gets the child relation between the Province and SingleAccount tables.
			/// </summary>
			internal global::System.Data.DataRelation ProvinceSingleAccountRelation
			{
				get
				{
					return this.relationProvinceSingleAccount;
				}
			}
			
			/// <summary>
			/// Gets the RowVersion column of the Province table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn RowVersionColumn
			{
				get
				{
					return this.columnRowVersion;
				}
			}
			
			/// <summary>
			/// Occurs after a Province row has been changed successfully.
			/// </summary>
			public event ProvinceRowChangeEventHandler ProvinceRowChanged;
			
			/// <summary>
			/// Occurs when a Province row is changing.
			/// </summary>
			public event ProvinceRowChangeEventHandler ProvinceRowChanging;
			
			/// <summary>
			/// Occurs after a Province row in the table has been deleted.
			/// </summary>
			public event ProvinceRowChangeEventHandler ProvinceRowDeleted;
			
			/// <summary>
			/// Occurs before a Province row in the table is about to be deleted.
			/// </summary>
			public event ProvinceRowChangeEventHandler ProvinceRowDeleting;
			
			/// <summary>
			/// Returns the type of the row in a Province table.
			/// </summary>
			/// <returns>The ProvinceRow type.</returns>
			protected override global::System.Type GetRowType()
			{
				return typeof(ProvinceRow);
			}
			
			/// <summary>
			/// Initializes the relation fields with the parent and child relations.
			/// </summary>
			internal void InitializeRelations()
			{
				this.relationCountryProvince = this.ParentRelations["FK_Country_Province"];
				this.relationProvinceSingleAccount = this.ChildRelations["FK_Province_SingleAccount"];
			}
			
			/// <summary>
			/// Initializes a new instance of a Province row.  Constructs a row from the builder.  Only for internal usage.
			/// </summary>
			/// <returns>A new row with the same schema as the table.</returns>
			protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder dataRowBuilder)
			{
				return new ProvinceRow(dataRowBuilder);
			}
			
			/// <summary>
			/// Raises the ProvinceRowChanged event.
			/// </summary>
			/// <param name="e">Provides data for the ProvinceRow changing and deleting events.</param>
			protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowChanged(e);
				if ((this.ProvinceRowChanged != null))
				{
					this.ProvinceRowChanged(this, new ProvinceRowChangeEventArgs(((ProvinceRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the ProvinceRowChanging event.
			/// </summary>
			/// <param name="e">Provides data for the ProvinceRow changing and deleting events.</param>
			protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowChanging(e);
				if ((this.ProvinceRowChanging != null))
				{
					this.ProvinceRowChanging(this, new ProvinceRowChangeEventArgs(((ProvinceRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the ProvinceRowDeleted event.
			/// </summary>
			/// <param name="e">Provides data for the ProvinceRow changing and deleting events.</param>
			protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowDeleted(e);
				if ((this.ProvinceRowDeleted != null))
				{
					this.ProvinceRowDeleted(this, new ProvinceRowChangeEventArgs(((ProvinceRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the ProvinceRowDeleting event.
			/// </summary>
			/// <param name="e">Provides data for the ProvinceRow changing and deleting events.</param>
			protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowDeleting(e);
				if ((this.ProvinceRowDeleting != null))
				{
					this.ProvinceRowDeleting(this, new ProvinceRowChangeEventArgs(((ProvinceRow)(e.Row)), e.Action));
				}
			}
		}
		
		/// <summary>
		/// The Security table.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public partial class SecurityDataTable : global::System.Data.TypedTableBase<DataModel.SecurityRow>
		{
			
			private global::System.Data.DataColumn columnAverageDailyVolume;
			
			private global::System.Data.DataColumn columnCountryId;
			
			private global::System.Data.DataColumn columnIsDerivative;
			
			private global::System.Data.DataColumn columnIssuerId;
			
			private global::System.Data.DataColumn columnLogo;
			
			private global::System.Data.DataColumn columnMajorInstrumentTypeId;
			
			private global::System.Data.DataColumn columnMarketCapitalization;
			
			private global::System.Data.DataColumn columnMinimumQuantity;
			
			private global::System.Data.DataColumn columnMinorInstrumentTypeId;
			
			private global::System.Data.DataColumn columnPriceFactor;
			
			private global::System.Data.DataColumn columnQuantityFactor;
			
			private global::System.Data.DataColumn columnRowVersion;
			
			private global::System.Data.DataColumn columnSecurityId;
			
			private global::System.Data.DataColumn columnSymbol;
			
			private global::System.Data.DataColumn columnVolumeCategoryCode;
			
			private global::Teraque.DataIndexCollection dataIndices;
			
			private global::Teraque.DataIndex indexSecurityKey;
			
			private global::System.Data.DataRelation relationCountrySecurity;
			
			private global::System.Data.DataRelation relationEntitySecurity;
			
			private global::System.Data.DataRelation relationIssuerSecurity;
			
			private global::System.Data.DataRelation relationMajorInstrumentTypeSecurity;
			
			private global::System.Data.DataRelation relationMinorInstrumentTypeSecurity;
			
			private global::System.Data.DataRelation relationSecurityAllocationByFK_Security_Allocation_SecurityId;
			
			private global::System.Data.DataRelation relationSecurityAllocationByFK_Security_Allocation_SettlementId;
			
			private global::System.Data.DataRelation relationSecurityCurrency;
			
			private global::System.Data.DataRelation relationSecurityDebtByFK_Security_Debt_DebtId;
			
			private global::System.Data.DataRelation relationSecurityDebtByFK_Security_Debt_SettlementId;
			
			private global::System.Data.DataRelation relationSecurityDestinationOrderByFK_Security_DestinationOrder_SecurityId;
			
			private global::System.Data.DataRelation relationSecurityDestinationOrderByFK_Security_DestinationOrder_SettlementId;
			
			private global::System.Data.DataRelation relationSecurityEquityByFK_Security_Equity_EquityId;
			
			private global::System.Data.DataRelation relationSecurityEquityByFK_Security_Equity_SettlementId;
			
			private global::System.Data.DataRelation relationSecurityIndustryLeaf;
			
			private global::System.Data.DataRelation relationSecurityPosition;
			
			private global::System.Data.DataRelation relationSecurityPositionSeries;
			
			private global::System.Data.DataRelation relationSecurityPriceByFK_Security_Price_CurrencyId;
			
			private global::System.Data.DataRelation relationSecurityPriceByFK_Security_Price_SecurityId;
			
			private global::System.Data.DataRelation relationSecuritySecuritySeries;
			
			private global::System.Data.DataRelation relationSecuritySourceOrderByFK_Security_SourceOrder_SecurityId;
			
			private global::System.Data.DataRelation relationSecuritySourceOrderByFK_Security_SourceOrder_SettlementId;
			
			private global::System.Data.DataRelation relationSecurityTaxLot;
			
			private global::System.Data.DataRelation relationSecurityTaxLotSeries;
			
			private global::System.Data.DataRelation relationSecurityWorkingOrderByFK_Security_WorkingOrder_SecurityId;
			
			private global::System.Data.DataRelation relationSecurityWorkingOrderByFK_Security_WorkingOrder_SettlementId;
			
			private global::System.Data.DataRelation relationVolumeCategorySecurity;
			
			/// <summary>
			/// Creates the Security table.
			/// </summary>
			internal SecurityDataTable()
			{
				// Initialize the object.
				this.TableName = "Security";
				this.dataIndices = new global::Teraque.DataIndexCollection();
				// The AverageDailyVolume Column
				this.columnAverageDailyVolume = new global::System.Data.DataColumn("AverageDailyVolume", typeof(decimal), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnAverageDailyVolume);
				// The CountryId Column
				this.columnCountryId = new global::System.Data.DataColumn("CountryId", typeof(System.Guid), null, global::System.Data.MappingType.Element);
				this.columnCountryId.AllowDBNull = false;
				this.Columns.Add(this.columnCountryId);
				// The IsDerivative Column
				this.columnIsDerivative = new global::System.Data.DataColumn("IsDerivative", typeof(bool), null, global::System.Data.MappingType.Element);
				this.columnIsDerivative.AllowDBNull = false;
				this.columnIsDerivative.DefaultValue = false;
				this.Columns.Add(this.columnIsDerivative);
				// The IssuerId Column
				this.columnIssuerId = new global::System.Data.DataColumn("IssuerId", typeof(System.Guid), null, global::System.Data.MappingType.Element);
				this.columnIssuerId.AllowDBNull = false;
				this.Columns.Add(this.columnIssuerId);
				// The Logo Column
				this.columnLogo = new global::System.Data.DataColumn("Logo", typeof(string), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnLogo);
				// The MajorInstrumentTypeId Column
				this.columnMajorInstrumentTypeId = new global::System.Data.DataColumn("MajorInstrumentTypeId", typeof(System.Guid), null, global::System.Data.MappingType.Element);
				this.columnMajorInstrumentTypeId.AllowDBNull = false;
				this.Columns.Add(this.columnMajorInstrumentTypeId);
				// The MarketCapitalization Column
				this.columnMarketCapitalization = new global::System.Data.DataColumn("MarketCapitalization", typeof(decimal), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnMarketCapitalization);
				// The MinimumQuantity Column
				this.columnMinimumQuantity = new global::System.Data.DataColumn("MinimumQuantity", typeof(decimal), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnMinimumQuantity);
				// The MinorInstrumentTypeId Column
				this.columnMinorInstrumentTypeId = new global::System.Data.DataColumn("MinorInstrumentTypeId", typeof(System.Guid), null, global::System.Data.MappingType.Element);
				this.columnMinorInstrumentTypeId.AllowDBNull = false;
				this.Columns.Add(this.columnMinorInstrumentTypeId);
				// The PriceFactor Column
				this.columnPriceFactor = new global::System.Data.DataColumn("PriceFactor", typeof(decimal), null, global::System.Data.MappingType.Element);
				this.columnPriceFactor.AllowDBNull = false;
				this.columnPriceFactor.DefaultValue = 1.0m;
				this.Columns.Add(this.columnPriceFactor);
				// The QuantityFactor Column
				this.columnQuantityFactor = new global::System.Data.DataColumn("QuantityFactor", typeof(decimal), null, global::System.Data.MappingType.Element);
				this.columnQuantityFactor.AllowDBNull = false;
				this.columnQuantityFactor.DefaultValue = 1.0m;
				this.Columns.Add(this.columnQuantityFactor);
				// The RowVersion Column
				this.columnRowVersion = new global::System.Data.DataColumn("RowVersion", typeof(long), null, global::System.Data.MappingType.Element);
				this.columnRowVersion.AllowDBNull = false;
				this.Columns.Add(this.columnRowVersion);
				// The SecurityId Column
				this.columnSecurityId = new global::System.Data.DataColumn("SecurityId", typeof(System.Guid), null, global::System.Data.MappingType.Element);
				this.columnSecurityId.AllowDBNull = false;
				this.Columns.Add(this.columnSecurityId);
				// The Symbol Column
				this.columnSymbol = new global::System.Data.DataColumn("Symbol", typeof(string), null, global::System.Data.MappingType.Element);
				this.columnSymbol.AllowDBNull = false;
				this.columnSymbol.DefaultValue = "";
				this.Columns.Add(this.columnSymbol);
				// The VolumeCategoryCode Column
				this.columnVolumeCategoryCode = new global::System.Data.DataColumn("VolumeCategoryCode", typeof(Teraque.VolumeCategoryCode), null, global::System.Data.MappingType.Element);
				this.columnVolumeCategoryCode.AllowDBNull = false;
				this.Columns.Add(this.columnVolumeCategoryCode);
				// The SecurityKey Index
				this.indexSecurityKey = new SecurityKeyIndex("SecurityKey", new global::System.Data.DataColumn[] {
							this.columnSecurityId});
				this.Indices.Add(this.indexSecurityKey);
			}
			
			/// <summary>
			/// Gets the AverageDailyVolume column of the Security table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn AverageDailyVolumeColumn
			{
				get
				{
					return this.columnAverageDailyVolume;
				}
			}
			
			/// <summary>
			/// Gets the number of rows in the Security table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public int Count
			{
				get
				{
					return this.Rows.Count;
				}
			}
			
			/// <summary>
			/// Gets the CountryId column of the Security table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn CountryIdColumn
			{
				get
				{
					return this.columnCountryId;
				}
			}
			
			/// <summary>
			/// Gets the parent relation between the Country and Security tables.
			/// </summary>
			public global::System.Data.DataRelation CountrySecurityRelation
			{
				get
				{
					return this.relationCountrySecurity;
				}
			}
			
			/// <summary>
			/// Gets the parent relation between the Entity and Security tables.
			/// </summary>
			public global::System.Data.DataRelation EntitySecurityRelation
			{
				get
				{
					return this.relationEntitySecurity;
				}
			}
			
			/// <summary>
			/// Gets a collection of Teraque.DataModelGenerator.DataIndices on a table.
			/// </summary>
			public global::Teraque.DataIndexCollection Indices
			{
				get
				{
					return this.dataIndices;
				}
			}
			
			/// <summary>
			/// Gets the IsDerivative column of the Security table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn IsDerivativeColumn
			{
				get
				{
					return this.columnIsDerivative;
				}
			}
			
			/// <summary>
			/// Gets the IssuerId column of the Security table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn IssuerIdColumn
			{
				get
				{
					return this.columnIssuerId;
				}
			}
			
			/// <summary>
			/// Gets the parent relation between the Issuer and Security tables.
			/// </summary>
			public global::System.Data.DataRelation IssuerSecurityRelation
			{
				get
				{
					return this.relationIssuerSecurity;
				}
			}
			
			/// <summary>
			/// Indexer to a row in the Security table.
			/// </summary>
			/// <param name="index">The integer index of the row.</param>
			/// <returns>The Security row found at the given index.</returns>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public DataModel.SecurityRow this[int index]
			{
				get
				{
					return ((DataModel.SecurityRow)(this.Rows[index]));
				}
			}
			
			/// <summary>
			/// Gets the Logo column of the Security table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn LogoColumn
			{
				get
				{
					return this.columnLogo;
				}
			}
			
			/// <summary>
			/// Gets the MajorInstrumentTypeId column of the Security table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn MajorInstrumentTypeIdColumn
			{
				get
				{
					return this.columnMajorInstrumentTypeId;
				}
			}
			
			/// <summary>
			/// Gets the parent relation between the MajorInstrumentType and Security tables.
			/// </summary>
			public global::System.Data.DataRelation MajorInstrumentTypeSecurityRelation
			{
				get
				{
					return this.relationMajorInstrumentTypeSecurity;
				}
			}
			
			/// <summary>
			/// Gets the MarketCapitalization column of the Security table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn MarketCapitalizationColumn
			{
				get
				{
					return this.columnMarketCapitalization;
				}
			}
			
			/// <summary>
			/// Gets the MinimumQuantity column of the Security table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn MinimumQuantityColumn
			{
				get
				{
					return this.columnMinimumQuantity;
				}
			}
			
			/// <summary>
			/// Gets the MinorInstrumentTypeId column of the Security table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn MinorInstrumentTypeIdColumn
			{
				get
				{
					return this.columnMinorInstrumentTypeId;
				}
			}
			
			/// <summary>
			/// Gets the parent relation between the MinorInstrumentType and Security tables.
			/// </summary>
			public global::System.Data.DataRelation MinorInstrumentTypeSecurityRelation
			{
				get
				{
					return this.relationMinorInstrumentTypeSecurity;
				}
			}
			
			/// <summary>
			/// Gets the PriceFactor column of the Security table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn PriceFactorColumn
			{
				get
				{
					return this.columnPriceFactor;
				}
			}
			
			/// <summary>
			/// Gets the QuantityFactor column of the Security table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn QuantityFactorColumn
			{
				get
				{
					return this.columnQuantityFactor;
				}
			}
			
			/// <summary>
			/// Gets the RowVersion column of the Security table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn RowVersionColumn
			{
				get
				{
					return this.columnRowVersion;
				}
			}
			
			/// <summary>
			/// Gets the child relation between the Security and Allocation tables.
			/// </summary>
			internal global::System.Data.DataRelation SecurityAllocationByFK_Security_Allocation_SecurityIdRelation
			{
				get
				{
					return this.relationSecurityAllocationByFK_Security_Allocation_SecurityId;
				}
			}
			
			/// <summary>
			/// Gets the child relation between the Security and Allocation tables.
			/// </summary>
			internal global::System.Data.DataRelation SecurityAllocationByFK_Security_Allocation_SettlementIdRelation
			{
				get
				{
					return this.relationSecurityAllocationByFK_Security_Allocation_SettlementId;
				}
			}
			
			/// <summary>
			/// Gets the child relation between the Security and Currency tables.
			/// </summary>
			internal global::System.Data.DataRelation SecurityCurrencyRelation
			{
				get
				{
					return this.relationSecurityCurrency;
				}
			}
			
			/// <summary>
			/// Gets the child relation between the Security and Debt tables.
			/// </summary>
			internal global::System.Data.DataRelation SecurityDebtByFK_Security_Debt_DebtIdRelation
			{
				get
				{
					return this.relationSecurityDebtByFK_Security_Debt_DebtId;
				}
			}
			
			/// <summary>
			/// Gets the child relation between the Security and Debt tables.
			/// </summary>
			internal global::System.Data.DataRelation SecurityDebtByFK_Security_Debt_SettlementIdRelation
			{
				get
				{
					return this.relationSecurityDebtByFK_Security_Debt_SettlementId;
				}
			}
			
			/// <summary>
			/// Gets the child relation between the Security and DestinationOrder tables.
			/// </summary>
			internal global::System.Data.DataRelation SecurityDestinationOrderByFK_Security_DestinationOrder_SecurityIdRelation
			{
				get
				{
					return this.relationSecurityDestinationOrderByFK_Security_DestinationOrder_SecurityId;
				}
			}
			
			/// <summary>
			/// Gets the child relation between the Security and DestinationOrder tables.
			/// </summary>
			internal global::System.Data.DataRelation SecurityDestinationOrderByFK_Security_DestinationOrder_SettlementIdRelation
			{
				get
				{
					return this.relationSecurityDestinationOrderByFK_Security_DestinationOrder_SettlementId;
				}
			}
			
			/// <summary>
			/// Gets the child relation between the Security and Equity tables.
			/// </summary>
			internal global::System.Data.DataRelation SecurityEquityByFK_Security_Equity_EquityIdRelation
			{
				get
				{
					return this.relationSecurityEquityByFK_Security_Equity_EquityId;
				}
			}
			
			/// <summary>
			/// Gets the child relation between the Security and Equity tables.
			/// </summary>
			internal global::System.Data.DataRelation SecurityEquityByFK_Security_Equity_SettlementIdRelation
			{
				get
				{
					return this.relationSecurityEquityByFK_Security_Equity_SettlementId;
				}
			}
			
			/// <summary>
			/// Gets the SecurityId column of the Security table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn SecurityIdColumn
			{
				get
				{
					return this.columnSecurityId;
				}
			}
			
			/// <summary>
			/// Gets the child relation between the Security and IndustryLeaf tables.
			/// </summary>
			internal global::System.Data.DataRelation SecurityIndustryLeafRelation
			{
				get
				{
					return this.relationSecurityIndustryLeaf;
				}
			}
			
			/// <summary>
			/// Gets the SecurityKey index on the Security table.
			/// </summary>
			public SecurityKeyIndex SecurityKey
			{
				get
				{
					return ((SecurityKeyIndex)(this.indexSecurityKey));
				}
			}
			
			/// <summary>
			/// Gets the child relation between the Security and Position tables.
			/// </summary>
			internal global::System.Data.DataRelation SecurityPositionRelation
			{
				get
				{
					return this.relationSecurityPosition;
				}
			}
			
			/// <summary>
			/// Gets the child relation between the Security and PositionSeries tables.
			/// </summary>
			internal global::System.Data.DataRelation SecurityPositionSeriesRelation
			{
				get
				{
					return this.relationSecurityPositionSeries;
				}
			}
			
			/// <summary>
			/// Gets the child relation between the Security and Price tables.
			/// </summary>
			internal global::System.Data.DataRelation SecurityPriceByFK_Security_Price_CurrencyIdRelation
			{
				get
				{
					return this.relationSecurityPriceByFK_Security_Price_CurrencyId;
				}
			}
			
			/// <summary>
			/// Gets the child relation between the Security and Price tables.
			/// </summary>
			internal global::System.Data.DataRelation SecurityPriceByFK_Security_Price_SecurityIdRelation
			{
				get
				{
					return this.relationSecurityPriceByFK_Security_Price_SecurityId;
				}
			}
			
			/// <summary>
			/// Gets the child relation between the Security and SecuritySeries tables.
			/// </summary>
			internal global::System.Data.DataRelation SecuritySecuritySeriesRelation
			{
				get
				{
					return this.relationSecuritySecuritySeries;
				}
			}
			
			/// <summary>
			/// Gets the child relation between the Security and SourceOrder tables.
			/// </summary>
			internal global::System.Data.DataRelation SecuritySourceOrderByFK_Security_SourceOrder_SecurityIdRelation
			{
				get
				{
					return this.relationSecuritySourceOrderByFK_Security_SourceOrder_SecurityId;
				}
			}
			
			/// <summary>
			/// Gets the child relation between the Security and SourceOrder tables.
			/// </summary>
			internal global::System.Data.DataRelation SecuritySourceOrderByFK_Security_SourceOrder_SettlementIdRelation
			{
				get
				{
					return this.relationSecuritySourceOrderByFK_Security_SourceOrder_SettlementId;
				}
			}
			
			/// <summary>
			/// Gets the child relation between the Security and TaxLot tables.
			/// </summary>
			internal global::System.Data.DataRelation SecurityTaxLotRelation
			{
				get
				{
					return this.relationSecurityTaxLot;
				}
			}
			
			/// <summary>
			/// Gets the child relation between the Security and TaxLotSeries tables.
			/// </summary>
			internal global::System.Data.DataRelation SecurityTaxLotSeriesRelation
			{
				get
				{
					return this.relationSecurityTaxLotSeries;
				}
			}
			
			/// <summary>
			/// Gets the child relation between the Security and WorkingOrder tables.
			/// </summary>
			internal global::System.Data.DataRelation SecurityWorkingOrderByFK_Security_WorkingOrder_SecurityIdRelation
			{
				get
				{
					return this.relationSecurityWorkingOrderByFK_Security_WorkingOrder_SecurityId;
				}
			}
			
			/// <summary>
			/// Gets the child relation between the Security and WorkingOrder tables.
			/// </summary>
			internal global::System.Data.DataRelation SecurityWorkingOrderByFK_Security_WorkingOrder_SettlementIdRelation
			{
				get
				{
					return this.relationSecurityWorkingOrderByFK_Security_WorkingOrder_SettlementId;
				}
			}
			
			/// <summary>
			/// Gets the Symbol column of the Security table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn SymbolColumn
			{
				get
				{
					return this.columnSymbol;
				}
			}
			
			/// <summary>
			/// Gets the VolumeCategoryCode column of the Security table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn VolumeCategoryCodeColumn
			{
				get
				{
					return this.columnVolumeCategoryCode;
				}
			}
			
			/// <summary>
			/// Gets the parent relation between the VolumeCategory and Security tables.
			/// </summary>
			public global::System.Data.DataRelation VolumeCategorySecurityRelation
			{
				get
				{
					return this.relationVolumeCategorySecurity;
				}
			}
			
			/// <summary>
			/// Occurs after a Security row has been changed successfully.
			/// </summary>
			public event SecurityRowChangeEventHandler SecurityRowChanged;
			
			/// <summary>
			/// Occurs when a Security row is changing.
			/// </summary>
			public event SecurityRowChangeEventHandler SecurityRowChanging;
			
			/// <summary>
			/// Occurs after a Security row in the table has been deleted.
			/// </summary>
			public event SecurityRowChangeEventHandler SecurityRowDeleted;
			
			/// <summary>
			/// Occurs before a Security row in the table is about to be deleted.
			/// </summary>
			public event SecurityRowChangeEventHandler SecurityRowDeleting;
			
			/// <summary>
			/// Returns the type of the row in a Security table.
			/// </summary>
			/// <returns>The SecurityRow type.</returns>
			protected override global::System.Type GetRowType()
			{
				return typeof(SecurityRow);
			}
			
			/// <summary>
			/// Initializes the relation fields with the parent and child relations.
			/// </summary>
			internal void InitializeRelations()
			{
				this.relationCountrySecurity = this.ParentRelations["FK_Country_Security"];
				this.relationEntitySecurity = this.ParentRelations["FK_Entity_Security"];
				this.relationIssuerSecurity = this.ParentRelations["FK_Issuer_Security"];
				this.relationMajorInstrumentTypeSecurity = this.ParentRelations["FK_MajorInstrumentType_Security"];
				this.relationMinorInstrumentTypeSecurity = this.ParentRelations["FK_MinorInstrumentType_Security"];
				this.relationVolumeCategorySecurity = this.ParentRelations["FK_VolumeCategory_Security"];
				this.relationSecurityAllocationByFK_Security_Allocation_SecurityId = this.ChildRelations["FK_Security_Allocation_SecurityId"];
				this.relationSecurityAllocationByFK_Security_Allocation_SettlementId = this.ChildRelations["FK_Security_Allocation_SettlementId"];
				this.relationSecurityCurrency = this.ChildRelations["FK_Security_Currency"];
				this.relationSecurityDebtByFK_Security_Debt_DebtId = this.ChildRelations["FK_Security_Debt_DebtId"];
				this.relationSecurityDebtByFK_Security_Debt_SettlementId = this.ChildRelations["FK_Security_Debt_SettlementId"];
				this.relationSecurityDestinationOrderByFK_Security_DestinationOrder_SecurityId = this.ChildRelations["FK_Security_DestinationOrder_SecurityId"];
				this.relationSecurityDestinationOrderByFK_Security_DestinationOrder_SettlementId = this.ChildRelations["FK_Security_DestinationOrder_SettlementId"];
				this.relationSecurityEquityByFK_Security_Equity_EquityId = this.ChildRelations["FK_Security_Equity_EquityId"];
				this.relationSecurityEquityByFK_Security_Equity_SettlementId = this.ChildRelations["FK_Security_Equity_SettlementId"];
				this.relationSecurityIndustryLeaf = this.ChildRelations["FK_Security_IndustryLeaf_SecurityId"];
				this.relationSecurityPosition = this.ChildRelations["FK_Security_Position"];
				this.relationSecurityPositionSeries = this.ChildRelations["FK_Security_PositionSeries"];
				this.relationSecurityPriceByFK_Security_Price_CurrencyId = this.ChildRelations["FK_Security_Price_CurrencyId"];
				this.relationSecurityPriceByFK_Security_Price_SecurityId = this.ChildRelations["FK_Security_Price_SecurityId"];
				this.relationSecuritySecuritySeries = this.ChildRelations["FK_Security_SecuritySeries"];
				this.relationSecuritySourceOrderByFK_Security_SourceOrder_SecurityId = this.ChildRelations["FK_Security_SourceOrder_SecurityId"];
				this.relationSecuritySourceOrderByFK_Security_SourceOrder_SettlementId = this.ChildRelations["FK_Security_SourceOrder_SettlementId"];
				this.relationSecurityTaxLot = this.ChildRelations["FK_Security_TaxLot"];
				this.relationSecurityTaxLotSeries = this.ChildRelations["FK_Security_TaxLotSeries"];
				this.relationSecurityWorkingOrderByFK_Security_WorkingOrder_SecurityId = this.ChildRelations["FK_Security_WorkingOrder_SecurityId"];
				this.relationSecurityWorkingOrderByFK_Security_WorkingOrder_SettlementId = this.ChildRelations["FK_Security_WorkingOrder_SettlementId"];
			}
			
			/// <summary>
			/// Initializes a new instance of a Security row.  Constructs a row from the builder.  Only for internal usage.
			/// </summary>
			/// <returns>A new row with the same schema as the table.</returns>
			protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder dataRowBuilder)
			{
				return new SecurityRow(dataRowBuilder);
			}
			
			/// <summary>
			/// Raises the SecurityRowChanged event.
			/// </summary>
			/// <param name="e">Provides data for the SecurityRow changing and deleting events.</param>
			protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowChanged(e);
				if ((this.SecurityRowChanged != null))
				{
					this.SecurityRowChanged(this, new SecurityRowChangeEventArgs(((SecurityRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the SecurityRowChanging event.
			/// </summary>
			/// <param name="e">Provides data for the SecurityRow changing and deleting events.</param>
			protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowChanging(e);
				if ((this.SecurityRowChanging != null))
				{
					this.SecurityRowChanging(this, new SecurityRowChangeEventArgs(((SecurityRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the SecurityRowDeleted event.
			/// </summary>
			/// <param name="e">Provides data for the SecurityRow changing and deleting events.</param>
			protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowDeleted(e);
				if ((this.SecurityRowDeleted != null))
				{
					this.SecurityRowDeleted(this, new SecurityRowChangeEventArgs(((SecurityRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the SecurityRowDeleting event.
			/// </summary>
			/// <param name="e">Provides data for the SecurityRow changing and deleting events.</param>
			protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowDeleting(e);
				if ((this.SecurityRowDeleting != null))
				{
					this.SecurityRowDeleting(this, new SecurityRowChangeEventArgs(((SecurityRow)(e.Row)), e.Action));
				}
			}
		}
		
		/// <summary>
		/// The SecuritySeries table.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public partial class SecuritySeriesDataTable : global::System.Data.TypedTableBase<DataModel.SecuritySeriesRow>
		{
			
			private global::System.Data.DataColumn columnBetaAdjustedKrd10Year;
			
			private global::System.Data.DataColumn columnBetaAdjustedKrd20Year;
			
			private global::System.Data.DataColumn columnBetaAdjustedKrd2Year;
			
			private global::System.Data.DataColumn columnBetaAdjustedKrd30Year;
			
			private global::System.Data.DataColumn columnBetaAdjustedKrd5Year;
			
			private global::System.Data.DataColumn columnBetaAdjustedKrd6Month;
			
			private global::System.Data.DataColumn columnCoupon;
			
			private global::System.Data.DataColumn columnCreditRatingId0;
			
			private global::System.Data.DataColumn columnCreditRatingId1;
			
			private global::System.Data.DataColumn columnCreditRatingId2;
			
			private global::System.Data.DataColumn columnCreditRatingId3;
			
			private global::System.Data.DataColumn columnCreditRatingId4;
			
			private global::System.Data.DataColumn columnCreditRatingId5;
			
			private global::System.Data.DataColumn columnCurrentYield;
			
			private global::System.Data.DataColumn columnDate;
			
			private global::System.Data.DataColumn columnEffectiveConvexity;
			
			private global::System.Data.DataColumn columnEffectiveDuration;
			
			private global::System.Data.DataColumn columnExternalId0;
			
			private global::System.Data.DataColumn columnExternalId1;
			
			private global::System.Data.DataColumn columnModifiedDurationToWorst;
			
			private global::System.Data.DataColumn columnModifiedOptionAdjustedDuration;
			
			private global::System.Data.DataColumn columnMssaBucketId;
			
			private global::System.Data.DataColumn columnOptionAdjustedDuration;
			
			private global::System.Data.DataColumn columnOptionAdjustedSpread;
			
			private global::System.Data.DataColumn columnOptionAdjustedSpreadDuration;
			
			private global::System.Data.DataColumn columnOptionAdjustedYieldToWorst;
			
			private global::System.Data.DataColumn columnRowVersion;
			
			private global::System.Data.DataColumn columnSecurityId;
			
			private global::System.Data.DataColumn columnSecuritySeriesId;
			
			private global::System.Data.DataColumn columnSubordinateTypeCode;
			
			private global::System.Data.DataColumn columnYearsToAverageLife;
			
			private global::System.Data.DataColumn columnYearsToMaturity;
			
			private global::System.Data.DataColumn columnYieldToEffectiveMaturity;
			
			private global::System.Data.DataColumn columnYieldToMaturity;
			
			private global::System.Data.DataColumn columnYieldToWorst;
			
			private global::Teraque.DataIndexCollection dataIndices;
			
			private global::Teraque.DataIndex indexSecuritySeriesKey;
			
			private global::Teraque.DataIndex indexSecuritySeriesKeyExternalId0;
			
			private global::Teraque.DataIndex indexSecuritySeriesKeyExternalId1;
			
			private global::Teraque.DataIndex indexSecuritySeriesKeySecurityIdDate;
			
			private global::System.Data.DataRelation relationCreditRatingSecuritySeriesByFK_CreditRating_SecuritySeries_CreditRatingId0;
			
			private global::System.Data.DataRelation relationCreditRatingSecuritySeriesByFK_CreditRating_SecuritySeries_CreditRatingId1;
			
			private global::System.Data.DataRelation relationCreditRatingSecuritySeriesByFK_CreditRating_SecuritySeries_CreditRatingId2;
			
			private global::System.Data.DataRelation relationCreditRatingSecuritySeriesByFK_CreditRating_SecuritySeries_CreditRatingId3;
			
			private global::System.Data.DataRelation relationCreditRatingSecuritySeriesByFK_CreditRating_SecuritySeries_CreditRatingId4;
			
			private global::System.Data.DataRelation relationCreditRatingSecuritySeriesByFK_CreditRating_SecuritySeries_CreditRatingId5;
			
			private global::System.Data.DataRelation relationMssaBucketSecuritySeries;
			
			private global::System.Data.DataRelation relationSecuritySecuritySeries;
			
			private global::System.Data.DataRelation relationSecuritySeriesPositionSeries;
			
			private global::System.Data.DataRelation relationSecuritySeriesTaxLotSeries;
			
			private global::System.Data.DataRelation relationSubordinateTypeSecuritySeries;
			
			/// <summary>
			/// Creates the SecuritySeries table.
			/// </summary>
			internal SecuritySeriesDataTable()
			{
				// Initialize the object.
				this.TableName = "SecuritySeries";
				this.dataIndices = new global::Teraque.DataIndexCollection();
				// The BetaAdjustedKrd10Year Column
				this.columnBetaAdjustedKrd10Year = new global::System.Data.DataColumn("BetaAdjustedKrd10Year", typeof(decimal), null, global::System.Data.MappingType.Element);
				this.columnBetaAdjustedKrd10Year.AllowDBNull = false;
				this.columnBetaAdjustedKrd10Year.DefaultValue = 0.0m;
				this.Columns.Add(this.columnBetaAdjustedKrd10Year);
				// The BetaAdjustedKrd20Year Column
				this.columnBetaAdjustedKrd20Year = new global::System.Data.DataColumn("BetaAdjustedKrd20Year", typeof(decimal), null, global::System.Data.MappingType.Element);
				this.columnBetaAdjustedKrd20Year.AllowDBNull = false;
				this.columnBetaAdjustedKrd20Year.DefaultValue = 0.0m;
				this.Columns.Add(this.columnBetaAdjustedKrd20Year);
				// The BetaAdjustedKrd2Year Column
				this.columnBetaAdjustedKrd2Year = new global::System.Data.DataColumn("BetaAdjustedKrd2Year", typeof(decimal), null, global::System.Data.MappingType.Element);
				this.columnBetaAdjustedKrd2Year.AllowDBNull = false;
				this.columnBetaAdjustedKrd2Year.DefaultValue = 0.0m;
				this.Columns.Add(this.columnBetaAdjustedKrd2Year);
				// The BetaAdjustedKrd30Year Column
				this.columnBetaAdjustedKrd30Year = new global::System.Data.DataColumn("BetaAdjustedKrd30Year", typeof(decimal), null, global::System.Data.MappingType.Element);
				this.columnBetaAdjustedKrd30Year.AllowDBNull = false;
				this.columnBetaAdjustedKrd30Year.DefaultValue = 0.0m;
				this.Columns.Add(this.columnBetaAdjustedKrd30Year);
				// The BetaAdjustedKrd5Year Column
				this.columnBetaAdjustedKrd5Year = new global::System.Data.DataColumn("BetaAdjustedKrd5Year", typeof(decimal), null, global::System.Data.MappingType.Element);
				this.columnBetaAdjustedKrd5Year.AllowDBNull = false;
				this.columnBetaAdjustedKrd5Year.DefaultValue = 0.0m;
				this.Columns.Add(this.columnBetaAdjustedKrd5Year);
				// The BetaAdjustedKrd6Month Column
				this.columnBetaAdjustedKrd6Month = new global::System.Data.DataColumn("BetaAdjustedKrd6Month", typeof(decimal), null, global::System.Data.MappingType.Element);
				this.columnBetaAdjustedKrd6Month.AllowDBNull = false;
				this.columnBetaAdjustedKrd6Month.DefaultValue = 0.0m;
				this.Columns.Add(this.columnBetaAdjustedKrd6Month);
				// The Coupon Column
				this.columnCoupon = new global::System.Data.DataColumn("Coupon", typeof(decimal), null, global::System.Data.MappingType.Element);
				this.columnCoupon.AllowDBNull = false;
				this.columnCoupon.DefaultValue = 0.0m;
				this.Columns.Add(this.columnCoupon);
				// The CreditRatingId0 Column
				this.columnCreditRatingId0 = new global::System.Data.DataColumn("CreditRatingId0", typeof(System.Guid), null, global::System.Data.MappingType.Element);
				this.columnCreditRatingId0.AllowDBNull = false;
				this.Columns.Add(this.columnCreditRatingId0);
				// The CreditRatingId1 Column
				this.columnCreditRatingId1 = new global::System.Data.DataColumn("CreditRatingId1", typeof(System.Guid), null, global::System.Data.MappingType.Element);
				this.columnCreditRatingId1.AllowDBNull = false;
				this.Columns.Add(this.columnCreditRatingId1);
				// The CreditRatingId2 Column
				this.columnCreditRatingId2 = new global::System.Data.DataColumn("CreditRatingId2", typeof(System.Guid), null, global::System.Data.MappingType.Element);
				this.columnCreditRatingId2.AllowDBNull = false;
				this.Columns.Add(this.columnCreditRatingId2);
				// The CreditRatingId3 Column
				this.columnCreditRatingId3 = new global::System.Data.DataColumn("CreditRatingId3", typeof(System.Guid), null, global::System.Data.MappingType.Element);
				this.columnCreditRatingId3.AllowDBNull = false;
				this.Columns.Add(this.columnCreditRatingId3);
				// The CreditRatingId4 Column
				this.columnCreditRatingId4 = new global::System.Data.DataColumn("CreditRatingId4", typeof(System.Guid), null, global::System.Data.MappingType.Element);
				this.columnCreditRatingId4.AllowDBNull = false;
				this.Columns.Add(this.columnCreditRatingId4);
				// The CreditRatingId5 Column
				this.columnCreditRatingId5 = new global::System.Data.DataColumn("CreditRatingId5", typeof(System.Guid), null, global::System.Data.MappingType.Element);
				this.columnCreditRatingId5.AllowDBNull = false;
				this.Columns.Add(this.columnCreditRatingId5);
				// The CurrentYield Column
				this.columnCurrentYield = new global::System.Data.DataColumn("CurrentYield", typeof(decimal), null, global::System.Data.MappingType.Element);
				this.columnCurrentYield.AllowDBNull = false;
				this.columnCurrentYield.DefaultValue = 0.0m;
				this.Columns.Add(this.columnCurrentYield);
				// The Date Column
				this.columnDate = new global::System.Data.DataColumn("Date", typeof(System.DateTime), null, global::System.Data.MappingType.Element);
				this.columnDate.AllowDBNull = false;
				this.Columns.Add(this.columnDate);
				// The EffectiveConvexity Column
				this.columnEffectiveConvexity = new global::System.Data.DataColumn("EffectiveConvexity", typeof(decimal), null, global::System.Data.MappingType.Element);
				this.columnEffectiveConvexity.AllowDBNull = false;
				this.columnEffectiveConvexity.DefaultValue = 0.0m;
				this.Columns.Add(this.columnEffectiveConvexity);
				// The EffectiveDuration Column
				this.columnEffectiveDuration = new global::System.Data.DataColumn("EffectiveDuration", typeof(decimal), null, global::System.Data.MappingType.Element);
				this.columnEffectiveDuration.AllowDBNull = false;
				this.columnEffectiveDuration.DefaultValue = 0.0m;
				this.Columns.Add(this.columnEffectiveDuration);
				// The ExternalId0 Column
				this.columnExternalId0 = new global::System.Data.DataColumn("ExternalId0", typeof(string), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnExternalId0);
				// The ExternalId1 Column
				this.columnExternalId1 = new global::System.Data.DataColumn("ExternalId1", typeof(string), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnExternalId1);
				// The ModifiedDurationToWorst Column
				this.columnModifiedDurationToWorst = new global::System.Data.DataColumn("ModifiedDurationToWorst", typeof(decimal), null, global::System.Data.MappingType.Element);
				this.columnModifiedDurationToWorst.AllowDBNull = false;
				this.columnModifiedDurationToWorst.DefaultValue = 0.0m;
				this.Columns.Add(this.columnModifiedDurationToWorst);
				// The ModifiedOptionAdjustedDuration Column
				this.columnModifiedOptionAdjustedDuration = new global::System.Data.DataColumn("ModifiedOptionAdjustedDuration", typeof(decimal), null, global::System.Data.MappingType.Element);
				this.columnModifiedOptionAdjustedDuration.AllowDBNull = false;
				this.columnModifiedOptionAdjustedDuration.DefaultValue = 0.0m;
				this.Columns.Add(this.columnModifiedOptionAdjustedDuration);
				// The MssaBucketId Column
				this.columnMssaBucketId = new global::System.Data.DataColumn("MssaBucketId", typeof(System.Guid), null, global::System.Data.MappingType.Element);
				this.columnMssaBucketId.AllowDBNull = false;
				this.Columns.Add(this.columnMssaBucketId);
				// The OptionAdjustedDuration Column
				this.columnOptionAdjustedDuration = new global::System.Data.DataColumn("OptionAdjustedDuration", typeof(decimal), null, global::System.Data.MappingType.Element);
				this.columnOptionAdjustedDuration.AllowDBNull = false;
				this.columnOptionAdjustedDuration.DefaultValue = 0.0m;
				this.Columns.Add(this.columnOptionAdjustedDuration);
				// The OptionAdjustedSpread Column
				this.columnOptionAdjustedSpread = new global::System.Data.DataColumn("OptionAdjustedSpread", typeof(decimal), null, global::System.Data.MappingType.Element);
				this.columnOptionAdjustedSpread.AllowDBNull = false;
				this.columnOptionAdjustedSpread.DefaultValue = 0.0m;
				this.Columns.Add(this.columnOptionAdjustedSpread);
				// The OptionAdjustedSpreadDuration Column
				this.columnOptionAdjustedSpreadDuration = new global::System.Data.DataColumn("OptionAdjustedSpreadDuration", typeof(decimal), null, global::System.Data.MappingType.Element);
				this.columnOptionAdjustedSpreadDuration.AllowDBNull = false;
				this.columnOptionAdjustedSpreadDuration.DefaultValue = 0.0m;
				this.Columns.Add(this.columnOptionAdjustedSpreadDuration);
				// The OptionAdjustedYieldToWorst Column
				this.columnOptionAdjustedYieldToWorst = new global::System.Data.DataColumn("OptionAdjustedYieldToWorst", typeof(decimal), null, global::System.Data.MappingType.Element);
				this.columnOptionAdjustedYieldToWorst.AllowDBNull = false;
				this.columnOptionAdjustedYieldToWorst.DefaultValue = 0.0m;
				this.Columns.Add(this.columnOptionAdjustedYieldToWorst);
				// The RowVersion Column
				this.columnRowVersion = new global::System.Data.DataColumn("RowVersion", typeof(long), null, global::System.Data.MappingType.Element);
				this.columnRowVersion.AllowDBNull = false;
				this.Columns.Add(this.columnRowVersion);
				// The SecurityId Column
				this.columnSecurityId = new global::System.Data.DataColumn("SecurityId", typeof(System.Guid), null, global::System.Data.MappingType.Element);
				this.columnSecurityId.AllowDBNull = false;
				this.Columns.Add(this.columnSecurityId);
				// The SecuritySeriesId Column
				this.columnSecuritySeriesId = new global::System.Data.DataColumn("SecuritySeriesId", typeof(System.Guid), null, global::System.Data.MappingType.Element);
				this.columnSecuritySeriesId.AllowDBNull = false;
				this.Columns.Add(this.columnSecuritySeriesId);
				// The SubordinateTypeCode Column
				this.columnSubordinateTypeCode = new global::System.Data.DataColumn("SubordinateTypeCode", typeof(Teraque.SubordinateTypeCode), null, global::System.Data.MappingType.Element);
				this.columnSubordinateTypeCode.AllowDBNull = false;
				this.Columns.Add(this.columnSubordinateTypeCode);
				// The YearsToAverageLife Column
				this.columnYearsToAverageLife = new global::System.Data.DataColumn("YearsToAverageLife", typeof(decimal), null, global::System.Data.MappingType.Element);
				this.columnYearsToAverageLife.AllowDBNull = false;
				this.columnYearsToAverageLife.DefaultValue = 0.0m;
				this.Columns.Add(this.columnYearsToAverageLife);
				// The YearsToMaturity Column
				this.columnYearsToMaturity = new global::System.Data.DataColumn("YearsToMaturity", typeof(decimal), null, global::System.Data.MappingType.Element);
				this.columnYearsToMaturity.AllowDBNull = false;
				this.columnYearsToMaturity.DefaultValue = 0.0m;
				this.Columns.Add(this.columnYearsToMaturity);
				// The YieldToEffectiveMaturity Column
				this.columnYieldToEffectiveMaturity = new global::System.Data.DataColumn("YieldToEffectiveMaturity", typeof(decimal), null, global::System.Data.MappingType.Element);
				this.columnYieldToEffectiveMaturity.AllowDBNull = false;
				this.columnYieldToEffectiveMaturity.DefaultValue = 0.0m;
				this.Columns.Add(this.columnYieldToEffectiveMaturity);
				// The YieldToMaturity Column
				this.columnYieldToMaturity = new global::System.Data.DataColumn("YieldToMaturity", typeof(decimal), null, global::System.Data.MappingType.Element);
				this.columnYieldToMaturity.AllowDBNull = false;
				this.columnYieldToMaturity.DefaultValue = 0.0m;
				this.Columns.Add(this.columnYieldToMaturity);
				// The YieldToWorst Column
				this.columnYieldToWorst = new global::System.Data.DataColumn("YieldToWorst", typeof(decimal), null, global::System.Data.MappingType.Element);
				this.columnYieldToWorst.AllowDBNull = false;
				this.columnYieldToWorst.DefaultValue = 0.0m;
				this.Columns.Add(this.columnYieldToWorst);
				// The SecuritySeriesKey Index
				this.indexSecuritySeriesKey = new SecuritySeriesKeyIndex("SecuritySeriesKey", new global::System.Data.DataColumn[] {
							this.columnSecuritySeriesId});
				this.Indices.Add(this.indexSecuritySeriesKey);
				// The SecuritySeriesKeyExternalId0 Index
				this.indexSecuritySeriesKeyExternalId0 = new SecuritySeriesKeyExternalId0Index("SecuritySeriesKeyExternalId0", new global::System.Data.DataColumn[] {
							this.columnExternalId0});
				this.Indices.Add(this.indexSecuritySeriesKeyExternalId0);
				// The SecuritySeriesKeyExternalId1 Index
				this.indexSecuritySeriesKeyExternalId1 = new SecuritySeriesKeyExternalId1Index("SecuritySeriesKeyExternalId1", new global::System.Data.DataColumn[] {
							this.columnExternalId1});
				this.Indices.Add(this.indexSecuritySeriesKeyExternalId1);
				// The SecuritySeriesKeySecurityIdDate Index
				this.indexSecuritySeriesKeySecurityIdDate = new SecuritySeriesKeySecurityIdDateIndex("SecuritySeriesKeySecurityIdDate", new global::System.Data.DataColumn[] {
							this.columnSecurityId,
							this.columnDate});
				this.Constraints.Add(new global::System.Data.UniqueConstraint(new global::System.Data.DataColumn[] {
								this.columnSecurityId,
								this.columnDate}));
				this.Indices.Add(this.indexSecuritySeriesKeySecurityIdDate);
			}
			
			/// <summary>
			/// Gets the BetaAdjustedKrd10Year column of the SecuritySeries table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn BetaAdjustedKrd10YearColumn
			{
				get
				{
					return this.columnBetaAdjustedKrd10Year;
				}
			}
			
			/// <summary>
			/// Gets the BetaAdjustedKrd20Year column of the SecuritySeries table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn BetaAdjustedKrd20YearColumn
			{
				get
				{
					return this.columnBetaAdjustedKrd20Year;
				}
			}
			
			/// <summary>
			/// Gets the BetaAdjustedKrd2Year column of the SecuritySeries table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn BetaAdjustedKrd2YearColumn
			{
				get
				{
					return this.columnBetaAdjustedKrd2Year;
				}
			}
			
			/// <summary>
			/// Gets the BetaAdjustedKrd30Year column of the SecuritySeries table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn BetaAdjustedKrd30YearColumn
			{
				get
				{
					return this.columnBetaAdjustedKrd30Year;
				}
			}
			
			/// <summary>
			/// Gets the BetaAdjustedKrd5Year column of the SecuritySeries table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn BetaAdjustedKrd5YearColumn
			{
				get
				{
					return this.columnBetaAdjustedKrd5Year;
				}
			}
			
			/// <summary>
			/// Gets the BetaAdjustedKrd6Month column of the SecuritySeries table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn BetaAdjustedKrd6MonthColumn
			{
				get
				{
					return this.columnBetaAdjustedKrd6Month;
				}
			}
			
			/// <summary>
			/// Gets the number of rows in the SecuritySeries table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public int Count
			{
				get
				{
					return this.Rows.Count;
				}
			}
			
			/// <summary>
			/// Gets the Coupon column of the SecuritySeries table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn CouponColumn
			{
				get
				{
					return this.columnCoupon;
				}
			}
			
			/// <summary>
			/// Gets the CreditRatingId0 column of the SecuritySeries table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn CreditRatingId0Column
			{
				get
				{
					return this.columnCreditRatingId0;
				}
			}
			
			/// <summary>
			/// Gets the CreditRatingId1 column of the SecuritySeries table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn CreditRatingId1Column
			{
				get
				{
					return this.columnCreditRatingId1;
				}
			}
			
			/// <summary>
			/// Gets the CreditRatingId2 column of the SecuritySeries table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn CreditRatingId2Column
			{
				get
				{
					return this.columnCreditRatingId2;
				}
			}
			
			/// <summary>
			/// Gets the CreditRatingId3 column of the SecuritySeries table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn CreditRatingId3Column
			{
				get
				{
					return this.columnCreditRatingId3;
				}
			}
			
			/// <summary>
			/// Gets the CreditRatingId4 column of the SecuritySeries table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn CreditRatingId4Column
			{
				get
				{
					return this.columnCreditRatingId4;
				}
			}
			
			/// <summary>
			/// Gets the CreditRatingId5 column of the SecuritySeries table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn CreditRatingId5Column
			{
				get
				{
					return this.columnCreditRatingId5;
				}
			}
			
			/// <summary>
			/// Gets the parent relation between the CreditRating and SecuritySeries tables.
			/// </summary>
			public global::System.Data.DataRelation CreditRatingSecuritySeriesByFK_CreditRating_SecuritySeries_CreditRatingId0Relation
			{
				get
				{
					return this.relationCreditRatingSecuritySeriesByFK_CreditRating_SecuritySeries_CreditRatingId0;
				}
			}
			
			/// <summary>
			/// Gets the parent relation between the CreditRating and SecuritySeries tables.
			/// </summary>
			public global::System.Data.DataRelation CreditRatingSecuritySeriesByFK_CreditRating_SecuritySeries_CreditRatingId1Relation
			{
				get
				{
					return this.relationCreditRatingSecuritySeriesByFK_CreditRating_SecuritySeries_CreditRatingId1;
				}
			}
			
			/// <summary>
			/// Gets the parent relation between the CreditRating and SecuritySeries tables.
			/// </summary>
			public global::System.Data.DataRelation CreditRatingSecuritySeriesByFK_CreditRating_SecuritySeries_CreditRatingId2Relation
			{
				get
				{
					return this.relationCreditRatingSecuritySeriesByFK_CreditRating_SecuritySeries_CreditRatingId2;
				}
			}
			
			/// <summary>
			/// Gets the parent relation between the CreditRating and SecuritySeries tables.
			/// </summary>
			public global::System.Data.DataRelation CreditRatingSecuritySeriesByFK_CreditRating_SecuritySeries_CreditRatingId3Relation
			{
				get
				{
					return this.relationCreditRatingSecuritySeriesByFK_CreditRating_SecuritySeries_CreditRatingId3;
				}
			}
			
			/// <summary>
			/// Gets the parent relation between the CreditRating and SecuritySeries tables.
			/// </summary>
			public global::System.Data.DataRelation CreditRatingSecuritySeriesByFK_CreditRating_SecuritySeries_CreditRatingId4Relation
			{
				get
				{
					return this.relationCreditRatingSecuritySeriesByFK_CreditRating_SecuritySeries_CreditRatingId4;
				}
			}
			
			/// <summary>
			/// Gets the parent relation between the CreditRating and SecuritySeries tables.
			/// </summary>
			public global::System.Data.DataRelation CreditRatingSecuritySeriesByFK_CreditRating_SecuritySeries_CreditRatingId5Relation
			{
				get
				{
					return this.relationCreditRatingSecuritySeriesByFK_CreditRating_SecuritySeries_CreditRatingId5;
				}
			}
			
			/// <summary>
			/// Gets the CurrentYield column of the SecuritySeries table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn CurrentYieldColumn
			{
				get
				{
					return this.columnCurrentYield;
				}
			}
			
			/// <summary>
			/// Gets the Date column of the SecuritySeries table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn DateColumn
			{
				get
				{
					return this.columnDate;
				}
			}
			
			/// <summary>
			/// Gets the EffectiveConvexity column of the SecuritySeries table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn EffectiveConvexityColumn
			{
				get
				{
					return this.columnEffectiveConvexity;
				}
			}
			
			/// <summary>
			/// Gets the EffectiveDuration column of the SecuritySeries table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn EffectiveDurationColumn
			{
				get
				{
					return this.columnEffectiveDuration;
				}
			}
			
			/// <summary>
			/// Gets the ExternalId0 column of the SecuritySeries table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn ExternalId0Column
			{
				get
				{
					return this.columnExternalId0;
				}
			}
			
			/// <summary>
			/// Gets the ExternalId1 column of the SecuritySeries table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn ExternalId1Column
			{
				get
				{
					return this.columnExternalId1;
				}
			}
			
			/// <summary>
			/// Gets a collection of Teraque.DataModelGenerator.DataIndices on a table.
			/// </summary>
			public global::Teraque.DataIndexCollection Indices
			{
				get
				{
					return this.dataIndices;
				}
			}
			
			/// <summary>
			/// Indexer to a row in the SecuritySeries table.
			/// </summary>
			/// <param name="index">The integer index of the row.</param>
			/// <returns>The SecuritySeries row found at the given index.</returns>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public DataModel.SecuritySeriesRow this[int index]
			{
				get
				{
					return ((DataModel.SecuritySeriesRow)(this.Rows[index]));
				}
			}
			
			/// <summary>
			/// Gets the ModifiedDurationToWorst column of the SecuritySeries table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn ModifiedDurationToWorstColumn
			{
				get
				{
					return this.columnModifiedDurationToWorst;
				}
			}
			
			/// <summary>
			/// Gets the ModifiedOptionAdjustedDuration column of the SecuritySeries table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn ModifiedOptionAdjustedDurationColumn
			{
				get
				{
					return this.columnModifiedOptionAdjustedDuration;
				}
			}
			
			/// <summary>
			/// Gets the MssaBucketId column of the SecuritySeries table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn MssaBucketIdColumn
			{
				get
				{
					return this.columnMssaBucketId;
				}
			}
			
			/// <summary>
			/// Gets the parent relation between the MssaBucket and SecuritySeries tables.
			/// </summary>
			public global::System.Data.DataRelation MssaBucketSecuritySeriesRelation
			{
				get
				{
					return this.relationMssaBucketSecuritySeries;
				}
			}
			
			/// <summary>
			/// Gets the OptionAdjustedDuration column of the SecuritySeries table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn OptionAdjustedDurationColumn
			{
				get
				{
					return this.columnOptionAdjustedDuration;
				}
			}
			
			/// <summary>
			/// Gets the OptionAdjustedSpread column of the SecuritySeries table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn OptionAdjustedSpreadColumn
			{
				get
				{
					return this.columnOptionAdjustedSpread;
				}
			}
			
			/// <summary>
			/// Gets the OptionAdjustedSpreadDuration column of the SecuritySeries table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn OptionAdjustedSpreadDurationColumn
			{
				get
				{
					return this.columnOptionAdjustedSpreadDuration;
				}
			}
			
			/// <summary>
			/// Gets the OptionAdjustedYieldToWorst column of the SecuritySeries table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn OptionAdjustedYieldToWorstColumn
			{
				get
				{
					return this.columnOptionAdjustedYieldToWorst;
				}
			}
			
			/// <summary>
			/// Gets the RowVersion column of the SecuritySeries table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn RowVersionColumn
			{
				get
				{
					return this.columnRowVersion;
				}
			}
			
			/// <summary>
			/// Gets the SecurityId column of the SecuritySeries table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn SecurityIdColumn
			{
				get
				{
					return this.columnSecurityId;
				}
			}
			
			/// <summary>
			/// Gets the parent relation between the Security and SecuritySeries tables.
			/// </summary>
			public global::System.Data.DataRelation SecuritySecuritySeriesRelation
			{
				get
				{
					return this.relationSecuritySecuritySeries;
				}
			}
			
			/// <summary>
			/// Gets the SecuritySeriesId column of the SecuritySeries table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn SecuritySeriesIdColumn
			{
				get
				{
					return this.columnSecuritySeriesId;
				}
			}
			
			/// <summary>
			/// Gets the SecuritySeriesKey index on the SecuritySeries table.
			/// </summary>
			public SecuritySeriesKeyIndex SecuritySeriesKey
			{
				get
				{
					return ((SecuritySeriesKeyIndex)(this.indexSecuritySeriesKey));
				}
			}
			
			/// <summary>
			/// Gets the SecuritySeriesKeyExternalId0 index on the SecuritySeries table.
			/// </summary>
			public SecuritySeriesKeyExternalId0Index SecuritySeriesKeyExternalId0
			{
				get
				{
					return ((SecuritySeriesKeyExternalId0Index)(this.indexSecuritySeriesKeyExternalId0));
				}
			}
			
			/// <summary>
			/// Gets the SecuritySeriesKeyExternalId1 index on the SecuritySeries table.
			/// </summary>
			public SecuritySeriesKeyExternalId1Index SecuritySeriesKeyExternalId1
			{
				get
				{
					return ((SecuritySeriesKeyExternalId1Index)(this.indexSecuritySeriesKeyExternalId1));
				}
			}
			
			/// <summary>
			/// Gets the SecuritySeriesKeySecurityIdDate index on the SecuritySeries table.
			/// </summary>
			public SecuritySeriesKeySecurityIdDateIndex SecuritySeriesKeySecurityIdDate
			{
				get
				{
					return ((SecuritySeriesKeySecurityIdDateIndex)(this.indexSecuritySeriesKeySecurityIdDate));
				}
			}
			
			/// <summary>
			/// Gets the child relation between the SecuritySeries and PositionSeries tables.
			/// </summary>
			internal global::System.Data.DataRelation SecuritySeriesPositionSeriesRelation
			{
				get
				{
					return this.relationSecuritySeriesPositionSeries;
				}
			}
			
			/// <summary>
			/// Gets the child relation between the SecuritySeries and TaxLotSeries tables.
			/// </summary>
			internal global::System.Data.DataRelation SecuritySeriesTaxLotSeriesRelation
			{
				get
				{
					return this.relationSecuritySeriesTaxLotSeries;
				}
			}
			
			/// <summary>
			/// Gets the SubordinateTypeCode column of the SecuritySeries table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn SubordinateTypeCodeColumn
			{
				get
				{
					return this.columnSubordinateTypeCode;
				}
			}
			
			/// <summary>
			/// Gets the parent relation between the SubordinateType and SecuritySeries tables.
			/// </summary>
			public global::System.Data.DataRelation SubordinateTypeSecuritySeriesRelation
			{
				get
				{
					return this.relationSubordinateTypeSecuritySeries;
				}
			}
			
			/// <summary>
			/// Gets the YearsToAverageLife column of the SecuritySeries table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn YearsToAverageLifeColumn
			{
				get
				{
					return this.columnYearsToAverageLife;
				}
			}
			
			/// <summary>
			/// Gets the YearsToMaturity column of the SecuritySeries table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn YearsToMaturityColumn
			{
				get
				{
					return this.columnYearsToMaturity;
				}
			}
			
			/// <summary>
			/// Gets the YieldToEffectiveMaturity column of the SecuritySeries table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn YieldToEffectiveMaturityColumn
			{
				get
				{
					return this.columnYieldToEffectiveMaturity;
				}
			}
			
			/// <summary>
			/// Gets the YieldToMaturity column of the SecuritySeries table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn YieldToMaturityColumn
			{
				get
				{
					return this.columnYieldToMaturity;
				}
			}
			
			/// <summary>
			/// Gets the YieldToWorst column of the SecuritySeries table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn YieldToWorstColumn
			{
				get
				{
					return this.columnYieldToWorst;
				}
			}
			
			/// <summary>
			/// Occurs after a SecuritySeries row has been changed successfully.
			/// </summary>
			public event SecuritySeriesRowChangeEventHandler SecuritySeriesRowChanged;
			
			/// <summary>
			/// Occurs when a SecuritySeries row is changing.
			/// </summary>
			public event SecuritySeriesRowChangeEventHandler SecuritySeriesRowChanging;
			
			/// <summary>
			/// Occurs after a SecuritySeries row in the table has been deleted.
			/// </summary>
			public event SecuritySeriesRowChangeEventHandler SecuritySeriesRowDeleted;
			
			/// <summary>
			/// Occurs before a SecuritySeries row in the table is about to be deleted.
			/// </summary>
			public event SecuritySeriesRowChangeEventHandler SecuritySeriesRowDeleting;
			
			/// <summary>
			/// Returns the type of the row in a SecuritySeries table.
			/// </summary>
			/// <returns>The SecuritySeriesRow type.</returns>
			protected override global::System.Type GetRowType()
			{
				return typeof(SecuritySeriesRow);
			}
			
			/// <summary>
			/// Initializes the relation fields with the parent and child relations.
			/// </summary>
			internal void InitializeRelations()
			{
				this.relationCreditRatingSecuritySeriesByFK_CreditRating_SecuritySeries_CreditRatingId0 = this.ParentRelations["FK_CreditRating_SecuritySeries_CreditRatingId0"];
				this.relationCreditRatingSecuritySeriesByFK_CreditRating_SecuritySeries_CreditRatingId1 = this.ParentRelations["FK_CreditRating_SecuritySeries_CreditRatingId1"];
				this.relationCreditRatingSecuritySeriesByFK_CreditRating_SecuritySeries_CreditRatingId2 = this.ParentRelations["FK_CreditRating_SecuritySeries_CreditRatingId2"];
				this.relationCreditRatingSecuritySeriesByFK_CreditRating_SecuritySeries_CreditRatingId3 = this.ParentRelations["FK_CreditRating_SecuritySeries_CreditRatingId3"];
				this.relationCreditRatingSecuritySeriesByFK_CreditRating_SecuritySeries_CreditRatingId4 = this.ParentRelations["FK_CreditRating_SecuritySeries_CreditRatingId4"];
				this.relationCreditRatingSecuritySeriesByFK_CreditRating_SecuritySeries_CreditRatingId5 = this.ParentRelations["FK_CreditRating_SecuritySeries_CreditRatingId5"];
				this.relationMssaBucketSecuritySeries = this.ParentRelations["FK_MssaBucket_SecuritySeries"];
				this.relationSecuritySecuritySeries = this.ParentRelations["FK_Security_SecuritySeries"];
				this.relationSubordinateTypeSecuritySeries = this.ParentRelations["FK_SubordinateType_SecuritySeries"];
				this.relationSecuritySeriesPositionSeries = this.ChildRelations["FK_SecuritySeries_PositionSeries"];
				this.relationSecuritySeriesTaxLotSeries = this.ChildRelations["FK_SecuritySeries_TaxLotSeries"];
			}
			
			/// <summary>
			/// Initializes a new instance of a SecuritySeries row.  Constructs a row from the builder.  Only for internal usage.
			/// </summary>
			/// <returns>A new row with the same schema as the table.</returns>
			protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder dataRowBuilder)
			{
				return new SecuritySeriesRow(dataRowBuilder);
			}
			
			/// <summary>
			/// Raises the SecuritySeriesRowChanged event.
			/// </summary>
			/// <param name="e">Provides data for the SecuritySeriesRow changing and deleting events.</param>
			protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowChanged(e);
				if ((this.SecuritySeriesRowChanged != null))
				{
					this.SecuritySeriesRowChanged(this, new SecuritySeriesRowChangeEventArgs(((SecuritySeriesRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the SecuritySeriesRowChanging event.
			/// </summary>
			/// <param name="e">Provides data for the SecuritySeriesRow changing and deleting events.</param>
			protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowChanging(e);
				if ((this.SecuritySeriesRowChanging != null))
				{
					this.SecuritySeriesRowChanging(this, new SecuritySeriesRowChangeEventArgs(((SecuritySeriesRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the SecuritySeriesRowDeleted event.
			/// </summary>
			/// <param name="e">Provides data for the SecuritySeriesRow changing and deleting events.</param>
			protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowDeleted(e);
				if ((this.SecuritySeriesRowDeleted != null))
				{
					this.SecuritySeriesRowDeleted(this, new SecuritySeriesRowChangeEventArgs(((SecuritySeriesRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the SecuritySeriesRowDeleting event.
			/// </summary>
			/// <param name="e">Provides data for the SecuritySeriesRow changing and deleting events.</param>
			protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowDeleting(e);
				if ((this.SecuritySeriesRowDeleting != null))
				{
					this.SecuritySeriesRowDeleting(this, new SecuritySeriesRowChangeEventArgs(((SecuritySeriesRow)(e.Row)), e.Action));
				}
			}
		}
		
		/// <summary>
		/// The SettlementUnit table.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public partial class SettlementUnitDataTable : global::System.Data.TypedTableBase<DataModel.SettlementUnitRow>
		{
			
			private global::System.Data.DataColumn columnDescription;
			
			private global::System.Data.DataColumn columnExternalId0;
			
			private global::System.Data.DataColumn columnName;
			
			private global::System.Data.DataColumn columnRowVersion;
			
			private global::System.Data.DataColumn columnSettlementUnitCode;
			
			private global::Teraque.DataIndexCollection dataIndices;
			
			private global::Teraque.DataIndex indexSettlementUnitKey;
			
			private global::Teraque.DataIndex indexSettlementUnitKeyExternalId0;
			
			/// <summary>
			/// Creates the SettlementUnit table.
			/// </summary>
			internal SettlementUnitDataTable()
			{
				// Initialize the object.
				this.TableName = "SettlementUnit";
				this.dataIndices = new global::Teraque.DataIndexCollection();
				// The Description Column
				this.columnDescription = new global::System.Data.DataColumn("Description", typeof(string), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnDescription);
				// The ExternalId0 Column
				this.columnExternalId0 = new global::System.Data.DataColumn("ExternalId0", typeof(string), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnExternalId0);
				// The Name Column
				this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnName);
				// The RowVersion Column
				this.columnRowVersion = new global::System.Data.DataColumn("RowVersion", typeof(long), null, global::System.Data.MappingType.Element);
				this.columnRowVersion.AllowDBNull = false;
				this.Columns.Add(this.columnRowVersion);
				// The SettlementUnitCode Column
				this.columnSettlementUnitCode = new global::System.Data.DataColumn("SettlementUnitCode", typeof(Teraque.SettlementUnitCode), null, global::System.Data.MappingType.Element);
				this.columnSettlementUnitCode.AllowDBNull = false;
				this.Columns.Add(this.columnSettlementUnitCode);
				// The SettlementUnitKey Index
				this.indexSettlementUnitKey = new SettlementUnitKeyIndex("SettlementUnitKey", new global::System.Data.DataColumn[] {
							this.columnSettlementUnitCode});
				this.Indices.Add(this.indexSettlementUnitKey);
				// The SettlementUnitKeyExternalId0 Index
				this.indexSettlementUnitKeyExternalId0 = new SettlementUnitKeyExternalId0Index("SettlementUnitKeyExternalId0", new global::System.Data.DataColumn[] {
							this.columnExternalId0});
				this.Indices.Add(this.indexSettlementUnitKeyExternalId0);
			}
			
			/// <summary>
			/// Gets the number of rows in the SettlementUnit table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public int Count
			{
				get
				{
					return this.Rows.Count;
				}
			}
			
			/// <summary>
			/// Gets the Description column of the SettlementUnit table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn DescriptionColumn
			{
				get
				{
					return this.columnDescription;
				}
			}
			
			/// <summary>
			/// Gets the ExternalId0 column of the SettlementUnit table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn ExternalId0Column
			{
				get
				{
					return this.columnExternalId0;
				}
			}
			
			/// <summary>
			/// Gets a collection of Teraque.DataModelGenerator.DataIndices on a table.
			/// </summary>
			public global::Teraque.DataIndexCollection Indices
			{
				get
				{
					return this.dataIndices;
				}
			}
			
			/// <summary>
			/// Indexer to a row in the SettlementUnit table.
			/// </summary>
			/// <param name="index">The integer index of the row.</param>
			/// <returns>The SettlementUnit row found at the given index.</returns>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public DataModel.SettlementUnitRow this[int index]
			{
				get
				{
					return ((DataModel.SettlementUnitRow)(this.Rows[index]));
				}
			}
			
			/// <summary>
			/// Gets the Name column of the SettlementUnit table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn NameColumn
			{
				get
				{
					return this.columnName;
				}
			}
			
			/// <summary>
			/// Gets the RowVersion column of the SettlementUnit table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn RowVersionColumn
			{
				get
				{
					return this.columnRowVersion;
				}
			}
			
			/// <summary>
			/// Gets the SettlementUnitCode column of the SettlementUnit table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn SettlementUnitCodeColumn
			{
				get
				{
					return this.columnSettlementUnitCode;
				}
			}
			
			/// <summary>
			/// Gets the SettlementUnitKey index on the SettlementUnit table.
			/// </summary>
			public SettlementUnitKeyIndex SettlementUnitKey
			{
				get
				{
					return ((SettlementUnitKeyIndex)(this.indexSettlementUnitKey));
				}
			}
			
			/// <summary>
			/// Gets the SettlementUnitKeyExternalId0 index on the SettlementUnit table.
			/// </summary>
			public SettlementUnitKeyExternalId0Index SettlementUnitKeyExternalId0
			{
				get
				{
					return ((SettlementUnitKeyExternalId0Index)(this.indexSettlementUnitKeyExternalId0));
				}
			}
			
			/// <summary>
			/// Occurs after a SettlementUnit row has been changed successfully.
			/// </summary>
			public event SettlementUnitRowChangeEventHandler SettlementUnitRowChanged;
			
			/// <summary>
			/// Occurs when a SettlementUnit row is changing.
			/// </summary>
			public event SettlementUnitRowChangeEventHandler SettlementUnitRowChanging;
			
			/// <summary>
			/// Occurs after a SettlementUnit row in the table has been deleted.
			/// </summary>
			public event SettlementUnitRowChangeEventHandler SettlementUnitRowDeleted;
			
			/// <summary>
			/// Occurs before a SettlementUnit row in the table is about to be deleted.
			/// </summary>
			public event SettlementUnitRowChangeEventHandler SettlementUnitRowDeleting;
			
			/// <summary>
			/// Returns the type of the row in a SettlementUnit table.
			/// </summary>
			/// <returns>The SettlementUnitRow type.</returns>
			protected override global::System.Type GetRowType()
			{
				return typeof(SettlementUnitRow);
			}
			
			/// <summary>
			/// Initializes the relation fields with the parent and child relations.
			/// </summary>
			internal void InitializeRelations()
			{
			}
			
			/// <summary>
			/// Initializes a new instance of a SettlementUnit row.  Constructs a row from the builder.  Only for internal usage.
			/// </summary>
			/// <returns>A new row with the same schema as the table.</returns>
			protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder dataRowBuilder)
			{
				return new SettlementUnitRow(dataRowBuilder);
			}
			
			/// <summary>
			/// Raises the SettlementUnitRowChanged event.
			/// </summary>
			/// <param name="e">Provides data for the SettlementUnitRow changing and deleting events.</param>
			protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowChanged(e);
				if ((this.SettlementUnitRowChanged != null))
				{
					this.SettlementUnitRowChanged(this, new SettlementUnitRowChangeEventArgs(((SettlementUnitRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the SettlementUnitRowChanging event.
			/// </summary>
			/// <param name="e">Provides data for the SettlementUnitRow changing and deleting events.</param>
			protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowChanging(e);
				if ((this.SettlementUnitRowChanging != null))
				{
					this.SettlementUnitRowChanging(this, new SettlementUnitRowChangeEventArgs(((SettlementUnitRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the SettlementUnitRowDeleted event.
			/// </summary>
			/// <param name="e">Provides data for the SettlementUnitRow changing and deleting events.</param>
			protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowDeleted(e);
				if ((this.SettlementUnitRowDeleted != null))
				{
					this.SettlementUnitRowDeleted(this, new SettlementUnitRowChangeEventArgs(((SettlementUnitRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the SettlementUnitRowDeleting event.
			/// </summary>
			/// <param name="e">Provides data for the SettlementUnitRow changing and deleting events.</param>
			protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowDeleting(e);
				if ((this.SettlementUnitRowDeleting != null))
				{
					this.SettlementUnitRowDeleting(this, new SettlementUnitRowChangeEventArgs(((SettlementUnitRow)(e.Row)), e.Action));
				}
			}
		}
		
		/// <summary>
		/// The Side table.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public partial class SideDataTable : global::System.Data.TypedTableBase<DataModel.SideRow>
		{
			
			private global::System.Data.DataColumn columnCashSign;
			
			private global::System.Data.DataColumn columnDescription;
			
			private global::System.Data.DataColumn columnExternalId0;
			
			private global::System.Data.DataColumn columnExternalId1;
			
			private global::System.Data.DataColumn columnExternalId2;
			
			private global::System.Data.DataColumn columnExternalId3;
			
			private global::System.Data.DataColumn columnImage;
			
			private global::System.Data.DataColumn columnMnemonic;
			
			private global::System.Data.DataColumn columnQuantitySign;
			
			private global::System.Data.DataColumn columnRowVersion;
			
			private global::System.Data.DataColumn columnSideCode;
			
			private global::System.Data.DataColumn columnSortOrder;
			
			private global::Teraque.DataIndexCollection dataIndices;
			
			private global::Teraque.DataIndex indexSideKey;
			
			private global::Teraque.DataIndex indexSideKeyExternalId0;
			
			private global::Teraque.DataIndex indexSideKeyExternalId1;
			
			private global::Teraque.DataIndex indexSideKeyExternalId2;
			
			private global::Teraque.DataIndex indexSideKeyExternalId3;
			
			private global::System.Data.DataRelation relationSideAllocation;
			
			private global::System.Data.DataRelation relationSideDestinationOrder;
			
			private global::System.Data.DataRelation relationSideSourceOrder;
			
			private global::System.Data.DataRelation relationSideWorkingOrder;
			
			/// <summary>
			/// Creates the Side table.
			/// </summary>
			internal SideDataTable()
			{
				// Initialize the object.
				this.TableName = "Side";
				this.dataIndices = new global::Teraque.DataIndexCollection();
				// The CashSign Column
				this.columnCashSign = new global::System.Data.DataColumn("CashSign", typeof(decimal), null, global::System.Data.MappingType.Element);
				this.columnCashSign.AllowDBNull = false;
				this.columnCashSign.DefaultValue = 0.0m;
				this.Columns.Add(this.columnCashSign);
				// The Description Column
				this.columnDescription = new global::System.Data.DataColumn("Description", typeof(string), null, global::System.Data.MappingType.Element);
				this.columnDescription.AllowDBNull = false;
				this.columnDescription.DefaultValue = "";
				this.Columns.Add(this.columnDescription);
				// The ExternalId0 Column
				this.columnExternalId0 = new global::System.Data.DataColumn("ExternalId0", typeof(string), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnExternalId0);
				// The ExternalId1 Column
				this.columnExternalId1 = new global::System.Data.DataColumn("ExternalId1", typeof(string), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnExternalId1);
				// The ExternalId2 Column
				this.columnExternalId2 = new global::System.Data.DataColumn("ExternalId2", typeof(string), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnExternalId2);
				// The ExternalId3 Column
				this.columnExternalId3 = new global::System.Data.DataColumn("ExternalId3", typeof(string), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnExternalId3);
				// The Image Column
				this.columnImage = new global::System.Data.DataColumn("Image", typeof(string), null, global::System.Data.MappingType.Element);
				this.columnImage.AllowDBNull = false;
				this.columnImage.DefaultValue = "";
				this.Columns.Add(this.columnImage);
				// The Mnemonic Column
				this.columnMnemonic = new global::System.Data.DataColumn("Mnemonic", typeof(string), null, global::System.Data.MappingType.Element);
				this.columnMnemonic.AllowDBNull = false;
				this.columnMnemonic.DefaultValue = "";
				this.Columns.Add(this.columnMnemonic);
				// The QuantitySign Column
				this.columnQuantitySign = new global::System.Data.DataColumn("QuantitySign", typeof(decimal), null, global::System.Data.MappingType.Element);
				this.columnQuantitySign.AllowDBNull = false;
				this.columnQuantitySign.DefaultValue = 0.0m;
				this.Columns.Add(this.columnQuantitySign);
				// The RowVersion Column
				this.columnRowVersion = new global::System.Data.DataColumn("RowVersion", typeof(long), null, global::System.Data.MappingType.Element);
				this.columnRowVersion.AllowDBNull = false;
				this.Columns.Add(this.columnRowVersion);
				// The SideCode Column
				this.columnSideCode = new global::System.Data.DataColumn("SideCode", typeof(Teraque.SideCode), null, global::System.Data.MappingType.Element);
				this.columnSideCode.AllowDBNull = false;
				this.Columns.Add(this.columnSideCode);
				// The SortOrder Column
				this.columnSortOrder = new global::System.Data.DataColumn("SortOrder", typeof(int), null, global::System.Data.MappingType.Element);
				this.columnSortOrder.AllowDBNull = false;
				this.columnSortOrder.DefaultValue = 0;
				this.Columns.Add(this.columnSortOrder);
				// The SideKey Index
				this.indexSideKey = new SideKeyIndex("SideKey", new global::System.Data.DataColumn[] {
							this.columnSideCode});
				this.Indices.Add(this.indexSideKey);
				// The SideKeyExternalId0 Index
				this.indexSideKeyExternalId0 = new SideKeyExternalId0Index("SideKeyExternalId0", new global::System.Data.DataColumn[] {
							this.columnExternalId0});
				this.Indices.Add(this.indexSideKeyExternalId0);
				// The SideKeyExternalId1 Index
				this.indexSideKeyExternalId1 = new SideKeyExternalId1Index("SideKeyExternalId1", new global::System.Data.DataColumn[] {
							this.columnExternalId1});
				this.Indices.Add(this.indexSideKeyExternalId1);
				// The SideKeyExternalId2 Index
				this.indexSideKeyExternalId2 = new SideKeyExternalId2Index("SideKeyExternalId2", new global::System.Data.DataColumn[] {
							this.columnExternalId2});
				this.Indices.Add(this.indexSideKeyExternalId2);
				// The SideKeyExternalId3 Index
				this.indexSideKeyExternalId3 = new SideKeyExternalId3Index("SideKeyExternalId3", new global::System.Data.DataColumn[] {
							this.columnExternalId3});
				this.Indices.Add(this.indexSideKeyExternalId3);
			}
			
			/// <summary>
			/// Gets the CashSign column of the Side table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn CashSignColumn
			{
				get
				{
					return this.columnCashSign;
				}
			}
			
			/// <summary>
			/// Gets the number of rows in the Side table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public int Count
			{
				get
				{
					return this.Rows.Count;
				}
			}
			
			/// <summary>
			/// Gets the Description column of the Side table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn DescriptionColumn
			{
				get
				{
					return this.columnDescription;
				}
			}
			
			/// <summary>
			/// Gets the ExternalId0 column of the Side table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn ExternalId0Column
			{
				get
				{
					return this.columnExternalId0;
				}
			}
			
			/// <summary>
			/// Gets the ExternalId1 column of the Side table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn ExternalId1Column
			{
				get
				{
					return this.columnExternalId1;
				}
			}
			
			/// <summary>
			/// Gets the ExternalId2 column of the Side table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn ExternalId2Column
			{
				get
				{
					return this.columnExternalId2;
				}
			}
			
			/// <summary>
			/// Gets the ExternalId3 column of the Side table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn ExternalId3Column
			{
				get
				{
					return this.columnExternalId3;
				}
			}
			
			/// <summary>
			/// Gets the Image column of the Side table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn ImageColumn
			{
				get
				{
					return this.columnImage;
				}
			}
			
			/// <summary>
			/// Gets a collection of Teraque.DataModelGenerator.DataIndices on a table.
			/// </summary>
			public global::Teraque.DataIndexCollection Indices
			{
				get
				{
					return this.dataIndices;
				}
			}
			
			/// <summary>
			/// Indexer to a row in the Side table.
			/// </summary>
			/// <param name="index">The integer index of the row.</param>
			/// <returns>The Side row found at the given index.</returns>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public DataModel.SideRow this[int index]
			{
				get
				{
					return ((DataModel.SideRow)(this.Rows[index]));
				}
			}
			
			/// <summary>
			/// Gets the Mnemonic column of the Side table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn MnemonicColumn
			{
				get
				{
					return this.columnMnemonic;
				}
			}
			
			/// <summary>
			/// Gets the QuantitySign column of the Side table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn QuantitySignColumn
			{
				get
				{
					return this.columnQuantitySign;
				}
			}
			
			/// <summary>
			/// Gets the RowVersion column of the Side table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn RowVersionColumn
			{
				get
				{
					return this.columnRowVersion;
				}
			}
			
			/// <summary>
			/// Gets the child relation between the Side and Allocation tables.
			/// </summary>
			internal global::System.Data.DataRelation SideAllocationRelation
			{
				get
				{
					return this.relationSideAllocation;
				}
			}
			
			/// <summary>
			/// Gets the SideCode column of the Side table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn SideCodeColumn
			{
				get
				{
					return this.columnSideCode;
				}
			}
			
			/// <summary>
			/// Gets the child relation between the Side and DestinationOrder tables.
			/// </summary>
			internal global::System.Data.DataRelation SideDestinationOrderRelation
			{
				get
				{
					return this.relationSideDestinationOrder;
				}
			}
			
			/// <summary>
			/// Gets the SideKey index on the Side table.
			/// </summary>
			public SideKeyIndex SideKey
			{
				get
				{
					return ((SideKeyIndex)(this.indexSideKey));
				}
			}
			
			/// <summary>
			/// Gets the SideKeyExternalId0 index on the Side table.
			/// </summary>
			public SideKeyExternalId0Index SideKeyExternalId0
			{
				get
				{
					return ((SideKeyExternalId0Index)(this.indexSideKeyExternalId0));
				}
			}
			
			/// <summary>
			/// Gets the SideKeyExternalId1 index on the Side table.
			/// </summary>
			public SideKeyExternalId1Index SideKeyExternalId1
			{
				get
				{
					return ((SideKeyExternalId1Index)(this.indexSideKeyExternalId1));
				}
			}
			
			/// <summary>
			/// Gets the SideKeyExternalId2 index on the Side table.
			/// </summary>
			public SideKeyExternalId2Index SideKeyExternalId2
			{
				get
				{
					return ((SideKeyExternalId2Index)(this.indexSideKeyExternalId2));
				}
			}
			
			/// <summary>
			/// Gets the SideKeyExternalId3 index on the Side table.
			/// </summary>
			public SideKeyExternalId3Index SideKeyExternalId3
			{
				get
				{
					return ((SideKeyExternalId3Index)(this.indexSideKeyExternalId3));
				}
			}
			
			/// <summary>
			/// Gets the child relation between the Side and SourceOrder tables.
			/// </summary>
			internal global::System.Data.DataRelation SideSourceOrderRelation
			{
				get
				{
					return this.relationSideSourceOrder;
				}
			}
			
			/// <summary>
			/// Gets the child relation between the Side and WorkingOrder tables.
			/// </summary>
			internal global::System.Data.DataRelation SideWorkingOrderRelation
			{
				get
				{
					return this.relationSideWorkingOrder;
				}
			}
			
			/// <summary>
			/// Gets the SortOrder column of the Side table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn SortOrderColumn
			{
				get
				{
					return this.columnSortOrder;
				}
			}
			
			/// <summary>
			/// Occurs after a Side row has been changed successfully.
			/// </summary>
			public event SideRowChangeEventHandler SideRowChanged;
			
			/// <summary>
			/// Occurs when a Side row is changing.
			/// </summary>
			public event SideRowChangeEventHandler SideRowChanging;
			
			/// <summary>
			/// Occurs after a Side row in the table has been deleted.
			/// </summary>
			public event SideRowChangeEventHandler SideRowDeleted;
			
			/// <summary>
			/// Occurs before a Side row in the table is about to be deleted.
			/// </summary>
			public event SideRowChangeEventHandler SideRowDeleting;
			
			/// <summary>
			/// Returns the type of the row in a Side table.
			/// </summary>
			/// <returns>The SideRow type.</returns>
			protected override global::System.Type GetRowType()
			{
				return typeof(SideRow);
			}
			
			/// <summary>
			/// Initializes the relation fields with the parent and child relations.
			/// </summary>
			internal void InitializeRelations()
			{
				this.relationSideAllocation = this.ChildRelations["FK_Side_Allocation"];
				this.relationSideDestinationOrder = this.ChildRelations["FK_Side_DestinationOrder"];
				this.relationSideSourceOrder = this.ChildRelations["FK_Side_SourceOrder"];
				this.relationSideWorkingOrder = this.ChildRelations["FK_Side_WorkingOrder"];
			}
			
			/// <summary>
			/// Initializes a new instance of a Side row.  Constructs a row from the builder.  Only for internal usage.
			/// </summary>
			/// <returns>A new row with the same schema as the table.</returns>
			protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder dataRowBuilder)
			{
				return new SideRow(dataRowBuilder);
			}
			
			/// <summary>
			/// Raises the SideRowChanged event.
			/// </summary>
			/// <param name="e">Provides data for the SideRow changing and deleting events.</param>
			protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowChanged(e);
				if ((this.SideRowChanged != null))
				{
					this.SideRowChanged(this, new SideRowChangeEventArgs(((SideRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the SideRowChanging event.
			/// </summary>
			/// <param name="e">Provides data for the SideRow changing and deleting events.</param>
			protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowChanging(e);
				if ((this.SideRowChanging != null))
				{
					this.SideRowChanging(this, new SideRowChangeEventArgs(((SideRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the SideRowDeleted event.
			/// </summary>
			/// <param name="e">Provides data for the SideRow changing and deleting events.</param>
			protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowDeleted(e);
				if ((this.SideRowDeleted != null))
				{
					this.SideRowDeleted(this, new SideRowChangeEventArgs(((SideRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the SideRowDeleting event.
			/// </summary>
			/// <param name="e">Provides data for the SideRow changing and deleting events.</param>
			protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowDeleting(e);
				if ((this.SideRowDeleting != null))
				{
					this.SideRowDeleting(this, new SideRowChangeEventArgs(((SideRow)(e.Row)), e.Action));
				}
			}
		}
		
		/// <summary>
		/// The SingleAccount table.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public partial class SingleAccountDataTable : global::System.Data.TypedTableBase<DataModel.SingleAccountRow>
		{
			
			private global::System.Data.DataColumn columnAddress0;
			
			private global::System.Data.DataColumn columnAddress1;
			
			private global::System.Data.DataColumn columnCity;
			
			private global::System.Data.DataColumn columnCountryId;
			
			private global::System.Data.DataColumn columnLotHandlingCode;
			
			private global::System.Data.DataColumn columnPostalCode;
			
			private global::System.Data.DataColumn columnProvinceId;
			
			private global::System.Data.DataColumn columnRowVersion;
			
			private global::System.Data.DataColumn columnSingleAccountId;
			
			private global::Teraque.DataIndexCollection dataIndices;
			
			private global::Teraque.DataIndex indexSingleAccountKey;
			
			private global::System.Data.DataRelation relationAccountSingleAccount;
			
			private global::System.Data.DataRelation relationCountrySingleAccount;
			
			private global::System.Data.DataRelation relationLotHandlingSingleAccount;
			
			private global::System.Data.DataRelation relationProvinceSingleAccount;
			
			/// <summary>
			/// Creates the SingleAccount table.
			/// </summary>
			internal SingleAccountDataTable()
			{
				// Initialize the object.
				this.TableName = "SingleAccount";
				this.dataIndices = new global::Teraque.DataIndexCollection();
				// The Address0 Column
				this.columnAddress0 = new global::System.Data.DataColumn("Address0", typeof(string), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnAddress0);
				// The Address1 Column
				this.columnAddress1 = new global::System.Data.DataColumn("Address1", typeof(string), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnAddress1);
				// The City Column
				this.columnCity = new global::System.Data.DataColumn("City", typeof(string), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnCity);
				// The CountryId Column
				this.columnCountryId = new global::System.Data.DataColumn("CountryId", typeof(System.Guid), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnCountryId);
				// The LotHandlingCode Column
				this.columnLotHandlingCode = new global::System.Data.DataColumn("LotHandlingCode", typeof(Teraque.LotHandlingCode), null, global::System.Data.MappingType.Element);
				this.columnLotHandlingCode.AllowDBNull = false;
				this.Columns.Add(this.columnLotHandlingCode);
				// The PostalCode Column
				this.columnPostalCode = new global::System.Data.DataColumn("PostalCode", typeof(string), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnPostalCode);
				// The ProvinceId Column
				this.columnProvinceId = new global::System.Data.DataColumn("ProvinceId", typeof(System.Guid), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnProvinceId);
				// The RowVersion Column
				this.columnRowVersion = new global::System.Data.DataColumn("RowVersion", typeof(long), null, global::System.Data.MappingType.Element);
				this.columnRowVersion.AllowDBNull = false;
				this.Columns.Add(this.columnRowVersion);
				// The SingleAccountId Column
				this.columnSingleAccountId = new global::System.Data.DataColumn("SingleAccountId", typeof(System.Guid), null, global::System.Data.MappingType.Element);
				this.columnSingleAccountId.AllowDBNull = false;
				this.Columns.Add(this.columnSingleAccountId);
				// The SingleAccountKey Index
				this.indexSingleAccountKey = new SingleAccountKeyIndex("SingleAccountKey", new global::System.Data.DataColumn[] {
							this.columnSingleAccountId});
				this.Indices.Add(this.indexSingleAccountKey);
			}
			
			/// <summary>
			/// Gets the parent relation between the Account and SingleAccount tables.
			/// </summary>
			public global::System.Data.DataRelation AccountSingleAccountRelation
			{
				get
				{
					return this.relationAccountSingleAccount;
				}
			}
			
			/// <summary>
			/// Gets the Address0 column of the SingleAccount table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn Address0Column
			{
				get
				{
					return this.columnAddress0;
				}
			}
			
			/// <summary>
			/// Gets the Address1 column of the SingleAccount table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn Address1Column
			{
				get
				{
					return this.columnAddress1;
				}
			}
			
			/// <summary>
			/// Gets the City column of the SingleAccount table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn CityColumn
			{
				get
				{
					return this.columnCity;
				}
			}
			
			/// <summary>
			/// Gets the number of rows in the SingleAccount table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public int Count
			{
				get
				{
					return this.Rows.Count;
				}
			}
			
			/// <summary>
			/// Gets the CountryId column of the SingleAccount table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn CountryIdColumn
			{
				get
				{
					return this.columnCountryId;
				}
			}
			
			/// <summary>
			/// Gets the parent relation between the Country and SingleAccount tables.
			/// </summary>
			public global::System.Data.DataRelation CountrySingleAccountRelation
			{
				get
				{
					return this.relationCountrySingleAccount;
				}
			}
			
			/// <summary>
			/// Gets a collection of Teraque.DataModelGenerator.DataIndices on a table.
			/// </summary>
			public global::Teraque.DataIndexCollection Indices
			{
				get
				{
					return this.dataIndices;
				}
			}
			
			/// <summary>
			/// Indexer to a row in the SingleAccount table.
			/// </summary>
			/// <param name="index">The integer index of the row.</param>
			/// <returns>The SingleAccount row found at the given index.</returns>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public DataModel.SingleAccountRow this[int index]
			{
				get
				{
					return ((DataModel.SingleAccountRow)(this.Rows[index]));
				}
			}
			
			/// <summary>
			/// Gets the LotHandlingCode column of the SingleAccount table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn LotHandlingCodeColumn
			{
				get
				{
					return this.columnLotHandlingCode;
				}
			}
			
			/// <summary>
			/// Gets the parent relation between the LotHandling and SingleAccount tables.
			/// </summary>
			public global::System.Data.DataRelation LotHandlingSingleAccountRelation
			{
				get
				{
					return this.relationLotHandlingSingleAccount;
				}
			}
			
			/// <summary>
			/// Gets the PostalCode column of the SingleAccount table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn PostalCodeColumn
			{
				get
				{
					return this.columnPostalCode;
				}
			}
			
			/// <summary>
			/// Gets the ProvinceId column of the SingleAccount table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn ProvinceIdColumn
			{
				get
				{
					return this.columnProvinceId;
				}
			}
			
			/// <summary>
			/// Gets the parent relation between the Province and SingleAccount tables.
			/// </summary>
			public global::System.Data.DataRelation ProvinceSingleAccountRelation
			{
				get
				{
					return this.relationProvinceSingleAccount;
				}
			}
			
			/// <summary>
			/// Gets the RowVersion column of the SingleAccount table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn RowVersionColumn
			{
				get
				{
					return this.columnRowVersion;
				}
			}
			
			/// <summary>
			/// Gets the SingleAccountId column of the SingleAccount table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn SingleAccountIdColumn
			{
				get
				{
					return this.columnSingleAccountId;
				}
			}
			
			/// <summary>
			/// Gets the SingleAccountKey index on the SingleAccount table.
			/// </summary>
			public SingleAccountKeyIndex SingleAccountKey
			{
				get
				{
					return ((SingleAccountKeyIndex)(this.indexSingleAccountKey));
				}
			}
			
			/// <summary>
			/// Occurs after a SingleAccount row has been changed successfully.
			/// </summary>
			public event SingleAccountRowChangeEventHandler SingleAccountRowChanged;
			
			/// <summary>
			/// Occurs when a SingleAccount row is changing.
			/// </summary>
			public event SingleAccountRowChangeEventHandler SingleAccountRowChanging;
			
			/// <summary>
			/// Occurs after a SingleAccount row in the table has been deleted.
			/// </summary>
			public event SingleAccountRowChangeEventHandler SingleAccountRowDeleted;
			
			/// <summary>
			/// Occurs before a SingleAccount row in the table is about to be deleted.
			/// </summary>
			public event SingleAccountRowChangeEventHandler SingleAccountRowDeleting;
			
			/// <summary>
			/// Returns the type of the row in a SingleAccount table.
			/// </summary>
			/// <returns>The SingleAccountRow type.</returns>
			protected override global::System.Type GetRowType()
			{
				return typeof(SingleAccountRow);
			}
			
			/// <summary>
			/// Initializes the relation fields with the parent and child relations.
			/// </summary>
			internal void InitializeRelations()
			{
				this.relationAccountSingleAccount = this.ParentRelations["FK_Account_SingleAccount"];
				this.relationCountrySingleAccount = this.ParentRelations["FK_Country_SingleAccount"];
				this.relationLotHandlingSingleAccount = this.ParentRelations["FK_LotHandling_SingleAccount"];
				this.relationProvinceSingleAccount = this.ParentRelations["FK_Province_SingleAccount"];
			}
			
			/// <summary>
			/// Initializes a new instance of a SingleAccount row.  Constructs a row from the builder.  Only for internal usage.
			/// </summary>
			/// <returns>A new row with the same schema as the table.</returns>
			protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder dataRowBuilder)
			{
				return new SingleAccountRow(dataRowBuilder);
			}
			
			/// <summary>
			/// Raises the SingleAccountRowChanged event.
			/// </summary>
			/// <param name="e">Provides data for the SingleAccountRow changing and deleting events.</param>
			protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowChanged(e);
				if ((this.SingleAccountRowChanged != null))
				{
					this.SingleAccountRowChanged(this, new SingleAccountRowChangeEventArgs(((SingleAccountRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the SingleAccountRowChanging event.
			/// </summary>
			/// <param name="e">Provides data for the SingleAccountRow changing and deleting events.</param>
			protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowChanging(e);
				if ((this.SingleAccountRowChanging != null))
				{
					this.SingleAccountRowChanging(this, new SingleAccountRowChangeEventArgs(((SingleAccountRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the SingleAccountRowDeleted event.
			/// </summary>
			/// <param name="e">Provides data for the SingleAccountRow changing and deleting events.</param>
			protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowDeleted(e);
				if ((this.SingleAccountRowDeleted != null))
				{
					this.SingleAccountRowDeleted(this, new SingleAccountRowChangeEventArgs(((SingleAccountRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the SingleAccountRowDeleting event.
			/// </summary>
			/// <param name="e">Provides data for the SingleAccountRow changing and deleting events.</param>
			protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowDeleting(e);
				if ((this.SingleAccountRowDeleting != null))
				{
					this.SingleAccountRowDeleting(this, new SingleAccountRowChangeEventArgs(((SingleAccountRow)(e.Row)), e.Action));
				}
			}
		}
		
		/// <summary>
		/// The Source table.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public partial class SourceDataTable : global::System.Data.TypedTableBase<DataModel.SourceRow>
		{
			
			private global::System.Data.DataColumn columnAdvertisementSchemaId;
			
			private global::System.Data.DataColumn columnBuyMarketValueThreshold;
			
			private global::System.Data.DataColumn columnBuyQuantityThreshold;
			
			private global::System.Data.DataColumn columnPartyTypeCode;
			
			private global::System.Data.DataColumn columnRowVersion;
			
			private global::System.Data.DataColumn columnSellMarketValueThreshold;
			
			private global::System.Data.DataColumn columnSellQuantityThreshold;
			
			private global::System.Data.DataColumn columnShortName;
			
			private global::System.Data.DataColumn columnSourceId;
			
			private global::Teraque.DataIndexCollection dataIndices;
			
			private global::Teraque.DataIndex indexSourceKey;
			
			private global::System.Data.DataRelation relationBlotterSource;
			
			private global::System.Data.DataRelation relationSourceBroker;
			
			private global::System.Data.DataRelation relationSourceInstitution;
			
			/// <summary>
			/// Creates the Source table.
			/// </summary>
			internal SourceDataTable()
			{
				// Initialize the object.
				this.TableName = "Source";
				this.dataIndices = new global::Teraque.DataIndexCollection();
				// The AdvertisementSchemaId Column
				this.columnAdvertisementSchemaId = new global::System.Data.DataColumn("AdvertisementSchemaId", typeof(System.Guid), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnAdvertisementSchemaId);
				// The BuyMarketValueThreshold Column
				this.columnBuyMarketValueThreshold = new global::System.Data.DataColumn("BuyMarketValueThreshold", typeof(decimal), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnBuyMarketValueThreshold);
				// The BuyQuantityThreshold Column
				this.columnBuyQuantityThreshold = new global::System.Data.DataColumn("BuyQuantityThreshold", typeof(decimal), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnBuyQuantityThreshold);
				// The PartyTypeCode Column
				this.columnPartyTypeCode = new global::System.Data.DataColumn("PartyTypeCode", typeof(Teraque.PartyTypeCode), null, global::System.Data.MappingType.Element);
				this.columnPartyTypeCode.AllowDBNull = false;
				this.Columns.Add(this.columnPartyTypeCode);
				// The RowVersion Column
				this.columnRowVersion = new global::System.Data.DataColumn("RowVersion", typeof(long), null, global::System.Data.MappingType.Element);
				this.columnRowVersion.AllowDBNull = false;
				this.Columns.Add(this.columnRowVersion);
				// The SellMarketValueThreshold Column
				this.columnSellMarketValueThreshold = new global::System.Data.DataColumn("SellMarketValueThreshold", typeof(decimal), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnSellMarketValueThreshold);
				// The SellQuantityThreshold Column
				this.columnSellQuantityThreshold = new global::System.Data.DataColumn("SellQuantityThreshold", typeof(decimal), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnSellQuantityThreshold);
				// The ShortName Column
				this.columnShortName = new global::System.Data.DataColumn("ShortName", typeof(string), null, global::System.Data.MappingType.Element);
				this.columnShortName.AllowDBNull = false;
				this.columnShortName.DefaultValue = "";
				this.Columns.Add(this.columnShortName);
				// The SourceId Column
				this.columnSourceId = new global::System.Data.DataColumn("SourceId", typeof(System.Guid), null, global::System.Data.MappingType.Element);
				this.columnSourceId.AllowDBNull = false;
				this.Columns.Add(this.columnSourceId);
				// The SourceKey Index
				this.indexSourceKey = new SourceKeyIndex("SourceKey", new global::System.Data.DataColumn[] {
							this.columnSourceId});
				this.Indices.Add(this.indexSourceKey);
			}
			
			/// <summary>
			/// Gets the AdvertisementSchemaId column of the Source table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn AdvertisementSchemaIdColumn
			{
				get
				{
					return this.columnAdvertisementSchemaId;
				}
			}
			
			/// <summary>
			/// Gets the parent relation between the Blotter and Source tables.
			/// </summary>
			public global::System.Data.DataRelation BlotterSourceRelation
			{
				get
				{
					return this.relationBlotterSource;
				}
			}
			
			/// <summary>
			/// Gets the BuyMarketValueThreshold column of the Source table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn BuyMarketValueThresholdColumn
			{
				get
				{
					return this.columnBuyMarketValueThreshold;
				}
			}
			
			/// <summary>
			/// Gets the BuyQuantityThreshold column of the Source table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn BuyQuantityThresholdColumn
			{
				get
				{
					return this.columnBuyQuantityThreshold;
				}
			}
			
			/// <summary>
			/// Gets the number of rows in the Source table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public int Count
			{
				get
				{
					return this.Rows.Count;
				}
			}
			
			/// <summary>
			/// Gets a collection of Teraque.DataModelGenerator.DataIndices on a table.
			/// </summary>
			public global::Teraque.DataIndexCollection Indices
			{
				get
				{
					return this.dataIndices;
				}
			}
			
			/// <summary>
			/// Indexer to a row in the Source table.
			/// </summary>
			/// <param name="index">The integer index of the row.</param>
			/// <returns>The Source row found at the given index.</returns>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public DataModel.SourceRow this[int index]
			{
				get
				{
					return ((DataModel.SourceRow)(this.Rows[index]));
				}
			}
			
			/// <summary>
			/// Gets the PartyTypeCode column of the Source table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn PartyTypeCodeColumn
			{
				get
				{
					return this.columnPartyTypeCode;
				}
			}
			
			/// <summary>
			/// Gets the RowVersion column of the Source table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn RowVersionColumn
			{
				get
				{
					return this.columnRowVersion;
				}
			}
			
			/// <summary>
			/// Gets the SellMarketValueThreshold column of the Source table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn SellMarketValueThresholdColumn
			{
				get
				{
					return this.columnSellMarketValueThreshold;
				}
			}
			
			/// <summary>
			/// Gets the SellQuantityThreshold column of the Source table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn SellQuantityThresholdColumn
			{
				get
				{
					return this.columnSellQuantityThreshold;
				}
			}
			
			/// <summary>
			/// Gets the ShortName column of the Source table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn ShortNameColumn
			{
				get
				{
					return this.columnShortName;
				}
			}
			
			/// <summary>
			/// Gets the child relation between the Source and Broker tables.
			/// </summary>
			internal global::System.Data.DataRelation SourceBrokerRelation
			{
				get
				{
					return this.relationSourceBroker;
				}
			}
			
			/// <summary>
			/// Gets the SourceId column of the Source table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn SourceIdColumn
			{
				get
				{
					return this.columnSourceId;
				}
			}
			
			/// <summary>
			/// Gets the child relation between the Source and Institution tables.
			/// </summary>
			internal global::System.Data.DataRelation SourceInstitutionRelation
			{
				get
				{
					return this.relationSourceInstitution;
				}
			}
			
			/// <summary>
			/// Gets the SourceKey index on the Source table.
			/// </summary>
			public SourceKeyIndex SourceKey
			{
				get
				{
					return ((SourceKeyIndex)(this.indexSourceKey));
				}
			}
			
			/// <summary>
			/// Occurs after a Source row has been changed successfully.
			/// </summary>
			public event SourceRowChangeEventHandler SourceRowChanged;
			
			/// <summary>
			/// Occurs when a Source row is changing.
			/// </summary>
			public event SourceRowChangeEventHandler SourceRowChanging;
			
			/// <summary>
			/// Occurs after a Source row in the table has been deleted.
			/// </summary>
			public event SourceRowChangeEventHandler SourceRowDeleted;
			
			/// <summary>
			/// Occurs before a Source row in the table is about to be deleted.
			/// </summary>
			public event SourceRowChangeEventHandler SourceRowDeleting;
			
			/// <summary>
			/// Returns the type of the row in a Source table.
			/// </summary>
			/// <returns>The SourceRow type.</returns>
			protected override global::System.Type GetRowType()
			{
				return typeof(SourceRow);
			}
			
			/// <summary>
			/// Initializes the relation fields with the parent and child relations.
			/// </summary>
			internal void InitializeRelations()
			{
				this.relationBlotterSource = this.ParentRelations["FK_Blotter_Source"];
				this.relationSourceBroker = this.ChildRelations["FK_Source_Broker"];
				this.relationSourceInstitution = this.ChildRelations["FK_Source_Institution"];
			}
			
			/// <summary>
			/// Initializes a new instance of a Source row.  Constructs a row from the builder.  Only for internal usage.
			/// </summary>
			/// <returns>A new row with the same schema as the table.</returns>
			protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder dataRowBuilder)
			{
				return new SourceRow(dataRowBuilder);
			}
			
			/// <summary>
			/// Raises the SourceRowChanged event.
			/// </summary>
			/// <param name="e">Provides data for the SourceRow changing and deleting events.</param>
			protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowChanged(e);
				if ((this.SourceRowChanged != null))
				{
					this.SourceRowChanged(this, new SourceRowChangeEventArgs(((SourceRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the SourceRowChanging event.
			/// </summary>
			/// <param name="e">Provides data for the SourceRow changing and deleting events.</param>
			protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowChanging(e);
				if ((this.SourceRowChanging != null))
				{
					this.SourceRowChanging(this, new SourceRowChangeEventArgs(((SourceRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the SourceRowDeleted event.
			/// </summary>
			/// <param name="e">Provides data for the SourceRow changing and deleting events.</param>
			protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowDeleted(e);
				if ((this.SourceRowDeleted != null))
				{
					this.SourceRowDeleted(this, new SourceRowChangeEventArgs(((SourceRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the SourceRowDeleting event.
			/// </summary>
			/// <param name="e">Provides data for the SourceRow changing and deleting events.</param>
			protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowDeleting(e);
				if ((this.SourceRowDeleting != null))
				{
					this.SourceRowDeleting(this, new SourceRowChangeEventArgs(((SourceRow)(e.Row)), e.Action));
				}
			}
		}
		
		/// <summary>
		/// The SourceOrder table.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public partial class SourceOrderDataTable : global::System.Data.TypedTableBase<DataModel.SourceOrderRow>
		{
			
			private global::System.Data.DataColumn columnCreatedTime;
			
			private global::System.Data.DataColumn columnCreatedUserId;
			
			private global::System.Data.DataColumn columnDestinationId;
			
			private global::System.Data.DataColumn columnExternalId0;
			
			private global::System.Data.DataColumn columnIsAdvertised;
			
			private global::System.Data.DataColumn columnIsAutoExecute;
			
			private global::System.Data.DataColumn columnIsCanceled;
			
			private global::System.Data.DataColumn columnIsHeld;
			
			private global::System.Data.DataColumn columnIsSteppedIn;
			
			private global::System.Data.DataColumn columnIsSubmitted;
			
			private global::System.Data.DataColumn columnLimitPrice;
			
			private global::System.Data.DataColumn columnMaximumVolatility;
			
			private global::System.Data.DataColumn columnModifiedTime;
			
			private global::System.Data.DataColumn columnModifiedUserId;
			
			private global::System.Data.DataColumn columnNewsFreeTime;
			
			private global::System.Data.DataColumn columnOrderedQuantity;
			
			private global::System.Data.DataColumn columnOrderTypeCode;
			
			private global::System.Data.DataColumn columnReceivedTime;
			
			private global::System.Data.DataColumn columnRowVersion;
			
			private global::System.Data.DataColumn columnSecurityId;
			
			private global::System.Data.DataColumn columnSettlementDate;
			
			private global::System.Data.DataColumn columnSettlementId;
			
			private global::System.Data.DataColumn columnSideCode;
			
			private global::System.Data.DataColumn columnSourceOrderId;
			
			private global::System.Data.DataColumn columnStartTime;
			
			private global::System.Data.DataColumn columnStatusCode;
			
			private global::System.Data.DataColumn columnStopPrice;
			
			private global::System.Data.DataColumn columnStopTime;
			
			private global::System.Data.DataColumn columnSubmittedQuantity;
			
			private global::System.Data.DataColumn columnSubmittedTime;
			
			private global::System.Data.DataColumn columnTargetPrice;
			
			private global::System.Data.DataColumn columnTimeInForceCode;
			
			private global::System.Data.DataColumn columnTradeDate;
			
			private global::System.Data.DataColumn columnWorkingOrderId;
			
			private global::Teraque.DataIndexCollection dataIndices;
			
			private global::Teraque.DataIndex indexSourceOrderKey;
			
			private global::Teraque.DataIndex indexSourceOrderKeyExternalId0;
			
			private global::System.Data.DataRelation relationDestinationSourceOrder;
			
			private global::System.Data.DataRelation relationOrderTypeSourceOrder;
			
			private global::System.Data.DataRelation relationSecuritySourceOrderByFK_Security_SourceOrder_SecurityId;
			
			private global::System.Data.DataRelation relationSecuritySourceOrderByFK_Security_SourceOrder_SettlementId;
			
			private global::System.Data.DataRelation relationSideSourceOrder;
			
			private global::System.Data.DataRelation relationStatusSourceOrder;
			
			private global::System.Data.DataRelation relationTimeInForceSourceOrder;
			
			private global::System.Data.DataRelation relationUserSourceOrderByFK_User_SourceOrder_CreatedUserId;
			
			private global::System.Data.DataRelation relationUserSourceOrderByFK_User_SourceOrder_ModifiedUserId;
			
			private global::System.Data.DataRelation relationWorkingOrderSourceOrder;
			
			/// <summary>
			/// Creates the SourceOrder table.
			/// </summary>
			internal SourceOrderDataTable()
			{
				// Initialize the object.
				this.TableName = "SourceOrder";
				this.dataIndices = new global::Teraque.DataIndexCollection();
				// The CreatedTime Column
				this.columnCreatedTime = new global::System.Data.DataColumn("CreatedTime", typeof(System.DateTime), null, global::System.Data.MappingType.Element);
				this.columnCreatedTime.AllowDBNull = false;
				this.Columns.Add(this.columnCreatedTime);
				// The CreatedUserId Column
				this.columnCreatedUserId = new global::System.Data.DataColumn("CreatedUserId", typeof(System.Guid), null, global::System.Data.MappingType.Element);
				this.columnCreatedUserId.AllowDBNull = false;
				this.Columns.Add(this.columnCreatedUserId);
				// The DestinationId Column
				this.columnDestinationId = new global::System.Data.DataColumn("DestinationId", typeof(System.Guid), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnDestinationId);
				// The ExternalId0 Column
				this.columnExternalId0 = new global::System.Data.DataColumn("ExternalId0", typeof(string), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnExternalId0);
				// The IsAdvertised Column
				this.columnIsAdvertised = new global::System.Data.DataColumn("IsAdvertised", typeof(bool), null, global::System.Data.MappingType.Element);
				this.columnIsAdvertised.AllowDBNull = false;
				this.columnIsAdvertised.DefaultValue = false;
				this.Columns.Add(this.columnIsAdvertised);
				// The IsAutoExecute Column
				this.columnIsAutoExecute = new global::System.Data.DataColumn("IsAutoExecute", typeof(bool), null, global::System.Data.MappingType.Element);
				this.columnIsAutoExecute.AllowDBNull = false;
				this.columnIsAutoExecute.DefaultValue = false;
				this.Columns.Add(this.columnIsAutoExecute);
				// The IsCanceled Column
				this.columnIsCanceled = new global::System.Data.DataColumn("IsCanceled", typeof(bool), null, global::System.Data.MappingType.Element);
				this.columnIsCanceled.AllowDBNull = false;
				this.columnIsCanceled.DefaultValue = false;
				this.Columns.Add(this.columnIsCanceled);
				// The IsHeld Column
				this.columnIsHeld = new global::System.Data.DataColumn("IsHeld", typeof(bool), null, global::System.Data.MappingType.Element);
				this.columnIsHeld.AllowDBNull = false;
				this.columnIsHeld.DefaultValue = false;
				this.Columns.Add(this.columnIsHeld);
				// The IsSteppedIn Column
				this.columnIsSteppedIn = new global::System.Data.DataColumn("IsSteppedIn", typeof(bool), null, global::System.Data.MappingType.Element);
				this.columnIsSteppedIn.AllowDBNull = false;
				this.columnIsSteppedIn.DefaultValue = false;
				this.Columns.Add(this.columnIsSteppedIn);
				// The IsSubmitted Column
				this.columnIsSubmitted = new global::System.Data.DataColumn("IsSubmitted", typeof(bool), null, global::System.Data.MappingType.Element);
				this.columnIsSubmitted.AllowDBNull = false;
				this.columnIsSubmitted.DefaultValue = false;
				this.Columns.Add(this.columnIsSubmitted);
				// The LimitPrice Column
				this.columnLimitPrice = new global::System.Data.DataColumn("LimitPrice", typeof(decimal), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnLimitPrice);
				// The MaximumVolatility Column
				this.columnMaximumVolatility = new global::System.Data.DataColumn("MaximumVolatility", typeof(decimal), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnMaximumVolatility);
				// The ModifiedTime Column
				this.columnModifiedTime = new global::System.Data.DataColumn("ModifiedTime", typeof(System.DateTime), null, global::System.Data.MappingType.Element);
				this.columnModifiedTime.AllowDBNull = false;
				this.Columns.Add(this.columnModifiedTime);
				// The ModifiedUserId Column
				this.columnModifiedUserId = new global::System.Data.DataColumn("ModifiedUserId", typeof(System.Guid), null, global::System.Data.MappingType.Element);
				this.columnModifiedUserId.AllowDBNull = false;
				this.Columns.Add(this.columnModifiedUserId);
				// The NewsFreeTime Column
				this.columnNewsFreeTime = new global::System.Data.DataColumn("NewsFreeTime", typeof(int), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnNewsFreeTime);
				// The OrderedQuantity Column
				this.columnOrderedQuantity = new global::System.Data.DataColumn("OrderedQuantity", typeof(decimal), null, global::System.Data.MappingType.Element);
				this.columnOrderedQuantity.AllowDBNull = false;
				this.columnOrderedQuantity.DefaultValue = 0.0m;
				this.Columns.Add(this.columnOrderedQuantity);
				// The OrderTypeCode Column
				this.columnOrderTypeCode = new global::System.Data.DataColumn("OrderTypeCode", typeof(Teraque.OrderTypeCode), null, global::System.Data.MappingType.Element);
				this.columnOrderTypeCode.AllowDBNull = false;
				this.Columns.Add(this.columnOrderTypeCode);
				// The ReceivedTime Column
				this.columnReceivedTime = new global::System.Data.DataColumn("ReceivedTime", typeof(string), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnReceivedTime);
				// The RowVersion Column
				this.columnRowVersion = new global::System.Data.DataColumn("RowVersion", typeof(long), null, global::System.Data.MappingType.Element);
				this.columnRowVersion.AllowDBNull = false;
				this.Columns.Add(this.columnRowVersion);
				// The SecurityId Column
				this.columnSecurityId = new global::System.Data.DataColumn("SecurityId", typeof(System.Guid), null, global::System.Data.MappingType.Element);
				this.columnSecurityId.AllowDBNull = false;
				this.Columns.Add(this.columnSecurityId);
				// The SettlementDate Column
				this.columnSettlementDate = new global::System.Data.DataColumn("SettlementDate", typeof(System.DateTime), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnSettlementDate);
				// The SettlementId Column
				this.columnSettlementId = new global::System.Data.DataColumn("SettlementId", typeof(System.Guid), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnSettlementId);
				// The SideCode Column
				this.columnSideCode = new global::System.Data.DataColumn("SideCode", typeof(Teraque.SideCode), null, global::System.Data.MappingType.Element);
				this.columnSideCode.AllowDBNull = false;
				this.Columns.Add(this.columnSideCode);
				// The SourceOrderId Column
				this.columnSourceOrderId = new global::System.Data.DataColumn("SourceOrderId", typeof(System.Guid), null, global::System.Data.MappingType.Element);
				this.columnSourceOrderId.AllowDBNull = false;
				this.Columns.Add(this.columnSourceOrderId);
				// The StartTime Column
				this.columnStartTime = new global::System.Data.DataColumn("StartTime", typeof(System.DateTime), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnStartTime);
				// The StatusCode Column
				this.columnStatusCode = new global::System.Data.DataColumn("StatusCode", typeof(Teraque.StatusCode), null, global::System.Data.MappingType.Element);
				this.columnStatusCode.AllowDBNull = false;
				this.Columns.Add(this.columnStatusCode);
				// The StopPrice Column
				this.columnStopPrice = new global::System.Data.DataColumn("StopPrice", typeof(decimal), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnStopPrice);
				// The StopTime Column
				this.columnStopTime = new global::System.Data.DataColumn("StopTime", typeof(System.DateTime), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnStopTime);
				// The SubmittedQuantity Column
				this.columnSubmittedQuantity = new global::System.Data.DataColumn("SubmittedQuantity", typeof(decimal), null, global::System.Data.MappingType.Element);
				this.columnSubmittedQuantity.AllowDBNull = false;
				this.columnSubmittedQuantity.DefaultValue = 0.0m;
				this.Columns.Add(this.columnSubmittedQuantity);
				// The SubmittedTime Column
				this.columnSubmittedTime = new global::System.Data.DataColumn("SubmittedTime", typeof(string), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnSubmittedTime);
				// The TargetPrice Column
				this.columnTargetPrice = new global::System.Data.DataColumn("TargetPrice", typeof(decimal), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnTargetPrice);
				// The TimeInForceCode Column
				this.columnTimeInForceCode = new global::System.Data.DataColumn("TimeInForceCode", typeof(Teraque.TimeInForceCode), null, global::System.Data.MappingType.Element);
				this.columnTimeInForceCode.AllowDBNull = false;
				this.Columns.Add(this.columnTimeInForceCode);
				// The TradeDate Column
				this.columnTradeDate = new global::System.Data.DataColumn("TradeDate", typeof(System.DateTime), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnTradeDate);
				// The WorkingOrderId Column
				this.columnWorkingOrderId = new global::System.Data.DataColumn("WorkingOrderId", typeof(System.Guid), null, global::System.Data.MappingType.Element);
				this.columnWorkingOrderId.AllowDBNull = false;
				this.Columns.Add(this.columnWorkingOrderId);
				// The SourceOrderKey Index
				this.indexSourceOrderKey = new SourceOrderKeyIndex("SourceOrderKey", new global::System.Data.DataColumn[] {
							this.columnSourceOrderId});
				this.Indices.Add(this.indexSourceOrderKey);
				// The SourceOrderKeyExternalId0 Index
				this.indexSourceOrderKeyExternalId0 = new SourceOrderKeyExternalId0Index("SourceOrderKeyExternalId0", new global::System.Data.DataColumn[] {
							this.columnExternalId0});
				this.Indices.Add(this.indexSourceOrderKeyExternalId0);
			}
			
			/// <summary>
			/// Gets the number of rows in the SourceOrder table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public int Count
			{
				get
				{
					return this.Rows.Count;
				}
			}
			
			/// <summary>
			/// Gets the CreatedTime column of the SourceOrder table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn CreatedTimeColumn
			{
				get
				{
					return this.columnCreatedTime;
				}
			}
			
			/// <summary>
			/// Gets the CreatedUserId column of the SourceOrder table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn CreatedUserIdColumn
			{
				get
				{
					return this.columnCreatedUserId;
				}
			}
			
			/// <summary>
			/// Gets the DestinationId column of the SourceOrder table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn DestinationIdColumn
			{
				get
				{
					return this.columnDestinationId;
				}
			}
			
			/// <summary>
			/// Gets the parent relation between the Destination and SourceOrder tables.
			/// </summary>
			public global::System.Data.DataRelation DestinationSourceOrderRelation
			{
				get
				{
					return this.relationDestinationSourceOrder;
				}
			}
			
			/// <summary>
			/// Gets the ExternalId0 column of the SourceOrder table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn ExternalId0Column
			{
				get
				{
					return this.columnExternalId0;
				}
			}
			
			/// <summary>
			/// Gets a collection of Teraque.DataModelGenerator.DataIndices on a table.
			/// </summary>
			public global::Teraque.DataIndexCollection Indices
			{
				get
				{
					return this.dataIndices;
				}
			}
			
			/// <summary>
			/// Gets the IsAdvertised column of the SourceOrder table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn IsAdvertisedColumn
			{
				get
				{
					return this.columnIsAdvertised;
				}
			}
			
			/// <summary>
			/// Gets the IsAutoExecute column of the SourceOrder table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn IsAutoExecuteColumn
			{
				get
				{
					return this.columnIsAutoExecute;
				}
			}
			
			/// <summary>
			/// Gets the IsCanceled column of the SourceOrder table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn IsCanceledColumn
			{
				get
				{
					return this.columnIsCanceled;
				}
			}
			
			/// <summary>
			/// Gets the IsHeld column of the SourceOrder table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn IsHeldColumn
			{
				get
				{
					return this.columnIsHeld;
				}
			}
			
			/// <summary>
			/// Gets the IsSteppedIn column of the SourceOrder table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn IsSteppedInColumn
			{
				get
				{
					return this.columnIsSteppedIn;
				}
			}
			
			/// <summary>
			/// Gets the IsSubmitted column of the SourceOrder table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn IsSubmittedColumn
			{
				get
				{
					return this.columnIsSubmitted;
				}
			}
			
			/// <summary>
			/// Indexer to a row in the SourceOrder table.
			/// </summary>
			/// <param name="index">The integer index of the row.</param>
			/// <returns>The SourceOrder row found at the given index.</returns>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public DataModel.SourceOrderRow this[int index]
			{
				get
				{
					return ((DataModel.SourceOrderRow)(this.Rows[index]));
				}
			}
			
			/// <summary>
			/// Gets the LimitPrice column of the SourceOrder table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn LimitPriceColumn
			{
				get
				{
					return this.columnLimitPrice;
				}
			}
			
			/// <summary>
			/// Gets the MaximumVolatility column of the SourceOrder table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn MaximumVolatilityColumn
			{
				get
				{
					return this.columnMaximumVolatility;
				}
			}
			
			/// <summary>
			/// Gets the ModifiedTime column of the SourceOrder table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn ModifiedTimeColumn
			{
				get
				{
					return this.columnModifiedTime;
				}
			}
			
			/// <summary>
			/// Gets the ModifiedUserId column of the SourceOrder table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn ModifiedUserIdColumn
			{
				get
				{
					return this.columnModifiedUserId;
				}
			}
			
			/// <summary>
			/// Gets the NewsFreeTime column of the SourceOrder table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn NewsFreeTimeColumn
			{
				get
				{
					return this.columnNewsFreeTime;
				}
			}
			
			/// <summary>
			/// Gets the OrderedQuantity column of the SourceOrder table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn OrderedQuantityColumn
			{
				get
				{
					return this.columnOrderedQuantity;
				}
			}
			
			/// <summary>
			/// Gets the OrderTypeCode column of the SourceOrder table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn OrderTypeCodeColumn
			{
				get
				{
					return this.columnOrderTypeCode;
				}
			}
			
			/// <summary>
			/// Gets the parent relation between the OrderType and SourceOrder tables.
			/// </summary>
			public global::System.Data.DataRelation OrderTypeSourceOrderRelation
			{
				get
				{
					return this.relationOrderTypeSourceOrder;
				}
			}
			
			/// <summary>
			/// Gets the ReceivedTime column of the SourceOrder table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn ReceivedTimeColumn
			{
				get
				{
					return this.columnReceivedTime;
				}
			}
			
			/// <summary>
			/// Gets the RowVersion column of the SourceOrder table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn RowVersionColumn
			{
				get
				{
					return this.columnRowVersion;
				}
			}
			
			/// <summary>
			/// Gets the SecurityId column of the SourceOrder table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn SecurityIdColumn
			{
				get
				{
					return this.columnSecurityId;
				}
			}
			
			/// <summary>
			/// Gets the parent relation between the Security and SourceOrder tables.
			/// </summary>
			public global::System.Data.DataRelation SecuritySourceOrderByFK_Security_SourceOrder_SecurityIdRelation
			{
				get
				{
					return this.relationSecuritySourceOrderByFK_Security_SourceOrder_SecurityId;
				}
			}
			
			/// <summary>
			/// Gets the parent relation between the Security and SourceOrder tables.
			/// </summary>
			public global::System.Data.DataRelation SecuritySourceOrderByFK_Security_SourceOrder_SettlementIdRelation
			{
				get
				{
					return this.relationSecuritySourceOrderByFK_Security_SourceOrder_SettlementId;
				}
			}
			
			/// <summary>
			/// Gets the SettlementDate column of the SourceOrder table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn SettlementDateColumn
			{
				get
				{
					return this.columnSettlementDate;
				}
			}
			
			/// <summary>
			/// Gets the SettlementId column of the SourceOrder table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn SettlementIdColumn
			{
				get
				{
					return this.columnSettlementId;
				}
			}
			
			/// <summary>
			/// Gets the SideCode column of the SourceOrder table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn SideCodeColumn
			{
				get
				{
					return this.columnSideCode;
				}
			}
			
			/// <summary>
			/// Gets the parent relation between the Side and SourceOrder tables.
			/// </summary>
			public global::System.Data.DataRelation SideSourceOrderRelation
			{
				get
				{
					return this.relationSideSourceOrder;
				}
			}
			
			/// <summary>
			/// Gets the SourceOrderId column of the SourceOrder table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn SourceOrderIdColumn
			{
				get
				{
					return this.columnSourceOrderId;
				}
			}
			
			/// <summary>
			/// Gets the SourceOrderKey index on the SourceOrder table.
			/// </summary>
			public SourceOrderKeyIndex SourceOrderKey
			{
				get
				{
					return ((SourceOrderKeyIndex)(this.indexSourceOrderKey));
				}
			}
			
			/// <summary>
			/// Gets the SourceOrderKeyExternalId0 index on the SourceOrder table.
			/// </summary>
			public SourceOrderKeyExternalId0Index SourceOrderKeyExternalId0
			{
				get
				{
					return ((SourceOrderKeyExternalId0Index)(this.indexSourceOrderKeyExternalId0));
				}
			}
			
			/// <summary>
			/// Gets the StartTime column of the SourceOrder table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn StartTimeColumn
			{
				get
				{
					return this.columnStartTime;
				}
			}
			
			/// <summary>
			/// Gets the StatusCode column of the SourceOrder table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn StatusCodeColumn
			{
				get
				{
					return this.columnStatusCode;
				}
			}
			
			/// <summary>
			/// Gets the parent relation between the Status and SourceOrder tables.
			/// </summary>
			public global::System.Data.DataRelation StatusSourceOrderRelation
			{
				get
				{
					return this.relationStatusSourceOrder;
				}
			}
			
			/// <summary>
			/// Gets the StopPrice column of the SourceOrder table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn StopPriceColumn
			{
				get
				{
					return this.columnStopPrice;
				}
			}
			
			/// <summary>
			/// Gets the StopTime column of the SourceOrder table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn StopTimeColumn
			{
				get
				{
					return this.columnStopTime;
				}
			}
			
			/// <summary>
			/// Gets the SubmittedQuantity column of the SourceOrder table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn SubmittedQuantityColumn
			{
				get
				{
					return this.columnSubmittedQuantity;
				}
			}
			
			/// <summary>
			/// Gets the SubmittedTime column of the SourceOrder table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn SubmittedTimeColumn
			{
				get
				{
					return this.columnSubmittedTime;
				}
			}
			
			/// <summary>
			/// Gets the TargetPrice column of the SourceOrder table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn TargetPriceColumn
			{
				get
				{
					return this.columnTargetPrice;
				}
			}
			
			/// <summary>
			/// Gets the TimeInForceCode column of the SourceOrder table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn TimeInForceCodeColumn
			{
				get
				{
					return this.columnTimeInForceCode;
				}
			}
			
			/// <summary>
			/// Gets the parent relation between the TimeInForce and SourceOrder tables.
			/// </summary>
			public global::System.Data.DataRelation TimeInForceSourceOrderRelation
			{
				get
				{
					return this.relationTimeInForceSourceOrder;
				}
			}
			
			/// <summary>
			/// Gets the TradeDate column of the SourceOrder table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn TradeDateColumn
			{
				get
				{
					return this.columnTradeDate;
				}
			}
			
			/// <summary>
			/// Gets the parent relation between the User and SourceOrder tables.
			/// </summary>
			public global::System.Data.DataRelation UserSourceOrderByFK_User_SourceOrder_CreatedUserIdRelation
			{
				get
				{
					return this.relationUserSourceOrderByFK_User_SourceOrder_CreatedUserId;
				}
			}
			
			/// <summary>
			/// Gets the parent relation between the User and SourceOrder tables.
			/// </summary>
			public global::System.Data.DataRelation UserSourceOrderByFK_User_SourceOrder_ModifiedUserIdRelation
			{
				get
				{
					return this.relationUserSourceOrderByFK_User_SourceOrder_ModifiedUserId;
				}
			}
			
			/// <summary>
			/// Gets the WorkingOrderId column of the SourceOrder table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn WorkingOrderIdColumn
			{
				get
				{
					return this.columnWorkingOrderId;
				}
			}
			
			/// <summary>
			/// Gets the parent relation between the WorkingOrder and SourceOrder tables.
			/// </summary>
			public global::System.Data.DataRelation WorkingOrderSourceOrderRelation
			{
				get
				{
					return this.relationWorkingOrderSourceOrder;
				}
			}
			
			/// <summary>
			/// Occurs after a SourceOrder row has been changed successfully.
			/// </summary>
			public event SourceOrderRowChangeEventHandler SourceOrderRowChanged;
			
			/// <summary>
			/// Occurs when a SourceOrder row is changing.
			/// </summary>
			public event SourceOrderRowChangeEventHandler SourceOrderRowChanging;
			
			/// <summary>
			/// Occurs after a SourceOrder row in the table has been deleted.
			/// </summary>
			public event SourceOrderRowChangeEventHandler SourceOrderRowDeleted;
			
			/// <summary>
			/// Occurs before a SourceOrder row in the table is about to be deleted.
			/// </summary>
			public event SourceOrderRowChangeEventHandler SourceOrderRowDeleting;
			
			/// <summary>
			/// Returns the type of the row in a SourceOrder table.
			/// </summary>
			/// <returns>The SourceOrderRow type.</returns>
			protected override global::System.Type GetRowType()
			{
				return typeof(SourceOrderRow);
			}
			
			/// <summary>
			/// Initializes the relation fields with the parent and child relations.
			/// </summary>
			internal void InitializeRelations()
			{
				this.relationDestinationSourceOrder = this.ParentRelations["FK_Destination_SourceOrder"];
				this.relationOrderTypeSourceOrder = this.ParentRelations["FK_OrderType_SourceOrder"];
				this.relationSecuritySourceOrderByFK_Security_SourceOrder_SecurityId = this.ParentRelations["FK_Security_SourceOrder_SecurityId"];
				this.relationSecuritySourceOrderByFK_Security_SourceOrder_SettlementId = this.ParentRelations["FK_Security_SourceOrder_SettlementId"];
				this.relationSideSourceOrder = this.ParentRelations["FK_Side_SourceOrder"];
				this.relationStatusSourceOrder = this.ParentRelations["FK_Status_SourceOrder"];
				this.relationTimeInForceSourceOrder = this.ParentRelations["FK_TimeInForce_SourceOrder"];
				this.relationUserSourceOrderByFK_User_SourceOrder_CreatedUserId = this.ParentRelations["FK_User_SourceOrder_CreatedUserId"];
				this.relationUserSourceOrderByFK_User_SourceOrder_ModifiedUserId = this.ParentRelations["FK_User_SourceOrder_ModifiedUserId"];
				this.relationWorkingOrderSourceOrder = this.ParentRelations["FK_WorkingOrder_SourceOrder"];
			}
			
			/// <summary>
			/// Initializes a new instance of a SourceOrder row.  Constructs a row from the builder.  Only for internal usage.
			/// </summary>
			/// <returns>A new row with the same schema as the table.</returns>
			protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder dataRowBuilder)
			{
				return new SourceOrderRow(dataRowBuilder);
			}
			
			/// <summary>
			/// Raises the SourceOrderRowChanged event.
			/// </summary>
			/// <param name="e">Provides data for the SourceOrderRow changing and deleting events.</param>
			protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowChanged(e);
				if ((this.SourceOrderRowChanged != null))
				{
					this.SourceOrderRowChanged(this, new SourceOrderRowChangeEventArgs(((SourceOrderRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the SourceOrderRowChanging event.
			/// </summary>
			/// <param name="e">Provides data for the SourceOrderRow changing and deleting events.</param>
			protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowChanging(e);
				if ((this.SourceOrderRowChanging != null))
				{
					this.SourceOrderRowChanging(this, new SourceOrderRowChangeEventArgs(((SourceOrderRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the SourceOrderRowDeleted event.
			/// </summary>
			/// <param name="e">Provides data for the SourceOrderRow changing and deleting events.</param>
			protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowDeleted(e);
				if ((this.SourceOrderRowDeleted != null))
				{
					this.SourceOrderRowDeleted(this, new SourceOrderRowChangeEventArgs(((SourceOrderRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the SourceOrderRowDeleting event.
			/// </summary>
			/// <param name="e">Provides data for the SourceOrderRow changing and deleting events.</param>
			protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowDeleting(e);
				if ((this.SourceOrderRowDeleting != null))
				{
					this.SourceOrderRowDeleting(this, new SourceOrderRowChangeEventArgs(((SourceOrderRow)(e.Row)), e.Action));
				}
			}
		}
		
		/// <summary>
		/// The State table.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public partial class StateDataTable : global::System.Data.TypedTableBase<DataModel.StateRow>
		{
			
			private global::System.Data.DataColumn columnDescription;
			
			private global::System.Data.DataColumn columnExternalId0;
			
			private global::System.Data.DataColumn columnExternalId1;
			
			private global::System.Data.DataColumn columnExternalId2;
			
			private global::System.Data.DataColumn columnExternalId3;
			
			private global::System.Data.DataColumn columnMnemonic;
			
			private global::System.Data.DataColumn columnRowVersion;
			
			private global::System.Data.DataColumn columnStateCode;
			
			private global::Teraque.DataIndexCollection dataIndices;
			
			private global::Teraque.DataIndex indexStateKey;
			
			private global::Teraque.DataIndex indexStateKeyExternalId0;
			
			private global::Teraque.DataIndex indexStateKeyExternalId1;
			
			private global::Teraque.DataIndex indexStateKeyExternalId2;
			
			private global::Teraque.DataIndex indexStateKeyExternalId3;
			
			private global::System.Data.DataRelation relationStateDestinationOrder;
			
			private global::System.Data.DataRelation relationStateExecutionByFK_State_Execution_DestinationStateCode;
			
			private global::System.Data.DataRelation relationStateExecutionByFK_State_Execution_SourceStateCode;
			
			/// <summary>
			/// Creates the State table.
			/// </summary>
			internal StateDataTable()
			{
				// Initialize the object.
				this.TableName = "State";
				this.dataIndices = new global::Teraque.DataIndexCollection();
				// The Description Column
				this.columnDescription = new global::System.Data.DataColumn("Description", typeof(string), null, global::System.Data.MappingType.Element);
				this.columnDescription.AllowDBNull = false;
				this.columnDescription.DefaultValue = "";
				this.Columns.Add(this.columnDescription);
				// The ExternalId0 Column
				this.columnExternalId0 = new global::System.Data.DataColumn("ExternalId0", typeof(string), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnExternalId0);
				// The ExternalId1 Column
				this.columnExternalId1 = new global::System.Data.DataColumn("ExternalId1", typeof(string), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnExternalId1);
				// The ExternalId2 Column
				this.columnExternalId2 = new global::System.Data.DataColumn("ExternalId2", typeof(string), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnExternalId2);
				// The ExternalId3 Column
				this.columnExternalId3 = new global::System.Data.DataColumn("ExternalId3", typeof(string), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnExternalId3);
				// The Mnemonic Column
				this.columnMnemonic = new global::System.Data.DataColumn("Mnemonic", typeof(string), null, global::System.Data.MappingType.Element);
				this.columnMnemonic.AllowDBNull = false;
				this.columnMnemonic.DefaultValue = "";
				this.Columns.Add(this.columnMnemonic);
				// The RowVersion Column
				this.columnRowVersion = new global::System.Data.DataColumn("RowVersion", typeof(long), null, global::System.Data.MappingType.Element);
				this.columnRowVersion.AllowDBNull = false;
				this.Columns.Add(this.columnRowVersion);
				// The StateCode Column
				this.columnStateCode = new global::System.Data.DataColumn("StateCode", typeof(Teraque.StateCode), null, global::System.Data.MappingType.Element);
				this.columnStateCode.AllowDBNull = false;
				this.Columns.Add(this.columnStateCode);
				// The StateKey Index
				this.indexStateKey = new StateKeyIndex("StateKey", new global::System.Data.DataColumn[] {
							this.columnStateCode});
				this.Indices.Add(this.indexStateKey);
				// The StateKeyExternalId0 Index
				this.indexStateKeyExternalId0 = new StateKeyExternalId0Index("StateKeyExternalId0", new global::System.Data.DataColumn[] {
							this.columnExternalId0});
				this.Indices.Add(this.indexStateKeyExternalId0);
				// The StateKeyExternalId1 Index
				this.indexStateKeyExternalId1 = new StateKeyExternalId1Index("StateKeyExternalId1", new global::System.Data.DataColumn[] {
							this.columnExternalId1});
				this.Indices.Add(this.indexStateKeyExternalId1);
				// The StateKeyExternalId2 Index
				this.indexStateKeyExternalId2 = new StateKeyExternalId2Index("StateKeyExternalId2", new global::System.Data.DataColumn[] {
							this.columnExternalId2});
				this.Indices.Add(this.indexStateKeyExternalId2);
				// The StateKeyExternalId3 Index
				this.indexStateKeyExternalId3 = new StateKeyExternalId3Index("StateKeyExternalId3", new global::System.Data.DataColumn[] {
							this.columnExternalId3});
				this.Indices.Add(this.indexStateKeyExternalId3);
			}
			
			/// <summary>
			/// Gets the number of rows in the State table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public int Count
			{
				get
				{
					return this.Rows.Count;
				}
			}
			
			/// <summary>
			/// Gets the Description column of the State table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn DescriptionColumn
			{
				get
				{
					return this.columnDescription;
				}
			}
			
			/// <summary>
			/// Gets the ExternalId0 column of the State table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn ExternalId0Column
			{
				get
				{
					return this.columnExternalId0;
				}
			}
			
			/// <summary>
			/// Gets the ExternalId1 column of the State table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn ExternalId1Column
			{
				get
				{
					return this.columnExternalId1;
				}
			}
			
			/// <summary>
			/// Gets the ExternalId2 column of the State table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn ExternalId2Column
			{
				get
				{
					return this.columnExternalId2;
				}
			}
			
			/// <summary>
			/// Gets the ExternalId3 column of the State table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn ExternalId3Column
			{
				get
				{
					return this.columnExternalId3;
				}
			}
			
			/// <summary>
			/// Gets a collection of Teraque.DataModelGenerator.DataIndices on a table.
			/// </summary>
			public global::Teraque.DataIndexCollection Indices
			{
				get
				{
					return this.dataIndices;
				}
			}
			
			/// <summary>
			/// Indexer to a row in the State table.
			/// </summary>
			/// <param name="index">The integer index of the row.</param>
			/// <returns>The State row found at the given index.</returns>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public DataModel.StateRow this[int index]
			{
				get
				{
					return ((DataModel.StateRow)(this.Rows[index]));
				}
			}
			
			/// <summary>
			/// Gets the Mnemonic column of the State table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn MnemonicColumn
			{
				get
				{
					return this.columnMnemonic;
				}
			}
			
			/// <summary>
			/// Gets the RowVersion column of the State table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn RowVersionColumn
			{
				get
				{
					return this.columnRowVersion;
				}
			}
			
			/// <summary>
			/// Gets the StateCode column of the State table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn StateCodeColumn
			{
				get
				{
					return this.columnStateCode;
				}
			}
			
			/// <summary>
			/// Gets the child relation between the State and DestinationOrder tables.
			/// </summary>
			internal global::System.Data.DataRelation StateDestinationOrderRelation
			{
				get
				{
					return this.relationStateDestinationOrder;
				}
			}
			
			/// <summary>
			/// Gets the child relation between the State and Execution tables.
			/// </summary>
			internal global::System.Data.DataRelation StateExecutionByFK_State_Execution_DestinationStateCodeRelation
			{
				get
				{
					return this.relationStateExecutionByFK_State_Execution_DestinationStateCode;
				}
			}
			
			/// <summary>
			/// Gets the child relation between the State and Execution tables.
			/// </summary>
			internal global::System.Data.DataRelation StateExecutionByFK_State_Execution_SourceStateCodeRelation
			{
				get
				{
					return this.relationStateExecutionByFK_State_Execution_SourceStateCode;
				}
			}
			
			/// <summary>
			/// Gets the StateKey index on the State table.
			/// </summary>
			public StateKeyIndex StateKey
			{
				get
				{
					return ((StateKeyIndex)(this.indexStateKey));
				}
			}
			
			/// <summary>
			/// Gets the StateKeyExternalId0 index on the State table.
			/// </summary>
			public StateKeyExternalId0Index StateKeyExternalId0
			{
				get
				{
					return ((StateKeyExternalId0Index)(this.indexStateKeyExternalId0));
				}
			}
			
			/// <summary>
			/// Gets the StateKeyExternalId1 index on the State table.
			/// </summary>
			public StateKeyExternalId1Index StateKeyExternalId1
			{
				get
				{
					return ((StateKeyExternalId1Index)(this.indexStateKeyExternalId1));
				}
			}
			
			/// <summary>
			/// Gets the StateKeyExternalId2 index on the State table.
			/// </summary>
			public StateKeyExternalId2Index StateKeyExternalId2
			{
				get
				{
					return ((StateKeyExternalId2Index)(this.indexStateKeyExternalId2));
				}
			}
			
			/// <summary>
			/// Gets the StateKeyExternalId3 index on the State table.
			/// </summary>
			public StateKeyExternalId3Index StateKeyExternalId3
			{
				get
				{
					return ((StateKeyExternalId3Index)(this.indexStateKeyExternalId3));
				}
			}
			
			/// <summary>
			/// Occurs after a State row has been changed successfully.
			/// </summary>
			public event StateRowChangeEventHandler StateRowChanged;
			
			/// <summary>
			/// Occurs when a State row is changing.
			/// </summary>
			public event StateRowChangeEventHandler StateRowChanging;
			
			/// <summary>
			/// Occurs after a State row in the table has been deleted.
			/// </summary>
			public event StateRowChangeEventHandler StateRowDeleted;
			
			/// <summary>
			/// Occurs before a State row in the table is about to be deleted.
			/// </summary>
			public event StateRowChangeEventHandler StateRowDeleting;
			
			/// <summary>
			/// Returns the type of the row in a State table.
			/// </summary>
			/// <returns>The StateRow type.</returns>
			protected override global::System.Type GetRowType()
			{
				return typeof(StateRow);
			}
			
			/// <summary>
			/// Initializes the relation fields with the parent and child relations.
			/// </summary>
			internal void InitializeRelations()
			{
				this.relationStateDestinationOrder = this.ChildRelations["FK_State_DestinationOrder"];
				this.relationStateExecutionByFK_State_Execution_DestinationStateCode = this.ChildRelations["FK_State_Execution_DestinationStateCode"];
				this.relationStateExecutionByFK_State_Execution_SourceStateCode = this.ChildRelations["FK_State_Execution_SourceStateCode"];
			}
			
			/// <summary>
			/// Initializes a new instance of a State row.  Constructs a row from the builder.  Only for internal usage.
			/// </summary>
			/// <returns>A new row with the same schema as the table.</returns>
			protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder dataRowBuilder)
			{
				return new StateRow(dataRowBuilder);
			}
			
			/// <summary>
			/// Raises the StateRowChanged event.
			/// </summary>
			/// <param name="e">Provides data for the StateRow changing and deleting events.</param>
			protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowChanged(e);
				if ((this.StateRowChanged != null))
				{
					this.StateRowChanged(this, new StateRowChangeEventArgs(((StateRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the StateRowChanging event.
			/// </summary>
			/// <param name="e">Provides data for the StateRow changing and deleting events.</param>
			protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowChanging(e);
				if ((this.StateRowChanging != null))
				{
					this.StateRowChanging(this, new StateRowChangeEventArgs(((StateRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the StateRowDeleted event.
			/// </summary>
			/// <param name="e">Provides data for the StateRow changing and deleting events.</param>
			protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowDeleted(e);
				if ((this.StateRowDeleted != null))
				{
					this.StateRowDeleted(this, new StateRowChangeEventArgs(((StateRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the StateRowDeleting event.
			/// </summary>
			/// <param name="e">Provides data for the StateRow changing and deleting events.</param>
			protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowDeleting(e);
				if ((this.StateRowDeleting != null))
				{
					this.StateRowDeleting(this, new StateRowChangeEventArgs(((StateRow)(e.Row)), e.Action));
				}
			}
		}
		
		/// <summary>
		/// The Status table.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public partial class StatusDataTable : global::System.Data.TypedTableBase<DataModel.StatusRow>
		{
			
			private global::System.Data.DataColumn columnDescription;
			
			private global::System.Data.DataColumn columnExternalId0;
			
			private global::System.Data.DataColumn columnExternalId1;
			
			private global::System.Data.DataColumn columnExternalId2;
			
			private global::System.Data.DataColumn columnExternalId3;
			
			private global::System.Data.DataColumn columnImage;
			
			private global::System.Data.DataColumn columnMnemonic;
			
			private global::System.Data.DataColumn columnRowVersion;
			
			private global::System.Data.DataColumn columnSortOrder;
			
			private global::System.Data.DataColumn columnStatusCode;
			
			private global::Teraque.DataIndexCollection dataIndices;
			
			private global::Teraque.DataIndex indexStatusKey;
			
			private global::Teraque.DataIndex indexStatusKeyExternalId0;
			
			private global::Teraque.DataIndex indexStatusKeyExternalId1;
			
			private global::Teraque.DataIndex indexStatusKeyExternalId2;
			
			private global::Teraque.DataIndex indexStatusKeyExternalId3;
			
			private global::System.Data.DataRelation relationStatusDestinationOrder;
			
			private global::System.Data.DataRelation relationStatusMatch;
			
			private global::System.Data.DataRelation relationStatusNegotiation;
			
			private global::System.Data.DataRelation relationStatusSourceOrder;
			
			private global::System.Data.DataRelation relationStatusWorkingOrder;
			
			/// <summary>
			/// Creates the Status table.
			/// </summary>
			internal StatusDataTable()
			{
				// Initialize the object.
				this.TableName = "Status";
				this.dataIndices = new global::Teraque.DataIndexCollection();
				// The Description Column
				this.columnDescription = new global::System.Data.DataColumn("Description", typeof(string), null, global::System.Data.MappingType.Element);
				this.columnDescription.AllowDBNull = false;
				this.columnDescription.DefaultValue = "";
				this.Columns.Add(this.columnDescription);
				// The ExternalId0 Column
				this.columnExternalId0 = new global::System.Data.DataColumn("ExternalId0", typeof(string), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnExternalId0);
				// The ExternalId1 Column
				this.columnExternalId1 = new global::System.Data.DataColumn("ExternalId1", typeof(string), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnExternalId1);
				// The ExternalId2 Column
				this.columnExternalId2 = new global::System.Data.DataColumn("ExternalId2", typeof(string), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnExternalId2);
				// The ExternalId3 Column
				this.columnExternalId3 = new global::System.Data.DataColumn("ExternalId3", typeof(string), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnExternalId3);
				// The Image Column
				this.columnImage = new global::System.Data.DataColumn("Image", typeof(string), null, global::System.Data.MappingType.Element);
				this.columnImage.AllowDBNull = false;
				this.columnImage.DefaultValue = "";
				this.Columns.Add(this.columnImage);
				// The Mnemonic Column
				this.columnMnemonic = new global::System.Data.DataColumn("Mnemonic", typeof(string), null, global::System.Data.MappingType.Element);
				this.columnMnemonic.AllowDBNull = false;
				this.columnMnemonic.DefaultValue = "";
				this.Columns.Add(this.columnMnemonic);
				// The RowVersion Column
				this.columnRowVersion = new global::System.Data.DataColumn("RowVersion", typeof(long), null, global::System.Data.MappingType.Element);
				this.columnRowVersion.AllowDBNull = false;
				this.Columns.Add(this.columnRowVersion);
				// The SortOrder Column
				this.columnSortOrder = new global::System.Data.DataColumn("SortOrder", typeof(int), null, global::System.Data.MappingType.Element);
				this.columnSortOrder.AllowDBNull = false;
				this.columnSortOrder.DefaultValue = 0;
				this.Columns.Add(this.columnSortOrder);
				// The StatusCode Column
				this.columnStatusCode = new global::System.Data.DataColumn("StatusCode", typeof(Teraque.StatusCode), null, global::System.Data.MappingType.Element);
				this.columnStatusCode.AllowDBNull = false;
				this.Columns.Add(this.columnStatusCode);
				// The StatusKey Index
				this.indexStatusKey = new StatusKeyIndex("StatusKey", new global::System.Data.DataColumn[] {
							this.columnStatusCode});
				this.Indices.Add(this.indexStatusKey);
				// The StatusKeyExternalId0 Index
				this.indexStatusKeyExternalId0 = new StatusKeyExternalId0Index("StatusKeyExternalId0", new global::System.Data.DataColumn[] {
							this.columnExternalId0});
				this.Indices.Add(this.indexStatusKeyExternalId0);
				// The StatusKeyExternalId1 Index
				this.indexStatusKeyExternalId1 = new StatusKeyExternalId1Index("StatusKeyExternalId1", new global::System.Data.DataColumn[] {
							this.columnExternalId1});
				this.Indices.Add(this.indexStatusKeyExternalId1);
				// The StatusKeyExternalId2 Index
				this.indexStatusKeyExternalId2 = new StatusKeyExternalId2Index("StatusKeyExternalId2", new global::System.Data.DataColumn[] {
							this.columnExternalId2});
				this.Indices.Add(this.indexStatusKeyExternalId2);
				// The StatusKeyExternalId3 Index
				this.indexStatusKeyExternalId3 = new StatusKeyExternalId3Index("StatusKeyExternalId3", new global::System.Data.DataColumn[] {
							this.columnExternalId3});
				this.Indices.Add(this.indexStatusKeyExternalId3);
			}
			
			/// <summary>
			/// Gets the number of rows in the Status table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public int Count
			{
				get
				{
					return this.Rows.Count;
				}
			}
			
			/// <summary>
			/// Gets the Description column of the Status table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn DescriptionColumn
			{
				get
				{
					return this.columnDescription;
				}
			}
			
			/// <summary>
			/// Gets the ExternalId0 column of the Status table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn ExternalId0Column
			{
				get
				{
					return this.columnExternalId0;
				}
			}
			
			/// <summary>
			/// Gets the ExternalId1 column of the Status table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn ExternalId1Column
			{
				get
				{
					return this.columnExternalId1;
				}
			}
			
			/// <summary>
			/// Gets the ExternalId2 column of the Status table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn ExternalId2Column
			{
				get
				{
					return this.columnExternalId2;
				}
			}
			
			/// <summary>
			/// Gets the ExternalId3 column of the Status table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn ExternalId3Column
			{
				get
				{
					return this.columnExternalId3;
				}
			}
			
			/// <summary>
			/// Gets the Image column of the Status table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn ImageColumn
			{
				get
				{
					return this.columnImage;
				}
			}
			
			/// <summary>
			/// Gets a collection of Teraque.DataModelGenerator.DataIndices on a table.
			/// </summary>
			public global::Teraque.DataIndexCollection Indices
			{
				get
				{
					return this.dataIndices;
				}
			}
			
			/// <summary>
			/// Indexer to a row in the Status table.
			/// </summary>
			/// <param name="index">The integer index of the row.</param>
			/// <returns>The Status row found at the given index.</returns>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public DataModel.StatusRow this[int index]
			{
				get
				{
					return ((DataModel.StatusRow)(this.Rows[index]));
				}
			}
			
			/// <summary>
			/// Gets the Mnemonic column of the Status table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn MnemonicColumn
			{
				get
				{
					return this.columnMnemonic;
				}
			}
			
			/// <summary>
			/// Gets the RowVersion column of the Status table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn RowVersionColumn
			{
				get
				{
					return this.columnRowVersion;
				}
			}
			
			/// <summary>
			/// Gets the SortOrder column of the Status table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn SortOrderColumn
			{
				get
				{
					return this.columnSortOrder;
				}
			}
			
			/// <summary>
			/// Gets the StatusCode column of the Status table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn StatusCodeColumn
			{
				get
				{
					return this.columnStatusCode;
				}
			}
			
			/// <summary>
			/// Gets the child relation between the Status and DestinationOrder tables.
			/// </summary>
			internal global::System.Data.DataRelation StatusDestinationOrderRelation
			{
				get
				{
					return this.relationStatusDestinationOrder;
				}
			}
			
			/// <summary>
			/// Gets the StatusKey index on the Status table.
			/// </summary>
			public StatusKeyIndex StatusKey
			{
				get
				{
					return ((StatusKeyIndex)(this.indexStatusKey));
				}
			}
			
			/// <summary>
			/// Gets the StatusKeyExternalId0 index on the Status table.
			/// </summary>
			public StatusKeyExternalId0Index StatusKeyExternalId0
			{
				get
				{
					return ((StatusKeyExternalId0Index)(this.indexStatusKeyExternalId0));
				}
			}
			
			/// <summary>
			/// Gets the StatusKeyExternalId1 index on the Status table.
			/// </summary>
			public StatusKeyExternalId1Index StatusKeyExternalId1
			{
				get
				{
					return ((StatusKeyExternalId1Index)(this.indexStatusKeyExternalId1));
				}
			}
			
			/// <summary>
			/// Gets the StatusKeyExternalId2 index on the Status table.
			/// </summary>
			public StatusKeyExternalId2Index StatusKeyExternalId2
			{
				get
				{
					return ((StatusKeyExternalId2Index)(this.indexStatusKeyExternalId2));
				}
			}
			
			/// <summary>
			/// Gets the StatusKeyExternalId3 index on the Status table.
			/// </summary>
			public StatusKeyExternalId3Index StatusKeyExternalId3
			{
				get
				{
					return ((StatusKeyExternalId3Index)(this.indexStatusKeyExternalId3));
				}
			}
			
			/// <summary>
			/// Gets the child relation between the Status and Match tables.
			/// </summary>
			internal global::System.Data.DataRelation StatusMatchRelation
			{
				get
				{
					return this.relationStatusMatch;
				}
			}
			
			/// <summary>
			/// Gets the child relation between the Status and Negotiation tables.
			/// </summary>
			internal global::System.Data.DataRelation StatusNegotiationRelation
			{
				get
				{
					return this.relationStatusNegotiation;
				}
			}
			
			/// <summary>
			/// Gets the child relation between the Status and SourceOrder tables.
			/// </summary>
			internal global::System.Data.DataRelation StatusSourceOrderRelation
			{
				get
				{
					return this.relationStatusSourceOrder;
				}
			}
			
			/// <summary>
			/// Gets the child relation between the Status and WorkingOrder tables.
			/// </summary>
			internal global::System.Data.DataRelation StatusWorkingOrderRelation
			{
				get
				{
					return this.relationStatusWorkingOrder;
				}
			}
			
			/// <summary>
			/// Occurs after a Status row has been changed successfully.
			/// </summary>
			public event StatusRowChangeEventHandler StatusRowChanged;
			
			/// <summary>
			/// Occurs when a Status row is changing.
			/// </summary>
			public event StatusRowChangeEventHandler StatusRowChanging;
			
			/// <summary>
			/// Occurs after a Status row in the table has been deleted.
			/// </summary>
			public event StatusRowChangeEventHandler StatusRowDeleted;
			
			/// <summary>
			/// Occurs before a Status row in the table is about to be deleted.
			/// </summary>
			public event StatusRowChangeEventHandler StatusRowDeleting;
			
			/// <summary>
			/// Returns the type of the row in a Status table.
			/// </summary>
			/// <returns>The StatusRow type.</returns>
			protected override global::System.Type GetRowType()
			{
				return typeof(StatusRow);
			}
			
			/// <summary>
			/// Initializes the relation fields with the parent and child relations.
			/// </summary>
			internal void InitializeRelations()
			{
				this.relationStatusDestinationOrder = this.ChildRelations["FK_Status_DestinationOrder"];
				this.relationStatusMatch = this.ChildRelations["FK_Status_Match"];
				this.relationStatusNegotiation = this.ChildRelations["FK_Status_Negotiation"];
				this.relationStatusSourceOrder = this.ChildRelations["FK_Status_SourceOrder"];
				this.relationStatusWorkingOrder = this.ChildRelations["FK_Status_WorkingOrder"];
			}
			
			/// <summary>
			/// Initializes a new instance of a Status row.  Constructs a row from the builder.  Only for internal usage.
			/// </summary>
			/// <returns>A new row with the same schema as the table.</returns>
			protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder dataRowBuilder)
			{
				return new StatusRow(dataRowBuilder);
			}
			
			/// <summary>
			/// Raises the StatusRowChanged event.
			/// </summary>
			/// <param name="e">Provides data for the StatusRow changing and deleting events.</param>
			protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowChanged(e);
				if ((this.StatusRowChanged != null))
				{
					this.StatusRowChanged(this, new StatusRowChangeEventArgs(((StatusRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the StatusRowChanging event.
			/// </summary>
			/// <param name="e">Provides data for the StatusRow changing and deleting events.</param>
			protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowChanging(e);
				if ((this.StatusRowChanging != null))
				{
					this.StatusRowChanging(this, new StatusRowChangeEventArgs(((StatusRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the StatusRowDeleted event.
			/// </summary>
			/// <param name="e">Provides data for the StatusRow changing and deleting events.</param>
			protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowDeleted(e);
				if ((this.StatusRowDeleted != null))
				{
					this.StatusRowDeleted(this, new StatusRowChangeEventArgs(((StatusRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the StatusRowDeleting event.
			/// </summary>
			/// <param name="e">Provides data for the StatusRow changing and deleting events.</param>
			protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowDeleting(e);
				if ((this.StatusRowDeleting != null))
				{
					this.StatusRowDeleting(this, new StatusRowChangeEventArgs(((StatusRow)(e.Row)), e.Action));
				}
			}
		}
		
		/// <summary>
		/// The SubordinateType table.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public partial class SubordinateTypeDataTable : global::System.Data.TypedTableBase<DataModel.SubordinateTypeRow>
		{
			
			private global::System.Data.DataColumn columnDescription;
			
			private global::System.Data.DataColumn columnExternalId0;
			
			private global::System.Data.DataColumn columnExternalId1;
			
			private global::System.Data.DataColumn columnRowVersion;
			
			private global::System.Data.DataColumn columnSubordinateTypeCode;
			
			private global::Teraque.DataIndexCollection dataIndices;
			
			private global::Teraque.DataIndex indexSubordinateTypeKey;
			
			private global::Teraque.DataIndex indexSubordinateTypeKeyExternalId0;
			
			private global::Teraque.DataIndex indexSubordinateTypeKeyExternalId1;
			
			private global::System.Data.DataRelation relationSubordinateTypeSecuritySeries;
			
			/// <summary>
			/// Creates the SubordinateType table.
			/// </summary>
			internal SubordinateTypeDataTable()
			{
				// Initialize the object.
				this.TableName = "SubordinateType";
				this.dataIndices = new global::Teraque.DataIndexCollection();
				// The Description Column
				this.columnDescription = new global::System.Data.DataColumn("Description", typeof(string), null, global::System.Data.MappingType.Element);
				this.columnDescription.AllowDBNull = false;
				this.columnDescription.DefaultValue = "";
				this.Columns.Add(this.columnDescription);
				// The ExternalId0 Column
				this.columnExternalId0 = new global::System.Data.DataColumn("ExternalId0", typeof(string), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnExternalId0);
				// The ExternalId1 Column
				this.columnExternalId1 = new global::System.Data.DataColumn("ExternalId1", typeof(string), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnExternalId1);
				// The RowVersion Column
				this.columnRowVersion = new global::System.Data.DataColumn("RowVersion", typeof(long), null, global::System.Data.MappingType.Element);
				this.columnRowVersion.AllowDBNull = false;
				this.Columns.Add(this.columnRowVersion);
				// The SubordinateTypeCode Column
				this.columnSubordinateTypeCode = new global::System.Data.DataColumn("SubordinateTypeCode", typeof(Teraque.SubordinateTypeCode), null, global::System.Data.MappingType.Element);
				this.columnSubordinateTypeCode.AllowDBNull = false;
				this.Columns.Add(this.columnSubordinateTypeCode);
				// The SubordinateTypeKey Index
				this.indexSubordinateTypeKey = new SubordinateTypeKeyIndex("SubordinateTypeKey", new global::System.Data.DataColumn[] {
							this.columnSubordinateTypeCode});
				this.Indices.Add(this.indexSubordinateTypeKey);
				// The SubordinateTypeKeyExternalId0 Index
				this.indexSubordinateTypeKeyExternalId0 = new SubordinateTypeKeyExternalId0Index("SubordinateTypeKeyExternalId0", new global::System.Data.DataColumn[] {
							this.columnExternalId0});
				this.Indices.Add(this.indexSubordinateTypeKeyExternalId0);
				// The SubordinateTypeKeyExternalId1 Index
				this.indexSubordinateTypeKeyExternalId1 = new SubordinateTypeKeyExternalId1Index("SubordinateTypeKeyExternalId1", new global::System.Data.DataColumn[] {
							this.columnExternalId1});
				this.Indices.Add(this.indexSubordinateTypeKeyExternalId1);
			}
			
			/// <summary>
			/// Gets the number of rows in the SubordinateType table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public int Count
			{
				get
				{
					return this.Rows.Count;
				}
			}
			
			/// <summary>
			/// Gets the Description column of the SubordinateType table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn DescriptionColumn
			{
				get
				{
					return this.columnDescription;
				}
			}
			
			/// <summary>
			/// Gets the ExternalId0 column of the SubordinateType table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn ExternalId0Column
			{
				get
				{
					return this.columnExternalId0;
				}
			}
			
			/// <summary>
			/// Gets the ExternalId1 column of the SubordinateType table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn ExternalId1Column
			{
				get
				{
					return this.columnExternalId1;
				}
			}
			
			/// <summary>
			/// Gets a collection of Teraque.DataModelGenerator.DataIndices on a table.
			/// </summary>
			public global::Teraque.DataIndexCollection Indices
			{
				get
				{
					return this.dataIndices;
				}
			}
			
			/// <summary>
			/// Indexer to a row in the SubordinateType table.
			/// </summary>
			/// <param name="index">The integer index of the row.</param>
			/// <returns>The SubordinateType row found at the given index.</returns>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public DataModel.SubordinateTypeRow this[int index]
			{
				get
				{
					return ((DataModel.SubordinateTypeRow)(this.Rows[index]));
				}
			}
			
			/// <summary>
			/// Gets the RowVersion column of the SubordinateType table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn RowVersionColumn
			{
				get
				{
					return this.columnRowVersion;
				}
			}
			
			/// <summary>
			/// Gets the SubordinateTypeCode column of the SubordinateType table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn SubordinateTypeCodeColumn
			{
				get
				{
					return this.columnSubordinateTypeCode;
				}
			}
			
			/// <summary>
			/// Gets the SubordinateTypeKey index on the SubordinateType table.
			/// </summary>
			public SubordinateTypeKeyIndex SubordinateTypeKey
			{
				get
				{
					return ((SubordinateTypeKeyIndex)(this.indexSubordinateTypeKey));
				}
			}
			
			/// <summary>
			/// Gets the SubordinateTypeKeyExternalId0 index on the SubordinateType table.
			/// </summary>
			public SubordinateTypeKeyExternalId0Index SubordinateTypeKeyExternalId0
			{
				get
				{
					return ((SubordinateTypeKeyExternalId0Index)(this.indexSubordinateTypeKeyExternalId0));
				}
			}
			
			/// <summary>
			/// Gets the SubordinateTypeKeyExternalId1 index on the SubordinateType table.
			/// </summary>
			public SubordinateTypeKeyExternalId1Index SubordinateTypeKeyExternalId1
			{
				get
				{
					return ((SubordinateTypeKeyExternalId1Index)(this.indexSubordinateTypeKeyExternalId1));
				}
			}
			
			/// <summary>
			/// Gets the child relation between the SubordinateType and SecuritySeries tables.
			/// </summary>
			internal global::System.Data.DataRelation SubordinateTypeSecuritySeriesRelation
			{
				get
				{
					return this.relationSubordinateTypeSecuritySeries;
				}
			}
			
			/// <summary>
			/// Occurs after a SubordinateType row has been changed successfully.
			/// </summary>
			public event SubordinateTypeRowChangeEventHandler SubordinateTypeRowChanged;
			
			/// <summary>
			/// Occurs when a SubordinateType row is changing.
			/// </summary>
			public event SubordinateTypeRowChangeEventHandler SubordinateTypeRowChanging;
			
			/// <summary>
			/// Occurs after a SubordinateType row in the table has been deleted.
			/// </summary>
			public event SubordinateTypeRowChangeEventHandler SubordinateTypeRowDeleted;
			
			/// <summary>
			/// Occurs before a SubordinateType row in the table is about to be deleted.
			/// </summary>
			public event SubordinateTypeRowChangeEventHandler SubordinateTypeRowDeleting;
			
			/// <summary>
			/// Returns the type of the row in a SubordinateType table.
			/// </summary>
			/// <returns>The SubordinateTypeRow type.</returns>
			protected override global::System.Type GetRowType()
			{
				return typeof(SubordinateTypeRow);
			}
			
			/// <summary>
			/// Initializes the relation fields with the parent and child relations.
			/// </summary>
			internal void InitializeRelations()
			{
				this.relationSubordinateTypeSecuritySeries = this.ChildRelations["FK_SubordinateType_SecuritySeries"];
			}
			
			/// <summary>
			/// Initializes a new instance of a SubordinateType row.  Constructs a row from the builder.  Only for internal usage.
			/// </summary>
			/// <returns>A new row with the same schema as the table.</returns>
			protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder dataRowBuilder)
			{
				return new SubordinateTypeRow(dataRowBuilder);
			}
			
			/// <summary>
			/// Raises the SubordinateTypeRowChanged event.
			/// </summary>
			/// <param name="e">Provides data for the SubordinateTypeRow changing and deleting events.</param>
			protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowChanged(e);
				if ((this.SubordinateTypeRowChanged != null))
				{
					this.SubordinateTypeRowChanged(this, new SubordinateTypeRowChangeEventArgs(((SubordinateTypeRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the SubordinateTypeRowChanging event.
			/// </summary>
			/// <param name="e">Provides data for the SubordinateTypeRow changing and deleting events.</param>
			protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowChanging(e);
				if ((this.SubordinateTypeRowChanging != null))
				{
					this.SubordinateTypeRowChanging(this, new SubordinateTypeRowChangeEventArgs(((SubordinateTypeRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the SubordinateTypeRowDeleted event.
			/// </summary>
			/// <param name="e">Provides data for the SubordinateTypeRow changing and deleting events.</param>
			protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowDeleted(e);
				if ((this.SubordinateTypeRowDeleted != null))
				{
					this.SubordinateTypeRowDeleted(this, new SubordinateTypeRowChangeEventArgs(((SubordinateTypeRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the SubordinateTypeRowDeleting event.
			/// </summary>
			/// <param name="e">Provides data for the SubordinateTypeRow changing and deleting events.</param>
			protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowDeleting(e);
				if ((this.SubordinateTypeRowDeleting != null))
				{
					this.SubordinateTypeRowDeleting(this, new SubordinateTypeRowChangeEventArgs(((SubordinateTypeRow)(e.Row)), e.Action));
				}
			}
		}
		
		/// <summary>
		/// The TaxLot table.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public partial class TaxLotDataTable : global::System.Data.TypedTableBase<DataModel.TaxLotRow>
		{
			
			private global::System.Data.DataColumn columnAccountId;
			
			private global::System.Data.DataColumn columnBaseCost;
			
			private global::System.Data.DataColumn columnExternalId0;
			
			private global::System.Data.DataColumn columnExternalId1;
			
			private global::System.Data.DataColumn columnLocalCost;
			
			private global::System.Data.DataColumn columnPositionId;
			
			private global::System.Data.DataColumn columnPositionTypeCode;
			
			private global::System.Data.DataColumn columnRowVersion;
			
			private global::System.Data.DataColumn columnSecurityId;
			
			private global::System.Data.DataColumn columnSettlementDate;
			
			private global::System.Data.DataColumn columnTaxLotId;
			
			private global::System.Data.DataColumn columnTradeDate;
			
			private global::Teraque.DataIndexCollection dataIndices;
			
			private global::Teraque.DataIndex indexTaxLotKey;
			
			private global::Teraque.DataIndex indexTaxLotKeyExternalId0;
			
			private global::Teraque.DataIndex indexTaxLotKeyExternalId1;
			
			private global::System.Data.DataRelation relationAccountTaxLot;
			
			private global::System.Data.DataRelation relationPositionTaxLot;
			
			private global::System.Data.DataRelation relationPositionTypeTaxLot;
			
			private global::System.Data.DataRelation relationSecurityTaxLot;
			
			private global::System.Data.DataRelation relationTaxLotTaxLotSeries;
			
			/// <summary>
			/// Creates the TaxLot table.
			/// </summary>
			internal TaxLotDataTable()
			{
				// Initialize the object.
				this.TableName = "TaxLot";
				this.dataIndices = new global::Teraque.DataIndexCollection();
				// The AccountId Column
				this.columnAccountId = new global::System.Data.DataColumn("AccountId", typeof(System.Guid), null, global::System.Data.MappingType.Element);
				this.columnAccountId.AllowDBNull = false;
				this.Columns.Add(this.columnAccountId);
				// The BaseCost Column
				this.columnBaseCost = new global::System.Data.DataColumn("BaseCost", typeof(decimal), null, global::System.Data.MappingType.Element);
				this.columnBaseCost.AllowDBNull = false;
				this.columnBaseCost.DefaultValue = 0.0m;
				this.Columns.Add(this.columnBaseCost);
				// The ExternalId0 Column
				this.columnExternalId0 = new global::System.Data.DataColumn("ExternalId0", typeof(string), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnExternalId0);
				// The ExternalId1 Column
				this.columnExternalId1 = new global::System.Data.DataColumn("ExternalId1", typeof(string), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnExternalId1);
				// The LocalCost Column
				this.columnLocalCost = new global::System.Data.DataColumn("LocalCost", typeof(decimal), null, global::System.Data.MappingType.Element);
				this.columnLocalCost.AllowDBNull = false;
				this.columnLocalCost.DefaultValue = 0.0m;
				this.Columns.Add(this.columnLocalCost);
				// The PositionId Column
				this.columnPositionId = new global::System.Data.DataColumn("PositionId", typeof(System.Guid), null, global::System.Data.MappingType.Element);
				this.columnPositionId.AllowDBNull = false;
				this.Columns.Add(this.columnPositionId);
				// The PositionTypeCode Column
				this.columnPositionTypeCode = new global::System.Data.DataColumn("PositionTypeCode", typeof(Teraque.PositionTypeCode), null, global::System.Data.MappingType.Element);
				this.columnPositionTypeCode.AllowDBNull = false;
				this.Columns.Add(this.columnPositionTypeCode);
				// The RowVersion Column
				this.columnRowVersion = new global::System.Data.DataColumn("RowVersion", typeof(long), null, global::System.Data.MappingType.Element);
				this.columnRowVersion.AllowDBNull = false;
				this.Columns.Add(this.columnRowVersion);
				// The SecurityId Column
				this.columnSecurityId = new global::System.Data.DataColumn("SecurityId", typeof(System.Guid), null, global::System.Data.MappingType.Element);
				this.columnSecurityId.AllowDBNull = false;
				this.Columns.Add(this.columnSecurityId);
				// The SettlementDate Column
				this.columnSettlementDate = new global::System.Data.DataColumn("SettlementDate", typeof(System.DateTime), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnSettlementDate);
				// The TaxLotId Column
				this.columnTaxLotId = new global::System.Data.DataColumn("TaxLotId", typeof(System.Guid), null, global::System.Data.MappingType.Element);
				this.columnTaxLotId.AllowDBNull = false;
				this.Columns.Add(this.columnTaxLotId);
				// The TradeDate Column
				this.columnTradeDate = new global::System.Data.DataColumn("TradeDate", typeof(System.DateTime), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnTradeDate);
				// The TaxLotKey Index
				this.indexTaxLotKey = new TaxLotKeyIndex("TaxLotKey", new global::System.Data.DataColumn[] {
							this.columnTaxLotId});
				this.Indices.Add(this.indexTaxLotKey);
				// The TaxLotKeyExternalId0 Index
				this.indexTaxLotKeyExternalId0 = new TaxLotKeyExternalId0Index("TaxLotKeyExternalId0", new global::System.Data.DataColumn[] {
							this.columnExternalId0});
				this.Indices.Add(this.indexTaxLotKeyExternalId0);
				// The TaxLotKeyExternalId1 Index
				this.indexTaxLotKeyExternalId1 = new TaxLotKeyExternalId1Index("TaxLotKeyExternalId1", new global::System.Data.DataColumn[] {
							this.columnExternalId1});
				this.Indices.Add(this.indexTaxLotKeyExternalId1);
			}
			
			/// <summary>
			/// Gets the AccountId column of the TaxLot table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn AccountIdColumn
			{
				get
				{
					return this.columnAccountId;
				}
			}
			
			/// <summary>
			/// Gets the parent relation between the Account and TaxLot tables.
			/// </summary>
			public global::System.Data.DataRelation AccountTaxLotRelation
			{
				get
				{
					return this.relationAccountTaxLot;
				}
			}
			
			/// <summary>
			/// Gets the BaseCost column of the TaxLot table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn BaseCostColumn
			{
				get
				{
					return this.columnBaseCost;
				}
			}
			
			/// <summary>
			/// Gets the number of rows in the TaxLot table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public int Count
			{
				get
				{
					return this.Rows.Count;
				}
			}
			
			/// <summary>
			/// Gets the ExternalId0 column of the TaxLot table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn ExternalId0Column
			{
				get
				{
					return this.columnExternalId0;
				}
			}
			
			/// <summary>
			/// Gets the ExternalId1 column of the TaxLot table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn ExternalId1Column
			{
				get
				{
					return this.columnExternalId1;
				}
			}
			
			/// <summary>
			/// Gets a collection of Teraque.DataModelGenerator.DataIndices on a table.
			/// </summary>
			public global::Teraque.DataIndexCollection Indices
			{
				get
				{
					return this.dataIndices;
				}
			}
			
			/// <summary>
			/// Indexer to a row in the TaxLot table.
			/// </summary>
			/// <param name="index">The integer index of the row.</param>
			/// <returns>The TaxLot row found at the given index.</returns>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public DataModel.TaxLotRow this[int index]
			{
				get
				{
					return ((DataModel.TaxLotRow)(this.Rows[index]));
				}
			}
			
			/// <summary>
			/// Gets the LocalCost column of the TaxLot table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn LocalCostColumn
			{
				get
				{
					return this.columnLocalCost;
				}
			}
			
			/// <summary>
			/// Gets the PositionId column of the TaxLot table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn PositionIdColumn
			{
				get
				{
					return this.columnPositionId;
				}
			}
			
			/// <summary>
			/// Gets the parent relation between the Position and TaxLot tables.
			/// </summary>
			public global::System.Data.DataRelation PositionTaxLotRelation
			{
				get
				{
					return this.relationPositionTaxLot;
				}
			}
			
			/// <summary>
			/// Gets the PositionTypeCode column of the TaxLot table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn PositionTypeCodeColumn
			{
				get
				{
					return this.columnPositionTypeCode;
				}
			}
			
			/// <summary>
			/// Gets the parent relation between the PositionType and TaxLot tables.
			/// </summary>
			public global::System.Data.DataRelation PositionTypeTaxLotRelation
			{
				get
				{
					return this.relationPositionTypeTaxLot;
				}
			}
			
			/// <summary>
			/// Gets the RowVersion column of the TaxLot table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn RowVersionColumn
			{
				get
				{
					return this.columnRowVersion;
				}
			}
			
			/// <summary>
			/// Gets the SecurityId column of the TaxLot table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn SecurityIdColumn
			{
				get
				{
					return this.columnSecurityId;
				}
			}
			
			/// <summary>
			/// Gets the parent relation between the Security and TaxLot tables.
			/// </summary>
			public global::System.Data.DataRelation SecurityTaxLotRelation
			{
				get
				{
					return this.relationSecurityTaxLot;
				}
			}
			
			/// <summary>
			/// Gets the SettlementDate column of the TaxLot table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn SettlementDateColumn
			{
				get
				{
					return this.columnSettlementDate;
				}
			}
			
			/// <summary>
			/// Gets the TaxLotId column of the TaxLot table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn TaxLotIdColumn
			{
				get
				{
					return this.columnTaxLotId;
				}
			}
			
			/// <summary>
			/// Gets the TaxLotKey index on the TaxLot table.
			/// </summary>
			public TaxLotKeyIndex TaxLotKey
			{
				get
				{
					return ((TaxLotKeyIndex)(this.indexTaxLotKey));
				}
			}
			
			/// <summary>
			/// Gets the TaxLotKeyExternalId0 index on the TaxLot table.
			/// </summary>
			public TaxLotKeyExternalId0Index TaxLotKeyExternalId0
			{
				get
				{
					return ((TaxLotKeyExternalId0Index)(this.indexTaxLotKeyExternalId0));
				}
			}
			
			/// <summary>
			/// Gets the TaxLotKeyExternalId1 index on the TaxLot table.
			/// </summary>
			public TaxLotKeyExternalId1Index TaxLotKeyExternalId1
			{
				get
				{
					return ((TaxLotKeyExternalId1Index)(this.indexTaxLotKeyExternalId1));
				}
			}
			
			/// <summary>
			/// Gets the child relation between the TaxLot and TaxLotSeries tables.
			/// </summary>
			internal global::System.Data.DataRelation TaxLotTaxLotSeriesRelation
			{
				get
				{
					return this.relationTaxLotTaxLotSeries;
				}
			}
			
			/// <summary>
			/// Gets the TradeDate column of the TaxLot table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn TradeDateColumn
			{
				get
				{
					return this.columnTradeDate;
				}
			}
			
			/// <summary>
			/// Occurs after a TaxLot row has been changed successfully.
			/// </summary>
			public event TaxLotRowChangeEventHandler TaxLotRowChanged;
			
			/// <summary>
			/// Occurs when a TaxLot row is changing.
			/// </summary>
			public event TaxLotRowChangeEventHandler TaxLotRowChanging;
			
			/// <summary>
			/// Occurs after a TaxLot row in the table has been deleted.
			/// </summary>
			public event TaxLotRowChangeEventHandler TaxLotRowDeleted;
			
			/// <summary>
			/// Occurs before a TaxLot row in the table is about to be deleted.
			/// </summary>
			public event TaxLotRowChangeEventHandler TaxLotRowDeleting;
			
			/// <summary>
			/// Returns the type of the row in a TaxLot table.
			/// </summary>
			/// <returns>The TaxLotRow type.</returns>
			protected override global::System.Type GetRowType()
			{
				return typeof(TaxLotRow);
			}
			
			/// <summary>
			/// Initializes the relation fields with the parent and child relations.
			/// </summary>
			internal void InitializeRelations()
			{
				this.relationAccountTaxLot = this.ParentRelations["FK_Account_TaxLot"];
				this.relationPositionTaxLot = this.ParentRelations["FK_Position_TaxLot"];
				this.relationPositionTypeTaxLot = this.ParentRelations["FK_PositionType_TaxLot"];
				this.relationSecurityTaxLot = this.ParentRelations["FK_Security_TaxLot"];
				this.relationTaxLotTaxLotSeries = this.ChildRelations["FK_TaxLot_TaxLotSeries"];
			}
			
			/// <summary>
			/// Initializes a new instance of a TaxLot row.  Constructs a row from the builder.  Only for internal usage.
			/// </summary>
			/// <returns>A new row with the same schema as the table.</returns>
			protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder dataRowBuilder)
			{
				return new TaxLotRow(dataRowBuilder);
			}
			
			/// <summary>
			/// Raises the TaxLotRowChanged event.
			/// </summary>
			/// <param name="e">Provides data for the TaxLotRow changing and deleting events.</param>
			protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowChanged(e);
				if ((this.TaxLotRowChanged != null))
				{
					this.TaxLotRowChanged(this, new TaxLotRowChangeEventArgs(((TaxLotRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the TaxLotRowChanging event.
			/// </summary>
			/// <param name="e">Provides data for the TaxLotRow changing and deleting events.</param>
			protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowChanging(e);
				if ((this.TaxLotRowChanging != null))
				{
					this.TaxLotRowChanging(this, new TaxLotRowChangeEventArgs(((TaxLotRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the TaxLotRowDeleted event.
			/// </summary>
			/// <param name="e">Provides data for the TaxLotRow changing and deleting events.</param>
			protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowDeleted(e);
				if ((this.TaxLotRowDeleted != null))
				{
					this.TaxLotRowDeleted(this, new TaxLotRowChangeEventArgs(((TaxLotRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the TaxLotRowDeleting event.
			/// </summary>
			/// <param name="e">Provides data for the TaxLotRow changing and deleting events.</param>
			protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowDeleting(e);
				if ((this.TaxLotRowDeleting != null))
				{
					this.TaxLotRowDeleting(this, new TaxLotRowChangeEventArgs(((TaxLotRow)(e.Row)), e.Action));
				}
			}
		}
		
		/// <summary>
		/// The TaxLotSeries table.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public partial class TaxLotSeriesDataTable : global::System.Data.TypedTableBase<DataModel.TaxLotSeriesRow>
		{
			
			private global::System.Data.DataColumn columnAccountId;
			
			private global::System.Data.DataColumn columnDate;
			
			private global::System.Data.DataColumn columnDealSpread;
			
			private global::System.Data.DataColumn columnDuration;
			
			private global::System.Data.DataColumn columnExposureWeight;
			
			private global::System.Data.DataColumn columnExternalId0;
			
			private global::System.Data.DataColumn columnExternalId1;
			
			private global::System.Data.DataColumn columnLotExposureBase;
			
			private global::System.Data.DataColumn columnLotExposureLocal;
			
			private global::System.Data.DataColumn columnLotMarketValueBase;
			
			private global::System.Data.DataColumn columnLotMarketValueLocal;
			
			private global::System.Data.DataColumn columnLotQuantity;
			
			private global::System.Data.DataColumn columnMarketWeight;
			
			private global::System.Data.DataColumn columnMonthToDayLinkedReturn;
			
			private global::System.Data.DataColumn columnMonthToDayProfitAndLoss;
			
			private global::System.Data.DataColumn columnNetAssetValue;
			
			private global::System.Data.DataColumn columnOriginalBuyTransaction;
			
			private global::System.Data.DataColumn columnPositionSeriesId;
			
			private global::System.Data.DataColumn columnPositionTypeCode;
			
			private global::System.Data.DataColumn columnQualityLabel;
			
			private global::System.Data.DataColumn columnQuantity;
			
			private global::System.Data.DataColumn columnQuarterToDayLinkedReturn;
			
			private global::System.Data.DataColumn columnQuarterToDayProfitAndLoss;
			
			private global::System.Data.DataColumn columnRatingScore;
			
			private global::System.Data.DataColumn columnRowVersion;
			
			private global::System.Data.DataColumn columnSector;
			
			private global::System.Data.DataColumn columnSecurityId;
			
			private global::System.Data.DataColumn columnSecuritySeriesId;
			
			private global::System.Data.DataColumn columnStrategy;
			
			private global::System.Data.DataColumn columnStrategyDescription;
			
			private global::System.Data.DataColumn columnSumExposure;
			
			private global::System.Data.DataColumn columnSumMarketValue;
			
			private global::System.Data.DataColumn columnTaxLotId;
			
			private global::System.Data.DataColumn columnTaxLotSeriesId;
			
			private global::System.Data.DataColumn columnTrade;
			
			private global::System.Data.DataColumn columnWeight;
			
			private global::System.Data.DataColumn columnYearToDayLinkedReturn;
			
			private global::System.Data.DataColumn columnYearToDayProfitAndLoss;
			
			private global::Teraque.DataIndexCollection dataIndices;
			
			private global::Teraque.DataIndex indexTaxLotSeriesKey;
			
			private global::Teraque.DataIndex indexTaxLotSeriesKeyDateTaxLotId;
			
			private global::Teraque.DataIndex indexTaxLotSeriesKeyExternalId0;
			
			private global::Teraque.DataIndex indexTaxLotSeriesKeyExternalId1;
			
			private global::System.Data.DataRelation relationAccountTaxLotSeries;
			
			private global::System.Data.DataRelation relationPositionSeriesTaxLotSeries;
			
			private global::System.Data.DataRelation relationPositionTypeTaxLotSeries;
			
			private global::System.Data.DataRelation relationSecuritySeriesTaxLotSeries;
			
			private global::System.Data.DataRelation relationSecurityTaxLotSeries;
			
			private global::System.Data.DataRelation relationTaxLotTaxLotSeries;
			
			/// <summary>
			/// Creates the TaxLotSeries table.
			/// </summary>
			internal TaxLotSeriesDataTable()
			{
				// Initialize the object.
				this.TableName = "TaxLotSeries";
				this.dataIndices = new global::Teraque.DataIndexCollection();
				// The AccountId Column
				this.columnAccountId = new global::System.Data.DataColumn("AccountId", typeof(System.Guid), null, global::System.Data.MappingType.Element);
				this.columnAccountId.AllowDBNull = false;
				this.Columns.Add(this.columnAccountId);
				// The Date Column
				this.columnDate = new global::System.Data.DataColumn("Date", typeof(System.DateTime), null, global::System.Data.MappingType.Element);
				this.columnDate.AllowDBNull = false;
				this.Columns.Add(this.columnDate);
				// The DealSpread Column
				this.columnDealSpread = new global::System.Data.DataColumn("DealSpread", typeof(decimal), null, global::System.Data.MappingType.Element);
				this.columnDealSpread.AllowDBNull = false;
				this.columnDealSpread.DefaultValue = 0.0m;
				this.Columns.Add(this.columnDealSpread);
				// The Duration Column
				this.columnDuration = new global::System.Data.DataColumn("Duration", typeof(decimal), null, global::System.Data.MappingType.Element);
				this.columnDuration.AllowDBNull = false;
				this.columnDuration.DefaultValue = 0.0m;
				this.Columns.Add(this.columnDuration);
				// The ExposureWeight Column
				this.columnExposureWeight = new global::System.Data.DataColumn("ExposureWeight", typeof(decimal), null, global::System.Data.MappingType.Element);
				this.columnExposureWeight.AllowDBNull = false;
				this.columnExposureWeight.DefaultValue = 0.0m;
				this.Columns.Add(this.columnExposureWeight);
				// The ExternalId0 Column
				this.columnExternalId0 = new global::System.Data.DataColumn("ExternalId0", typeof(string), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnExternalId0);
				// The ExternalId1 Column
				this.columnExternalId1 = new global::System.Data.DataColumn("ExternalId1", typeof(string), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnExternalId1);
				// The LotExposureBase Column
				this.columnLotExposureBase = new global::System.Data.DataColumn("LotExposureBase", typeof(decimal), null, global::System.Data.MappingType.Element);
				this.columnLotExposureBase.AllowDBNull = false;
				this.columnLotExposureBase.DefaultValue = 0.0m;
				this.Columns.Add(this.columnLotExposureBase);
				// The LotExposureLocal Column
				this.columnLotExposureLocal = new global::System.Data.DataColumn("LotExposureLocal", typeof(decimal), null, global::System.Data.MappingType.Element);
				this.columnLotExposureLocal.AllowDBNull = false;
				this.columnLotExposureLocal.DefaultValue = 0.0m;
				this.Columns.Add(this.columnLotExposureLocal);
				// The LotMarketValueBase Column
				this.columnLotMarketValueBase = new global::System.Data.DataColumn("LotMarketValueBase", typeof(decimal), null, global::System.Data.MappingType.Element);
				this.columnLotMarketValueBase.AllowDBNull = false;
				this.columnLotMarketValueBase.DefaultValue = 0.0m;
				this.Columns.Add(this.columnLotMarketValueBase);
				// The LotMarketValueLocal Column
				this.columnLotMarketValueLocal = new global::System.Data.DataColumn("LotMarketValueLocal", typeof(decimal), null, global::System.Data.MappingType.Element);
				this.columnLotMarketValueLocal.AllowDBNull = false;
				this.columnLotMarketValueLocal.DefaultValue = 0.0m;
				this.Columns.Add(this.columnLotMarketValueLocal);
				// The LotQuantity Column
				this.columnLotQuantity = new global::System.Data.DataColumn("LotQuantity", typeof(decimal), null, global::System.Data.MappingType.Element);
				this.columnLotQuantity.AllowDBNull = false;
				this.columnLotQuantity.DefaultValue = 0.0m;
				this.Columns.Add(this.columnLotQuantity);
				// The MarketWeight Column
				this.columnMarketWeight = new global::System.Data.DataColumn("MarketWeight", typeof(decimal), null, global::System.Data.MappingType.Element);
				this.columnMarketWeight.AllowDBNull = false;
				this.columnMarketWeight.DefaultValue = 0.0m;
				this.Columns.Add(this.columnMarketWeight);
				// The MonthToDayLinkedReturn Column
				this.columnMonthToDayLinkedReturn = new global::System.Data.DataColumn("MonthToDayLinkedReturn", typeof(decimal), null, global::System.Data.MappingType.Element);
				this.columnMonthToDayLinkedReturn.AllowDBNull = false;
				this.columnMonthToDayLinkedReturn.DefaultValue = 0.0m;
				this.Columns.Add(this.columnMonthToDayLinkedReturn);
				// The MonthToDayProfitAndLoss Column
				this.columnMonthToDayProfitAndLoss = new global::System.Data.DataColumn("MonthToDayProfitAndLoss", typeof(decimal), null, global::System.Data.MappingType.Element);
				this.columnMonthToDayProfitAndLoss.AllowDBNull = false;
				this.columnMonthToDayProfitAndLoss.DefaultValue = 0.0m;
				this.Columns.Add(this.columnMonthToDayProfitAndLoss);
				// The NetAssetValue Column
				this.columnNetAssetValue = new global::System.Data.DataColumn("NetAssetValue", typeof(decimal), null, global::System.Data.MappingType.Element);
				this.columnNetAssetValue.AllowDBNull = false;
				this.columnNetAssetValue.DefaultValue = 0.0m;
				this.Columns.Add(this.columnNetAssetValue);
				// The OriginalBuyTransaction Column
				this.columnOriginalBuyTransaction = new global::System.Data.DataColumn("OriginalBuyTransaction", typeof(string), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnOriginalBuyTransaction);
				// The PositionSeriesId Column
				this.columnPositionSeriesId = new global::System.Data.DataColumn("PositionSeriesId", typeof(System.Guid), null, global::System.Data.MappingType.Element);
				this.columnPositionSeriesId.AllowDBNull = false;
				this.Columns.Add(this.columnPositionSeriesId);
				// The PositionTypeCode Column
				this.columnPositionTypeCode = new global::System.Data.DataColumn("PositionTypeCode", typeof(Teraque.PositionTypeCode), null, global::System.Data.MappingType.Element);
				this.columnPositionTypeCode.AllowDBNull = false;
				this.Columns.Add(this.columnPositionTypeCode);
				// The QualityLabel Column
				this.columnQualityLabel = new global::System.Data.DataColumn("QualityLabel", typeof(string), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnQualityLabel);
				// The Quantity Column
				this.columnQuantity = new global::System.Data.DataColumn("Quantity", typeof(decimal), null, global::System.Data.MappingType.Element);
				this.columnQuantity.AllowDBNull = false;
				this.columnQuantity.DefaultValue = 0.0m;
				this.Columns.Add(this.columnQuantity);
				// The QuarterToDayLinkedReturn Column
				this.columnQuarterToDayLinkedReturn = new global::System.Data.DataColumn("QuarterToDayLinkedReturn", typeof(decimal), null, global::System.Data.MappingType.Element);
				this.columnQuarterToDayLinkedReturn.AllowDBNull = false;
				this.columnQuarterToDayLinkedReturn.DefaultValue = 0.0m;
				this.Columns.Add(this.columnQuarterToDayLinkedReturn);
				// The QuarterToDayProfitAndLoss Column
				this.columnQuarterToDayProfitAndLoss = new global::System.Data.DataColumn("QuarterToDayProfitAndLoss", typeof(decimal), null, global::System.Data.MappingType.Element);
				this.columnQuarterToDayProfitAndLoss.AllowDBNull = false;
				this.columnQuarterToDayProfitAndLoss.DefaultValue = 0.0m;
				this.Columns.Add(this.columnQuarterToDayProfitAndLoss);
				// The RatingScore Column
				this.columnRatingScore = new global::System.Data.DataColumn("RatingScore", typeof(int), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnRatingScore);
				// The RowVersion Column
				this.columnRowVersion = new global::System.Data.DataColumn("RowVersion", typeof(long), null, global::System.Data.MappingType.Element);
				this.columnRowVersion.AllowDBNull = false;
				this.Columns.Add(this.columnRowVersion);
				// The Sector Column
				this.columnSector = new global::System.Data.DataColumn("Sector", typeof(string), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnSector);
				// The SecurityId Column
				this.columnSecurityId = new global::System.Data.DataColumn("SecurityId", typeof(System.Guid), null, global::System.Data.MappingType.Element);
				this.columnSecurityId.AllowDBNull = false;
				this.Columns.Add(this.columnSecurityId);
				// The SecuritySeriesId Column
				this.columnSecuritySeriesId = new global::System.Data.DataColumn("SecuritySeriesId", typeof(System.Guid), null, global::System.Data.MappingType.Element);
				this.columnSecuritySeriesId.AllowDBNull = false;
				this.Columns.Add(this.columnSecuritySeriesId);
				// The Strategy Column
				this.columnStrategy = new global::System.Data.DataColumn("Strategy", typeof(string), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnStrategy);
				// The StrategyDescription Column
				this.columnStrategyDescription = new global::System.Data.DataColumn("StrategyDescription", typeof(string), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnStrategyDescription);
				// The SumExposure Column
				this.columnSumExposure = new global::System.Data.DataColumn("SumExposure", typeof(decimal), null, global::System.Data.MappingType.Element);
				this.columnSumExposure.AllowDBNull = false;
				this.columnSumExposure.DefaultValue = 0.0m;
				this.Columns.Add(this.columnSumExposure);
				// The SumMarketValue Column
				this.columnSumMarketValue = new global::System.Data.DataColumn("SumMarketValue", typeof(decimal), null, global::System.Data.MappingType.Element);
				this.columnSumMarketValue.AllowDBNull = false;
				this.columnSumMarketValue.DefaultValue = 0.0m;
				this.Columns.Add(this.columnSumMarketValue);
				// The TaxLotId Column
				this.columnTaxLotId = new global::System.Data.DataColumn("TaxLotId", typeof(System.Guid), null, global::System.Data.MappingType.Element);
				this.columnTaxLotId.AllowDBNull = false;
				this.Columns.Add(this.columnTaxLotId);
				// The TaxLotSeriesId Column
				this.columnTaxLotSeriesId = new global::System.Data.DataColumn("TaxLotSeriesId", typeof(System.Guid), null, global::System.Data.MappingType.Element);
				this.columnTaxLotSeriesId.AllowDBNull = false;
				this.Columns.Add(this.columnTaxLotSeriesId);
				// The Trade Column
				this.columnTrade = new global::System.Data.DataColumn("Trade", typeof(string), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnTrade);
				// The Weight Column
				this.columnWeight = new global::System.Data.DataColumn("Weight", typeof(decimal), null, global::System.Data.MappingType.Element);
				this.columnWeight.AllowDBNull = false;
				this.columnWeight.DefaultValue = 0.0m;
				this.Columns.Add(this.columnWeight);
				// The YearToDayLinkedReturn Column
				this.columnYearToDayLinkedReturn = new global::System.Data.DataColumn("YearToDayLinkedReturn", typeof(decimal), null, global::System.Data.MappingType.Element);
				this.columnYearToDayLinkedReturn.AllowDBNull = false;
				this.columnYearToDayLinkedReturn.DefaultValue = 0.0m;
				this.Columns.Add(this.columnYearToDayLinkedReturn);
				// The YearToDayProfitAndLoss Column
				this.columnYearToDayProfitAndLoss = new global::System.Data.DataColumn("YearToDayProfitAndLoss", typeof(decimal), null, global::System.Data.MappingType.Element);
				this.columnYearToDayProfitAndLoss.AllowDBNull = false;
				this.columnYearToDayProfitAndLoss.DefaultValue = 0.0m;
				this.Columns.Add(this.columnYearToDayProfitAndLoss);
				// The TaxLotSeriesKey Index
				this.indexTaxLotSeriesKey = new TaxLotSeriesKeyIndex("TaxLotSeriesKey", new global::System.Data.DataColumn[] {
							this.columnTaxLotSeriesId});
				this.Indices.Add(this.indexTaxLotSeriesKey);
				// The TaxLotSeriesKeyDateTaxLotId Index
				this.indexTaxLotSeriesKeyDateTaxLotId = new TaxLotSeriesKeyDateTaxLotIdIndex("TaxLotSeriesKeyDateTaxLotId", new global::System.Data.DataColumn[] {
							this.columnDate,
							this.columnTaxLotId});
				this.Constraints.Add(new global::System.Data.UniqueConstraint(new global::System.Data.DataColumn[] {
								this.columnDate,
								this.columnTaxLotId}));
				this.Indices.Add(this.indexTaxLotSeriesKeyDateTaxLotId);
				// The TaxLotSeriesKeyExternalId0 Index
				this.indexTaxLotSeriesKeyExternalId0 = new TaxLotSeriesKeyExternalId0Index("TaxLotSeriesKeyExternalId0", new global::System.Data.DataColumn[] {
							this.columnExternalId0});
				this.Indices.Add(this.indexTaxLotSeriesKeyExternalId0);
				// The TaxLotSeriesKeyExternalId1 Index
				this.indexTaxLotSeriesKeyExternalId1 = new TaxLotSeriesKeyExternalId1Index("TaxLotSeriesKeyExternalId1", new global::System.Data.DataColumn[] {
							this.columnExternalId1});
				this.Indices.Add(this.indexTaxLotSeriesKeyExternalId1);
			}
			
			/// <summary>
			/// Gets the AccountId column of the TaxLotSeries table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn AccountIdColumn
			{
				get
				{
					return this.columnAccountId;
				}
			}
			
			/// <summary>
			/// Gets the parent relation between the Account and TaxLotSeries tables.
			/// </summary>
			public global::System.Data.DataRelation AccountTaxLotSeriesRelation
			{
				get
				{
					return this.relationAccountTaxLotSeries;
				}
			}
			
			/// <summary>
			/// Gets the number of rows in the TaxLotSeries table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public int Count
			{
				get
				{
					return this.Rows.Count;
				}
			}
			
			/// <summary>
			/// Gets the Date column of the TaxLotSeries table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn DateColumn
			{
				get
				{
					return this.columnDate;
				}
			}
			
			/// <summary>
			/// Gets the DealSpread column of the TaxLotSeries table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn DealSpreadColumn
			{
				get
				{
					return this.columnDealSpread;
				}
			}
			
			/// <summary>
			/// Gets the Duration column of the TaxLotSeries table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn DurationColumn
			{
				get
				{
					return this.columnDuration;
				}
			}
			
			/// <summary>
			/// Gets the ExposureWeight column of the TaxLotSeries table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn ExposureWeightColumn
			{
				get
				{
					return this.columnExposureWeight;
				}
			}
			
			/// <summary>
			/// Gets the ExternalId0 column of the TaxLotSeries table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn ExternalId0Column
			{
				get
				{
					return this.columnExternalId0;
				}
			}
			
			/// <summary>
			/// Gets the ExternalId1 column of the TaxLotSeries table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn ExternalId1Column
			{
				get
				{
					return this.columnExternalId1;
				}
			}
			
			/// <summary>
			/// Gets a collection of Teraque.DataModelGenerator.DataIndices on a table.
			/// </summary>
			public global::Teraque.DataIndexCollection Indices
			{
				get
				{
					return this.dataIndices;
				}
			}
			
			/// <summary>
			/// Indexer to a row in the TaxLotSeries table.
			/// </summary>
			/// <param name="index">The integer index of the row.</param>
			/// <returns>The TaxLotSeries row found at the given index.</returns>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public DataModel.TaxLotSeriesRow this[int index]
			{
				get
				{
					return ((DataModel.TaxLotSeriesRow)(this.Rows[index]));
				}
			}
			
			/// <summary>
			/// Gets the LotExposureBase column of the TaxLotSeries table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn LotExposureBaseColumn
			{
				get
				{
					return this.columnLotExposureBase;
				}
			}
			
			/// <summary>
			/// Gets the LotExposureLocal column of the TaxLotSeries table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn LotExposureLocalColumn
			{
				get
				{
					return this.columnLotExposureLocal;
				}
			}
			
			/// <summary>
			/// Gets the LotMarketValueBase column of the TaxLotSeries table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn LotMarketValueBaseColumn
			{
				get
				{
					return this.columnLotMarketValueBase;
				}
			}
			
			/// <summary>
			/// Gets the LotMarketValueLocal column of the TaxLotSeries table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn LotMarketValueLocalColumn
			{
				get
				{
					return this.columnLotMarketValueLocal;
				}
			}
			
			/// <summary>
			/// Gets the LotQuantity column of the TaxLotSeries table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn LotQuantityColumn
			{
				get
				{
					return this.columnLotQuantity;
				}
			}
			
			/// <summary>
			/// Gets the MarketWeight column of the TaxLotSeries table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn MarketWeightColumn
			{
				get
				{
					return this.columnMarketWeight;
				}
			}
			
			/// <summary>
			/// Gets the MonthToDayLinkedReturn column of the TaxLotSeries table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn MonthToDayLinkedReturnColumn
			{
				get
				{
					return this.columnMonthToDayLinkedReturn;
				}
			}
			
			/// <summary>
			/// Gets the MonthToDayProfitAndLoss column of the TaxLotSeries table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn MonthToDayProfitAndLossColumn
			{
				get
				{
					return this.columnMonthToDayProfitAndLoss;
				}
			}
			
			/// <summary>
			/// Gets the NetAssetValue column of the TaxLotSeries table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn NetAssetValueColumn
			{
				get
				{
					return this.columnNetAssetValue;
				}
			}
			
			/// <summary>
			/// Gets the OriginalBuyTransaction column of the TaxLotSeries table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn OriginalBuyTransactionColumn
			{
				get
				{
					return this.columnOriginalBuyTransaction;
				}
			}
			
			/// <summary>
			/// Gets the PositionSeriesId column of the TaxLotSeries table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn PositionSeriesIdColumn
			{
				get
				{
					return this.columnPositionSeriesId;
				}
			}
			
			/// <summary>
			/// Gets the parent relation between the PositionSeries and TaxLotSeries tables.
			/// </summary>
			public global::System.Data.DataRelation PositionSeriesTaxLotSeriesRelation
			{
				get
				{
					return this.relationPositionSeriesTaxLotSeries;
				}
			}
			
			/// <summary>
			/// Gets the PositionTypeCode column of the TaxLotSeries table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn PositionTypeCodeColumn
			{
				get
				{
					return this.columnPositionTypeCode;
				}
			}
			
			/// <summary>
			/// Gets the parent relation between the PositionType and TaxLotSeries tables.
			/// </summary>
			public global::System.Data.DataRelation PositionTypeTaxLotSeriesRelation
			{
				get
				{
					return this.relationPositionTypeTaxLotSeries;
				}
			}
			
			/// <summary>
			/// Gets the QualityLabel column of the TaxLotSeries table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn QualityLabelColumn
			{
				get
				{
					return this.columnQualityLabel;
				}
			}
			
			/// <summary>
			/// Gets the Quantity column of the TaxLotSeries table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn QuantityColumn
			{
				get
				{
					return this.columnQuantity;
				}
			}
			
			/// <summary>
			/// Gets the QuarterToDayLinkedReturn column of the TaxLotSeries table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn QuarterToDayLinkedReturnColumn
			{
				get
				{
					return this.columnQuarterToDayLinkedReturn;
				}
			}
			
			/// <summary>
			/// Gets the QuarterToDayProfitAndLoss column of the TaxLotSeries table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn QuarterToDayProfitAndLossColumn
			{
				get
				{
					return this.columnQuarterToDayProfitAndLoss;
				}
			}
			
			/// <summary>
			/// Gets the RatingScore column of the TaxLotSeries table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn RatingScoreColumn
			{
				get
				{
					return this.columnRatingScore;
				}
			}
			
			/// <summary>
			/// Gets the RowVersion column of the TaxLotSeries table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn RowVersionColumn
			{
				get
				{
					return this.columnRowVersion;
				}
			}
			
			/// <summary>
			/// Gets the Sector column of the TaxLotSeries table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn SectorColumn
			{
				get
				{
					return this.columnSector;
				}
			}
			
			/// <summary>
			/// Gets the SecurityId column of the TaxLotSeries table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn SecurityIdColumn
			{
				get
				{
					return this.columnSecurityId;
				}
			}
			
			/// <summary>
			/// Gets the SecuritySeriesId column of the TaxLotSeries table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn SecuritySeriesIdColumn
			{
				get
				{
					return this.columnSecuritySeriesId;
				}
			}
			
			/// <summary>
			/// Gets the parent relation between the SecuritySeries and TaxLotSeries tables.
			/// </summary>
			public global::System.Data.DataRelation SecuritySeriesTaxLotSeriesRelation
			{
				get
				{
					return this.relationSecuritySeriesTaxLotSeries;
				}
			}
			
			/// <summary>
			/// Gets the parent relation between the Security and TaxLotSeries tables.
			/// </summary>
			public global::System.Data.DataRelation SecurityTaxLotSeriesRelation
			{
				get
				{
					return this.relationSecurityTaxLotSeries;
				}
			}
			
			/// <summary>
			/// Gets the Strategy column of the TaxLotSeries table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn StrategyColumn
			{
				get
				{
					return this.columnStrategy;
				}
			}
			
			/// <summary>
			/// Gets the StrategyDescription column of the TaxLotSeries table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn StrategyDescriptionColumn
			{
				get
				{
					return this.columnStrategyDescription;
				}
			}
			
			/// <summary>
			/// Gets the SumExposure column of the TaxLotSeries table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn SumExposureColumn
			{
				get
				{
					return this.columnSumExposure;
				}
			}
			
			/// <summary>
			/// Gets the SumMarketValue column of the TaxLotSeries table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn SumMarketValueColumn
			{
				get
				{
					return this.columnSumMarketValue;
				}
			}
			
			/// <summary>
			/// Gets the TaxLotId column of the TaxLotSeries table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn TaxLotIdColumn
			{
				get
				{
					return this.columnTaxLotId;
				}
			}
			
			/// <summary>
			/// Gets the TaxLotSeriesId column of the TaxLotSeries table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn TaxLotSeriesIdColumn
			{
				get
				{
					return this.columnTaxLotSeriesId;
				}
			}
			
			/// <summary>
			/// Gets the TaxLotSeriesKey index on the TaxLotSeries table.
			/// </summary>
			public TaxLotSeriesKeyIndex TaxLotSeriesKey
			{
				get
				{
					return ((TaxLotSeriesKeyIndex)(this.indexTaxLotSeriesKey));
				}
			}
			
			/// <summary>
			/// Gets the TaxLotSeriesKeyDateTaxLotId index on the TaxLotSeries table.
			/// </summary>
			public TaxLotSeriesKeyDateTaxLotIdIndex TaxLotSeriesKeyDateTaxLotId
			{
				get
				{
					return ((TaxLotSeriesKeyDateTaxLotIdIndex)(this.indexTaxLotSeriesKeyDateTaxLotId));
				}
			}
			
			/// <summary>
			/// Gets the TaxLotSeriesKeyExternalId0 index on the TaxLotSeries table.
			/// </summary>
			public TaxLotSeriesKeyExternalId0Index TaxLotSeriesKeyExternalId0
			{
				get
				{
					return ((TaxLotSeriesKeyExternalId0Index)(this.indexTaxLotSeriesKeyExternalId0));
				}
			}
			
			/// <summary>
			/// Gets the TaxLotSeriesKeyExternalId1 index on the TaxLotSeries table.
			/// </summary>
			public TaxLotSeriesKeyExternalId1Index TaxLotSeriesKeyExternalId1
			{
				get
				{
					return ((TaxLotSeriesKeyExternalId1Index)(this.indexTaxLotSeriesKeyExternalId1));
				}
			}
			
			/// <summary>
			/// Gets the parent relation between the TaxLot and TaxLotSeries tables.
			/// </summary>
			public global::System.Data.DataRelation TaxLotTaxLotSeriesRelation
			{
				get
				{
					return this.relationTaxLotTaxLotSeries;
				}
			}
			
			/// <summary>
			/// Gets the Trade column of the TaxLotSeries table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn TradeColumn
			{
				get
				{
					return this.columnTrade;
				}
			}
			
			/// <summary>
			/// Gets the Weight column of the TaxLotSeries table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn WeightColumn
			{
				get
				{
					return this.columnWeight;
				}
			}
			
			/// <summary>
			/// Gets the YearToDayLinkedReturn column of the TaxLotSeries table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn YearToDayLinkedReturnColumn
			{
				get
				{
					return this.columnYearToDayLinkedReturn;
				}
			}
			
			/// <summary>
			/// Gets the YearToDayProfitAndLoss column of the TaxLotSeries table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn YearToDayProfitAndLossColumn
			{
				get
				{
					return this.columnYearToDayProfitAndLoss;
				}
			}
			
			/// <summary>
			/// Occurs after a TaxLotSeries row has been changed successfully.
			/// </summary>
			public event TaxLotSeriesRowChangeEventHandler TaxLotSeriesRowChanged;
			
			/// <summary>
			/// Occurs when a TaxLotSeries row is changing.
			/// </summary>
			public event TaxLotSeriesRowChangeEventHandler TaxLotSeriesRowChanging;
			
			/// <summary>
			/// Occurs after a TaxLotSeries row in the table has been deleted.
			/// </summary>
			public event TaxLotSeriesRowChangeEventHandler TaxLotSeriesRowDeleted;
			
			/// <summary>
			/// Occurs before a TaxLotSeries row in the table is about to be deleted.
			/// </summary>
			public event TaxLotSeriesRowChangeEventHandler TaxLotSeriesRowDeleting;
			
			/// <summary>
			/// Returns the type of the row in a TaxLotSeries table.
			/// </summary>
			/// <returns>The TaxLotSeriesRow type.</returns>
			protected override global::System.Type GetRowType()
			{
				return typeof(TaxLotSeriesRow);
			}
			
			/// <summary>
			/// Initializes the relation fields with the parent and child relations.
			/// </summary>
			internal void InitializeRelations()
			{
				this.relationAccountTaxLotSeries = this.ParentRelations["FK_Account_TaxLotSeries"];
				this.relationPositionSeriesTaxLotSeries = this.ParentRelations["FK_PositionSeries_TaxLotSeries"];
				this.relationPositionTypeTaxLotSeries = this.ParentRelations["FK_PositionType_TaxLotSeries"];
				this.relationSecurityTaxLotSeries = this.ParentRelations["FK_Security_TaxLotSeries"];
				this.relationSecuritySeriesTaxLotSeries = this.ParentRelations["FK_SecuritySeries_TaxLotSeries"];
				this.relationTaxLotTaxLotSeries = this.ParentRelations["FK_TaxLot_TaxLotSeries"];
			}
			
			/// <summary>
			/// Initializes a new instance of a TaxLotSeries row.  Constructs a row from the builder.  Only for internal usage.
			/// </summary>
			/// <returns>A new row with the same schema as the table.</returns>
			protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder dataRowBuilder)
			{
				return new TaxLotSeriesRow(dataRowBuilder);
			}
			
			/// <summary>
			/// Raises the TaxLotSeriesRowChanged event.
			/// </summary>
			/// <param name="e">Provides data for the TaxLotSeriesRow changing and deleting events.</param>
			protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowChanged(e);
				if ((this.TaxLotSeriesRowChanged != null))
				{
					this.TaxLotSeriesRowChanged(this, new TaxLotSeriesRowChangeEventArgs(((TaxLotSeriesRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the TaxLotSeriesRowChanging event.
			/// </summary>
			/// <param name="e">Provides data for the TaxLotSeriesRow changing and deleting events.</param>
			protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowChanging(e);
				if ((this.TaxLotSeriesRowChanging != null))
				{
					this.TaxLotSeriesRowChanging(this, new TaxLotSeriesRowChangeEventArgs(((TaxLotSeriesRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the TaxLotSeriesRowDeleted event.
			/// </summary>
			/// <param name="e">Provides data for the TaxLotSeriesRow changing and deleting events.</param>
			protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowDeleted(e);
				if ((this.TaxLotSeriesRowDeleted != null))
				{
					this.TaxLotSeriesRowDeleted(this, new TaxLotSeriesRowChangeEventArgs(((TaxLotSeriesRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the TaxLotSeriesRowDeleting event.
			/// </summary>
			/// <param name="e">Provides data for the TaxLotSeriesRow changing and deleting events.</param>
			protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowDeleting(e);
				if ((this.TaxLotSeriesRowDeleting != null))
				{
					this.TaxLotSeriesRowDeleting(this, new TaxLotSeriesRowChangeEventArgs(((TaxLotSeriesRow)(e.Row)), e.Action));
				}
			}
		}
		
		/// <summary>
		/// The TimeInForce table.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public partial class TimeInForceDataTable : global::System.Data.TypedTableBase<DataModel.TimeInForceRow>
		{
			
			private global::System.Data.DataColumn columnDescription;
			
			private global::System.Data.DataColumn columnExternalId0;
			
			private global::System.Data.DataColumn columnExternalId1;
			
			private global::System.Data.DataColumn columnExternalId2;
			
			private global::System.Data.DataColumn columnExternalId3;
			
			private global::System.Data.DataColumn columnMnemonic;
			
			private global::System.Data.DataColumn columnRowVersion;
			
			private global::System.Data.DataColumn columnSortOrder;
			
			private global::System.Data.DataColumn columnTimeInForceCode;
			
			private global::Teraque.DataIndexCollection dataIndices;
			
			private global::Teraque.DataIndex indexTimeInForceKey;
			
			private global::Teraque.DataIndex indexTimeInForceKeyExternalId0;
			
			private global::Teraque.DataIndex indexTimeInForceKeyExternalId1;
			
			private global::Teraque.DataIndex indexTimeInForceKeyExternalId2;
			
			private global::Teraque.DataIndex indexTimeInForceKeyExternalId3;
			
			private global::System.Data.DataRelation relationTimeInForceDestinationOrder;
			
			private global::System.Data.DataRelation relationTimeInForceSourceOrder;
			
			private global::System.Data.DataRelation relationTimeInForceWorkingOrder;
			
			/// <summary>
			/// Creates the TimeInForce table.
			/// </summary>
			internal TimeInForceDataTable()
			{
				// Initialize the object.
				this.TableName = "TimeInForce";
				this.dataIndices = new global::Teraque.DataIndexCollection();
				// The Description Column
				this.columnDescription = new global::System.Data.DataColumn("Description", typeof(string), null, global::System.Data.MappingType.Element);
				this.columnDescription.AllowDBNull = false;
				this.columnDescription.DefaultValue = "";
				this.Columns.Add(this.columnDescription);
				// The ExternalId0 Column
				this.columnExternalId0 = new global::System.Data.DataColumn("ExternalId0", typeof(string), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnExternalId0);
				// The ExternalId1 Column
				this.columnExternalId1 = new global::System.Data.DataColumn("ExternalId1", typeof(string), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnExternalId1);
				// The ExternalId2 Column
				this.columnExternalId2 = new global::System.Data.DataColumn("ExternalId2", typeof(string), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnExternalId2);
				// The ExternalId3 Column
				this.columnExternalId3 = new global::System.Data.DataColumn("ExternalId3", typeof(string), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnExternalId3);
				// The Mnemonic Column
				this.columnMnemonic = new global::System.Data.DataColumn("Mnemonic", typeof(string), null, global::System.Data.MappingType.Element);
				this.columnMnemonic.AllowDBNull = false;
				this.columnMnemonic.DefaultValue = "";
				this.Columns.Add(this.columnMnemonic);
				// The RowVersion Column
				this.columnRowVersion = new global::System.Data.DataColumn("RowVersion", typeof(long), null, global::System.Data.MappingType.Element);
				this.columnRowVersion.AllowDBNull = false;
				this.Columns.Add(this.columnRowVersion);
				// The SortOrder Column
				this.columnSortOrder = new global::System.Data.DataColumn("SortOrder", typeof(int), null, global::System.Data.MappingType.Element);
				this.columnSortOrder.AllowDBNull = false;
				this.columnSortOrder.DefaultValue = 0;
				this.Columns.Add(this.columnSortOrder);
				// The TimeInForceCode Column
				this.columnTimeInForceCode = new global::System.Data.DataColumn("TimeInForceCode", typeof(Teraque.TimeInForceCode), null, global::System.Data.MappingType.Element);
				this.columnTimeInForceCode.AllowDBNull = false;
				this.Columns.Add(this.columnTimeInForceCode);
				// The TimeInForceKey Index
				this.indexTimeInForceKey = new TimeInForceKeyIndex("TimeInForceKey", new global::System.Data.DataColumn[] {
							this.columnTimeInForceCode});
				this.Indices.Add(this.indexTimeInForceKey);
				// The TimeInForceKeyExternalId0 Index
				this.indexTimeInForceKeyExternalId0 = new TimeInForceKeyExternalId0Index("TimeInForceKeyExternalId0", new global::System.Data.DataColumn[] {
							this.columnExternalId0});
				this.Indices.Add(this.indexTimeInForceKeyExternalId0);
				// The TimeInForceKeyExternalId1 Index
				this.indexTimeInForceKeyExternalId1 = new TimeInForceKeyExternalId1Index("TimeInForceKeyExternalId1", new global::System.Data.DataColumn[] {
							this.columnExternalId1});
				this.Indices.Add(this.indexTimeInForceKeyExternalId1);
				// The TimeInForceKeyExternalId2 Index
				this.indexTimeInForceKeyExternalId2 = new TimeInForceKeyExternalId2Index("TimeInForceKeyExternalId2", new global::System.Data.DataColumn[] {
							this.columnExternalId2});
				this.Indices.Add(this.indexTimeInForceKeyExternalId2);
				// The TimeInForceKeyExternalId3 Index
				this.indexTimeInForceKeyExternalId3 = new TimeInForceKeyExternalId3Index("TimeInForceKeyExternalId3", new global::System.Data.DataColumn[] {
							this.columnExternalId3});
				this.Indices.Add(this.indexTimeInForceKeyExternalId3);
			}
			
			/// <summary>
			/// Gets the number of rows in the TimeInForce table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public int Count
			{
				get
				{
					return this.Rows.Count;
				}
			}
			
			/// <summary>
			/// Gets the Description column of the TimeInForce table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn DescriptionColumn
			{
				get
				{
					return this.columnDescription;
				}
			}
			
			/// <summary>
			/// Gets the ExternalId0 column of the TimeInForce table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn ExternalId0Column
			{
				get
				{
					return this.columnExternalId0;
				}
			}
			
			/// <summary>
			/// Gets the ExternalId1 column of the TimeInForce table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn ExternalId1Column
			{
				get
				{
					return this.columnExternalId1;
				}
			}
			
			/// <summary>
			/// Gets the ExternalId2 column of the TimeInForce table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn ExternalId2Column
			{
				get
				{
					return this.columnExternalId2;
				}
			}
			
			/// <summary>
			/// Gets the ExternalId3 column of the TimeInForce table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn ExternalId3Column
			{
				get
				{
					return this.columnExternalId3;
				}
			}
			
			/// <summary>
			/// Gets a collection of Teraque.DataModelGenerator.DataIndices on a table.
			/// </summary>
			public global::Teraque.DataIndexCollection Indices
			{
				get
				{
					return this.dataIndices;
				}
			}
			
			/// <summary>
			/// Indexer to a row in the TimeInForce table.
			/// </summary>
			/// <param name="index">The integer index of the row.</param>
			/// <returns>The TimeInForce row found at the given index.</returns>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public DataModel.TimeInForceRow this[int index]
			{
				get
				{
					return ((DataModel.TimeInForceRow)(this.Rows[index]));
				}
			}
			
			/// <summary>
			/// Gets the Mnemonic column of the TimeInForce table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn MnemonicColumn
			{
				get
				{
					return this.columnMnemonic;
				}
			}
			
			/// <summary>
			/// Gets the RowVersion column of the TimeInForce table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn RowVersionColumn
			{
				get
				{
					return this.columnRowVersion;
				}
			}
			
			/// <summary>
			/// Gets the SortOrder column of the TimeInForce table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn SortOrderColumn
			{
				get
				{
					return this.columnSortOrder;
				}
			}
			
			/// <summary>
			/// Gets the TimeInForceCode column of the TimeInForce table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn TimeInForceCodeColumn
			{
				get
				{
					return this.columnTimeInForceCode;
				}
			}
			
			/// <summary>
			/// Gets the child relation between the TimeInForce and DestinationOrder tables.
			/// </summary>
			internal global::System.Data.DataRelation TimeInForceDestinationOrderRelation
			{
				get
				{
					return this.relationTimeInForceDestinationOrder;
				}
			}
			
			/// <summary>
			/// Gets the TimeInForceKey index on the TimeInForce table.
			/// </summary>
			public TimeInForceKeyIndex TimeInForceKey
			{
				get
				{
					return ((TimeInForceKeyIndex)(this.indexTimeInForceKey));
				}
			}
			
			/// <summary>
			/// Gets the TimeInForceKeyExternalId0 index on the TimeInForce table.
			/// </summary>
			public TimeInForceKeyExternalId0Index TimeInForceKeyExternalId0
			{
				get
				{
					return ((TimeInForceKeyExternalId0Index)(this.indexTimeInForceKeyExternalId0));
				}
			}
			
			/// <summary>
			/// Gets the TimeInForceKeyExternalId1 index on the TimeInForce table.
			/// </summary>
			public TimeInForceKeyExternalId1Index TimeInForceKeyExternalId1
			{
				get
				{
					return ((TimeInForceKeyExternalId1Index)(this.indexTimeInForceKeyExternalId1));
				}
			}
			
			/// <summary>
			/// Gets the TimeInForceKeyExternalId2 index on the TimeInForce table.
			/// </summary>
			public TimeInForceKeyExternalId2Index TimeInForceKeyExternalId2
			{
				get
				{
					return ((TimeInForceKeyExternalId2Index)(this.indexTimeInForceKeyExternalId2));
				}
			}
			
			/// <summary>
			/// Gets the TimeInForceKeyExternalId3 index on the TimeInForce table.
			/// </summary>
			public TimeInForceKeyExternalId3Index TimeInForceKeyExternalId3
			{
				get
				{
					return ((TimeInForceKeyExternalId3Index)(this.indexTimeInForceKeyExternalId3));
				}
			}
			
			/// <summary>
			/// Gets the child relation between the TimeInForce and SourceOrder tables.
			/// </summary>
			internal global::System.Data.DataRelation TimeInForceSourceOrderRelation
			{
				get
				{
					return this.relationTimeInForceSourceOrder;
				}
			}
			
			/// <summary>
			/// Gets the child relation between the TimeInForce and WorkingOrder tables.
			/// </summary>
			internal global::System.Data.DataRelation TimeInForceWorkingOrderRelation
			{
				get
				{
					return this.relationTimeInForceWorkingOrder;
				}
			}
			
			/// <summary>
			/// Occurs after a TimeInForce row has been changed successfully.
			/// </summary>
			public event TimeInForceRowChangeEventHandler TimeInForceRowChanged;
			
			/// <summary>
			/// Occurs when a TimeInForce row is changing.
			/// </summary>
			public event TimeInForceRowChangeEventHandler TimeInForceRowChanging;
			
			/// <summary>
			/// Occurs after a TimeInForce row in the table has been deleted.
			/// </summary>
			public event TimeInForceRowChangeEventHandler TimeInForceRowDeleted;
			
			/// <summary>
			/// Occurs before a TimeInForce row in the table is about to be deleted.
			/// </summary>
			public event TimeInForceRowChangeEventHandler TimeInForceRowDeleting;
			
			/// <summary>
			/// Returns the type of the row in a TimeInForce table.
			/// </summary>
			/// <returns>The TimeInForceRow type.</returns>
			protected override global::System.Type GetRowType()
			{
				return typeof(TimeInForceRow);
			}
			
			/// <summary>
			/// Initializes the relation fields with the parent and child relations.
			/// </summary>
			internal void InitializeRelations()
			{
				this.relationTimeInForceDestinationOrder = this.ChildRelations["FK_TimeInForce_DestinationOrder"];
				this.relationTimeInForceSourceOrder = this.ChildRelations["FK_TimeInForce_SourceOrder"];
				this.relationTimeInForceWorkingOrder = this.ChildRelations["FK_TimeInForce_WorkingOrder"];
			}
			
			/// <summary>
			/// Initializes a new instance of a TimeInForce row.  Constructs a row from the builder.  Only for internal usage.
			/// </summary>
			/// <returns>A new row with the same schema as the table.</returns>
			protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder dataRowBuilder)
			{
				return new TimeInForceRow(dataRowBuilder);
			}
			
			/// <summary>
			/// Raises the TimeInForceRowChanged event.
			/// </summary>
			/// <param name="e">Provides data for the TimeInForceRow changing and deleting events.</param>
			protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowChanged(e);
				if ((this.TimeInForceRowChanged != null))
				{
					this.TimeInForceRowChanged(this, new TimeInForceRowChangeEventArgs(((TimeInForceRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the TimeInForceRowChanging event.
			/// </summary>
			/// <param name="e">Provides data for the TimeInForceRow changing and deleting events.</param>
			protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowChanging(e);
				if ((this.TimeInForceRowChanging != null))
				{
					this.TimeInForceRowChanging(this, new TimeInForceRowChangeEventArgs(((TimeInForceRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the TimeInForceRowDeleted event.
			/// </summary>
			/// <param name="e">Provides data for the TimeInForceRow changing and deleting events.</param>
			protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowDeleted(e);
				if ((this.TimeInForceRowDeleted != null))
				{
					this.TimeInForceRowDeleted(this, new TimeInForceRowChangeEventArgs(((TimeInForceRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the TimeInForceRowDeleting event.
			/// </summary>
			/// <param name="e">Provides data for the TimeInForceRow changing and deleting events.</param>
			protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowDeleting(e);
				if ((this.TimeInForceRowDeleting != null))
				{
					this.TimeInForceRowDeleting(this, new TimeInForceRowChangeEventArgs(((TimeInForceRow)(e.Row)), e.Action));
				}
			}
		}
		
		/// <summary>
		/// The TimeUnit table.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public partial class TimeUnitDataTable : global::System.Data.TypedTableBase<DataModel.TimeUnitRow>
		{
			
			private global::System.Data.DataColumn columnExternalId0;
			
			private global::System.Data.DataColumn columnInDays;
			
			private global::System.Data.DataColumn columnName;
			
			private global::System.Data.DataColumn columnRowVersion;
			
			private global::System.Data.DataColumn columnTimeUnitCode;
			
			private global::Teraque.DataIndexCollection dataIndices;
			
			private global::Teraque.DataIndex indexTimeUnitKey;
			
			private global::Teraque.DataIndex indexTimeUnitKeyExternalId0;
			
			/// <summary>
			/// Creates the TimeUnit table.
			/// </summary>
			internal TimeUnitDataTable()
			{
				// Initialize the object.
				this.TableName = "TimeUnit";
				this.dataIndices = new global::Teraque.DataIndexCollection();
				// The ExternalId0 Column
				this.columnExternalId0 = new global::System.Data.DataColumn("ExternalId0", typeof(string), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnExternalId0);
				// The InDays Column
				this.columnInDays = new global::System.Data.DataColumn("InDays", typeof(decimal), null, global::System.Data.MappingType.Element);
				this.columnInDays.AllowDBNull = false;
				this.columnInDays.DefaultValue = 0.0m;
				this.Columns.Add(this.columnInDays);
				// The Name Column
				this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnName);
				// The RowVersion Column
				this.columnRowVersion = new global::System.Data.DataColumn("RowVersion", typeof(long), null, global::System.Data.MappingType.Element);
				this.columnRowVersion.AllowDBNull = false;
				this.Columns.Add(this.columnRowVersion);
				// The TimeUnitCode Column
				this.columnTimeUnitCode = new global::System.Data.DataColumn("TimeUnitCode", typeof(Teraque.TimeUnitCode), null, global::System.Data.MappingType.Element);
				this.columnTimeUnitCode.AllowDBNull = false;
				this.Columns.Add(this.columnTimeUnitCode);
				// The TimeUnitKey Index
				this.indexTimeUnitKey = new TimeUnitKeyIndex("TimeUnitKey", new global::System.Data.DataColumn[] {
							this.columnTimeUnitCode});
				this.Indices.Add(this.indexTimeUnitKey);
				// The TimeUnitKeyExternalId0 Index
				this.indexTimeUnitKeyExternalId0 = new TimeUnitKeyExternalId0Index("TimeUnitKeyExternalId0", new global::System.Data.DataColumn[] {
							this.columnExternalId0});
				this.Indices.Add(this.indexTimeUnitKeyExternalId0);
			}
			
			/// <summary>
			/// Gets the number of rows in the TimeUnit table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public int Count
			{
				get
				{
					return this.Rows.Count;
				}
			}
			
			/// <summary>
			/// Gets the ExternalId0 column of the TimeUnit table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn ExternalId0Column
			{
				get
				{
					return this.columnExternalId0;
				}
			}
			
			/// <summary>
			/// Gets the InDays column of the TimeUnit table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn InDaysColumn
			{
				get
				{
					return this.columnInDays;
				}
			}
			
			/// <summary>
			/// Gets a collection of Teraque.DataModelGenerator.DataIndices on a table.
			/// </summary>
			public global::Teraque.DataIndexCollection Indices
			{
				get
				{
					return this.dataIndices;
				}
			}
			
			/// <summary>
			/// Indexer to a row in the TimeUnit table.
			/// </summary>
			/// <param name="index">The integer index of the row.</param>
			/// <returns>The TimeUnit row found at the given index.</returns>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public DataModel.TimeUnitRow this[int index]
			{
				get
				{
					return ((DataModel.TimeUnitRow)(this.Rows[index]));
				}
			}
			
			/// <summary>
			/// Gets the Name column of the TimeUnit table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn NameColumn
			{
				get
				{
					return this.columnName;
				}
			}
			
			/// <summary>
			/// Gets the RowVersion column of the TimeUnit table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn RowVersionColumn
			{
				get
				{
					return this.columnRowVersion;
				}
			}
			
			/// <summary>
			/// Gets the TimeUnitCode column of the TimeUnit table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn TimeUnitCodeColumn
			{
				get
				{
					return this.columnTimeUnitCode;
				}
			}
			
			/// <summary>
			/// Gets the TimeUnitKey index on the TimeUnit table.
			/// </summary>
			public TimeUnitKeyIndex TimeUnitKey
			{
				get
				{
					return ((TimeUnitKeyIndex)(this.indexTimeUnitKey));
				}
			}
			
			/// <summary>
			/// Gets the TimeUnitKeyExternalId0 index on the TimeUnit table.
			/// </summary>
			public TimeUnitKeyExternalId0Index TimeUnitKeyExternalId0
			{
				get
				{
					return ((TimeUnitKeyExternalId0Index)(this.indexTimeUnitKeyExternalId0));
				}
			}
			
			/// <summary>
			/// Occurs after a TimeUnit row has been changed successfully.
			/// </summary>
			public event TimeUnitRowChangeEventHandler TimeUnitRowChanged;
			
			/// <summary>
			/// Occurs when a TimeUnit row is changing.
			/// </summary>
			public event TimeUnitRowChangeEventHandler TimeUnitRowChanging;
			
			/// <summary>
			/// Occurs after a TimeUnit row in the table has been deleted.
			/// </summary>
			public event TimeUnitRowChangeEventHandler TimeUnitRowDeleted;
			
			/// <summary>
			/// Occurs before a TimeUnit row in the table is about to be deleted.
			/// </summary>
			public event TimeUnitRowChangeEventHandler TimeUnitRowDeleting;
			
			/// <summary>
			/// Returns the type of the row in a TimeUnit table.
			/// </summary>
			/// <returns>The TimeUnitRow type.</returns>
			protected override global::System.Type GetRowType()
			{
				return typeof(TimeUnitRow);
			}
			
			/// <summary>
			/// Initializes the relation fields with the parent and child relations.
			/// </summary>
			internal void InitializeRelations()
			{
			}
			
			/// <summary>
			/// Initializes a new instance of a TimeUnit row.  Constructs a row from the builder.  Only for internal usage.
			/// </summary>
			/// <returns>A new row with the same schema as the table.</returns>
			protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder dataRowBuilder)
			{
				return new TimeUnitRow(dataRowBuilder);
			}
			
			/// <summary>
			/// Raises the TimeUnitRowChanged event.
			/// </summary>
			/// <param name="e">Provides data for the TimeUnitRow changing and deleting events.</param>
			protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowChanged(e);
				if ((this.TimeUnitRowChanged != null))
				{
					this.TimeUnitRowChanged(this, new TimeUnitRowChangeEventArgs(((TimeUnitRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the TimeUnitRowChanging event.
			/// </summary>
			/// <param name="e">Provides data for the TimeUnitRow changing and deleting events.</param>
			protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowChanging(e);
				if ((this.TimeUnitRowChanging != null))
				{
					this.TimeUnitRowChanging(this, new TimeUnitRowChangeEventArgs(((TimeUnitRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the TimeUnitRowDeleted event.
			/// </summary>
			/// <param name="e">Provides data for the TimeUnitRow changing and deleting events.</param>
			protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowDeleted(e);
				if ((this.TimeUnitRowDeleted != null))
				{
					this.TimeUnitRowDeleted(this, new TimeUnitRowChangeEventArgs(((TimeUnitRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the TimeUnitRowDeleting event.
			/// </summary>
			/// <param name="e">Provides data for the TimeUnitRow changing and deleting events.</param>
			protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowDeleting(e);
				if ((this.TimeUnitRowDeleting != null))
				{
					this.TimeUnitRowDeleting(this, new TimeUnitRowChangeEventArgs(((TimeUnitRow)(e.Row)), e.Action));
				}
			}
		}
		
		/// <summary>
		/// The Trader table.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public partial class TraderDataTable : global::System.Data.TypedTableBase<DataModel.TraderRow>
		{
			
			private global::System.Data.DataColumn columnAddress1;
			
			private global::System.Data.DataColumn columnAddress2;
			
			private global::System.Data.DataColumn columnAddress3;
			
			private global::System.Data.DataColumn columnCommissionMaximum;
			
			private global::System.Data.DataColumn columnCommissionMinimum;
			
			private global::System.Data.DataColumn columnCommissionRate;
			
			private global::System.Data.DataColumn columnCommissionRateTypeCode;
			
			private global::System.Data.DataColumn columnCrossingCode;
			
			private global::System.Data.DataColumn columnDefaultAccountId;
			
			private global::System.Data.DataColumn columnDefaultBlotterId;
			
			private global::System.Data.DataColumn columnEmailAddress;
			
			private global::System.Data.DataColumn columnFixAccountId;
			
			private global::System.Data.DataColumn columnIsAgencyMatch;
			
			private global::System.Data.DataColumn columnIsBrokerMatch;
			
			private global::System.Data.DataColumn columnIsCommissionChangeAllowed;
			
			private global::System.Data.DataColumn columnIsEditExecutionsAllowed;
			
			private global::System.Data.DataColumn columnIsHedgeMatch;
			
			private global::System.Data.DataColumn columnIsHeld;
			
			private global::System.Data.DataColumn columnIsInstitutionMatch;
			
			private global::System.Data.DataColumn columnLastDeletedOrder;
			
			private global::System.Data.DataColumn columnLastFilledOrder;
			
			private global::System.Data.DataColumn columnLastFilledSourceOrder;
			
			private global::System.Data.DataColumn columnLastTrade;
			
			private global::System.Data.DataColumn columnLotSizeDefault;
			
			private global::System.Data.DataColumn columnMarketSleep;
			
			private global::System.Data.DataColumn columnMaximumVolatilityDefault;
			
			private global::System.Data.DataColumn columnNewsFreeTimeDefault;
			
			private global::System.Data.DataColumn columnOatsAccountType;
			
			private global::System.Data.DataColumn columnOatsOrigDeptId;
			
			private global::System.Data.DataColumn columnOrderMaximumLimitDelta;
			
			private global::System.Data.DataColumn columnOrderMaximumMarketValue;
			
			private global::System.Data.DataColumn columnOrderMaximumQuantity;
			
			private global::System.Data.DataColumn columnOrderWarningMarketValue;
			
			private global::System.Data.DataColumn columnOrderWarningQuantity;
			
			private global::System.Data.DataColumn columnPhone;
			
			private global::System.Data.DataColumn columnReviewWindow;
			
			private global::System.Data.DataColumn columnRowVersion;
			
			private global::System.Data.DataColumn columnScraperConfigurationString;
			
			private global::System.Data.DataColumn columnStartTimeDefault;
			
			private global::System.Data.DataColumn columnStopTimeDefault;
			
			private global::System.Data.DataColumn columnTagId;
			
			private global::System.Data.DataColumn columnTraderId;
			
			private global::Teraque.DataIndexCollection dataIndices;
			
			private global::Teraque.DataIndex indexTraderKey;
			
			private global::System.Data.DataRelation relationBlotterTrader;
			
			private global::System.Data.DataRelation relationTraderBrokerAccount;
			
			private global::System.Data.DataRelation relationTraderDestinationOrder;
			
			private global::System.Data.DataRelation relationTraderTraderVolumeSetting;
			
			private global::System.Data.DataRelation relationUserTrader;
			
			/// <summary>
			/// Creates the Trader table.
			/// </summary>
			internal TraderDataTable()
			{
				// Initialize the object.
				this.TableName = "Trader";
				this.dataIndices = new global::Teraque.DataIndexCollection();
				// The Address1 Column
				this.columnAddress1 = new global::System.Data.DataColumn("Address1", typeof(string), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnAddress1);
				// The Address2 Column
				this.columnAddress2 = new global::System.Data.DataColumn("Address2", typeof(string), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnAddress2);
				// The Address3 Column
				this.columnAddress3 = new global::System.Data.DataColumn("Address3", typeof(string), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnAddress3);
				// The CommissionMaximum Column
				this.columnCommissionMaximum = new global::System.Data.DataColumn("CommissionMaximum", typeof(decimal), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnCommissionMaximum);
				// The CommissionMinimum Column
				this.columnCommissionMinimum = new global::System.Data.DataColumn("CommissionMinimum", typeof(decimal), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnCommissionMinimum);
				// The CommissionRate Column
				this.columnCommissionRate = new global::System.Data.DataColumn("CommissionRate", typeof(decimal), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnCommissionRate);
				// The CommissionRateTypeCode Column
				this.columnCommissionRateTypeCode = new global::System.Data.DataColumn("CommissionRateTypeCode", typeof(int), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnCommissionRateTypeCode);
				// The CrossingCode Column
				this.columnCrossingCode = new global::System.Data.DataColumn("CrossingCode", typeof(Teraque.CrossingCode), null, global::System.Data.MappingType.Element);
				this.columnCrossingCode.AllowDBNull = false;
				this.Columns.Add(this.columnCrossingCode);
				// The DefaultAccountId Column
				this.columnDefaultAccountId = new global::System.Data.DataColumn("DefaultAccountId", typeof(System.Guid), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnDefaultAccountId);
				// The DefaultBlotterId Column
				this.columnDefaultBlotterId = new global::System.Data.DataColumn("DefaultBlotterId", typeof(System.Guid), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnDefaultBlotterId);
				// The EmailAddress Column
				this.columnEmailAddress = new global::System.Data.DataColumn("EmailAddress", typeof(string), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnEmailAddress);
				// The FixAccountId Column
				this.columnFixAccountId = new global::System.Data.DataColumn("FixAccountId", typeof(string), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnFixAccountId);
				// The IsAgencyMatch Column
				this.columnIsAgencyMatch = new global::System.Data.DataColumn("IsAgencyMatch", typeof(bool), null, global::System.Data.MappingType.Element);
				this.columnIsAgencyMatch.AllowDBNull = false;
				this.columnIsAgencyMatch.DefaultValue = false;
				this.Columns.Add(this.columnIsAgencyMatch);
				// The IsBrokerMatch Column
				this.columnIsBrokerMatch = new global::System.Data.DataColumn("IsBrokerMatch", typeof(bool), null, global::System.Data.MappingType.Element);
				this.columnIsBrokerMatch.AllowDBNull = false;
				this.columnIsBrokerMatch.DefaultValue = false;
				this.Columns.Add(this.columnIsBrokerMatch);
				// The IsCommissionChangeAllowed Column
				this.columnIsCommissionChangeAllowed = new global::System.Data.DataColumn("IsCommissionChangeAllowed", typeof(bool), null, global::System.Data.MappingType.Element);
				this.columnIsCommissionChangeAllowed.AllowDBNull = false;
				this.columnIsCommissionChangeAllowed.DefaultValue = false;
				this.Columns.Add(this.columnIsCommissionChangeAllowed);
				// The IsEditExecutionsAllowed Column
				this.columnIsEditExecutionsAllowed = new global::System.Data.DataColumn("IsEditExecutionsAllowed", typeof(bool), null, global::System.Data.MappingType.Element);
				this.columnIsEditExecutionsAllowed.AllowDBNull = false;
				this.columnIsEditExecutionsAllowed.DefaultValue = false;
				this.Columns.Add(this.columnIsEditExecutionsAllowed);
				// The IsHedgeMatch Column
				this.columnIsHedgeMatch = new global::System.Data.DataColumn("IsHedgeMatch", typeof(bool), null, global::System.Data.MappingType.Element);
				this.columnIsHedgeMatch.AllowDBNull = false;
				this.columnIsHedgeMatch.DefaultValue = false;
				this.Columns.Add(this.columnIsHedgeMatch);
				// The IsHeld Column
				this.columnIsHeld = new global::System.Data.DataColumn("IsHeld", typeof(bool), null, global::System.Data.MappingType.Element);
				this.columnIsHeld.AllowDBNull = false;
				this.columnIsHeld.DefaultValue = false;
				this.Columns.Add(this.columnIsHeld);
				// The IsInstitutionMatch Column
				this.columnIsInstitutionMatch = new global::System.Data.DataColumn("IsInstitutionMatch", typeof(bool), null, global::System.Data.MappingType.Element);
				this.columnIsInstitutionMatch.AllowDBNull = false;
				this.columnIsInstitutionMatch.DefaultValue = false;
				this.Columns.Add(this.columnIsInstitutionMatch);
				// The LastDeletedOrder Column
				this.columnLastDeletedOrder = new global::System.Data.DataColumn("LastDeletedOrder", typeof(System.DateTime), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnLastDeletedOrder);
				// The LastFilledOrder Column
				this.columnLastFilledOrder = new global::System.Data.DataColumn("LastFilledOrder", typeof(System.DateTime), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnLastFilledOrder);
				// The LastFilledSourceOrder Column
				this.columnLastFilledSourceOrder = new global::System.Data.DataColumn("LastFilledSourceOrder", typeof(System.DateTime), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnLastFilledSourceOrder);
				// The LastTrade Column
				this.columnLastTrade = new global::System.Data.DataColumn("LastTrade", typeof(System.DateTime), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnLastTrade);
				// The LotSizeDefault Column
				this.columnLotSizeDefault = new global::System.Data.DataColumn("LotSizeDefault", typeof(int), null, global::System.Data.MappingType.Element);
				this.columnLotSizeDefault.AllowDBNull = false;
				this.columnLotSizeDefault.DefaultValue = 0;
				this.Columns.Add(this.columnLotSizeDefault);
				// The MarketSleep Column
				this.columnMarketSleep = new global::System.Data.DataColumn("MarketSleep", typeof(int), null, global::System.Data.MappingType.Element);
				this.columnMarketSleep.AllowDBNull = false;
				this.columnMarketSleep.DefaultValue = 0;
				this.Columns.Add(this.columnMarketSleep);
				// The MaximumVolatilityDefault Column
				this.columnMaximumVolatilityDefault = new global::System.Data.DataColumn("MaximumVolatilityDefault", typeof(decimal), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnMaximumVolatilityDefault);
				// The NewsFreeTimeDefault Column
				this.columnNewsFreeTimeDefault = new global::System.Data.DataColumn("NewsFreeTimeDefault", typeof(int), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnNewsFreeTimeDefault);
				// The OatsAccountType Column
				this.columnOatsAccountType = new global::System.Data.DataColumn("OatsAccountType", typeof(string), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnOatsAccountType);
				// The OatsOrigDeptId Column
				this.columnOatsOrigDeptId = new global::System.Data.DataColumn("OatsOrigDeptId", typeof(string), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnOatsOrigDeptId);
				// The OrderMaximumLimitDelta Column
				this.columnOrderMaximumLimitDelta = new global::System.Data.DataColumn("OrderMaximumLimitDelta", typeof(decimal), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnOrderMaximumLimitDelta);
				// The OrderMaximumMarketValue Column
				this.columnOrderMaximumMarketValue = new global::System.Data.DataColumn("OrderMaximumMarketValue", typeof(decimal), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnOrderMaximumMarketValue);
				// The OrderMaximumQuantity Column
				this.columnOrderMaximumQuantity = new global::System.Data.DataColumn("OrderMaximumQuantity", typeof(decimal), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnOrderMaximumQuantity);
				// The OrderWarningMarketValue Column
				this.columnOrderWarningMarketValue = new global::System.Data.DataColumn("OrderWarningMarketValue", typeof(decimal), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnOrderWarningMarketValue);
				// The OrderWarningQuantity Column
				this.columnOrderWarningQuantity = new global::System.Data.DataColumn("OrderWarningQuantity", typeof(decimal), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnOrderWarningQuantity);
				// The Phone Column
				this.columnPhone = new global::System.Data.DataColumn("Phone", typeof(string), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnPhone);
				// The ReviewWindow Column
				this.columnReviewWindow = new global::System.Data.DataColumn("ReviewWindow", typeof(int), null, global::System.Data.MappingType.Element);
				this.columnReviewWindow.AllowDBNull = false;
				this.columnReviewWindow.DefaultValue = 0;
				this.Columns.Add(this.columnReviewWindow);
				// The RowVersion Column
				this.columnRowVersion = new global::System.Data.DataColumn("RowVersion", typeof(long), null, global::System.Data.MappingType.Element);
				this.columnRowVersion.AllowDBNull = false;
				this.Columns.Add(this.columnRowVersion);
				// The ScraperConfigurationString Column
				this.columnScraperConfigurationString = new global::System.Data.DataColumn("ScraperConfigurationString", typeof(string), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnScraperConfigurationString);
				// The StartTimeDefault Column
				this.columnStartTimeDefault = new global::System.Data.DataColumn("StartTimeDefault", typeof(System.DateTime), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnStartTimeDefault);
				// The StopTimeDefault Column
				this.columnStopTimeDefault = new global::System.Data.DataColumn("StopTimeDefault", typeof(System.DateTime), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnStopTimeDefault);
				// The TagId Column
				this.columnTagId = new global::System.Data.DataColumn("TagId", typeof(string), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnTagId);
				// The TraderId Column
				this.columnTraderId = new global::System.Data.DataColumn("TraderId", typeof(System.Guid), null, global::System.Data.MappingType.Element);
				this.columnTraderId.AllowDBNull = false;
				this.Columns.Add(this.columnTraderId);
				// The TraderKey Index
				this.indexTraderKey = new TraderKeyIndex("TraderKey", new global::System.Data.DataColumn[] {
							this.columnTraderId});
				this.Indices.Add(this.indexTraderKey);
			}
			
			/// <summary>
			/// Gets the Address1 column of the Trader table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn Address1Column
			{
				get
				{
					return this.columnAddress1;
				}
			}
			
			/// <summary>
			/// Gets the Address2 column of the Trader table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn Address2Column
			{
				get
				{
					return this.columnAddress2;
				}
			}
			
			/// <summary>
			/// Gets the Address3 column of the Trader table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn Address3Column
			{
				get
				{
					return this.columnAddress3;
				}
			}
			
			/// <summary>
			/// Gets the parent relation between the Blotter and Trader tables.
			/// </summary>
			public global::System.Data.DataRelation BlotterTraderRelation
			{
				get
				{
					return this.relationBlotterTrader;
				}
			}
			
			/// <summary>
			/// Gets the CommissionMaximum column of the Trader table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn CommissionMaximumColumn
			{
				get
				{
					return this.columnCommissionMaximum;
				}
			}
			
			/// <summary>
			/// Gets the CommissionMinimum column of the Trader table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn CommissionMinimumColumn
			{
				get
				{
					return this.columnCommissionMinimum;
				}
			}
			
			/// <summary>
			/// Gets the CommissionRate column of the Trader table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn CommissionRateColumn
			{
				get
				{
					return this.columnCommissionRate;
				}
			}
			
			/// <summary>
			/// Gets the CommissionRateTypeCode column of the Trader table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn CommissionRateTypeCodeColumn
			{
				get
				{
					return this.columnCommissionRateTypeCode;
				}
			}
			
			/// <summary>
			/// Gets the number of rows in the Trader table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public int Count
			{
				get
				{
					return this.Rows.Count;
				}
			}
			
			/// <summary>
			/// Gets the CrossingCode column of the Trader table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn CrossingCodeColumn
			{
				get
				{
					return this.columnCrossingCode;
				}
			}
			
			/// <summary>
			/// Gets the DefaultAccountId column of the Trader table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn DefaultAccountIdColumn
			{
				get
				{
					return this.columnDefaultAccountId;
				}
			}
			
			/// <summary>
			/// Gets the DefaultBlotterId column of the Trader table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn DefaultBlotterIdColumn
			{
				get
				{
					return this.columnDefaultBlotterId;
				}
			}
			
			/// <summary>
			/// Gets the EmailAddress column of the Trader table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn EmailAddressColumn
			{
				get
				{
					return this.columnEmailAddress;
				}
			}
			
			/// <summary>
			/// Gets the FixAccountId column of the Trader table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn FixAccountIdColumn
			{
				get
				{
					return this.columnFixAccountId;
				}
			}
			
			/// <summary>
			/// Gets a collection of Teraque.DataModelGenerator.DataIndices on a table.
			/// </summary>
			public global::Teraque.DataIndexCollection Indices
			{
				get
				{
					return this.dataIndices;
				}
			}
			
			/// <summary>
			/// Gets the IsAgencyMatch column of the Trader table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn IsAgencyMatchColumn
			{
				get
				{
					return this.columnIsAgencyMatch;
				}
			}
			
			/// <summary>
			/// Gets the IsBrokerMatch column of the Trader table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn IsBrokerMatchColumn
			{
				get
				{
					return this.columnIsBrokerMatch;
				}
			}
			
			/// <summary>
			/// Gets the IsCommissionChangeAllowed column of the Trader table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn IsCommissionChangeAllowedColumn
			{
				get
				{
					return this.columnIsCommissionChangeAllowed;
				}
			}
			
			/// <summary>
			/// Gets the IsEditExecutionsAllowed column of the Trader table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn IsEditExecutionsAllowedColumn
			{
				get
				{
					return this.columnIsEditExecutionsAllowed;
				}
			}
			
			/// <summary>
			/// Gets the IsHedgeMatch column of the Trader table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn IsHedgeMatchColumn
			{
				get
				{
					return this.columnIsHedgeMatch;
				}
			}
			
			/// <summary>
			/// Gets the IsHeld column of the Trader table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn IsHeldColumn
			{
				get
				{
					return this.columnIsHeld;
				}
			}
			
			/// <summary>
			/// Gets the IsInstitutionMatch column of the Trader table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn IsInstitutionMatchColumn
			{
				get
				{
					return this.columnIsInstitutionMatch;
				}
			}
			
			/// <summary>
			/// Indexer to a row in the Trader table.
			/// </summary>
			/// <param name="index">The integer index of the row.</param>
			/// <returns>The Trader row found at the given index.</returns>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public DataModel.TraderRow this[int index]
			{
				get
				{
					return ((DataModel.TraderRow)(this.Rows[index]));
				}
			}
			
			/// <summary>
			/// Gets the LastDeletedOrder column of the Trader table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn LastDeletedOrderColumn
			{
				get
				{
					return this.columnLastDeletedOrder;
				}
			}
			
			/// <summary>
			/// Gets the LastFilledOrder column of the Trader table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn LastFilledOrderColumn
			{
				get
				{
					return this.columnLastFilledOrder;
				}
			}
			
			/// <summary>
			/// Gets the LastFilledSourceOrder column of the Trader table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn LastFilledSourceOrderColumn
			{
				get
				{
					return this.columnLastFilledSourceOrder;
				}
			}
			
			/// <summary>
			/// Gets the LastTrade column of the Trader table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn LastTradeColumn
			{
				get
				{
					return this.columnLastTrade;
				}
			}
			
			/// <summary>
			/// Gets the LotSizeDefault column of the Trader table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn LotSizeDefaultColumn
			{
				get
				{
					return this.columnLotSizeDefault;
				}
			}
			
			/// <summary>
			/// Gets the MarketSleep column of the Trader table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn MarketSleepColumn
			{
				get
				{
					return this.columnMarketSleep;
				}
			}
			
			/// <summary>
			/// Gets the MaximumVolatilityDefault column of the Trader table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn MaximumVolatilityDefaultColumn
			{
				get
				{
					return this.columnMaximumVolatilityDefault;
				}
			}
			
			/// <summary>
			/// Gets the NewsFreeTimeDefault column of the Trader table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn NewsFreeTimeDefaultColumn
			{
				get
				{
					return this.columnNewsFreeTimeDefault;
				}
			}
			
			/// <summary>
			/// Gets the OatsAccountType column of the Trader table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn OatsAccountTypeColumn
			{
				get
				{
					return this.columnOatsAccountType;
				}
			}
			
			/// <summary>
			/// Gets the OatsOrigDeptId column of the Trader table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn OatsOrigDeptIdColumn
			{
				get
				{
					return this.columnOatsOrigDeptId;
				}
			}
			
			/// <summary>
			/// Gets the OrderMaximumLimitDelta column of the Trader table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn OrderMaximumLimitDeltaColumn
			{
				get
				{
					return this.columnOrderMaximumLimitDelta;
				}
			}
			
			/// <summary>
			/// Gets the OrderMaximumMarketValue column of the Trader table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn OrderMaximumMarketValueColumn
			{
				get
				{
					return this.columnOrderMaximumMarketValue;
				}
			}
			
			/// <summary>
			/// Gets the OrderMaximumQuantity column of the Trader table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn OrderMaximumQuantityColumn
			{
				get
				{
					return this.columnOrderMaximumQuantity;
				}
			}
			
			/// <summary>
			/// Gets the OrderWarningMarketValue column of the Trader table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn OrderWarningMarketValueColumn
			{
				get
				{
					return this.columnOrderWarningMarketValue;
				}
			}
			
			/// <summary>
			/// Gets the OrderWarningQuantity column of the Trader table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn OrderWarningQuantityColumn
			{
				get
				{
					return this.columnOrderWarningQuantity;
				}
			}
			
			/// <summary>
			/// Gets the Phone column of the Trader table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn PhoneColumn
			{
				get
				{
					return this.columnPhone;
				}
			}
			
			/// <summary>
			/// Gets the ReviewWindow column of the Trader table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn ReviewWindowColumn
			{
				get
				{
					return this.columnReviewWindow;
				}
			}
			
			/// <summary>
			/// Gets the RowVersion column of the Trader table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn RowVersionColumn
			{
				get
				{
					return this.columnRowVersion;
				}
			}
			
			/// <summary>
			/// Gets the ScraperConfigurationString column of the Trader table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn ScraperConfigurationStringColumn
			{
				get
				{
					return this.columnScraperConfigurationString;
				}
			}
			
			/// <summary>
			/// Gets the StartTimeDefault column of the Trader table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn StartTimeDefaultColumn
			{
				get
				{
					return this.columnStartTimeDefault;
				}
			}
			
			/// <summary>
			/// Gets the StopTimeDefault column of the Trader table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn StopTimeDefaultColumn
			{
				get
				{
					return this.columnStopTimeDefault;
				}
			}
			
			/// <summary>
			/// Gets the TagId column of the Trader table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn TagIdColumn
			{
				get
				{
					return this.columnTagId;
				}
			}
			
			/// <summary>
			/// Gets the child relation between the Trader and BrokerAccount tables.
			/// </summary>
			internal global::System.Data.DataRelation TraderBrokerAccountRelation
			{
				get
				{
					return this.relationTraderBrokerAccount;
				}
			}
			
			/// <summary>
			/// Gets the child relation between the Trader and DestinationOrder tables.
			/// </summary>
			internal global::System.Data.DataRelation TraderDestinationOrderRelation
			{
				get
				{
					return this.relationTraderDestinationOrder;
				}
			}
			
			/// <summary>
			/// Gets the TraderId column of the Trader table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn TraderIdColumn
			{
				get
				{
					return this.columnTraderId;
				}
			}
			
			/// <summary>
			/// Gets the TraderKey index on the Trader table.
			/// </summary>
			public TraderKeyIndex TraderKey
			{
				get
				{
					return ((TraderKeyIndex)(this.indexTraderKey));
				}
			}
			
			/// <summary>
			/// Gets the child relation between the Trader and TraderVolumeSetting tables.
			/// </summary>
			internal global::System.Data.DataRelation TraderTraderVolumeSettingRelation
			{
				get
				{
					return this.relationTraderTraderVolumeSetting;
				}
			}
			
			/// <summary>
			/// Gets the parent relation between the User and Trader tables.
			/// </summary>
			public global::System.Data.DataRelation UserTraderRelation
			{
				get
				{
					return this.relationUserTrader;
				}
			}
			
			/// <summary>
			/// Occurs after a Trader row has been changed successfully.
			/// </summary>
			public event TraderRowChangeEventHandler TraderRowChanged;
			
			/// <summary>
			/// Occurs when a Trader row is changing.
			/// </summary>
			public event TraderRowChangeEventHandler TraderRowChanging;
			
			/// <summary>
			/// Occurs after a Trader row in the table has been deleted.
			/// </summary>
			public event TraderRowChangeEventHandler TraderRowDeleted;
			
			/// <summary>
			/// Occurs before a Trader row in the table is about to be deleted.
			/// </summary>
			public event TraderRowChangeEventHandler TraderRowDeleting;
			
			/// <summary>
			/// Returns the type of the row in a Trader table.
			/// </summary>
			/// <returns>The TraderRow type.</returns>
			protected override global::System.Type GetRowType()
			{
				return typeof(TraderRow);
			}
			
			/// <summary>
			/// Initializes the relation fields with the parent and child relations.
			/// </summary>
			internal void InitializeRelations()
			{
				this.relationBlotterTrader = this.ParentRelations["FK_Blotter_Trader"];
				this.relationUserTrader = this.ParentRelations["FK_User_Trader"];
				this.relationTraderBrokerAccount = this.ChildRelations["FK_Trader_BrokerAccount"];
				this.relationTraderDestinationOrder = this.ChildRelations["FK_Trader_DestinationOrder"];
				this.relationTraderTraderVolumeSetting = this.ChildRelations["FK_Trader_TraderVolumeSetting"];
			}
			
			/// <summary>
			/// Initializes a new instance of a Trader row.  Constructs a row from the builder.  Only for internal usage.
			/// </summary>
			/// <returns>A new row with the same schema as the table.</returns>
			protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder dataRowBuilder)
			{
				return new TraderRow(dataRowBuilder);
			}
			
			/// <summary>
			/// Raises the TraderRowChanged event.
			/// </summary>
			/// <param name="e">Provides data for the TraderRow changing and deleting events.</param>
			protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowChanged(e);
				if ((this.TraderRowChanged != null))
				{
					this.TraderRowChanged(this, new TraderRowChangeEventArgs(((TraderRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the TraderRowChanging event.
			/// </summary>
			/// <param name="e">Provides data for the TraderRow changing and deleting events.</param>
			protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowChanging(e);
				if ((this.TraderRowChanging != null))
				{
					this.TraderRowChanging(this, new TraderRowChangeEventArgs(((TraderRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the TraderRowDeleted event.
			/// </summary>
			/// <param name="e">Provides data for the TraderRow changing and deleting events.</param>
			protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowDeleted(e);
				if ((this.TraderRowDeleted != null))
				{
					this.TraderRowDeleted(this, new TraderRowChangeEventArgs(((TraderRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the TraderRowDeleting event.
			/// </summary>
			/// <param name="e">Provides data for the TraderRow changing and deleting events.</param>
			protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowDeleting(e);
				if ((this.TraderRowDeleting != null))
				{
					this.TraderRowDeleting(this, new TraderRowChangeEventArgs(((TraderRow)(e.Row)), e.Action));
				}
			}
		}
		
		/// <summary>
		/// The TraderVolumeSetting table.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public partial class TraderVolumeSettingDataTable : global::System.Data.TypedTableBase<DataModel.TraderVolumeSettingRow>
		{
			
			private global::System.Data.DataColumn columnAutoExecuteQuantity;
			
			private global::System.Data.DataColumn columnExternalId0;
			
			private global::System.Data.DataColumn columnRowVersion;
			
			private global::System.Data.DataColumn columnThresholdQuantity;
			
			private global::System.Data.DataColumn columnTraderId;
			
			private global::System.Data.DataColumn columnTraderVolumeSettingId;
			
			private global::System.Data.DataColumn columnVolumeCategoryCode;
			
			private global::Teraque.DataIndexCollection dataIndices;
			
			private global::Teraque.DataIndex indexTraderVolumeSettingKey;
			
			private global::Teraque.DataIndex indexTraderVolumeSettingKeyExternalId0;
			
			private global::System.Data.DataRelation relationTraderTraderVolumeSetting;
			
			private global::System.Data.DataRelation relationVolumeCategoryTraderVolumeSetting;
			
			/// <summary>
			/// Creates the TraderVolumeSetting table.
			/// </summary>
			internal TraderVolumeSettingDataTable()
			{
				// Initialize the object.
				this.TableName = "TraderVolumeSetting";
				this.dataIndices = new global::Teraque.DataIndexCollection();
				// The AutoExecuteQuantity Column
				this.columnAutoExecuteQuantity = new global::System.Data.DataColumn("AutoExecuteQuantity", typeof(decimal), null, global::System.Data.MappingType.Element);
				this.columnAutoExecuteQuantity.AllowDBNull = false;
				this.columnAutoExecuteQuantity.DefaultValue = 0.0m;
				this.Columns.Add(this.columnAutoExecuteQuantity);
				// The ExternalId0 Column
				this.columnExternalId0 = new global::System.Data.DataColumn("ExternalId0", typeof(string), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnExternalId0);
				// The RowVersion Column
				this.columnRowVersion = new global::System.Data.DataColumn("RowVersion", typeof(long), null, global::System.Data.MappingType.Element);
				this.columnRowVersion.AllowDBNull = false;
				this.Columns.Add(this.columnRowVersion);
				// The ThresholdQuantity Column
				this.columnThresholdQuantity = new global::System.Data.DataColumn("ThresholdQuantity", typeof(decimal), null, global::System.Data.MappingType.Element);
				this.columnThresholdQuantity.AllowDBNull = false;
				this.columnThresholdQuantity.DefaultValue = 0.0m;
				this.Columns.Add(this.columnThresholdQuantity);
				// The TraderId Column
				this.columnTraderId = new global::System.Data.DataColumn("TraderId", typeof(System.Guid), null, global::System.Data.MappingType.Element);
				this.columnTraderId.AllowDBNull = false;
				this.Columns.Add(this.columnTraderId);
				// The TraderVolumeSettingId Column
				this.columnTraderVolumeSettingId = new global::System.Data.DataColumn("TraderVolumeSettingId", typeof(System.Guid), null, global::System.Data.MappingType.Element);
				this.columnTraderVolumeSettingId.AllowDBNull = false;
				this.Columns.Add(this.columnTraderVolumeSettingId);
				// The VolumeCategoryCode Column
				this.columnVolumeCategoryCode = new global::System.Data.DataColumn("VolumeCategoryCode", typeof(Teraque.VolumeCategoryCode), null, global::System.Data.MappingType.Element);
				this.columnVolumeCategoryCode.AllowDBNull = false;
				this.Columns.Add(this.columnVolumeCategoryCode);
				// The TraderVolumeSettingKey Index
				this.indexTraderVolumeSettingKey = new TraderVolumeSettingKeyIndex("TraderVolumeSettingKey", new global::System.Data.DataColumn[] {
							this.columnTraderVolumeSettingId});
				this.Indices.Add(this.indexTraderVolumeSettingKey);
				// The TraderVolumeSettingKeyExternalId0 Index
				this.indexTraderVolumeSettingKeyExternalId0 = new TraderVolumeSettingKeyExternalId0Index("TraderVolumeSettingKeyExternalId0", new global::System.Data.DataColumn[] {
							this.columnExternalId0});
				this.Indices.Add(this.indexTraderVolumeSettingKeyExternalId0);
			}
			
			/// <summary>
			/// Gets the AutoExecuteQuantity column of the TraderVolumeSetting table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn AutoExecuteQuantityColumn
			{
				get
				{
					return this.columnAutoExecuteQuantity;
				}
			}
			
			/// <summary>
			/// Gets the number of rows in the TraderVolumeSetting table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public int Count
			{
				get
				{
					return this.Rows.Count;
				}
			}
			
			/// <summary>
			/// Gets the ExternalId0 column of the TraderVolumeSetting table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn ExternalId0Column
			{
				get
				{
					return this.columnExternalId0;
				}
			}
			
			/// <summary>
			/// Gets a collection of Teraque.DataModelGenerator.DataIndices on a table.
			/// </summary>
			public global::Teraque.DataIndexCollection Indices
			{
				get
				{
					return this.dataIndices;
				}
			}
			
			/// <summary>
			/// Indexer to a row in the TraderVolumeSetting table.
			/// </summary>
			/// <param name="index">The integer index of the row.</param>
			/// <returns>The TraderVolumeSetting row found at the given index.</returns>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public DataModel.TraderVolumeSettingRow this[int index]
			{
				get
				{
					return ((DataModel.TraderVolumeSettingRow)(this.Rows[index]));
				}
			}
			
			/// <summary>
			/// Gets the RowVersion column of the TraderVolumeSetting table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn RowVersionColumn
			{
				get
				{
					return this.columnRowVersion;
				}
			}
			
			/// <summary>
			/// Gets the ThresholdQuantity column of the TraderVolumeSetting table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn ThresholdQuantityColumn
			{
				get
				{
					return this.columnThresholdQuantity;
				}
			}
			
			/// <summary>
			/// Gets the TraderId column of the TraderVolumeSetting table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn TraderIdColumn
			{
				get
				{
					return this.columnTraderId;
				}
			}
			
			/// <summary>
			/// Gets the parent relation between the Trader and TraderVolumeSetting tables.
			/// </summary>
			public global::System.Data.DataRelation TraderTraderVolumeSettingRelation
			{
				get
				{
					return this.relationTraderTraderVolumeSetting;
				}
			}
			
			/// <summary>
			/// Gets the TraderVolumeSettingId column of the TraderVolumeSetting table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn TraderVolumeSettingIdColumn
			{
				get
				{
					return this.columnTraderVolumeSettingId;
				}
			}
			
			/// <summary>
			/// Gets the TraderVolumeSettingKey index on the TraderVolumeSetting table.
			/// </summary>
			public TraderVolumeSettingKeyIndex TraderVolumeSettingKey
			{
				get
				{
					return ((TraderVolumeSettingKeyIndex)(this.indexTraderVolumeSettingKey));
				}
			}
			
			/// <summary>
			/// Gets the TraderVolumeSettingKeyExternalId0 index on the TraderVolumeSetting table.
			/// </summary>
			public TraderVolumeSettingKeyExternalId0Index TraderVolumeSettingKeyExternalId0
			{
				get
				{
					return ((TraderVolumeSettingKeyExternalId0Index)(this.indexTraderVolumeSettingKeyExternalId0));
				}
			}
			
			/// <summary>
			/// Gets the VolumeCategoryCode column of the TraderVolumeSetting table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn VolumeCategoryCodeColumn
			{
				get
				{
					return this.columnVolumeCategoryCode;
				}
			}
			
			/// <summary>
			/// Gets the parent relation between the VolumeCategory and TraderVolumeSetting tables.
			/// </summary>
			public global::System.Data.DataRelation VolumeCategoryTraderVolumeSettingRelation
			{
				get
				{
					return this.relationVolumeCategoryTraderVolumeSetting;
				}
			}
			
			/// <summary>
			/// Occurs after a TraderVolumeSetting row has been changed successfully.
			/// </summary>
			public event TraderVolumeSettingRowChangeEventHandler TraderVolumeSettingRowChanged;
			
			/// <summary>
			/// Occurs when a TraderVolumeSetting row is changing.
			/// </summary>
			public event TraderVolumeSettingRowChangeEventHandler TraderVolumeSettingRowChanging;
			
			/// <summary>
			/// Occurs after a TraderVolumeSetting row in the table has been deleted.
			/// </summary>
			public event TraderVolumeSettingRowChangeEventHandler TraderVolumeSettingRowDeleted;
			
			/// <summary>
			/// Occurs before a TraderVolumeSetting row in the table is about to be deleted.
			/// </summary>
			public event TraderVolumeSettingRowChangeEventHandler TraderVolumeSettingRowDeleting;
			
			/// <summary>
			/// Returns the type of the row in a TraderVolumeSetting table.
			/// </summary>
			/// <returns>The TraderVolumeSettingRow type.</returns>
			protected override global::System.Type GetRowType()
			{
				return typeof(TraderVolumeSettingRow);
			}
			
			/// <summary>
			/// Initializes the relation fields with the parent and child relations.
			/// </summary>
			internal void InitializeRelations()
			{
				this.relationTraderTraderVolumeSetting = this.ParentRelations["FK_Trader_TraderVolumeSetting"];
				this.relationVolumeCategoryTraderVolumeSetting = this.ParentRelations["FK_VolumeCategory_TraderVolumeSetting"];
			}
			
			/// <summary>
			/// Initializes a new instance of a TraderVolumeSetting row.  Constructs a row from the builder.  Only for internal usage.
			/// </summary>
			/// <returns>A new row with the same schema as the table.</returns>
			protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder dataRowBuilder)
			{
				return new TraderVolumeSettingRow(dataRowBuilder);
			}
			
			/// <summary>
			/// Raises the TraderVolumeSettingRowChanged event.
			/// </summary>
			/// <param name="e">Provides data for the TraderVolumeSettingRow changing and deleting events.</param>
			protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowChanged(e);
				if ((this.TraderVolumeSettingRowChanged != null))
				{
					this.TraderVolumeSettingRowChanged(this, new TraderVolumeSettingRowChangeEventArgs(((TraderVolumeSettingRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the TraderVolumeSettingRowChanging event.
			/// </summary>
			/// <param name="e">Provides data for the TraderVolumeSettingRow changing and deleting events.</param>
			protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowChanging(e);
				if ((this.TraderVolumeSettingRowChanging != null))
				{
					this.TraderVolumeSettingRowChanging(this, new TraderVolumeSettingRowChangeEventArgs(((TraderVolumeSettingRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the TraderVolumeSettingRowDeleted event.
			/// </summary>
			/// <param name="e">Provides data for the TraderVolumeSettingRow changing and deleting events.</param>
			protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowDeleted(e);
				if ((this.TraderVolumeSettingRowDeleted != null))
				{
					this.TraderVolumeSettingRowDeleted(this, new TraderVolumeSettingRowChangeEventArgs(((TraderVolumeSettingRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the TraderVolumeSettingRowDeleting event.
			/// </summary>
			/// <param name="e">Provides data for the TraderVolumeSettingRow changing and deleting events.</param>
			protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowDeleting(e);
				if ((this.TraderVolumeSettingRowDeleting != null))
				{
					this.TraderVolumeSettingRowDeleting(this, new TraderVolumeSettingRowChangeEventArgs(((TraderVolumeSettingRow)(e.Row)), e.Action));
				}
			}
		}
		
		/// <summary>
		/// The Type table.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public partial class TypeDataTable : global::System.Data.TypedTableBase<DataModel.TypeRow>
		{
			
			private global::System.Data.DataColumn columnDescription;
			
			private global::System.Data.DataColumn columnExternalId0;
			
			private global::System.Data.DataColumn columnImageId;
			
			private global::System.Data.DataColumn columnRowVersion;
			
			private global::System.Data.DataColumn columnType;
			
			private global::System.Data.DataColumn columnTypeId;
			
			private global::Teraque.DataIndexCollection dataIndices;
			
			private global::Teraque.DataIndex indexTypeKey;
			
			private global::Teraque.DataIndex indexTypeKeyExternalId0;
			
			private global::System.Data.DataRelation relationImageType;
			
			private global::System.Data.DataRelation relationTypeEntity;
			
			/// <summary>
			/// Creates the Type table.
			/// </summary>
			internal TypeDataTable()
			{
				// Initialize the object.
				this.TableName = "Type";
				this.dataIndices = new global::Teraque.DataIndexCollection();
				// The Description Column
				this.columnDescription = new global::System.Data.DataColumn("Description", typeof(string), null, global::System.Data.MappingType.Element);
				this.columnDescription.AllowDBNull = false;
				this.columnDescription.DefaultValue = "";
				this.Columns.Add(this.columnDescription);
				// The ExternalId0 Column
				this.columnExternalId0 = new global::System.Data.DataColumn("ExternalId0", typeof(string), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnExternalId0);
				// The ImageId Column
				this.columnImageId = new global::System.Data.DataColumn("ImageId", typeof(System.Guid), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnImageId);
				// The RowVersion Column
				this.columnRowVersion = new global::System.Data.DataColumn("RowVersion", typeof(long), null, global::System.Data.MappingType.Element);
				this.columnRowVersion.AllowDBNull = false;
				this.Columns.Add(this.columnRowVersion);
				// The Type Column
				this.columnType = new global::System.Data.DataColumn("Type", typeof(string), null, global::System.Data.MappingType.Element);
				this.columnType.AllowDBNull = false;
				this.columnType.DefaultValue = "";
				this.Columns.Add(this.columnType);
				// The TypeId Column
				this.columnTypeId = new global::System.Data.DataColumn("TypeId", typeof(System.Guid), null, global::System.Data.MappingType.Element);
				this.columnTypeId.AllowDBNull = false;
				this.Columns.Add(this.columnTypeId);
				// The TypeKey Index
				this.indexTypeKey = new TypeKeyIndex("TypeKey", new global::System.Data.DataColumn[] {
							this.columnTypeId});
				this.Indices.Add(this.indexTypeKey);
				// The TypeKeyExternalId0 Index
				this.indexTypeKeyExternalId0 = new TypeKeyExternalId0Index("TypeKeyExternalId0", new global::System.Data.DataColumn[] {
							this.columnExternalId0});
				this.Indices.Add(this.indexTypeKeyExternalId0);
			}
			
			/// <summary>
			/// Gets the number of rows in the Type table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public int Count
			{
				get
				{
					return this.Rows.Count;
				}
			}
			
			/// <summary>
			/// Gets the Description column of the Type table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn DescriptionColumn
			{
				get
				{
					return this.columnDescription;
				}
			}
			
			/// <summary>
			/// Gets the ExternalId0 column of the Type table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn ExternalId0Column
			{
				get
				{
					return this.columnExternalId0;
				}
			}
			
			/// <summary>
			/// Gets the ImageId column of the Type table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn ImageIdColumn
			{
				get
				{
					return this.columnImageId;
				}
			}
			
			/// <summary>
			/// Gets the parent relation between the Image and Type tables.
			/// </summary>
			public global::System.Data.DataRelation ImageTypeRelation
			{
				get
				{
					return this.relationImageType;
				}
			}
			
			/// <summary>
			/// Gets a collection of Teraque.DataModelGenerator.DataIndices on a table.
			/// </summary>
			public global::Teraque.DataIndexCollection Indices
			{
				get
				{
					return this.dataIndices;
				}
			}
			
			/// <summary>
			/// Indexer to a row in the Type table.
			/// </summary>
			/// <param name="index">The integer index of the row.</param>
			/// <returns>The Type row found at the given index.</returns>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public DataModel.TypeRow this[int index]
			{
				get
				{
					return ((DataModel.TypeRow)(this.Rows[index]));
				}
			}
			
			/// <summary>
			/// Gets the RowVersion column of the Type table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn RowVersionColumn
			{
				get
				{
					return this.columnRowVersion;
				}
			}
			
			/// <summary>
			/// Gets the Type column of the Type table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn TypeColumn
			{
				get
				{
					return this.columnType;
				}
			}
			
			/// <summary>
			/// Gets the child relation between the Type and Entity tables.
			/// </summary>
			internal global::System.Data.DataRelation TypeEntityRelation
			{
				get
				{
					return this.relationTypeEntity;
				}
			}
			
			/// <summary>
			/// Gets the TypeId column of the Type table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn TypeIdColumn
			{
				get
				{
					return this.columnTypeId;
				}
			}
			
			/// <summary>
			/// Gets the TypeKey index on the Type table.
			/// </summary>
			public TypeKeyIndex TypeKey
			{
				get
				{
					return ((TypeKeyIndex)(this.indexTypeKey));
				}
			}
			
			/// <summary>
			/// Gets the TypeKeyExternalId0 index on the Type table.
			/// </summary>
			public TypeKeyExternalId0Index TypeKeyExternalId0
			{
				get
				{
					return ((TypeKeyExternalId0Index)(this.indexTypeKeyExternalId0));
				}
			}
			
			/// <summary>
			/// Occurs after a Type row has been changed successfully.
			/// </summary>
			public event TypeRowChangeEventHandler TypeRowChanged;
			
			/// <summary>
			/// Occurs when a Type row is changing.
			/// </summary>
			public event TypeRowChangeEventHandler TypeRowChanging;
			
			/// <summary>
			/// Occurs after a Type row in the table has been deleted.
			/// </summary>
			public event TypeRowChangeEventHandler TypeRowDeleted;
			
			/// <summary>
			/// Occurs before a Type row in the table is about to be deleted.
			/// </summary>
			public event TypeRowChangeEventHandler TypeRowDeleting;
			
			/// <summary>
			/// Returns the type of the row in a Type table.
			/// </summary>
			/// <returns>The TypeRow type.</returns>
			protected override global::System.Type GetRowType()
			{
				return typeof(TypeRow);
			}
			
			/// <summary>
			/// Initializes the relation fields with the parent and child relations.
			/// </summary>
			internal void InitializeRelations()
			{
				this.relationImageType = this.ParentRelations["FK_Image_Type"];
				this.relationTypeEntity = this.ChildRelations["FK_Type_Entity"];
			}
			
			/// <summary>
			/// Initializes a new instance of a Type row.  Constructs a row from the builder.  Only for internal usage.
			/// </summary>
			/// <returns>A new row with the same schema as the table.</returns>
			protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder dataRowBuilder)
			{
				return new TypeRow(dataRowBuilder);
			}
			
			/// <summary>
			/// Raises the TypeRowChanged event.
			/// </summary>
			/// <param name="e">Provides data for the TypeRow changing and deleting events.</param>
			protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowChanged(e);
				if ((this.TypeRowChanged != null))
				{
					this.TypeRowChanged(this, new TypeRowChangeEventArgs(((TypeRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the TypeRowChanging event.
			/// </summary>
			/// <param name="e">Provides data for the TypeRow changing and deleting events.</param>
			protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowChanging(e);
				if ((this.TypeRowChanging != null))
				{
					this.TypeRowChanging(this, new TypeRowChangeEventArgs(((TypeRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the TypeRowDeleted event.
			/// </summary>
			/// <param name="e">Provides data for the TypeRow changing and deleting events.</param>
			protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowDeleted(e);
				if ((this.TypeRowDeleted != null))
				{
					this.TypeRowDeleted(this, new TypeRowChangeEventArgs(((TypeRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the TypeRowDeleting event.
			/// </summary>
			/// <param name="e">Provides data for the TypeRow changing and deleting events.</param>
			protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowDeleting(e);
				if ((this.TypeRowDeleting != null))
				{
					this.TypeRowDeleting(this, new TypeRowChangeEventArgs(((TypeRow)(e.Row)), e.Action));
				}
			}
		}
		
		/// <summary>
		/// The User table.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public partial class UserDataTable : global::System.Data.TypedTableBase<DataModel.UserRow>
		{
			
			private global::System.Data.DataColumn columnDistinguishedName;
			
			private global::System.Data.DataColumn columnIsRemoved;
			
			private global::System.Data.DataColumn columnPreferences;
			
			private global::System.Data.DataColumn columnRowVersion;
			
			private global::System.Data.DataColumn columnUserId;
			
			private global::Teraque.DataIndexCollection dataIndices;
			
			private global::Teraque.DataIndex indexUserKey;
			
			private global::Teraque.DataIndex indexUserKeyDistinguishedName;
			
			private global::System.Data.DataRelation relationEntityUser;
			
			private global::System.Data.DataRelation relationUserAllocationByFK_User_Allocation_CreatedUserId;
			
			private global::System.Data.DataRelation relationUserAllocationByFK_User_Allocation_ModifiedUserId;
			
			private global::System.Data.DataRelation relationUserComplianceOfficer;
			
			private global::System.Data.DataRelation relationUserDestinationOrderByFK_User_DestinationOrder_CreatedUserId;
			
			private global::System.Data.DataRelation relationUserDestinationOrderByFK_User_DestinationOrder_ModifiedUserId;
			
			private global::System.Data.DataRelation relationUserExecutionByFK_User_Execution_CreatedUserId;
			
			private global::System.Data.DataRelation relationUserExecutionByFK_User_Execution_ModifiedUserId;
			
			private global::System.Data.DataRelation relationUserSourceOrderByFK_User_SourceOrder_CreatedUserId;
			
			private global::System.Data.DataRelation relationUserSourceOrderByFK_User_SourceOrder_ModifiedUserId;
			
			private global::System.Data.DataRelation relationUserTrader;
			
			private global::System.Data.DataRelation relationUserWorkingOrderByFK_User_WorkingOrder_CreatedUserId;
			
			private global::System.Data.DataRelation relationUserWorkingOrderByFK_User_WorkingOrder_ModifiedUserId;
			
			/// <summary>
			/// Creates the User table.
			/// </summary>
			internal UserDataTable()
			{
				// Initialize the object.
				this.TableName = "User";
				this.dataIndices = new global::Teraque.DataIndexCollection();
				// The DistinguishedName Column
				this.columnDistinguishedName = new global::System.Data.DataColumn("DistinguishedName", typeof(string), null, global::System.Data.MappingType.Element);
				this.columnDistinguishedName.AllowDBNull = false;
				this.columnDistinguishedName.DefaultValue = "";
				this.Columns.Add(this.columnDistinguishedName);
				// The IsRemoved Column
				this.columnIsRemoved = new global::System.Data.DataColumn("IsRemoved", typeof(bool), null, global::System.Data.MappingType.Element);
				this.columnIsRemoved.AllowDBNull = false;
				this.columnIsRemoved.DefaultValue = false;
				this.Columns.Add(this.columnIsRemoved);
				// The Preferences Column
				this.columnPreferences = new global::System.Data.DataColumn("Preferences", typeof(byte[]), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnPreferences);
				// The RowVersion Column
				this.columnRowVersion = new global::System.Data.DataColumn("RowVersion", typeof(long), null, global::System.Data.MappingType.Element);
				this.columnRowVersion.AllowDBNull = false;
				this.Columns.Add(this.columnRowVersion);
				// The UserId Column
				this.columnUserId = new global::System.Data.DataColumn("UserId", typeof(System.Guid), null, global::System.Data.MappingType.Element);
				this.columnUserId.AllowDBNull = false;
				this.Columns.Add(this.columnUserId);
				// The UserKey Index
				this.indexUserKey = new UserKeyIndex("UserKey", new global::System.Data.DataColumn[] {
							this.columnUserId});
				this.Indices.Add(this.indexUserKey);
				// The UserKeyDistinguishedName Index
				this.indexUserKeyDistinguishedName = new UserKeyDistinguishedNameIndex("UserKeyDistinguishedName", new global::System.Data.DataColumn[] {
							this.columnDistinguishedName});
				this.Constraints.Add(new global::System.Data.UniqueConstraint(new global::System.Data.DataColumn[] {
								this.columnDistinguishedName}));
				this.Indices.Add(this.indexUserKeyDistinguishedName);
			}
			
			/// <summary>
			/// Gets the number of rows in the User table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public int Count
			{
				get
				{
					return this.Rows.Count;
				}
			}
			
			/// <summary>
			/// Gets the DistinguishedName column of the User table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn DistinguishedNameColumn
			{
				get
				{
					return this.columnDistinguishedName;
				}
			}
			
			/// <summary>
			/// Gets the parent relation between the Entity and User tables.
			/// </summary>
			public global::System.Data.DataRelation EntityUserRelation
			{
				get
				{
					return this.relationEntityUser;
				}
			}
			
			/// <summary>
			/// Gets a collection of Teraque.DataModelGenerator.DataIndices on a table.
			/// </summary>
			public global::Teraque.DataIndexCollection Indices
			{
				get
				{
					return this.dataIndices;
				}
			}
			
			/// <summary>
			/// Gets the IsRemoved column of the User table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn IsRemovedColumn
			{
				get
				{
					return this.columnIsRemoved;
				}
			}
			
			/// <summary>
			/// Indexer to a row in the User table.
			/// </summary>
			/// <param name="index">The integer index of the row.</param>
			/// <returns>The User row found at the given index.</returns>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public DataModel.UserRow this[int index]
			{
				get
				{
					return ((DataModel.UserRow)(this.Rows[index]));
				}
			}
			
			/// <summary>
			/// Gets the Preferences column of the User table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn PreferencesColumn
			{
				get
				{
					return this.columnPreferences;
				}
			}
			
			/// <summary>
			/// Gets the RowVersion column of the User table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn RowVersionColumn
			{
				get
				{
					return this.columnRowVersion;
				}
			}
			
			/// <summary>
			/// Gets the child relation between the User and Allocation tables.
			/// </summary>
			internal global::System.Data.DataRelation UserAllocationByFK_User_Allocation_CreatedUserIdRelation
			{
				get
				{
					return this.relationUserAllocationByFK_User_Allocation_CreatedUserId;
				}
			}
			
			/// <summary>
			/// Gets the child relation between the User and Allocation tables.
			/// </summary>
			internal global::System.Data.DataRelation UserAllocationByFK_User_Allocation_ModifiedUserIdRelation
			{
				get
				{
					return this.relationUserAllocationByFK_User_Allocation_ModifiedUserId;
				}
			}
			
			/// <summary>
			/// Gets the child relation between the User and ComplianceOfficer tables.
			/// </summary>
			internal global::System.Data.DataRelation UserComplianceOfficerRelation
			{
				get
				{
					return this.relationUserComplianceOfficer;
				}
			}
			
			/// <summary>
			/// Gets the child relation between the User and DestinationOrder tables.
			/// </summary>
			internal global::System.Data.DataRelation UserDestinationOrderByFK_User_DestinationOrder_CreatedUserIdRelation
			{
				get
				{
					return this.relationUserDestinationOrderByFK_User_DestinationOrder_CreatedUserId;
				}
			}
			
			/// <summary>
			/// Gets the child relation between the User and DestinationOrder tables.
			/// </summary>
			internal global::System.Data.DataRelation UserDestinationOrderByFK_User_DestinationOrder_ModifiedUserIdRelation
			{
				get
				{
					return this.relationUserDestinationOrderByFK_User_DestinationOrder_ModifiedUserId;
				}
			}
			
			/// <summary>
			/// Gets the child relation between the User and Execution tables.
			/// </summary>
			internal global::System.Data.DataRelation UserExecutionByFK_User_Execution_CreatedUserIdRelation
			{
				get
				{
					return this.relationUserExecutionByFK_User_Execution_CreatedUserId;
				}
			}
			
			/// <summary>
			/// Gets the child relation between the User and Execution tables.
			/// </summary>
			internal global::System.Data.DataRelation UserExecutionByFK_User_Execution_ModifiedUserIdRelation
			{
				get
				{
					return this.relationUserExecutionByFK_User_Execution_ModifiedUserId;
				}
			}
			
			/// <summary>
			/// Gets the UserId column of the User table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn UserIdColumn
			{
				get
				{
					return this.columnUserId;
				}
			}
			
			/// <summary>
			/// Gets the UserKey index on the User table.
			/// </summary>
			public UserKeyIndex UserKey
			{
				get
				{
					return ((UserKeyIndex)(this.indexUserKey));
				}
			}
			
			/// <summary>
			/// Gets the UserKeyDistinguishedName index on the User table.
			/// </summary>
			public UserKeyDistinguishedNameIndex UserKeyDistinguishedName
			{
				get
				{
					return ((UserKeyDistinguishedNameIndex)(this.indexUserKeyDistinguishedName));
				}
			}
			
			/// <summary>
			/// Gets the child relation between the User and SourceOrder tables.
			/// </summary>
			internal global::System.Data.DataRelation UserSourceOrderByFK_User_SourceOrder_CreatedUserIdRelation
			{
				get
				{
					return this.relationUserSourceOrderByFK_User_SourceOrder_CreatedUserId;
				}
			}
			
			/// <summary>
			/// Gets the child relation between the User and SourceOrder tables.
			/// </summary>
			internal global::System.Data.DataRelation UserSourceOrderByFK_User_SourceOrder_ModifiedUserIdRelation
			{
				get
				{
					return this.relationUserSourceOrderByFK_User_SourceOrder_ModifiedUserId;
				}
			}
			
			/// <summary>
			/// Gets the child relation between the User and Trader tables.
			/// </summary>
			internal global::System.Data.DataRelation UserTraderRelation
			{
				get
				{
					return this.relationUserTrader;
				}
			}
			
			/// <summary>
			/// Gets the child relation between the User and WorkingOrder tables.
			/// </summary>
			internal global::System.Data.DataRelation UserWorkingOrderByFK_User_WorkingOrder_CreatedUserIdRelation
			{
				get
				{
					return this.relationUserWorkingOrderByFK_User_WorkingOrder_CreatedUserId;
				}
			}
			
			/// <summary>
			/// Gets the child relation between the User and WorkingOrder tables.
			/// </summary>
			internal global::System.Data.DataRelation UserWorkingOrderByFK_User_WorkingOrder_ModifiedUserIdRelation
			{
				get
				{
					return this.relationUserWorkingOrderByFK_User_WorkingOrder_ModifiedUserId;
				}
			}
			
			/// <summary>
			/// Occurs after a User row has been changed successfully.
			/// </summary>
			public event UserRowChangeEventHandler UserRowChanged;
			
			/// <summary>
			/// Occurs when a User row is changing.
			/// </summary>
			public event UserRowChangeEventHandler UserRowChanging;
			
			/// <summary>
			/// Occurs after a User row in the table has been deleted.
			/// </summary>
			public event UserRowChangeEventHandler UserRowDeleted;
			
			/// <summary>
			/// Occurs before a User row in the table is about to be deleted.
			/// </summary>
			public event UserRowChangeEventHandler UserRowDeleting;
			
			/// <summary>
			/// Returns the type of the row in a User table.
			/// </summary>
			/// <returns>The UserRow type.</returns>
			protected override global::System.Type GetRowType()
			{
				return typeof(UserRow);
			}
			
			/// <summary>
			/// Initializes the relation fields with the parent and child relations.
			/// </summary>
			internal void InitializeRelations()
			{
				this.relationEntityUser = this.ParentRelations["FK_Entity_User"];
				this.relationUserAllocationByFK_User_Allocation_CreatedUserId = this.ChildRelations["FK_User_Allocation_CreatedUserId"];
				this.relationUserAllocationByFK_User_Allocation_ModifiedUserId = this.ChildRelations["FK_User_Allocation_ModifiedUserId"];
				this.relationUserComplianceOfficer = this.ChildRelations["FK_User_ComplianceOfficer"];
				this.relationUserDestinationOrderByFK_User_DestinationOrder_CreatedUserId = this.ChildRelations["FK_User_DestinationOrder_CreatedUserId"];
				this.relationUserDestinationOrderByFK_User_DestinationOrder_ModifiedUserId = this.ChildRelations["FK_User_DestinationOrder_ModifiedUserId"];
				this.relationUserExecutionByFK_User_Execution_CreatedUserId = this.ChildRelations["FK_User_Execution_CreatedUserId"];
				this.relationUserExecutionByFK_User_Execution_ModifiedUserId = this.ChildRelations["FK_User_Execution_ModifiedUserId"];
				this.relationUserSourceOrderByFK_User_SourceOrder_CreatedUserId = this.ChildRelations["FK_User_SourceOrder_CreatedUserId"];
				this.relationUserSourceOrderByFK_User_SourceOrder_ModifiedUserId = this.ChildRelations["FK_User_SourceOrder_ModifiedUserId"];
				this.relationUserTrader = this.ChildRelations["FK_User_Trader"];
				this.relationUserWorkingOrderByFK_User_WorkingOrder_CreatedUserId = this.ChildRelations["FK_User_WorkingOrder_CreatedUserId"];
				this.relationUserWorkingOrderByFK_User_WorkingOrder_ModifiedUserId = this.ChildRelations["FK_User_WorkingOrder_ModifiedUserId"];
			}
			
			/// <summary>
			/// Initializes a new instance of a User row.  Constructs a row from the builder.  Only for internal usage.
			/// </summary>
			/// <returns>A new row with the same schema as the table.</returns>
			protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder dataRowBuilder)
			{
				return new UserRow(dataRowBuilder);
			}
			
			/// <summary>
			/// Raises the UserRowChanged event.
			/// </summary>
			/// <param name="e">Provides data for the UserRow changing and deleting events.</param>
			protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowChanged(e);
				if ((this.UserRowChanged != null))
				{
					this.UserRowChanged(this, new UserRowChangeEventArgs(((UserRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the UserRowChanging event.
			/// </summary>
			/// <param name="e">Provides data for the UserRow changing and deleting events.</param>
			protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowChanging(e);
				if ((this.UserRowChanging != null))
				{
					this.UserRowChanging(this, new UserRowChangeEventArgs(((UserRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the UserRowDeleted event.
			/// </summary>
			/// <param name="e">Provides data for the UserRow changing and deleting events.</param>
			protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowDeleted(e);
				if ((this.UserRowDeleted != null))
				{
					this.UserRowDeleted(this, new UserRowChangeEventArgs(((UserRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the UserRowDeleting event.
			/// </summary>
			/// <param name="e">Provides data for the UserRow changing and deleting events.</param>
			protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowDeleting(e);
				if ((this.UserRowDeleting != null))
				{
					this.UserRowDeleting(this, new UserRowChangeEventArgs(((UserRow)(e.Row)), e.Action));
				}
			}
		}
		
		/// <summary>
		/// The VolumeCategory table.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public partial class VolumeCategoryDataTable : global::System.Data.TypedTableBase<DataModel.VolumeCategoryRow>
		{
			
			private global::System.Data.DataColumn columnDescription;
			
			private global::System.Data.DataColumn columnExternalId0;
			
			private global::System.Data.DataColumn columnHighVolumeRange;
			
			private global::System.Data.DataColumn columnLowVolumeRange;
			
			private global::System.Data.DataColumn columnMnemonic;
			
			private global::System.Data.DataColumn columnRowVersion;
			
			private global::System.Data.DataColumn columnVolumeCategoryCode;
			
			private global::Teraque.DataIndexCollection dataIndices;
			
			private global::Teraque.DataIndex indexVolumeCategoryKey;
			
			private global::Teraque.DataIndex indexVolumeCategoryKeyExternalId0;
			
			private global::System.Data.DataRelation relationVolumeCategorySecurity;
			
			private global::System.Data.DataRelation relationVolumeCategoryTraderVolumeSetting;
			
			/// <summary>
			/// Creates the VolumeCategory table.
			/// </summary>
			internal VolumeCategoryDataTable()
			{
				// Initialize the object.
				this.TableName = "VolumeCategory";
				this.dataIndices = new global::Teraque.DataIndexCollection();
				// The Description Column
				this.columnDescription = new global::System.Data.DataColumn("Description", typeof(string), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnDescription);
				// The ExternalId0 Column
				this.columnExternalId0 = new global::System.Data.DataColumn("ExternalId0", typeof(string), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnExternalId0);
				// The HighVolumeRange Column
				this.columnHighVolumeRange = new global::System.Data.DataColumn("HighVolumeRange", typeof(decimal), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnHighVolumeRange);
				// The LowVolumeRange Column
				this.columnLowVolumeRange = new global::System.Data.DataColumn("LowVolumeRange", typeof(decimal), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnLowVolumeRange);
				// The Mnemonic Column
				this.columnMnemonic = new global::System.Data.DataColumn("Mnemonic", typeof(string), null, global::System.Data.MappingType.Element);
				this.columnMnemonic.AllowDBNull = false;
				this.columnMnemonic.DefaultValue = "";
				this.Columns.Add(this.columnMnemonic);
				// The RowVersion Column
				this.columnRowVersion = new global::System.Data.DataColumn("RowVersion", typeof(long), null, global::System.Data.MappingType.Element);
				this.columnRowVersion.AllowDBNull = false;
				this.Columns.Add(this.columnRowVersion);
				// The VolumeCategoryCode Column
				this.columnVolumeCategoryCode = new global::System.Data.DataColumn("VolumeCategoryCode", typeof(Teraque.VolumeCategoryCode), null, global::System.Data.MappingType.Element);
				this.columnVolumeCategoryCode.AllowDBNull = false;
				this.Columns.Add(this.columnVolumeCategoryCode);
				// The VolumeCategoryKey Index
				this.indexVolumeCategoryKey = new VolumeCategoryKeyIndex("VolumeCategoryKey", new global::System.Data.DataColumn[] {
							this.columnVolumeCategoryCode});
				this.Indices.Add(this.indexVolumeCategoryKey);
				// The VolumeCategoryKeyExternalId0 Index
				this.indexVolumeCategoryKeyExternalId0 = new VolumeCategoryKeyExternalId0Index("VolumeCategoryKeyExternalId0", new global::System.Data.DataColumn[] {
							this.columnExternalId0});
				this.Indices.Add(this.indexVolumeCategoryKeyExternalId0);
			}
			
			/// <summary>
			/// Gets the number of rows in the VolumeCategory table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public int Count
			{
				get
				{
					return this.Rows.Count;
				}
			}
			
			/// <summary>
			/// Gets the Description column of the VolumeCategory table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn DescriptionColumn
			{
				get
				{
					return this.columnDescription;
				}
			}
			
			/// <summary>
			/// Gets the ExternalId0 column of the VolumeCategory table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn ExternalId0Column
			{
				get
				{
					return this.columnExternalId0;
				}
			}
			
			/// <summary>
			/// Gets the HighVolumeRange column of the VolumeCategory table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn HighVolumeRangeColumn
			{
				get
				{
					return this.columnHighVolumeRange;
				}
			}
			
			/// <summary>
			/// Gets a collection of Teraque.DataModelGenerator.DataIndices on a table.
			/// </summary>
			public global::Teraque.DataIndexCollection Indices
			{
				get
				{
					return this.dataIndices;
				}
			}
			
			/// <summary>
			/// Indexer to a row in the VolumeCategory table.
			/// </summary>
			/// <param name="index">The integer index of the row.</param>
			/// <returns>The VolumeCategory row found at the given index.</returns>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public DataModel.VolumeCategoryRow this[int index]
			{
				get
				{
					return ((DataModel.VolumeCategoryRow)(this.Rows[index]));
				}
			}
			
			/// <summary>
			/// Gets the LowVolumeRange column of the VolumeCategory table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn LowVolumeRangeColumn
			{
				get
				{
					return this.columnLowVolumeRange;
				}
			}
			
			/// <summary>
			/// Gets the Mnemonic column of the VolumeCategory table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn MnemonicColumn
			{
				get
				{
					return this.columnMnemonic;
				}
			}
			
			/// <summary>
			/// Gets the RowVersion column of the VolumeCategory table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn RowVersionColumn
			{
				get
				{
					return this.columnRowVersion;
				}
			}
			
			/// <summary>
			/// Gets the VolumeCategoryCode column of the VolumeCategory table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn VolumeCategoryCodeColumn
			{
				get
				{
					return this.columnVolumeCategoryCode;
				}
			}
			
			/// <summary>
			/// Gets the VolumeCategoryKey index on the VolumeCategory table.
			/// </summary>
			public VolumeCategoryKeyIndex VolumeCategoryKey
			{
				get
				{
					return ((VolumeCategoryKeyIndex)(this.indexVolumeCategoryKey));
				}
			}
			
			/// <summary>
			/// Gets the VolumeCategoryKeyExternalId0 index on the VolumeCategory table.
			/// </summary>
			public VolumeCategoryKeyExternalId0Index VolumeCategoryKeyExternalId0
			{
				get
				{
					return ((VolumeCategoryKeyExternalId0Index)(this.indexVolumeCategoryKeyExternalId0));
				}
			}
			
			/// <summary>
			/// Gets the child relation between the VolumeCategory and Security tables.
			/// </summary>
			internal global::System.Data.DataRelation VolumeCategorySecurityRelation
			{
				get
				{
					return this.relationVolumeCategorySecurity;
				}
			}
			
			/// <summary>
			/// Gets the child relation between the VolumeCategory and TraderVolumeSetting tables.
			/// </summary>
			internal global::System.Data.DataRelation VolumeCategoryTraderVolumeSettingRelation
			{
				get
				{
					return this.relationVolumeCategoryTraderVolumeSetting;
				}
			}
			
			/// <summary>
			/// Occurs after a VolumeCategory row has been changed successfully.
			/// </summary>
			public event VolumeCategoryRowChangeEventHandler VolumeCategoryRowChanged;
			
			/// <summary>
			/// Occurs when a VolumeCategory row is changing.
			/// </summary>
			public event VolumeCategoryRowChangeEventHandler VolumeCategoryRowChanging;
			
			/// <summary>
			/// Occurs after a VolumeCategory row in the table has been deleted.
			/// </summary>
			public event VolumeCategoryRowChangeEventHandler VolumeCategoryRowDeleted;
			
			/// <summary>
			/// Occurs before a VolumeCategory row in the table is about to be deleted.
			/// </summary>
			public event VolumeCategoryRowChangeEventHandler VolumeCategoryRowDeleting;
			
			/// <summary>
			/// Returns the type of the row in a VolumeCategory table.
			/// </summary>
			/// <returns>The VolumeCategoryRow type.</returns>
			protected override global::System.Type GetRowType()
			{
				return typeof(VolumeCategoryRow);
			}
			
			/// <summary>
			/// Initializes the relation fields with the parent and child relations.
			/// </summary>
			internal void InitializeRelations()
			{
				this.relationVolumeCategorySecurity = this.ChildRelations["FK_VolumeCategory_Security"];
				this.relationVolumeCategoryTraderVolumeSetting = this.ChildRelations["FK_VolumeCategory_TraderVolumeSetting"];
			}
			
			/// <summary>
			/// Initializes a new instance of a VolumeCategory row.  Constructs a row from the builder.  Only for internal usage.
			/// </summary>
			/// <returns>A new row with the same schema as the table.</returns>
			protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder dataRowBuilder)
			{
				return new VolumeCategoryRow(dataRowBuilder);
			}
			
			/// <summary>
			/// Raises the VolumeCategoryRowChanged event.
			/// </summary>
			/// <param name="e">Provides data for the VolumeCategoryRow changing and deleting events.</param>
			protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowChanged(e);
				if ((this.VolumeCategoryRowChanged != null))
				{
					this.VolumeCategoryRowChanged(this, new VolumeCategoryRowChangeEventArgs(((VolumeCategoryRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the VolumeCategoryRowChanging event.
			/// </summary>
			/// <param name="e">Provides data for the VolumeCategoryRow changing and deleting events.</param>
			protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowChanging(e);
				if ((this.VolumeCategoryRowChanging != null))
				{
					this.VolumeCategoryRowChanging(this, new VolumeCategoryRowChangeEventArgs(((VolumeCategoryRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the VolumeCategoryRowDeleted event.
			/// </summary>
			/// <param name="e">Provides data for the VolumeCategoryRow changing and deleting events.</param>
			protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowDeleted(e);
				if ((this.VolumeCategoryRowDeleted != null))
				{
					this.VolumeCategoryRowDeleted(this, new VolumeCategoryRowChangeEventArgs(((VolumeCategoryRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the VolumeCategoryRowDeleting event.
			/// </summary>
			/// <param name="e">Provides data for the VolumeCategoryRow changing and deleting events.</param>
			protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowDeleting(e);
				if ((this.VolumeCategoryRowDeleting != null))
				{
					this.VolumeCategoryRowDeleting(this, new VolumeCategoryRowChangeEventArgs(((VolumeCategoryRow)(e.Row)), e.Action));
				}
			}
		}
		
		/// <summary>
		/// The Weekend table.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public partial class WeekendDataTable : global::System.Data.TypedTableBase<DataModel.WeekendRow>
		{
			
			private global::System.Data.DataColumn columnExternalId0;
			
			private global::System.Data.DataColumn columnExternalId1;
			
			private global::System.Data.DataColumn columnRowVersion;
			
			private global::System.Data.DataColumn columnUserCode0;
			
			private global::System.Data.DataColumn columnUserCode1;
			
			private global::System.Data.DataColumn columnWeekendCode;
			
			private global::Teraque.DataIndexCollection dataIndices;
			
			private global::Teraque.DataIndex indexWeekendKey;
			
			private global::Teraque.DataIndex indexWeekendKeyExternalId0;
			
			private global::Teraque.DataIndex indexWeekendKeyExternalId1;
			
			private global::System.Data.DataRelation relationWeekendDebt;
			
			/// <summary>
			/// Creates the Weekend table.
			/// </summary>
			internal WeekendDataTable()
			{
				// Initialize the object.
				this.TableName = "Weekend";
				this.dataIndices = new global::Teraque.DataIndexCollection();
				// The ExternalId0 Column
				this.columnExternalId0 = new global::System.Data.DataColumn("ExternalId0", typeof(string), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnExternalId0);
				// The ExternalId1 Column
				this.columnExternalId1 = new global::System.Data.DataColumn("ExternalId1", typeof(string), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnExternalId1);
				// The RowVersion Column
				this.columnRowVersion = new global::System.Data.DataColumn("RowVersion", typeof(long), null, global::System.Data.MappingType.Element);
				this.columnRowVersion.AllowDBNull = false;
				this.Columns.Add(this.columnRowVersion);
				// The UserCode0 Column
				this.columnUserCode0 = new global::System.Data.DataColumn("UserCode0", typeof(int), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnUserCode0);
				// The UserCode1 Column
				this.columnUserCode1 = new global::System.Data.DataColumn("UserCode1", typeof(int), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnUserCode1);
				// The WeekendCode Column
				this.columnWeekendCode = new global::System.Data.DataColumn("WeekendCode", typeof(Teraque.WeekendCode), null, global::System.Data.MappingType.Element);
				this.columnWeekendCode.AllowDBNull = false;
				this.Columns.Add(this.columnWeekendCode);
				// The WeekendKey Index
				this.indexWeekendKey = new WeekendKeyIndex("WeekendKey", new global::System.Data.DataColumn[] {
							this.columnWeekendCode});
				this.Indices.Add(this.indexWeekendKey);
				// The WeekendKeyExternalId0 Index
				this.indexWeekendKeyExternalId0 = new WeekendKeyExternalId0Index("WeekendKeyExternalId0", new global::System.Data.DataColumn[] {
							this.columnExternalId0});
				this.Indices.Add(this.indexWeekendKeyExternalId0);
				// The WeekendKeyExternalId1 Index
				this.indexWeekendKeyExternalId1 = new WeekendKeyExternalId1Index("WeekendKeyExternalId1", new global::System.Data.DataColumn[] {
							this.columnExternalId1});
				this.Indices.Add(this.indexWeekendKeyExternalId1);
			}
			
			/// <summary>
			/// Gets the number of rows in the Weekend table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public int Count
			{
				get
				{
					return this.Rows.Count;
				}
			}
			
			/// <summary>
			/// Gets the ExternalId0 column of the Weekend table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn ExternalId0Column
			{
				get
				{
					return this.columnExternalId0;
				}
			}
			
			/// <summary>
			/// Gets the ExternalId1 column of the Weekend table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn ExternalId1Column
			{
				get
				{
					return this.columnExternalId1;
				}
			}
			
			/// <summary>
			/// Gets a collection of Teraque.DataModelGenerator.DataIndices on a table.
			/// </summary>
			public global::Teraque.DataIndexCollection Indices
			{
				get
				{
					return this.dataIndices;
				}
			}
			
			/// <summary>
			/// Indexer to a row in the Weekend table.
			/// </summary>
			/// <param name="index">The integer index of the row.</param>
			/// <returns>The Weekend row found at the given index.</returns>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public DataModel.WeekendRow this[int index]
			{
				get
				{
					return ((DataModel.WeekendRow)(this.Rows[index]));
				}
			}
			
			/// <summary>
			/// Gets the RowVersion column of the Weekend table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn RowVersionColumn
			{
				get
				{
					return this.columnRowVersion;
				}
			}
			
			/// <summary>
			/// Gets the UserCode0 column of the Weekend table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn UserCode0Column
			{
				get
				{
					return this.columnUserCode0;
				}
			}
			
			/// <summary>
			/// Gets the UserCode1 column of the Weekend table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn UserCode1Column
			{
				get
				{
					return this.columnUserCode1;
				}
			}
			
			/// <summary>
			/// Gets the WeekendCode column of the Weekend table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn WeekendCodeColumn
			{
				get
				{
					return this.columnWeekendCode;
				}
			}
			
			/// <summary>
			/// Gets the child relation between the Weekend and Debt tables.
			/// </summary>
			internal global::System.Data.DataRelation WeekendDebtRelation
			{
				get
				{
					return this.relationWeekendDebt;
				}
			}
			
			/// <summary>
			/// Gets the WeekendKey index on the Weekend table.
			/// </summary>
			public WeekendKeyIndex WeekendKey
			{
				get
				{
					return ((WeekendKeyIndex)(this.indexWeekendKey));
				}
			}
			
			/// <summary>
			/// Gets the WeekendKeyExternalId0 index on the Weekend table.
			/// </summary>
			public WeekendKeyExternalId0Index WeekendKeyExternalId0
			{
				get
				{
					return ((WeekendKeyExternalId0Index)(this.indexWeekendKeyExternalId0));
				}
			}
			
			/// <summary>
			/// Gets the WeekendKeyExternalId1 index on the Weekend table.
			/// </summary>
			public WeekendKeyExternalId1Index WeekendKeyExternalId1
			{
				get
				{
					return ((WeekendKeyExternalId1Index)(this.indexWeekendKeyExternalId1));
				}
			}
			
			/// <summary>
			/// Occurs after a Weekend row has been changed successfully.
			/// </summary>
			public event WeekendRowChangeEventHandler WeekendRowChanged;
			
			/// <summary>
			/// Occurs when a Weekend row is changing.
			/// </summary>
			public event WeekendRowChangeEventHandler WeekendRowChanging;
			
			/// <summary>
			/// Occurs after a Weekend row in the table has been deleted.
			/// </summary>
			public event WeekendRowChangeEventHandler WeekendRowDeleted;
			
			/// <summary>
			/// Occurs before a Weekend row in the table is about to be deleted.
			/// </summary>
			public event WeekendRowChangeEventHandler WeekendRowDeleting;
			
			/// <summary>
			/// Returns the type of the row in a Weekend table.
			/// </summary>
			/// <returns>The WeekendRow type.</returns>
			protected override global::System.Type GetRowType()
			{
				return typeof(WeekendRow);
			}
			
			/// <summary>
			/// Initializes the relation fields with the parent and child relations.
			/// </summary>
			internal void InitializeRelations()
			{
				this.relationWeekendDebt = this.ChildRelations["FK_Weekend_Debt"];
			}
			
			/// <summary>
			/// Initializes a new instance of a Weekend row.  Constructs a row from the builder.  Only for internal usage.
			/// </summary>
			/// <returns>A new row with the same schema as the table.</returns>
			protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder dataRowBuilder)
			{
				return new WeekendRow(dataRowBuilder);
			}
			
			/// <summary>
			/// Raises the WeekendRowChanged event.
			/// </summary>
			/// <param name="e">Provides data for the WeekendRow changing and deleting events.</param>
			protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowChanged(e);
				if ((this.WeekendRowChanged != null))
				{
					this.WeekendRowChanged(this, new WeekendRowChangeEventArgs(((WeekendRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the WeekendRowChanging event.
			/// </summary>
			/// <param name="e">Provides data for the WeekendRow changing and deleting events.</param>
			protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowChanging(e);
				if ((this.WeekendRowChanging != null))
				{
					this.WeekendRowChanging(this, new WeekendRowChangeEventArgs(((WeekendRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the WeekendRowDeleted event.
			/// </summary>
			/// <param name="e">Provides data for the WeekendRow changing and deleting events.</param>
			protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowDeleted(e);
				if ((this.WeekendRowDeleted != null))
				{
					this.WeekendRowDeleted(this, new WeekendRowChangeEventArgs(((WeekendRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the WeekendRowDeleting event.
			/// </summary>
			/// <param name="e">Provides data for the WeekendRow changing and deleting events.</param>
			protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowDeleting(e);
				if ((this.WeekendRowDeleting != null))
				{
					this.WeekendRowDeleting(this, new WeekendRowChangeEventArgs(((WeekendRow)(e.Row)), e.Action));
				}
			}
		}
		
		/// <summary>
		/// The WorkingOrder table.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public partial class WorkingOrderDataTable : global::System.Data.TypedTableBase<DataModel.WorkingOrderRow>
		{
			
			private global::System.Data.DataColumn columnAutomaticQuantity;
			
			private global::System.Data.DataColumn columnBlotterId;
			
			private global::System.Data.DataColumn columnCreatedTime;
			
			private global::System.Data.DataColumn columnCreatedUserId;
			
			private global::System.Data.DataColumn columnCrossingCode;
			
			private global::System.Data.DataColumn columnDestinationId;
			
			private global::System.Data.DataColumn columnExternalId0;
			
			private global::System.Data.DataColumn columnIsAutomatic;
			
			private global::System.Data.DataColumn columnIsAwake;
			
			private global::System.Data.DataColumn columnIsBrokerMatch;
			
			private global::System.Data.DataColumn columnIsHedgeMatch;
			
			private global::System.Data.DataColumn columnIsInstitutionMatch;
			
			private global::System.Data.DataColumn columnLimitPrice;
			
			private global::System.Data.DataColumn columnModifiedTime;
			
			private global::System.Data.DataColumn columnModifiedUserId;
			
			private global::System.Data.DataColumn columnOrderTypeCode;
			
			private global::System.Data.DataColumn columnRowVersion;
			
			private global::System.Data.DataColumn columnSecurityId;
			
			private global::System.Data.DataColumn columnSettlementDate;
			
			private global::System.Data.DataColumn columnSettlementId;
			
			private global::System.Data.DataColumn columnSideCode;
			
			private global::System.Data.DataColumn columnStartTime;
			
			private global::System.Data.DataColumn columnStatusCode;
			
			private global::System.Data.DataColumn columnStopPrice;
			
			private global::System.Data.DataColumn columnStopTime;
			
			private global::System.Data.DataColumn columnSubmittedQuantity;
			
			private global::System.Data.DataColumn columnSubmittedTime;
			
			private global::System.Data.DataColumn columnTimeInForceCode;
			
			private global::System.Data.DataColumn columnTradeDate;
			
			private global::System.Data.DataColumn columnUploadedTime;
			
			private global::System.Data.DataColumn columnWorkingOrderId;
			
			private global::Teraque.DataIndexCollection dataIndices;
			
			private global::Teraque.DataIndex indexWorkingOrderKey;
			
			private global::Teraque.DataIndex indexWorkingOrderKeyExternalId0;
			
			private global::System.Data.DataRelation relationBlotterWorkingOrder;
			
			private global::System.Data.DataRelation relationCrossingWorkingOrder;
			
			private global::System.Data.DataRelation relationDestinationWorkingOrder;
			
			private global::System.Data.DataRelation relationOrderTypeWorkingOrder;
			
			private global::System.Data.DataRelation relationSecurityWorkingOrderByFK_Security_WorkingOrder_SecurityId;
			
			private global::System.Data.DataRelation relationSecurityWorkingOrderByFK_Security_WorkingOrder_SettlementId;
			
			private global::System.Data.DataRelation relationSideWorkingOrder;
			
			private global::System.Data.DataRelation relationStatusWorkingOrder;
			
			private global::System.Data.DataRelation relationTimeInForceWorkingOrder;
			
			private global::System.Data.DataRelation relationUserWorkingOrderByFK_User_WorkingOrder_CreatedUserId;
			
			private global::System.Data.DataRelation relationUserWorkingOrderByFK_User_WorkingOrder_ModifiedUserId;
			
			private global::System.Data.DataRelation relationWorkingOrderAllocation;
			
			private global::System.Data.DataRelation relationWorkingOrderDestinationOrder;
			
			private global::System.Data.DataRelation relationWorkingOrderMatch;
			
			private global::System.Data.DataRelation relationWorkingOrderSourceOrder;
			
			/// <summary>
			/// Creates the WorkingOrder table.
			/// </summary>
			internal WorkingOrderDataTable()
			{
				// Initialize the object.
				this.TableName = "WorkingOrder";
				this.dataIndices = new global::Teraque.DataIndexCollection();
				// The AutomaticQuantity Column
				this.columnAutomaticQuantity = new global::System.Data.DataColumn("AutomaticQuantity", typeof(decimal), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnAutomaticQuantity);
				// The BlotterId Column
				this.columnBlotterId = new global::System.Data.DataColumn("BlotterId", typeof(System.Guid), null, global::System.Data.MappingType.Element);
				this.columnBlotterId.AllowDBNull = false;
				this.Columns.Add(this.columnBlotterId);
				// The CreatedTime Column
				this.columnCreatedTime = new global::System.Data.DataColumn("CreatedTime", typeof(System.DateTime), null, global::System.Data.MappingType.Element);
				this.columnCreatedTime.AllowDBNull = false;
				this.Columns.Add(this.columnCreatedTime);
				// The CreatedUserId Column
				this.columnCreatedUserId = new global::System.Data.DataColumn("CreatedUserId", typeof(System.Guid), null, global::System.Data.MappingType.Element);
				this.columnCreatedUserId.AllowDBNull = false;
				this.Columns.Add(this.columnCreatedUserId);
				// The CrossingCode Column
				this.columnCrossingCode = new global::System.Data.DataColumn("CrossingCode", typeof(Teraque.CrossingCode), null, global::System.Data.MappingType.Element);
				this.columnCrossingCode.AllowDBNull = false;
				this.Columns.Add(this.columnCrossingCode);
				// The DestinationId Column
				this.columnDestinationId = new global::System.Data.DataColumn("DestinationId", typeof(System.Guid), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnDestinationId);
				// The ExternalId0 Column
				this.columnExternalId0 = new global::System.Data.DataColumn("ExternalId0", typeof(string), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnExternalId0);
				// The IsAutomatic Column
				this.columnIsAutomatic = new global::System.Data.DataColumn("IsAutomatic", typeof(bool), null, global::System.Data.MappingType.Element);
				this.columnIsAutomatic.AllowDBNull = false;
				this.columnIsAutomatic.DefaultValue = false;
				this.Columns.Add(this.columnIsAutomatic);
				// The IsAwake Column
				this.columnIsAwake = new global::System.Data.DataColumn("IsAwake", typeof(bool), null, global::System.Data.MappingType.Element);
				this.columnIsAwake.AllowDBNull = false;
				this.columnIsAwake.DefaultValue = false;
				this.Columns.Add(this.columnIsAwake);
				// The IsBrokerMatch Column
				this.columnIsBrokerMatch = new global::System.Data.DataColumn("IsBrokerMatch", typeof(bool), null, global::System.Data.MappingType.Element);
				this.columnIsBrokerMatch.AllowDBNull = false;
				this.columnIsBrokerMatch.DefaultValue = false;
				this.Columns.Add(this.columnIsBrokerMatch);
				// The IsHedgeMatch Column
				this.columnIsHedgeMatch = new global::System.Data.DataColumn("IsHedgeMatch", typeof(bool), null, global::System.Data.MappingType.Element);
				this.columnIsHedgeMatch.AllowDBNull = false;
				this.columnIsHedgeMatch.DefaultValue = false;
				this.Columns.Add(this.columnIsHedgeMatch);
				// The IsInstitutionMatch Column
				this.columnIsInstitutionMatch = new global::System.Data.DataColumn("IsInstitutionMatch", typeof(bool), null, global::System.Data.MappingType.Element);
				this.columnIsInstitutionMatch.AllowDBNull = false;
				this.columnIsInstitutionMatch.DefaultValue = false;
				this.Columns.Add(this.columnIsInstitutionMatch);
				// The LimitPrice Column
				this.columnLimitPrice = new global::System.Data.DataColumn("LimitPrice", typeof(decimal), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnLimitPrice);
				// The ModifiedTime Column
				this.columnModifiedTime = new global::System.Data.DataColumn("ModifiedTime", typeof(System.DateTime), null, global::System.Data.MappingType.Element);
				this.columnModifiedTime.AllowDBNull = false;
				this.Columns.Add(this.columnModifiedTime);
				// The ModifiedUserId Column
				this.columnModifiedUserId = new global::System.Data.DataColumn("ModifiedUserId", typeof(System.Guid), null, global::System.Data.MappingType.Element);
				this.columnModifiedUserId.AllowDBNull = false;
				this.Columns.Add(this.columnModifiedUserId);
				// The OrderTypeCode Column
				this.columnOrderTypeCode = new global::System.Data.DataColumn("OrderTypeCode", typeof(Teraque.OrderTypeCode), null, global::System.Data.MappingType.Element);
				this.columnOrderTypeCode.AllowDBNull = false;
				this.Columns.Add(this.columnOrderTypeCode);
				// The RowVersion Column
				this.columnRowVersion = new global::System.Data.DataColumn("RowVersion", typeof(long), null, global::System.Data.MappingType.Element);
				this.columnRowVersion.AllowDBNull = false;
				this.Columns.Add(this.columnRowVersion);
				// The SecurityId Column
				this.columnSecurityId = new global::System.Data.DataColumn("SecurityId", typeof(System.Guid), null, global::System.Data.MappingType.Element);
				this.columnSecurityId.AllowDBNull = false;
				this.Columns.Add(this.columnSecurityId);
				// The SettlementDate Column
				this.columnSettlementDate = new global::System.Data.DataColumn("SettlementDate", typeof(System.DateTime), null, global::System.Data.MappingType.Element);
				this.columnSettlementDate.AllowDBNull = false;
				this.Columns.Add(this.columnSettlementDate);
				// The SettlementId Column
				this.columnSettlementId = new global::System.Data.DataColumn("SettlementId", typeof(System.Guid), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnSettlementId);
				// The SideCode Column
				this.columnSideCode = new global::System.Data.DataColumn("SideCode", typeof(Teraque.SideCode), null, global::System.Data.MappingType.Element);
				this.columnSideCode.AllowDBNull = false;
				this.Columns.Add(this.columnSideCode);
				// The StartTime Column
				this.columnStartTime = new global::System.Data.DataColumn("StartTime", typeof(System.DateTime), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnStartTime);
				// The StatusCode Column
				this.columnStatusCode = new global::System.Data.DataColumn("StatusCode", typeof(Teraque.StatusCode), null, global::System.Data.MappingType.Element);
				this.columnStatusCode.AllowDBNull = false;
				this.Columns.Add(this.columnStatusCode);
				// The StopPrice Column
				this.columnStopPrice = new global::System.Data.DataColumn("StopPrice", typeof(decimal), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnStopPrice);
				// The StopTime Column
				this.columnStopTime = new global::System.Data.DataColumn("StopTime", typeof(System.DateTime), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnStopTime);
				// The SubmittedQuantity Column
				this.columnSubmittedQuantity = new global::System.Data.DataColumn("SubmittedQuantity", typeof(decimal), null, global::System.Data.MappingType.Element);
				this.columnSubmittedQuantity.AllowDBNull = false;
				this.columnSubmittedQuantity.DefaultValue = 0.0m;
				this.Columns.Add(this.columnSubmittedQuantity);
				// The SubmittedTime Column
				this.columnSubmittedTime = new global::System.Data.DataColumn("SubmittedTime", typeof(System.DateTime), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnSubmittedTime);
				// The TimeInForceCode Column
				this.columnTimeInForceCode = new global::System.Data.DataColumn("TimeInForceCode", typeof(Teraque.TimeInForceCode), null, global::System.Data.MappingType.Element);
				this.columnTimeInForceCode.AllowDBNull = false;
				this.Columns.Add(this.columnTimeInForceCode);
				// The TradeDate Column
				this.columnTradeDate = new global::System.Data.DataColumn("TradeDate", typeof(System.DateTime), null, global::System.Data.MappingType.Element);
				this.columnTradeDate.AllowDBNull = false;
				this.Columns.Add(this.columnTradeDate);
				// The UploadedTime Column
				this.columnUploadedTime = new global::System.Data.DataColumn("UploadedTime", typeof(System.DateTime), null, global::System.Data.MappingType.Element);
				this.Columns.Add(this.columnUploadedTime);
				// The WorkingOrderId Column
				this.columnWorkingOrderId = new global::System.Data.DataColumn("WorkingOrderId", typeof(System.Guid), null, global::System.Data.MappingType.Element);
				this.columnWorkingOrderId.AllowDBNull = false;
				this.Columns.Add(this.columnWorkingOrderId);
				// The WorkingOrderKey Index
				this.indexWorkingOrderKey = new WorkingOrderKeyIndex("WorkingOrderKey", new global::System.Data.DataColumn[] {
							this.columnWorkingOrderId});
				this.Indices.Add(this.indexWorkingOrderKey);
				// The WorkingOrderKeyExternalId0 Index
				this.indexWorkingOrderKeyExternalId0 = new WorkingOrderKeyExternalId0Index("WorkingOrderKeyExternalId0", new global::System.Data.DataColumn[] {
							this.columnExternalId0});
				this.Indices.Add(this.indexWorkingOrderKeyExternalId0);
			}
			
			/// <summary>
			/// Gets the AutomaticQuantity column of the WorkingOrder table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn AutomaticQuantityColumn
			{
				get
				{
					return this.columnAutomaticQuantity;
				}
			}
			
			/// <summary>
			/// Gets the BlotterId column of the WorkingOrder table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn BlotterIdColumn
			{
				get
				{
					return this.columnBlotterId;
				}
			}
			
			/// <summary>
			/// Gets the parent relation between the Blotter and WorkingOrder tables.
			/// </summary>
			public global::System.Data.DataRelation BlotterWorkingOrderRelation
			{
				get
				{
					return this.relationBlotterWorkingOrder;
				}
			}
			
			/// <summary>
			/// Gets the number of rows in the WorkingOrder table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public int Count
			{
				get
				{
					return this.Rows.Count;
				}
			}
			
			/// <summary>
			/// Gets the CreatedTime column of the WorkingOrder table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn CreatedTimeColumn
			{
				get
				{
					return this.columnCreatedTime;
				}
			}
			
			/// <summary>
			/// Gets the CreatedUserId column of the WorkingOrder table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn CreatedUserIdColumn
			{
				get
				{
					return this.columnCreatedUserId;
				}
			}
			
			/// <summary>
			/// Gets the CrossingCode column of the WorkingOrder table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn CrossingCodeColumn
			{
				get
				{
					return this.columnCrossingCode;
				}
			}
			
			/// <summary>
			/// Gets the parent relation between the Crossing and WorkingOrder tables.
			/// </summary>
			public global::System.Data.DataRelation CrossingWorkingOrderRelation
			{
				get
				{
					return this.relationCrossingWorkingOrder;
				}
			}
			
			/// <summary>
			/// Gets the DestinationId column of the WorkingOrder table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn DestinationIdColumn
			{
				get
				{
					return this.columnDestinationId;
				}
			}
			
			/// <summary>
			/// Gets the parent relation between the Destination and WorkingOrder tables.
			/// </summary>
			public global::System.Data.DataRelation DestinationWorkingOrderRelation
			{
				get
				{
					return this.relationDestinationWorkingOrder;
				}
			}
			
			/// <summary>
			/// Gets the ExternalId0 column of the WorkingOrder table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn ExternalId0Column
			{
				get
				{
					return this.columnExternalId0;
				}
			}
			
			/// <summary>
			/// Gets a collection of Teraque.DataModelGenerator.DataIndices on a table.
			/// </summary>
			public global::Teraque.DataIndexCollection Indices
			{
				get
				{
					return this.dataIndices;
				}
			}
			
			/// <summary>
			/// Gets the IsAutomatic column of the WorkingOrder table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn IsAutomaticColumn
			{
				get
				{
					return this.columnIsAutomatic;
				}
			}
			
			/// <summary>
			/// Gets the IsAwake column of the WorkingOrder table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn IsAwakeColumn
			{
				get
				{
					return this.columnIsAwake;
				}
			}
			
			/// <summary>
			/// Gets the IsBrokerMatch column of the WorkingOrder table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn IsBrokerMatchColumn
			{
				get
				{
					return this.columnIsBrokerMatch;
				}
			}
			
			/// <summary>
			/// Gets the IsHedgeMatch column of the WorkingOrder table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn IsHedgeMatchColumn
			{
				get
				{
					return this.columnIsHedgeMatch;
				}
			}
			
			/// <summary>
			/// Gets the IsInstitutionMatch column of the WorkingOrder table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn IsInstitutionMatchColumn
			{
				get
				{
					return this.columnIsInstitutionMatch;
				}
			}
			
			/// <summary>
			/// Indexer to a row in the WorkingOrder table.
			/// </summary>
			/// <param name="index">The integer index of the row.</param>
			/// <returns>The WorkingOrder row found at the given index.</returns>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public DataModel.WorkingOrderRow this[int index]
			{
				get
				{
					return ((DataModel.WorkingOrderRow)(this.Rows[index]));
				}
			}
			
			/// <summary>
			/// Gets the LimitPrice column of the WorkingOrder table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn LimitPriceColumn
			{
				get
				{
					return this.columnLimitPrice;
				}
			}
			
			/// <summary>
			/// Gets the ModifiedTime column of the WorkingOrder table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn ModifiedTimeColumn
			{
				get
				{
					return this.columnModifiedTime;
				}
			}
			
			/// <summary>
			/// Gets the ModifiedUserId column of the WorkingOrder table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn ModifiedUserIdColumn
			{
				get
				{
					return this.columnModifiedUserId;
				}
			}
			
			/// <summary>
			/// Gets the OrderTypeCode column of the WorkingOrder table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn OrderTypeCodeColumn
			{
				get
				{
					return this.columnOrderTypeCode;
				}
			}
			
			/// <summary>
			/// Gets the parent relation between the OrderType and WorkingOrder tables.
			/// </summary>
			public global::System.Data.DataRelation OrderTypeWorkingOrderRelation
			{
				get
				{
					return this.relationOrderTypeWorkingOrder;
				}
			}
			
			/// <summary>
			/// Gets the RowVersion column of the WorkingOrder table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn RowVersionColumn
			{
				get
				{
					return this.columnRowVersion;
				}
			}
			
			/// <summary>
			/// Gets the SecurityId column of the WorkingOrder table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn SecurityIdColumn
			{
				get
				{
					return this.columnSecurityId;
				}
			}
			
			/// <summary>
			/// Gets the parent relation between the Security and WorkingOrder tables.
			/// </summary>
			public global::System.Data.DataRelation SecurityWorkingOrderByFK_Security_WorkingOrder_SecurityIdRelation
			{
				get
				{
					return this.relationSecurityWorkingOrderByFK_Security_WorkingOrder_SecurityId;
				}
			}
			
			/// <summary>
			/// Gets the parent relation between the Security and WorkingOrder tables.
			/// </summary>
			public global::System.Data.DataRelation SecurityWorkingOrderByFK_Security_WorkingOrder_SettlementIdRelation
			{
				get
				{
					return this.relationSecurityWorkingOrderByFK_Security_WorkingOrder_SettlementId;
				}
			}
			
			/// <summary>
			/// Gets the SettlementDate column of the WorkingOrder table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn SettlementDateColumn
			{
				get
				{
					return this.columnSettlementDate;
				}
			}
			
			/// <summary>
			/// Gets the SettlementId column of the WorkingOrder table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn SettlementIdColumn
			{
				get
				{
					return this.columnSettlementId;
				}
			}
			
			/// <summary>
			/// Gets the SideCode column of the WorkingOrder table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn SideCodeColumn
			{
				get
				{
					return this.columnSideCode;
				}
			}
			
			/// <summary>
			/// Gets the parent relation between the Side and WorkingOrder tables.
			/// </summary>
			public global::System.Data.DataRelation SideWorkingOrderRelation
			{
				get
				{
					return this.relationSideWorkingOrder;
				}
			}
			
			/// <summary>
			/// Gets the StartTime column of the WorkingOrder table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn StartTimeColumn
			{
				get
				{
					return this.columnStartTime;
				}
			}
			
			/// <summary>
			/// Gets the StatusCode column of the WorkingOrder table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn StatusCodeColumn
			{
				get
				{
					return this.columnStatusCode;
				}
			}
			
			/// <summary>
			/// Gets the parent relation between the Status and WorkingOrder tables.
			/// </summary>
			public global::System.Data.DataRelation StatusWorkingOrderRelation
			{
				get
				{
					return this.relationStatusWorkingOrder;
				}
			}
			
			/// <summary>
			/// Gets the StopPrice column of the WorkingOrder table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn StopPriceColumn
			{
				get
				{
					return this.columnStopPrice;
				}
			}
			
			/// <summary>
			/// Gets the StopTime column of the WorkingOrder table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn StopTimeColumn
			{
				get
				{
					return this.columnStopTime;
				}
			}
			
			/// <summary>
			/// Gets the SubmittedQuantity column of the WorkingOrder table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn SubmittedQuantityColumn
			{
				get
				{
					return this.columnSubmittedQuantity;
				}
			}
			
			/// <summary>
			/// Gets the SubmittedTime column of the WorkingOrder table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn SubmittedTimeColumn
			{
				get
				{
					return this.columnSubmittedTime;
				}
			}
			
			/// <summary>
			/// Gets the TimeInForceCode column of the WorkingOrder table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn TimeInForceCodeColumn
			{
				get
				{
					return this.columnTimeInForceCode;
				}
			}
			
			/// <summary>
			/// Gets the parent relation between the TimeInForce and WorkingOrder tables.
			/// </summary>
			public global::System.Data.DataRelation TimeInForceWorkingOrderRelation
			{
				get
				{
					return this.relationTimeInForceWorkingOrder;
				}
			}
			
			/// <summary>
			/// Gets the TradeDate column of the WorkingOrder table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn TradeDateColumn
			{
				get
				{
					return this.columnTradeDate;
				}
			}
			
			/// <summary>
			/// Gets the UploadedTime column of the WorkingOrder table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn UploadedTimeColumn
			{
				get
				{
					return this.columnUploadedTime;
				}
			}
			
			/// <summary>
			/// Gets the parent relation between the User and WorkingOrder tables.
			/// </summary>
			public global::System.Data.DataRelation UserWorkingOrderByFK_User_WorkingOrder_CreatedUserIdRelation
			{
				get
				{
					return this.relationUserWorkingOrderByFK_User_WorkingOrder_CreatedUserId;
				}
			}
			
			/// <summary>
			/// Gets the parent relation between the User and WorkingOrder tables.
			/// </summary>
			public global::System.Data.DataRelation UserWorkingOrderByFK_User_WorkingOrder_ModifiedUserIdRelation
			{
				get
				{
					return this.relationUserWorkingOrderByFK_User_WorkingOrder_ModifiedUserId;
				}
			}
			
			/// <summary>
			/// Gets the child relation between the WorkingOrder and Allocation tables.
			/// </summary>
			internal global::System.Data.DataRelation WorkingOrderAllocationRelation
			{
				get
				{
					return this.relationWorkingOrderAllocation;
				}
			}
			
			/// <summary>
			/// Gets the child relation between the WorkingOrder and DestinationOrder tables.
			/// </summary>
			internal global::System.Data.DataRelation WorkingOrderDestinationOrderRelation
			{
				get
				{
					return this.relationWorkingOrderDestinationOrder;
				}
			}
			
			/// <summary>
			/// Gets the WorkingOrderId column of the WorkingOrder table.
			/// </summary>
			[global::System.ComponentModel.BrowsableAttribute(false)]
			public global::System.Data.DataColumn WorkingOrderIdColumn
			{
				get
				{
					return this.columnWorkingOrderId;
				}
			}
			
			/// <summary>
			/// Gets the WorkingOrderKey index on the WorkingOrder table.
			/// </summary>
			public WorkingOrderKeyIndex WorkingOrderKey
			{
				get
				{
					return ((WorkingOrderKeyIndex)(this.indexWorkingOrderKey));
				}
			}
			
			/// <summary>
			/// Gets the WorkingOrderKeyExternalId0 index on the WorkingOrder table.
			/// </summary>
			public WorkingOrderKeyExternalId0Index WorkingOrderKeyExternalId0
			{
				get
				{
					return ((WorkingOrderKeyExternalId0Index)(this.indexWorkingOrderKeyExternalId0));
				}
			}
			
			/// <summary>
			/// Gets the child relation between the WorkingOrder and Match tables.
			/// </summary>
			internal global::System.Data.DataRelation WorkingOrderMatchRelation
			{
				get
				{
					return this.relationWorkingOrderMatch;
				}
			}
			
			/// <summary>
			/// Gets the child relation between the WorkingOrder and SourceOrder tables.
			/// </summary>
			internal global::System.Data.DataRelation WorkingOrderSourceOrderRelation
			{
				get
				{
					return this.relationWorkingOrderSourceOrder;
				}
			}
			
			/// <summary>
			/// Occurs after a WorkingOrder row has been changed successfully.
			/// </summary>
			public event WorkingOrderRowChangeEventHandler WorkingOrderRowChanged;
			
			/// <summary>
			/// Occurs when a WorkingOrder row is changing.
			/// </summary>
			public event WorkingOrderRowChangeEventHandler WorkingOrderRowChanging;
			
			/// <summary>
			/// Occurs after a WorkingOrder row in the table has been deleted.
			/// </summary>
			public event WorkingOrderRowChangeEventHandler WorkingOrderRowDeleted;
			
			/// <summary>
			/// Occurs before a WorkingOrder row in the table is about to be deleted.
			/// </summary>
			public event WorkingOrderRowChangeEventHandler WorkingOrderRowDeleting;
			
			/// <summary>
			/// Returns the type of the row in a WorkingOrder table.
			/// </summary>
			/// <returns>The WorkingOrderRow type.</returns>
			protected override global::System.Type GetRowType()
			{
				return typeof(WorkingOrderRow);
			}
			
			/// <summary>
			/// Initializes the relation fields with the parent and child relations.
			/// </summary>
			internal void InitializeRelations()
			{
				this.relationBlotterWorkingOrder = this.ParentRelations["FK_Blotter_WorkingOrder"];
				this.relationCrossingWorkingOrder = this.ParentRelations["FK_Crossing_WorkingOrder"];
				this.relationDestinationWorkingOrder = this.ParentRelations["FK_Destination_WorkingOrder"];
				this.relationOrderTypeWorkingOrder = this.ParentRelations["FK_OrderType_WorkingOrder"];
				this.relationSecurityWorkingOrderByFK_Security_WorkingOrder_SecurityId = this.ParentRelations["FK_Security_WorkingOrder_SecurityId"];
				this.relationSecurityWorkingOrderByFK_Security_WorkingOrder_SettlementId = this.ParentRelations["FK_Security_WorkingOrder_SettlementId"];
				this.relationSideWorkingOrder = this.ParentRelations["FK_Side_WorkingOrder"];
				this.relationStatusWorkingOrder = this.ParentRelations["FK_Status_WorkingOrder"];
				this.relationTimeInForceWorkingOrder = this.ParentRelations["FK_TimeInForce_WorkingOrder"];
				this.relationUserWorkingOrderByFK_User_WorkingOrder_CreatedUserId = this.ParentRelations["FK_User_WorkingOrder_CreatedUserId"];
				this.relationUserWorkingOrderByFK_User_WorkingOrder_ModifiedUserId = this.ParentRelations["FK_User_WorkingOrder_ModifiedUserId"];
				this.relationWorkingOrderAllocation = this.ChildRelations["FK_WorkingOrder_Allocation"];
				this.relationWorkingOrderDestinationOrder = this.ChildRelations["FK_WorkingOrder_DestinationOrder"];
				this.relationWorkingOrderMatch = this.ChildRelations["FK_WorkingOrder_Match"];
				this.relationWorkingOrderSourceOrder = this.ChildRelations["FK_WorkingOrder_SourceOrder"];
			}
			
			/// <summary>
			/// Initializes a new instance of a WorkingOrder row.  Constructs a row from the builder.  Only for internal usage.
			/// </summary>
			/// <returns>A new row with the same schema as the table.</returns>
			protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder dataRowBuilder)
			{
				return new WorkingOrderRow(dataRowBuilder);
			}
			
			/// <summary>
			/// Raises the WorkingOrderRowChanged event.
			/// </summary>
			/// <param name="e">Provides data for the WorkingOrderRow changing and deleting events.</param>
			protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowChanged(e);
				if ((this.WorkingOrderRowChanged != null))
				{
					this.WorkingOrderRowChanged(this, new WorkingOrderRowChangeEventArgs(((WorkingOrderRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the WorkingOrderRowChanging event.
			/// </summary>
			/// <param name="e">Provides data for the WorkingOrderRow changing and deleting events.</param>
			protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowChanging(e);
				if ((this.WorkingOrderRowChanging != null))
				{
					this.WorkingOrderRowChanging(this, new WorkingOrderRowChangeEventArgs(((WorkingOrderRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the WorkingOrderRowDeleted event.
			/// </summary>
			/// <param name="e">Provides data for the WorkingOrderRow changing and deleting events.</param>
			protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowDeleted(e);
				if ((this.WorkingOrderRowDeleted != null))
				{
					this.WorkingOrderRowDeleted(this, new WorkingOrderRowChangeEventArgs(((WorkingOrderRow)(e.Row)), e.Action));
				}
			}
			
			/// <summary>
			/// Raises the WorkingOrderRowDeleting event.
			/// </summary>
			/// <param name="e">Provides data for the WorkingOrderRow changing and deleting events.</param>
			protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e)
			{
				base.OnRowDeleting(e);
				if ((this.WorkingOrderRowDeleting != null))
				{
					this.WorkingOrderRowDeleting(this, new WorkingOrderRowChangeEventArgs(((WorkingOrderRow)(e.Row)), e.Action));
				}
			}
		}
		
		/// <summary>
		/// Represents a row of data in the Account table.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		public partial class AccountRow : global::System.Data.DataRow
		{
			
			private AccountDataTable tableAccount;
			
			/// <summary>
			/// Creates a row of data from the Account table schema.
			/// </summary>
			/// <param name="dataRowBuilder">An internal data structure used to build the row from the parent table schema.</param>
			internal AccountRow(global::System.Data.DataRowBuilder dataRowBuilder) : 
					base(dataRowBuilder)
			{
				// This creates a strongly typed Account row using the generic construction methods.
				this.tableAccount = ((AccountDataTable)(this.Table));
			}
			
			/// <summary>
			/// Gets or sets the data in the AccountId column.
			/// </summary>
			public global::System.Guid AccountId
			{
				get
				{
					return ((global::System.Guid)(this[this.tableAccount.AccountIdColumn]));
				}
				set
				{
					this[this.tableAccount.AccountIdColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the CurrencyId column.
			/// </summary>
			public global::System.Guid CurrencyId
			{
				get
				{
					return ((global::System.Guid)(this[this.tableAccount.CurrencyIdColumn]));
				}
				set
				{
					this[this.tableAccount.CurrencyIdColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets the parent row in the Currency table.
			/// </summary>
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public CurrencyRow CurrencyRow
			{
				get
				{
					return ((CurrencyRow)(this.GetParentRow(this.tableAccount.CurrencyAccountRelation)));
				}
			}
			
			/// <summary>
			/// Gets the parent row in the Entity table.
			/// </summary>
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public EntityRow EntityRow
			{
				get
				{
					return ((EntityRow)(this.GetParentRow(this.tableAccount.EntityAccountRelation)));
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the Mnemonic column.
			/// </summary>
			public string Mnemonic
			{
				get
				{
					try
					{
						return ((string)(this[this.tableAccount.MnemonicColumn]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableAccount.MnemonicColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the RowVersion column.
			/// </summary>
			public long RowVersion
			{
				get
				{
					return ((long)(this[this.tableAccount.RowVersionColumn]));
				}
				set
				{
					this[this.tableAccount.RowVersionColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets the children rows in the AccountSeries table.
			/// </summary>
			public AccountSeriesRow[] GetAccountSeriesRows()
			{
				return ((AccountSeriesRow[])(this.GetChildRows(this.tableAccount.AccountAccountSeriesRelation)));
			}
			
			/// <summary>
			/// Gets the children rows in the Allocation table.
			/// </summary>
			public AllocationRow[] GetAllocationRows()
			{
				return ((AllocationRow[])(this.GetChildRows(this.tableAccount.AccountAllocationRelation)));
			}
			
			/// <summary>
			/// Gets the children rows in the GroupAccount table.
			/// </summary>
			public GroupAccountRow[] GetGroupAccountRows()
			{
				return ((GroupAccountRow[])(this.GetChildRows(this.tableAccount.AccountGroupAccountRelation)));
			}
			
			/// <summary>
			/// Gets the children rows in the Position table.
			/// </summary>
			public PositionRow[] GetPositionRows()
			{
				return ((PositionRow[])(this.GetChildRows(this.tableAccount.AccountPositionRelation)));
			}
			
			/// <summary>
			/// Gets the children rows in the PositionSeries table.
			/// </summary>
			public PositionSeriesRow[] GetPositionSeriesRows()
			{
				return ((PositionSeriesRow[])(this.GetChildRows(this.tableAccount.AccountPositionSeriesRelation)));
			}
			
			/// <summary>
			/// Gets the children rows in the SingleAccount table.
			/// </summary>
			public SingleAccountRow[] GetSingleAccountRows()
			{
				return ((SingleAccountRow[])(this.GetChildRows(this.tableAccount.AccountSingleAccountRelation)));
			}
			
			/// <summary>
			/// Gets the children rows in the TaxLot table.
			/// </summary>
			public TaxLotRow[] GetTaxLotRows()
			{
				return ((TaxLotRow[])(this.GetChildRows(this.tableAccount.AccountTaxLotRelation)));
			}
			
			/// <summary>
			/// Gets the children rows in the TaxLotSeries table.
			/// </summary>
			public TaxLotSeriesRow[] GetTaxLotSeriesRows()
			{
				return ((TaxLotSeriesRow[])(this.GetChildRows(this.tableAccount.AccountTaxLotSeriesRelation)));
			}
			
			/// <summary>
			/// Gets the Null property of the Mnemonic column.
			/// </summary>
			public bool IsMnemonicNull()
			{
				return (this[this.tableAccount.MnemonicColumn] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Sets the Null property of the Mnemonic column.
			/// </summary>
			public void SetMnemonicNull()
			{
				this[this.tableAccount.MnemonicColumn] = global::System.DBNull.Value;
			}
		}
		
		/// <summary>
		/// Represents a row of data in the AccountSeries table.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		public partial class AccountSeriesRow : global::System.Data.DataRow
		{
			
			private AccountSeriesDataTable tableAccountSeries;
			
			/// <summary>
			/// Creates a row of data from the AccountSeries table schema.
			/// </summary>
			/// <param name="dataRowBuilder">An internal data structure used to build the row from the parent table schema.</param>
			internal AccountSeriesRow(global::System.Data.DataRowBuilder dataRowBuilder) : 
					base(dataRowBuilder)
			{
				// This creates a strongly typed AccountSeries row using the generic construction methods.
				this.tableAccountSeries = ((AccountSeriesDataTable)(this.Table));
			}
			
			/// <summary>
			/// Gets the parent row in the Account table.
			/// </summary>
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public AccountRow AccountRow
			{
				get
				{
					return ((AccountRow)(this.GetParentRow(this.tableAccountSeries.AccountAccountSeriesRelation)));
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the AccountSeriesId column.
			/// </summary>
			public global::System.Guid AccountSeriesId
			{
				get
				{
					return ((global::System.Guid)(this[this.tableAccountSeries.AccountSeriesIdColumn]));
				}
				set
				{
					this[this.tableAccountSeries.AccountSeriesIdColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the Date column.
			/// </summary>
			public global::System.DateTime Date
			{
				get
				{
					return ((global::System.DateTime)(this[this.tableAccountSeries.DateColumn]));
				}
				set
				{
					this[this.tableAccountSeries.DateColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the MonthToDayLinkedReturn column.
			/// </summary>
			public decimal MonthToDayLinkedReturn
			{
				get
				{
					return ((decimal)(this[this.tableAccountSeries.MonthToDayLinkedReturnColumn]));
				}
				set
				{
					this[this.tableAccountSeries.MonthToDayLinkedReturnColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the MonthToDayProfitAndLoss column.
			/// </summary>
			public decimal MonthToDayProfitAndLoss
			{
				get
				{
					return ((decimal)(this[this.tableAccountSeries.MonthToDayProfitAndLossColumn]));
				}
				set
				{
					this[this.tableAccountSeries.MonthToDayProfitAndLossColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the QuarterToDayLinkedReturn column.
			/// </summary>
			public decimal QuarterToDayLinkedReturn
			{
				get
				{
					return ((decimal)(this[this.tableAccountSeries.QuarterToDayLinkedReturnColumn]));
				}
				set
				{
					this[this.tableAccountSeries.QuarterToDayLinkedReturnColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the QuarterToDayProfitAndLoss column.
			/// </summary>
			public decimal QuarterToDayProfitAndLoss
			{
				get
				{
					return ((decimal)(this[this.tableAccountSeries.QuarterToDayProfitAndLossColumn]));
				}
				set
				{
					this[this.tableAccountSeries.QuarterToDayProfitAndLossColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the RowVersion column.
			/// </summary>
			public long RowVersion
			{
				get
				{
					return ((long)(this[this.tableAccountSeries.RowVersionColumn]));
				}
				set
				{
					this[this.tableAccountSeries.RowVersionColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the TotalExposureBase column.
			/// </summary>
			public decimal TotalExposureBase
			{
				get
				{
					return ((decimal)(this[this.tableAccountSeries.TotalExposureBaseColumn]));
				}
				set
				{
					this[this.tableAccountSeries.TotalExposureBaseColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the TotalExposureLocal column.
			/// </summary>
			public decimal TotalExposureLocal
			{
				get
				{
					return ((decimal)(this[this.tableAccountSeries.TotalExposureLocalColumn]));
				}
				set
				{
					this[this.tableAccountSeries.TotalExposureLocalColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the TotalMarketValueBase column.
			/// </summary>
			public decimal TotalMarketValueBase
			{
				get
				{
					return ((decimal)(this[this.tableAccountSeries.TotalMarketValueBaseColumn]));
				}
				set
				{
					this[this.tableAccountSeries.TotalMarketValueBaseColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the TotalMarketValueLocal column.
			/// </summary>
			public decimal TotalMarketValueLocal
			{
				get
				{
					return ((decimal)(this[this.tableAccountSeries.TotalMarketValueLocalColumn]));
				}
				set
				{
					this[this.tableAccountSeries.TotalMarketValueLocalColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the TrailingOneDayLinkedReturn column.
			/// </summary>
			public decimal TrailingOneDayLinkedReturn
			{
				get
				{
					return ((decimal)(this[this.tableAccountSeries.TrailingOneDayLinkedReturnColumn]));
				}
				set
				{
					this[this.tableAccountSeries.TrailingOneDayLinkedReturnColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the TrailingOneDayProfitAndLoss column.
			/// </summary>
			public decimal TrailingOneDayProfitAndLoss
			{
				get
				{
					return ((decimal)(this[this.tableAccountSeries.TrailingOneDayProfitAndLossColumn]));
				}
				set
				{
					this[this.tableAccountSeries.TrailingOneDayProfitAndLossColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the TrailingOneMonthLinkedReturn column.
			/// </summary>
			public decimal TrailingOneMonthLinkedReturn
			{
				get
				{
					return ((decimal)(this[this.tableAccountSeries.TrailingOneMonthLinkedReturnColumn]));
				}
				set
				{
					this[this.tableAccountSeries.TrailingOneMonthLinkedReturnColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the TrailingOneMonthProfitAndLoss column.
			/// </summary>
			public decimal TrailingOneMonthProfitAndLoss
			{
				get
				{
					return ((decimal)(this[this.tableAccountSeries.TrailingOneMonthProfitAndLossColumn]));
				}
				set
				{
					this[this.tableAccountSeries.TrailingOneMonthProfitAndLossColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the TrailingOneYearLinkedReturn column.
			/// </summary>
			public decimal TrailingOneYearLinkedReturn
			{
				get
				{
					return ((decimal)(this[this.tableAccountSeries.TrailingOneYearLinkedReturnColumn]));
				}
				set
				{
					this[this.tableAccountSeries.TrailingOneYearLinkedReturnColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the TrailingOneYearProfitAndLoss column.
			/// </summary>
			public decimal TrailingOneYearProfitAndLoss
			{
				get
				{
					return ((decimal)(this[this.tableAccountSeries.TrailingOneYearProfitAndLossColumn]));
				}
				set
				{
					this[this.tableAccountSeries.TrailingOneYearProfitAndLossColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the TrailingSixMonthLinkedReturn column.
			/// </summary>
			public decimal TrailingSixMonthLinkedReturn
			{
				get
				{
					return ((decimal)(this[this.tableAccountSeries.TrailingSixMonthLinkedReturnColumn]));
				}
				set
				{
					this[this.tableAccountSeries.TrailingSixMonthLinkedReturnColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the TrailingSixMonthProfitAndLoss column.
			/// </summary>
			public decimal TrailingSixMonthProfitAndLoss
			{
				get
				{
					return ((decimal)(this[this.tableAccountSeries.TrailingSixMonthProfitAndLossColumn]));
				}
				set
				{
					this[this.tableAccountSeries.TrailingSixMonthProfitAndLossColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the TrailingThreeMonthLinkedReturn column.
			/// </summary>
			public decimal TrailingThreeMonthLinkedReturn
			{
				get
				{
					return ((decimal)(this[this.tableAccountSeries.TrailingThreeMonthLinkedReturnColumn]));
				}
				set
				{
					this[this.tableAccountSeries.TrailingThreeMonthLinkedReturnColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the TrailingThreeMonthProfitAndLoss column.
			/// </summary>
			public decimal TrailingThreeMonthProfitAndLoss
			{
				get
				{
					return ((decimal)(this[this.tableAccountSeries.TrailingThreeMonthProfitAndLossColumn]));
				}
				set
				{
					this[this.tableAccountSeries.TrailingThreeMonthProfitAndLossColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the YearToDayLinkedReturn column.
			/// </summary>
			public decimal YearToDayLinkedReturn
			{
				get
				{
					return ((decimal)(this[this.tableAccountSeries.YearToDayLinkedReturnColumn]));
				}
				set
				{
					this[this.tableAccountSeries.YearToDayLinkedReturnColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the YearToDayProfitAndLoss column.
			/// </summary>
			public decimal YearToDayProfitAndLoss
			{
				get
				{
					return ((decimal)(this[this.tableAccountSeries.YearToDayProfitAndLossColumn]));
				}
				set
				{
					this[this.tableAccountSeries.YearToDayProfitAndLossColumn] = value;
				}
			}
		}
		
		/// <summary>
		/// Represents a row of data in the Allocation table.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		public partial class AllocationRow : global::System.Data.DataRow
		{
			
			private AllocationDataTable tableAllocation;
			
			/// <summary>
			/// Creates a row of data from the Allocation table schema.
			/// </summary>
			/// <param name="dataRowBuilder">An internal data structure used to build the row from the parent table schema.</param>
			internal AllocationRow(global::System.Data.DataRowBuilder dataRowBuilder) : 
					base(dataRowBuilder)
			{
				// This creates a strongly typed Allocation row using the generic construction methods.
				this.tableAllocation = ((AllocationDataTable)(this.Table));
			}
			
			/// <summary>
			/// Gets or sets the data in the AccountId column.
			/// </summary>
			public global::System.Guid AccountId
			{
				get
				{
					return ((global::System.Guid)(this[this.tableAllocation.AccountIdColumn]));
				}
				set
				{
					this[this.tableAllocation.AccountIdColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets the parent row in the Account table.
			/// </summary>
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public AccountRow AccountRow
			{
				get
				{
					return ((AccountRow)(this.GetParentRow(this.tableAllocation.AccountAllocationRelation)));
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the AccruedInterest column.
			/// </summary>
			public decimal AccruedInterest
			{
				get
				{
					return ((decimal)(this[this.tableAllocation.AccruedInterestColumn]));
				}
				set
				{
					this[this.tableAllocation.AccruedInterestColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the AllocationId column.
			/// </summary>
			public global::System.Guid AllocationId
			{
				get
				{
					return ((global::System.Guid)(this[this.tableAllocation.AllocationIdColumn]));
				}
				set
				{
					this[this.tableAllocation.AllocationIdColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the Commission column.
			/// </summary>
			public decimal Commission
			{
				get
				{
					return ((decimal)(this[this.tableAllocation.CommissionColumn]));
				}
				set
				{
					this[this.tableAllocation.CommissionColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the CreatedTime column.
			/// </summary>
			public global::System.DateTime CreatedTime
			{
				get
				{
					return ((global::System.DateTime)(this[this.tableAllocation.CreatedTimeColumn]));
				}
				set
				{
					this[this.tableAllocation.CreatedTimeColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the CreatedUserId column.
			/// </summary>
			public global::System.Guid CreatedUserId
			{
				get
				{
					return ((global::System.Guid)(this[this.tableAllocation.CreatedUserIdColumn]));
				}
				set
				{
					this[this.tableAllocation.CreatedUserIdColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the ExternalId0 column.
			/// </summary>
			public string ExternalId0
			{
				get
				{
					try
					{
						return ((string)(this[this.tableAllocation.ExternalId0Column]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableAllocation.ExternalId0Column] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the ModifiedTime column.
			/// </summary>
			public global::System.DateTime ModifiedTime
			{
				get
				{
					return ((global::System.DateTime)(this[this.tableAllocation.ModifiedTimeColumn]));
				}
				set
				{
					this[this.tableAllocation.ModifiedTimeColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the ModifiedUserId column.
			/// </summary>
			public global::System.Guid ModifiedUserId
			{
				get
				{
					return ((global::System.Guid)(this[this.tableAllocation.ModifiedUserIdColumn]));
				}
				set
				{
					this[this.tableAllocation.ModifiedUserIdColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the PositionTypeCode column.
			/// </summary>
			public global::Teraque.PositionTypeCode PositionTypeCode
			{
				get
				{
					return ((global::Teraque.PositionTypeCode)(this[this.tableAllocation.PositionTypeCodeColumn]));
				}
				set
				{
					this[this.tableAllocation.PositionTypeCodeColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the Price column.
			/// </summary>
			public decimal Price
			{
				get
				{
					return ((decimal)(this[this.tableAllocation.PriceColumn]));
				}
				set
				{
					this[this.tableAllocation.PriceColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the Quantity column.
			/// </summary>
			public decimal Quantity
			{
				get
				{
					return ((decimal)(this[this.tableAllocation.QuantityColumn]));
				}
				set
				{
					this[this.tableAllocation.QuantityColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the RowVersion column.
			/// </summary>
			public long RowVersion
			{
				get
				{
					return ((long)(this[this.tableAllocation.RowVersionColumn]));
				}
				set
				{
					this[this.tableAllocation.RowVersionColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the SecurityId column.
			/// </summary>
			public global::System.Guid SecurityId
			{
				get
				{
					return ((global::System.Guid)(this[this.tableAllocation.SecurityIdColumn]));
				}
				set
				{
					this[this.tableAllocation.SecurityIdColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets the parent row in the Security table.
			/// </summary>
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public SecurityRow SecurityRowByFK_Security_Allocation_SecurityId
			{
				get
				{
					return ((SecurityRow)(this.GetParentRow(this.tableAllocation.SecurityAllocationByFK_Security_Allocation_SecurityIdRelation)));
				}
			}
			
			/// <summary>
			/// Gets the parent row in the Security table.
			/// </summary>
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public SecurityRow SecurityRowByFK_Security_Allocation_SettlementId
			{
				get
				{
					return ((SecurityRow)(this.GetParentRow(this.tableAllocation.SecurityAllocationByFK_Security_Allocation_SettlementIdRelation)));
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the SettlementDate column.
			/// </summary>
			public global::System.DateTime SettlementDate
			{
				get
				{
					return ((global::System.DateTime)(this[this.tableAllocation.SettlementDateColumn]));
				}
				set
				{
					this[this.tableAllocation.SettlementDateColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the SettlementId column.
			/// </summary>
			public global::System.Guid SettlementId
			{
				get
				{
					return ((global::System.Guid)(this[this.tableAllocation.SettlementIdColumn]));
				}
				set
				{
					this[this.tableAllocation.SettlementIdColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the SideCode column.
			/// </summary>
			public global::Teraque.SideCode SideCode
			{
				get
				{
					return ((global::Teraque.SideCode)(this[this.tableAllocation.SideCodeColumn]));
				}
				set
				{
					this[this.tableAllocation.SideCodeColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets the parent row in the Side table.
			/// </summary>
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public SideRow SideRow
			{
				get
				{
					return ((SideRow)(this.GetParentRow(this.tableAllocation.SideAllocationRelation)));
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the TradeDate column.
			/// </summary>
			public global::System.DateTime TradeDate
			{
				get
				{
					return ((global::System.DateTime)(this[this.tableAllocation.TradeDateColumn]));
				}
				set
				{
					this[this.tableAllocation.TradeDateColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the UserFee0 column.
			/// </summary>
			public decimal UserFee0
			{
				get
				{
					return ((decimal)(this[this.tableAllocation.UserFee0Column]));
				}
				set
				{
					this[this.tableAllocation.UserFee0Column] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the UserFee1 column.
			/// </summary>
			public decimal UserFee1
			{
				get
				{
					return ((decimal)(this[this.tableAllocation.UserFee1Column]));
				}
				set
				{
					this[this.tableAllocation.UserFee1Column] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the UserFee2 column.
			/// </summary>
			public decimal UserFee2
			{
				get
				{
					return ((decimal)(this[this.tableAllocation.UserFee2Column]));
				}
				set
				{
					this[this.tableAllocation.UserFee2Column] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the UserFee3 column.
			/// </summary>
			public decimal UserFee3
			{
				get
				{
					return ((decimal)(this[this.tableAllocation.UserFee3Column]));
				}
				set
				{
					this[this.tableAllocation.UserFee3Column] = value;
				}
			}
			
			/// <summary>
			/// Gets the parent row in the User table.
			/// </summary>
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public UserRow UserRowByFK_User_Allocation_CreatedUserId
			{
				get
				{
					return ((UserRow)(this.GetParentRow(this.tableAllocation.UserAllocationByFK_User_Allocation_CreatedUserIdRelation)));
				}
			}
			
			/// <summary>
			/// Gets the parent row in the User table.
			/// </summary>
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public UserRow UserRowByFK_User_Allocation_ModifiedUserId
			{
				get
				{
					return ((UserRow)(this.GetParentRow(this.tableAllocation.UserAllocationByFK_User_Allocation_ModifiedUserIdRelation)));
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the WorkingOrderId column.
			/// </summary>
			public global::System.Guid WorkingOrderId
			{
				get
				{
					return ((global::System.Guid)(this[this.tableAllocation.WorkingOrderIdColumn]));
				}
				set
				{
					this[this.tableAllocation.WorkingOrderIdColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets the parent row in the WorkingOrder table.
			/// </summary>
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public WorkingOrderRow WorkingOrderRow
			{
				get
				{
					return ((WorkingOrderRow)(this.GetParentRow(this.tableAllocation.WorkingOrderAllocationRelation)));
				}
			}
			
			/// <summary>
			/// Gets the Null property of the ExternalId0 column.
			/// </summary>
			public bool IsExternalId0Null()
			{
				return (this[this.tableAllocation.ExternalId0Column] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Sets the Null property of the ExternalId0 column.
			/// </summary>
			public void SetExternalId0Null()
			{
				this[this.tableAllocation.ExternalId0Column] = global::System.DBNull.Value;
			}
		}
		
		/// <summary>
		/// Represents a row of data in the Blotter table.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		public partial class BlotterRow : global::System.Data.DataRow
		{
			
			private BlotterDataTable tableBlotter;
			
			/// <summary>
			/// Creates a row of data from the Blotter table schema.
			/// </summary>
			/// <param name="dataRowBuilder">An internal data structure used to build the row from the parent table schema.</param>
			internal BlotterRow(global::System.Data.DataRowBuilder dataRowBuilder) : 
					base(dataRowBuilder)
			{
				// This creates a strongly typed Blotter row using the generic construction methods.
				this.tableBlotter = ((BlotterDataTable)(this.Table));
			}
			
			/// <summary>
			/// Gets or sets the data in the BlotterId column.
			/// </summary>
			public global::System.Guid BlotterId
			{
				get
				{
					return ((global::System.Guid)(this[this.tableBlotter.BlotterIdColumn]));
				}
				set
				{
					this[this.tableBlotter.BlotterIdColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets the parent row in the Entity table.
			/// </summary>
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public EntityRow EntityRow
			{
				get
				{
					return ((EntityRow)(this.GetParentRow(this.tableBlotter.EntityBlotterRelation)));
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the PartyTypeCode column.
			/// </summary>
			public global::Teraque.PartyTypeCode PartyTypeCode
			{
				get
				{
					return ((global::Teraque.PartyTypeCode)(this[this.tableBlotter.PartyTypeCodeColumn]));
				}
				set
				{
					this[this.tableBlotter.PartyTypeCodeColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets the parent row in the PartyType table.
			/// </summary>
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public PartyTypeRow PartyTypeRow
			{
				get
				{
					return ((PartyTypeRow)(this.GetParentRow(this.tableBlotter.PartyTypeBlotterRelation)));
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the RowVersion column.
			/// </summary>
			public long RowVersion
			{
				get
				{
					return ((long)(this[this.tableBlotter.RowVersionColumn]));
				}
				set
				{
					this[this.tableBlotter.RowVersionColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets the children rows in the BlotterDestinationMap table.
			/// </summary>
			public BlotterDestinationMapRow[] GetBlotterDestinationMapRows()
			{
				return ((BlotterDestinationMapRow[])(this.GetChildRows(this.tableBlotter.BlotterBlotterDestinationMapRelation)));
			}
			
			/// <summary>
			/// Gets the children rows in the Branch table.
			/// </summary>
			public BranchRow[] GetBranchRows()
			{
				return ((BranchRow[])(this.GetChildRows(this.tableBlotter.BlotterBranchRelation)));
			}
			
			/// <summary>
			/// Gets the children rows in the Match table.
			/// </summary>
			public MatchRow[] GetMatchRows()
			{
				return ((MatchRow[])(this.GetChildRows(this.tableBlotter.BlotterMatchRelation)));
			}
			
			/// <summary>
			/// Gets the children rows in the Negotiation table.
			/// </summary>
			public NegotiationRow[] GetNegotiationRows()
			{
				return ((NegotiationRow[])(this.GetChildRows(this.tableBlotter.BlotterNegotiationRelation)));
			}
			
			/// <summary>
			/// Gets the children rows in the Source table.
			/// </summary>
			public SourceRow[] GetSourceRows()
			{
				return ((SourceRow[])(this.GetChildRows(this.tableBlotter.BlotterSourceRelation)));
			}
			
			/// <summary>
			/// Gets the children rows in the Trader table.
			/// </summary>
			public TraderRow[] GetTraderRows()
			{
				return ((TraderRow[])(this.GetChildRows(this.tableBlotter.BlotterTraderRelation)));
			}
			
			/// <summary>
			/// Gets the children rows in the WorkingOrder table.
			/// </summary>
			public WorkingOrderRow[] GetWorkingOrderRows()
			{
				return ((WorkingOrderRow[])(this.GetChildRows(this.tableBlotter.BlotterWorkingOrderRelation)));
			}
		}
		
		/// <summary>
		/// Represents a row of data in the BlotterDestinationMap table.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		public partial class BlotterDestinationMapRow : global::System.Data.DataRow
		{
			
			private BlotterDestinationMapDataTable tableBlotterDestinationMap;
			
			/// <summary>
			/// Creates a row of data from the BlotterDestinationMap table schema.
			/// </summary>
			/// <param name="dataRowBuilder">An internal data structure used to build the row from the parent table schema.</param>
			internal BlotterDestinationMapRow(global::System.Data.DataRowBuilder dataRowBuilder) : 
					base(dataRowBuilder)
			{
				// This creates a strongly typed BlotterDestinationMap row using the generic construction methods.
				this.tableBlotterDestinationMap = ((BlotterDestinationMapDataTable)(this.Table));
			}
			
			/// <summary>
			/// Gets or sets the data in the BlotterDestinationMapId column.
			/// </summary>
			public global::System.Guid BlotterDestinationMapId
			{
				get
				{
					return ((global::System.Guid)(this[this.tableBlotterDestinationMap.BlotterDestinationMapIdColumn]));
				}
				set
				{
					this[this.tableBlotterDestinationMap.BlotterDestinationMapIdColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the BlotterId column.
			/// </summary>
			public global::System.Guid BlotterId
			{
				get
				{
					try
					{
						return ((global::System.Guid)(this[this.tableBlotterDestinationMap.BlotterIdColumn]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableBlotterDestinationMap.BlotterIdColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets the parent row in the Blotter table.
			/// </summary>
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public BlotterRow BlotterRow
			{
				get
				{
					return ((BlotterRow)(this.GetParentRow(this.tableBlotterDestinationMap.BlotterBlotterDestinationMapRelation)));
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the DestinationId column.
			/// </summary>
			public global::System.Guid DestinationId
			{
				get
				{
					try
					{
						return ((global::System.Guid)(this[this.tableBlotterDestinationMap.DestinationIdColumn]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableBlotterDestinationMap.DestinationIdColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets the parent row in the Destination table.
			/// </summary>
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public DestinationRow DestinationRow
			{
				get
				{
					return ((DestinationRow)(this.GetParentRow(this.tableBlotterDestinationMap.DestinationBlotterDestinationMapRelation)));
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the ExternalId0 column.
			/// </summary>
			public string ExternalId0
			{
				get
				{
					try
					{
						return ((string)(this[this.tableBlotterDestinationMap.ExternalId0Column]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableBlotterDestinationMap.ExternalId0Column] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the RowVersion column.
			/// </summary>
			public long RowVersion
			{
				get
				{
					return ((long)(this[this.tableBlotterDestinationMap.RowVersionColumn]));
				}
				set
				{
					this[this.tableBlotterDestinationMap.RowVersionColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets the Null property of the BlotterId column.
			/// </summary>
			public bool IsBlotterIdNull()
			{
				return (this[this.tableBlotterDestinationMap.BlotterIdColumn] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the DestinationId column.
			/// </summary>
			public bool IsDestinationIdNull()
			{
				return (this[this.tableBlotterDestinationMap.DestinationIdColumn] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the ExternalId0 column.
			/// </summary>
			public bool IsExternalId0Null()
			{
				return (this[this.tableBlotterDestinationMap.ExternalId0Column] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Sets the Null property of the BlotterId column.
			/// </summary>
			public void SetBlotterIdNull()
			{
				this[this.tableBlotterDestinationMap.BlotterIdColumn] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the DestinationId column.
			/// </summary>
			public void SetDestinationIdNull()
			{
				this[this.tableBlotterDestinationMap.DestinationIdColumn] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the ExternalId0 column.
			/// </summary>
			public void SetExternalId0Null()
			{
				this[this.tableBlotterDestinationMap.ExternalId0Column] = global::System.DBNull.Value;
			}
		}
		
		/// <summary>
		/// Represents a row of data in the Branch table.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		public partial class BranchRow : global::System.Data.DataRow
		{
			
			private BranchDataTable tableBranch;
			
			/// <summary>
			/// Creates a row of data from the Branch table schema.
			/// </summary>
			/// <param name="dataRowBuilder">An internal data structure used to build the row from the parent table schema.</param>
			internal BranchRow(global::System.Data.DataRowBuilder dataRowBuilder) : 
					base(dataRowBuilder)
			{
				// This creates a strongly typed Branch row using the generic construction methods.
				this.tableBranch = ((BranchDataTable)(this.Table));
			}
			
			/// <summary>
			/// Gets the parent row in the Blotter table.
			/// </summary>
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public BlotterRow BlotterRow
			{
				get
				{
					return ((BlotterRow)(this.GetParentRow(this.tableBranch.BlotterBranchRelation)));
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the BranchId column.
			/// </summary>
			public global::System.Guid BranchId
			{
				get
				{
					return ((global::System.Guid)(this[this.tableBranch.BranchIdColumn]));
				}
				set
				{
					this[this.tableBranch.BranchIdColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the RowVersion column.
			/// </summary>
			public long RowVersion
			{
				get
				{
					return ((long)(this[this.tableBranch.RowVersionColumn]));
				}
				set
				{
					this[this.tableBranch.RowVersionColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the ShortName column.
			/// </summary>
			public string ShortName
			{
				get
				{
					return ((string)(this[this.tableBranch.ShortNameColumn]));
				}
				set
				{
					this[this.tableBranch.ShortNameColumn] = value;
				}
			}
		}
		
		/// <summary>
		/// Represents a row of data in the Broker table.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		public partial class BrokerRow : global::System.Data.DataRow
		{
			
			private BrokerDataTable tableBroker;
			
			/// <summary>
			/// Creates a row of data from the Broker table schema.
			/// </summary>
			/// <param name="dataRowBuilder">An internal data structure used to build the row from the parent table schema.</param>
			internal BrokerRow(global::System.Data.DataRowBuilder dataRowBuilder) : 
					base(dataRowBuilder)
			{
				// This creates a strongly typed Broker row using the generic construction methods.
				this.tableBroker = ((BrokerDataTable)(this.Table));
			}
			
			/// <summary>
			/// Gets or sets the data in the BrokerId column.
			/// </summary>
			public global::System.Guid BrokerId
			{
				get
				{
					return ((global::System.Guid)(this[this.tableBroker.BrokerIdColumn]));
				}
				set
				{
					this[this.tableBroker.BrokerIdColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the Connected column.
			/// </summary>
			public bool Connected
			{
				get
				{
					return ((bool)(this[this.tableBroker.ConnectedColumn]));
				}
				set
				{
					this[this.tableBroker.ConnectedColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the Phone column.
			/// </summary>
			public string Phone
			{
				get
				{
					try
					{
						return ((string)(this[this.tableBroker.PhoneColumn]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableBroker.PhoneColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the RowVersion column.
			/// </summary>
			public long RowVersion
			{
				get
				{
					return ((long)(this[this.tableBroker.RowVersionColumn]));
				}
				set
				{
					this[this.tableBroker.RowVersionColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets the parent row in the Source table.
			/// </summary>
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public SourceRow SourceRow
			{
				get
				{
					return ((SourceRow)(this.GetParentRow(this.tableBroker.SourceBrokerRelation)));
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the Symbol column.
			/// </summary>
			public string Symbol
			{
				get
				{
					return ((string)(this[this.tableBroker.SymbolColumn]));
				}
				set
				{
					this[this.tableBroker.SymbolColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets the children rows in the BrokerAccount table.
			/// </summary>
			public BrokerAccountRow[] GetBrokerAccountRows()
			{
				return ((BrokerAccountRow[])(this.GetChildRows(this.tableBroker.BrokerBrokerAccountRelation)));
			}
			
			/// <summary>
			/// Gets the children rows in the ClearingBroker table.
			/// </summary>
			public ClearingBrokerRow[] GetClearingBrokerRows()
			{
				return ((ClearingBrokerRow[])(this.GetChildRows(this.tableBroker.BrokerClearingBrokerRelation)));
			}
			
			/// <summary>
			/// Gets the children rows in the Execution table.
			/// </summary>
			public ExecutionRow[] GetExecutionRows()
			{
				return ((ExecutionRow[])(this.GetChildRows(this.tableBroker.BrokerExecutionRelation)));
			}
			
			/// <summary>
			/// Gets the Null property of the Phone column.
			/// </summary>
			public bool IsPhoneNull()
			{
				return (this[this.tableBroker.PhoneColumn] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Sets the Null property of the Phone column.
			/// </summary>
			public void SetPhoneNull()
			{
				this[this.tableBroker.PhoneColumn] = global::System.DBNull.Value;
			}
		}
		
		/// <summary>
		/// Represents a row of data in the BrokerAccount table.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		public partial class BrokerAccountRow : global::System.Data.DataRow
		{
			
			private BrokerAccountDataTable tableBrokerAccount;
			
			/// <summary>
			/// Creates a row of data from the BrokerAccount table schema.
			/// </summary>
			/// <param name="dataRowBuilder">An internal data structure used to build the row from the parent table schema.</param>
			internal BrokerAccountRow(global::System.Data.DataRowBuilder dataRowBuilder) : 
					base(dataRowBuilder)
			{
				// This creates a strongly typed BrokerAccount row using the generic construction methods.
				this.tableBrokerAccount = ((BrokerAccountDataTable)(this.Table));
			}
			
			/// <summary>
			/// Gets or sets the data in the BrokerAccountId column.
			/// </summary>
			public global::System.Guid BrokerAccountId
			{
				get
				{
					return ((global::System.Guid)(this[this.tableBrokerAccount.BrokerAccountIdColumn]));
				}
				set
				{
					this[this.tableBrokerAccount.BrokerAccountIdColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the BrokerId column.
			/// </summary>
			public global::System.Guid BrokerId
			{
				get
				{
					return ((global::System.Guid)(this[this.tableBrokerAccount.BrokerIdColumn]));
				}
				set
				{
					this[this.tableBrokerAccount.BrokerIdColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets the parent row in the Broker table.
			/// </summary>
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public BrokerRow BrokerRow
			{
				get
				{
					return ((BrokerRow)(this.GetParentRow(this.tableBrokerAccount.BrokerBrokerAccountRelation)));
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the Description column.
			/// </summary>
			public string Description
			{
				get
				{
					return ((string)(this[this.tableBrokerAccount.DescriptionColumn]));
				}
				set
				{
					this[this.tableBrokerAccount.DescriptionColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the ExternalId0 column.
			/// </summary>
			public string ExternalId0
			{
				get
				{
					try
					{
						return ((string)(this[this.tableBrokerAccount.ExternalId0Column]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableBrokerAccount.ExternalId0Column] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the ExternalId1 column.
			/// </summary>
			public string ExternalId1
			{
				get
				{
					try
					{
						return ((string)(this[this.tableBrokerAccount.ExternalId1Column]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableBrokerAccount.ExternalId1Column] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the ExternalId2 column.
			/// </summary>
			public string ExternalId2
			{
				get
				{
					try
					{
						return ((string)(this[this.tableBrokerAccount.ExternalId2Column]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableBrokerAccount.ExternalId2Column] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the ExternalId3 column.
			/// </summary>
			public string ExternalId3
			{
				get
				{
					try
					{
						return ((string)(this[this.tableBrokerAccount.ExternalId3Column]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableBrokerAccount.ExternalId3Column] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the Mnemonic column.
			/// </summary>
			public string Mnemonic
			{
				get
				{
					return ((string)(this[this.tableBrokerAccount.MnemonicColumn]));
				}
				set
				{
					this[this.tableBrokerAccount.MnemonicColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the RowVersion column.
			/// </summary>
			public long RowVersion
			{
				get
				{
					return ((long)(this[this.tableBrokerAccount.RowVersionColumn]));
				}
				set
				{
					this[this.tableBrokerAccount.RowVersionColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the TraderId column.
			/// </summary>
			public global::System.Guid TraderId
			{
				get
				{
					return ((global::System.Guid)(this[this.tableBrokerAccount.TraderIdColumn]));
				}
				set
				{
					this[this.tableBrokerAccount.TraderIdColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets the parent row in the Trader table.
			/// </summary>
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public TraderRow TraderRow
			{
				get
				{
					return ((TraderRow)(this.GetParentRow(this.tableBrokerAccount.TraderBrokerAccountRelation)));
				}
			}
			
			/// <summary>
			/// Gets the children rows in the Execution table.
			/// </summary>
			public ExecutionRow[] GetExecutionRows()
			{
				return ((ExecutionRow[])(this.GetChildRows(this.tableBrokerAccount.BrokerAccountExecutionRelation)));
			}
			
			/// <summary>
			/// Gets the Null property of the ExternalId0 column.
			/// </summary>
			public bool IsExternalId0Null()
			{
				return (this[this.tableBrokerAccount.ExternalId0Column] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the ExternalId1 column.
			/// </summary>
			public bool IsExternalId1Null()
			{
				return (this[this.tableBrokerAccount.ExternalId1Column] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the ExternalId2 column.
			/// </summary>
			public bool IsExternalId2Null()
			{
				return (this[this.tableBrokerAccount.ExternalId2Column] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the ExternalId3 column.
			/// </summary>
			public bool IsExternalId3Null()
			{
				return (this[this.tableBrokerAccount.ExternalId3Column] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Sets the Null property of the ExternalId0 column.
			/// </summary>
			public void SetExternalId0Null()
			{
				this[this.tableBrokerAccount.ExternalId0Column] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the ExternalId1 column.
			/// </summary>
			public void SetExternalId1Null()
			{
				this[this.tableBrokerAccount.ExternalId1Column] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the ExternalId2 column.
			/// </summary>
			public void SetExternalId2Null()
			{
				this[this.tableBrokerAccount.ExternalId2Column] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the ExternalId3 column.
			/// </summary>
			public void SetExternalId3Null()
			{
				this[this.tableBrokerAccount.ExternalId3Column] = global::System.DBNull.Value;
			}
		}
		
		/// <summary>
		/// Represents a row of data in the ClearingBroker table.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		public partial class ClearingBrokerRow : global::System.Data.DataRow
		{
			
			private ClearingBrokerDataTable tableClearingBroker;
			
			/// <summary>
			/// Creates a row of data from the ClearingBroker table schema.
			/// </summary>
			/// <param name="dataRowBuilder">An internal data structure used to build the row from the parent table schema.</param>
			internal ClearingBrokerRow(global::System.Data.DataRowBuilder dataRowBuilder) : 
					base(dataRowBuilder)
			{
				// This creates a strongly typed ClearingBroker row using the generic construction methods.
				this.tableClearingBroker = ((ClearingBrokerDataTable)(this.Table));
			}
			
			/// <summary>
			/// Gets the parent row in the Broker table.
			/// </summary>
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public BrokerRow BrokerRow
			{
				get
				{
					return ((BrokerRow)(this.GetParentRow(this.tableClearingBroker.BrokerClearingBrokerRelation)));
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the ClearingBrokerId column.
			/// </summary>
			public global::System.Guid ClearingBrokerId
			{
				get
				{
					return ((global::System.Guid)(this[this.tableClearingBroker.ClearingBrokerIdColumn]));
				}
				set
				{
					this[this.tableClearingBroker.ClearingBrokerIdColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the RowVersion column.
			/// </summary>
			public long RowVersion
			{
				get
				{
					return ((long)(this[this.tableClearingBroker.RowVersionColumn]));
				}
				set
				{
					this[this.tableClearingBroker.RowVersionColumn] = value;
				}
			}
		}
		
		/// <summary>
		/// Represents a row of data in the CommissionSchedule table.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		public partial class CommissionScheduleRow : global::System.Data.DataRow
		{
			
			private CommissionScheduleDataTable tableCommissionSchedule;
			
			/// <summary>
			/// Creates a row of data from the CommissionSchedule table schema.
			/// </summary>
			/// <param name="dataRowBuilder">An internal data structure used to build the row from the parent table schema.</param>
			internal CommissionScheduleRow(global::System.Data.DataRowBuilder dataRowBuilder) : 
					base(dataRowBuilder)
			{
				// This creates a strongly typed CommissionSchedule row using the generic construction methods.
				this.tableCommissionSchedule = ((CommissionScheduleDataTable)(this.Table));
			}
			
			/// <summary>
			/// Gets or sets the data in the CommissionScheduleId column.
			/// </summary>
			public global::System.Guid CommissionScheduleId
			{
				get
				{
					return ((global::System.Guid)(this[this.tableCommissionSchedule.CommissionScheduleIdColumn]));
				}
				set
				{
					this[this.tableCommissionSchedule.CommissionScheduleIdColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the ExternalId0 column.
			/// </summary>
			public string ExternalId0
			{
				get
				{
					try
					{
						return ((string)(this[this.tableCommissionSchedule.ExternalId0Column]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableCommissionSchedule.ExternalId0Column] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the Name column.
			/// </summary>
			public string Name
			{
				get
				{
					try
					{
						return ((string)(this[this.tableCommissionSchedule.NameColumn]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableCommissionSchedule.NameColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the RowVersion column.
			/// </summary>
			public long RowVersion
			{
				get
				{
					return ((long)(this[this.tableCommissionSchedule.RowVersionColumn]));
				}
				set
				{
					this[this.tableCommissionSchedule.RowVersionColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets the children rows in the CommissionTranche table.
			/// </summary>
			public CommissionTrancheRow[] GetCommissionTrancheRows()
			{
				return ((CommissionTrancheRow[])(this.GetChildRows(this.tableCommissionSchedule.CommissionScheduleCommissionTrancheRelation)));
			}
			
			/// <summary>
			/// Gets the Null property of the ExternalId0 column.
			/// </summary>
			public bool IsExternalId0Null()
			{
				return (this[this.tableCommissionSchedule.ExternalId0Column] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the Name column.
			/// </summary>
			public bool IsNameNull()
			{
				return (this[this.tableCommissionSchedule.NameColumn] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Sets the Null property of the ExternalId0 column.
			/// </summary>
			public void SetExternalId0Null()
			{
				this[this.tableCommissionSchedule.ExternalId0Column] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the Name column.
			/// </summary>
			public void SetNameNull()
			{
				this[this.tableCommissionSchedule.NameColumn] = global::System.DBNull.Value;
			}
		}
		
		/// <summary>
		/// Represents a row of data in the CommissionTranche table.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		public partial class CommissionTrancheRow : global::System.Data.DataRow
		{
			
			private CommissionTrancheDataTable tableCommissionTranche;
			
			/// <summary>
			/// Creates a row of data from the CommissionTranche table schema.
			/// </summary>
			/// <param name="dataRowBuilder">An internal data structure used to build the row from the parent table schema.</param>
			internal CommissionTrancheRow(global::System.Data.DataRowBuilder dataRowBuilder) : 
					base(dataRowBuilder)
			{
				// This creates a strongly typed CommissionTranche row using the generic construction methods.
				this.tableCommissionTranche = ((CommissionTrancheDataTable)(this.Table));
			}
			
			/// <summary>
			/// Gets or sets the data in the CommissionScheduleId column.
			/// </summary>
			public global::System.Guid CommissionScheduleId
			{
				get
				{
					return ((global::System.Guid)(this[this.tableCommissionTranche.CommissionScheduleIdColumn]));
				}
				set
				{
					this[this.tableCommissionTranche.CommissionScheduleIdColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets the parent row in the CommissionSchedule table.
			/// </summary>
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public CommissionScheduleRow CommissionScheduleRow
			{
				get
				{
					return ((CommissionScheduleRow)(this.GetParentRow(this.tableCommissionTranche.CommissionScheduleCommissionTrancheRelation)));
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the CommissionTrancheId column.
			/// </summary>
			public global::System.Guid CommissionTrancheId
			{
				get
				{
					return ((global::System.Guid)(this[this.tableCommissionTranche.CommissionTrancheIdColumn]));
				}
				set
				{
					this[this.tableCommissionTranche.CommissionTrancheIdColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the CommissionTypeCode column.
			/// </summary>
			public global::Teraque.CommissionTypeCode CommissionTypeCode
			{
				get
				{
					return ((global::Teraque.CommissionTypeCode)(this[this.tableCommissionTranche.CommissionTypeCodeColumn]));
				}
				set
				{
					this[this.tableCommissionTranche.CommissionTypeCodeColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets the parent row in the CommissionType table.
			/// </summary>
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public CommissionTypeRow CommissionTypeRow
			{
				get
				{
					return ((CommissionTypeRow)(this.GetParentRow(this.tableCommissionTranche.CommissionTypeCommissionTrancheRelation)));
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the CommissionUnitCode column.
			/// </summary>
			public global::Teraque.CommissionUnitCode CommissionUnitCode
			{
				get
				{
					return ((global::Teraque.CommissionUnitCode)(this[this.tableCommissionTranche.CommissionUnitCodeColumn]));
				}
				set
				{
					this[this.tableCommissionTranche.CommissionUnitCodeColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets the parent row in the CommissionUnit table.
			/// </summary>
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public CommissionUnitRow CommissionUnitRow
			{
				get
				{
					return ((CommissionUnitRow)(this.GetParentRow(this.tableCommissionTranche.CommissionUnitCommissionTrancheRelation)));
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the EndRange column.
			/// </summary>
			public decimal EndRange
			{
				get
				{
					try
					{
						return ((decimal)(this[this.tableCommissionTranche.EndRangeColumn]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableCommissionTranche.EndRangeColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the ExternalId0 column.
			/// </summary>
			public string ExternalId0
			{
				get
				{
					try
					{
						return ((string)(this[this.tableCommissionTranche.ExternalId0Column]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableCommissionTranche.ExternalId0Column] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the RowVersion column.
			/// </summary>
			public long RowVersion
			{
				get
				{
					return ((long)(this[this.tableCommissionTranche.RowVersionColumn]));
				}
				set
				{
					this[this.tableCommissionTranche.RowVersionColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the StartRange column.
			/// </summary>
			public decimal StartRange
			{
				get
				{
					return ((decimal)(this[this.tableCommissionTranche.StartRangeColumn]));
				}
				set
				{
					this[this.tableCommissionTranche.StartRangeColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the Value column.
			/// </summary>
			public decimal Value
			{
				get
				{
					return ((decimal)(this[this.tableCommissionTranche.ValueColumn]));
				}
				set
				{
					this[this.tableCommissionTranche.ValueColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets the Null property of the EndRange column.
			/// </summary>
			public bool IsEndRangeNull()
			{
				return (this[this.tableCommissionTranche.EndRangeColumn] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the ExternalId0 column.
			/// </summary>
			public bool IsExternalId0Null()
			{
				return (this[this.tableCommissionTranche.ExternalId0Column] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Sets the Null property of the EndRange column.
			/// </summary>
			public void SetEndRangeNull()
			{
				this[this.tableCommissionTranche.EndRangeColumn] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the ExternalId0 column.
			/// </summary>
			public void SetExternalId0Null()
			{
				this[this.tableCommissionTranche.ExternalId0Column] = global::System.DBNull.Value;
			}
		}
		
		/// <summary>
		/// Represents a row of data in the CommissionType table.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		public partial class CommissionTypeRow : global::System.Data.DataRow
		{
			
			private CommissionTypeDataTable tableCommissionType;
			
			/// <summary>
			/// Creates a row of data from the CommissionType table schema.
			/// </summary>
			/// <param name="dataRowBuilder">An internal data structure used to build the row from the parent table schema.</param>
			internal CommissionTypeRow(global::System.Data.DataRowBuilder dataRowBuilder) : 
					base(dataRowBuilder)
			{
				// This creates a strongly typed CommissionType row using the generic construction methods.
				this.tableCommissionType = ((CommissionTypeDataTable)(this.Table));
			}
			
			/// <summary>
			/// Gets or sets the data in the CommissionTypeCode column.
			/// </summary>
			public global::Teraque.CommissionTypeCode CommissionTypeCode
			{
				get
				{
					return ((global::Teraque.CommissionTypeCode)(this[this.tableCommissionType.CommissionTypeCodeColumn]));
				}
				set
				{
					this[this.tableCommissionType.CommissionTypeCodeColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the Description column.
			/// </summary>
			public string Description
			{
				get
				{
					try
					{
						return ((string)(this[this.tableCommissionType.DescriptionColumn]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableCommissionType.DescriptionColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the ExternalId0 column.
			/// </summary>
			public string ExternalId0
			{
				get
				{
					try
					{
						return ((string)(this[this.tableCommissionType.ExternalId0Column]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableCommissionType.ExternalId0Column] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the Name column.
			/// </summary>
			public string Name
			{
				get
				{
					try
					{
						return ((string)(this[this.tableCommissionType.NameColumn]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableCommissionType.NameColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the RowVersion column.
			/// </summary>
			public long RowVersion
			{
				get
				{
					return ((long)(this[this.tableCommissionType.RowVersionColumn]));
				}
				set
				{
					this[this.tableCommissionType.RowVersionColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets the children rows in the CommissionTranche table.
			/// </summary>
			public CommissionTrancheRow[] GetCommissionTrancheRows()
			{
				return ((CommissionTrancheRow[])(this.GetChildRows(this.tableCommissionType.CommissionTypeCommissionTrancheRelation)));
			}
			
			/// <summary>
			/// Gets the Null property of the Description column.
			/// </summary>
			public bool IsDescriptionNull()
			{
				return (this[this.tableCommissionType.DescriptionColumn] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the ExternalId0 column.
			/// </summary>
			public bool IsExternalId0Null()
			{
				return (this[this.tableCommissionType.ExternalId0Column] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the Name column.
			/// </summary>
			public bool IsNameNull()
			{
				return (this[this.tableCommissionType.NameColumn] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Sets the Null property of the Description column.
			/// </summary>
			public void SetDescriptionNull()
			{
				this[this.tableCommissionType.DescriptionColumn] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the ExternalId0 column.
			/// </summary>
			public void SetExternalId0Null()
			{
				this[this.tableCommissionType.ExternalId0Column] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the Name column.
			/// </summary>
			public void SetNameNull()
			{
				this[this.tableCommissionType.NameColumn] = global::System.DBNull.Value;
			}
		}
		
		/// <summary>
		/// Represents a row of data in the CommissionUnit table.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		public partial class CommissionUnitRow : global::System.Data.DataRow
		{
			
			private CommissionUnitDataTable tableCommissionUnit;
			
			/// <summary>
			/// Creates a row of data from the CommissionUnit table schema.
			/// </summary>
			/// <param name="dataRowBuilder">An internal data structure used to build the row from the parent table schema.</param>
			internal CommissionUnitRow(global::System.Data.DataRowBuilder dataRowBuilder) : 
					base(dataRowBuilder)
			{
				// This creates a strongly typed CommissionUnit row using the generic construction methods.
				this.tableCommissionUnit = ((CommissionUnitDataTable)(this.Table));
			}
			
			/// <summary>
			/// Gets or sets the data in the CommissionUnitCode column.
			/// </summary>
			public global::Teraque.CommissionUnitCode CommissionUnitCode
			{
				get
				{
					return ((global::Teraque.CommissionUnitCode)(this[this.tableCommissionUnit.CommissionUnitCodeColumn]));
				}
				set
				{
					this[this.tableCommissionUnit.CommissionUnitCodeColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the Description column.
			/// </summary>
			public string Description
			{
				get
				{
					try
					{
						return ((string)(this[this.tableCommissionUnit.DescriptionColumn]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableCommissionUnit.DescriptionColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the ExternalId0 column.
			/// </summary>
			public string ExternalId0
			{
				get
				{
					try
					{
						return ((string)(this[this.tableCommissionUnit.ExternalId0Column]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableCommissionUnit.ExternalId0Column] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the Name column.
			/// </summary>
			public string Name
			{
				get
				{
					try
					{
						return ((string)(this[this.tableCommissionUnit.NameColumn]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableCommissionUnit.NameColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the RowVersion column.
			/// </summary>
			public long RowVersion
			{
				get
				{
					return ((long)(this[this.tableCommissionUnit.RowVersionColumn]));
				}
				set
				{
					this[this.tableCommissionUnit.RowVersionColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets the children rows in the CommissionTranche table.
			/// </summary>
			public CommissionTrancheRow[] GetCommissionTrancheRows()
			{
				return ((CommissionTrancheRow[])(this.GetChildRows(this.tableCommissionUnit.CommissionUnitCommissionTrancheRelation)));
			}
			
			/// <summary>
			/// Gets the Null property of the Description column.
			/// </summary>
			public bool IsDescriptionNull()
			{
				return (this[this.tableCommissionUnit.DescriptionColumn] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the ExternalId0 column.
			/// </summary>
			public bool IsExternalId0Null()
			{
				return (this[this.tableCommissionUnit.ExternalId0Column] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the Name column.
			/// </summary>
			public bool IsNameNull()
			{
				return (this[this.tableCommissionUnit.NameColumn] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Sets the Null property of the Description column.
			/// </summary>
			public void SetDescriptionNull()
			{
				this[this.tableCommissionUnit.DescriptionColumn] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the ExternalId0 column.
			/// </summary>
			public void SetExternalId0Null()
			{
				this[this.tableCommissionUnit.ExternalId0Column] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the Name column.
			/// </summary>
			public void SetNameNull()
			{
				this[this.tableCommissionUnit.NameColumn] = global::System.DBNull.Value;
			}
		}
		
		/// <summary>
		/// Represents a row of data in the ComplianceOfficer table.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		public partial class ComplianceOfficerRow : global::System.Data.DataRow
		{
			
			private ComplianceOfficerDataTable tableComplianceOfficer;
			
			/// <summary>
			/// Creates a row of data from the ComplianceOfficer table schema.
			/// </summary>
			/// <param name="dataRowBuilder">An internal data structure used to build the row from the parent table schema.</param>
			internal ComplianceOfficerRow(global::System.Data.DataRowBuilder dataRowBuilder) : 
					base(dataRowBuilder)
			{
				// This creates a strongly typed ComplianceOfficer row using the generic construction methods.
				this.tableComplianceOfficer = ((ComplianceOfficerDataTable)(this.Table));
			}
			
			/// <summary>
			/// Gets or sets the data in the ComplianceOfficerId column.
			/// </summary>
			public global::System.Guid ComplianceOfficerId
			{
				get
				{
					return ((global::System.Guid)(this[this.tableComplianceOfficer.ComplianceOfficerIdColumn]));
				}
				set
				{
					this[this.tableComplianceOfficer.ComplianceOfficerIdColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the RowVersion column.
			/// </summary>
			public long RowVersion
			{
				get
				{
					return ((long)(this[this.tableComplianceOfficer.RowVersionColumn]));
				}
				set
				{
					this[this.tableComplianceOfficer.RowVersionColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets the parent row in the User table.
			/// </summary>
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public UserRow UserRow
			{
				get
				{
					return ((UserRow)(this.GetParentRow(this.tableComplianceOfficer.UserComplianceOfficerRelation)));
				}
			}
		}
		
		/// <summary>
		/// Represents a row of data in the Condition table.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		public partial class ConditionRow : global::System.Data.DataRow
		{
			
			private ConditionDataTable tableCondition;
			
			/// <summary>
			/// Creates a row of data from the Condition table schema.
			/// </summary>
			/// <param name="dataRowBuilder">An internal data structure used to build the row from the parent table schema.</param>
			internal ConditionRow(global::System.Data.DataRowBuilder dataRowBuilder) : 
					base(dataRowBuilder)
			{
				// This creates a strongly typed Condition row using the generic construction methods.
				this.tableCondition = ((ConditionDataTable)(this.Table));
			}
			
			/// <summary>
			/// Gets or sets the data in the ConditionCode column.
			/// </summary>
			public global::Teraque.ConditionCode ConditionCode
			{
				get
				{
					return ((global::Teraque.ConditionCode)(this[this.tableCondition.ConditionCodeColumn]));
				}
				set
				{
					this[this.tableCondition.ConditionCodeColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the Description column.
			/// </summary>
			public string Description
			{
				get
				{
					return ((string)(this[this.tableCondition.DescriptionColumn]));
				}
				set
				{
					this[this.tableCondition.DescriptionColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the ExternalId0 column.
			/// </summary>
			public string ExternalId0
			{
				get
				{
					try
					{
						return ((string)(this[this.tableCondition.ExternalId0Column]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableCondition.ExternalId0Column] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the ExternalId1 column.
			/// </summary>
			public string ExternalId1
			{
				get
				{
					try
					{
						return ((string)(this[this.tableCondition.ExternalId1Column]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableCondition.ExternalId1Column] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the ExternalId2 column.
			/// </summary>
			public string ExternalId2
			{
				get
				{
					try
					{
						return ((string)(this[this.tableCondition.ExternalId2Column]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableCondition.ExternalId2Column] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the ExternalId3 column.
			/// </summary>
			public string ExternalId3
			{
				get
				{
					try
					{
						return ((string)(this[this.tableCondition.ExternalId3Column]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableCondition.ExternalId3Column] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the Mnemonic column.
			/// </summary>
			public string Mnemonic
			{
				get
				{
					return ((string)(this[this.tableCondition.MnemonicColumn]));
				}
				set
				{
					this[this.tableCondition.MnemonicColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the RowVersion column.
			/// </summary>
			public long RowVersion
			{
				get
				{
					return ((long)(this[this.tableCondition.RowVersionColumn]));
				}
				set
				{
					this[this.tableCondition.RowVersionColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets the Null property of the ExternalId0 column.
			/// </summary>
			public bool IsExternalId0Null()
			{
				return (this[this.tableCondition.ExternalId0Column] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the ExternalId1 column.
			/// </summary>
			public bool IsExternalId1Null()
			{
				return (this[this.tableCondition.ExternalId1Column] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the ExternalId2 column.
			/// </summary>
			public bool IsExternalId2Null()
			{
				return (this[this.tableCondition.ExternalId2Column] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the ExternalId3 column.
			/// </summary>
			public bool IsExternalId3Null()
			{
				return (this[this.tableCondition.ExternalId3Column] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Sets the Null property of the ExternalId0 column.
			/// </summary>
			public void SetExternalId0Null()
			{
				this[this.tableCondition.ExternalId0Column] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the ExternalId1 column.
			/// </summary>
			public void SetExternalId1Null()
			{
				this[this.tableCondition.ExternalId1Column] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the ExternalId2 column.
			/// </summary>
			public void SetExternalId2Null()
			{
				this[this.tableCondition.ExternalId2Column] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the ExternalId3 column.
			/// </summary>
			public void SetExternalId3Null()
			{
				this[this.tableCondition.ExternalId3Column] = global::System.DBNull.Value;
			}
		}
		
		/// <summary>
		/// Represents a row of data in the Configuration table.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		public partial class ConfigurationRow : global::System.Data.DataRow
		{
			
			private ConfigurationDataTable tableConfiguration;
			
			/// <summary>
			/// Creates a row of data from the Configuration table schema.
			/// </summary>
			/// <param name="dataRowBuilder">An internal data structure used to build the row from the parent table schema.</param>
			internal ConfigurationRow(global::System.Data.DataRowBuilder dataRowBuilder) : 
					base(dataRowBuilder)
			{
				// This creates a strongly typed Configuration row using the generic construction methods.
				this.tableConfiguration = ((ConfigurationDataTable)(this.Table));
			}
			
			/// <summary>
			/// Gets or sets the data in the ConfigurationId column.
			/// </summary>
			public string ConfigurationId
			{
				get
				{
					return ((string)(this[this.tableConfiguration.ConfigurationIdColumn]));
				}
				set
				{
					this[this.tableConfiguration.ConfigurationIdColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the IndexName column.
			/// </summary>
			public string IndexName
			{
				get
				{
					return ((string)(this[this.tableConfiguration.IndexNameColumn]));
				}
				set
				{
					this[this.tableConfiguration.IndexNameColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the RelationName column.
			/// </summary>
			public string RelationName
			{
				get
				{
					return ((string)(this[this.tableConfiguration.RelationNameColumn]));
				}
				set
				{
					this[this.tableConfiguration.RelationNameColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the RowVersion column.
			/// </summary>
			public long RowVersion
			{
				get
				{
					return ((long)(this[this.tableConfiguration.RowVersionColumn]));
				}
				set
				{
					this[this.tableConfiguration.RowVersionColumn] = value;
				}
			}
		}
		
		/// <summary>
		/// Represents a row of data in the Country table.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		public partial class CountryRow : global::System.Data.DataRow
		{
			
			private CountryDataTable tableCountry;
			
			/// <summary>
			/// Creates a row of data from the Country table schema.
			/// </summary>
			/// <param name="dataRowBuilder">An internal data structure used to build the row from the parent table schema.</param>
			internal CountryRow(global::System.Data.DataRowBuilder dataRowBuilder) : 
					base(dataRowBuilder)
			{
				// This creates a strongly typed Country row using the generic construction methods.
				this.tableCountry = ((CountryDataTable)(this.Table));
			}
			
			/// <summary>
			/// Gets or sets the data in the Abbreviation column.
			/// </summary>
			public string Abbreviation
			{
				get
				{
					return ((string)(this[this.tableCountry.AbbreviationColumn]));
				}
				set
				{
					this[this.tableCountry.AbbreviationColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the CountryId column.
			/// </summary>
			public global::System.Guid CountryId
			{
				get
				{
					return ((global::System.Guid)(this[this.tableCountry.CountryIdColumn]));
				}
				set
				{
					this[this.tableCountry.CountryIdColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the ExternalId0 column.
			/// </summary>
			public string ExternalId0
			{
				get
				{
					try
					{
						return ((string)(this[this.tableCountry.ExternalId0Column]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableCountry.ExternalId0Column] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the ExternalId1 column.
			/// </summary>
			public string ExternalId1
			{
				get
				{
					try
					{
						return ((string)(this[this.tableCountry.ExternalId1Column]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableCountry.ExternalId1Column] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the Name column.
			/// </summary>
			public string Name
			{
				get
				{
					return ((string)(this[this.tableCountry.NameColumn]));
				}
				set
				{
					this[this.tableCountry.NameColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the RowVersion column.
			/// </summary>
			public long RowVersion
			{
				get
				{
					return ((long)(this[this.tableCountry.RowVersionColumn]));
				}
				set
				{
					this[this.tableCountry.RowVersionColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets the children rows in the Exchange table.
			/// </summary>
			public ExchangeRow[] GetExchangeRows()
			{
				return ((ExchangeRow[])(this.GetChildRows(this.tableCountry.CountryExchangeRelation)));
			}
			
			/// <summary>
			/// Gets the children rows in the Holiday table.
			/// </summary>
			public HolidayRow[] GetHolidayRows()
			{
				return ((HolidayRow[])(this.GetChildRows(this.tableCountry.CountryHolidayRelation)));
			}
			
			/// <summary>
			/// Gets the children rows in the Province table.
			/// </summary>
			public ProvinceRow[] GetProvinceRows()
			{
				return ((ProvinceRow[])(this.GetChildRows(this.tableCountry.CountryProvinceRelation)));
			}
			
			/// <summary>
			/// Gets the children rows in the Security table.
			/// </summary>
			public SecurityRow[] GetSecurityRows()
			{
				return ((SecurityRow[])(this.GetChildRows(this.tableCountry.CountrySecurityRelation)));
			}
			
			/// <summary>
			/// Gets the children rows in the SingleAccount table.
			/// </summary>
			public SingleAccountRow[] GetSingleAccountRows()
			{
				return ((SingleAccountRow[])(this.GetChildRows(this.tableCountry.CountrySingleAccountRelation)));
			}
			
			/// <summary>
			/// Gets the Null property of the ExternalId0 column.
			/// </summary>
			public bool IsExternalId0Null()
			{
				return (this[this.tableCountry.ExternalId0Column] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the ExternalId1 column.
			/// </summary>
			public bool IsExternalId1Null()
			{
				return (this[this.tableCountry.ExternalId1Column] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Sets the Null property of the ExternalId0 column.
			/// </summary>
			public void SetExternalId0Null()
			{
				this[this.tableCountry.ExternalId0Column] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the ExternalId1 column.
			/// </summary>
			public void SetExternalId1Null()
			{
				this[this.tableCountry.ExternalId1Column] = global::System.DBNull.Value;
			}
		}
		
		/// <summary>
		/// Represents a row of data in the CreditRating table.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		public partial class CreditRatingRow : global::System.Data.DataRow
		{
			
			private CreditRatingDataTable tableCreditRating;
			
			/// <summary>
			/// Creates a row of data from the CreditRating table schema.
			/// </summary>
			/// <param name="dataRowBuilder">An internal data structure used to build the row from the parent table schema.</param>
			internal CreditRatingRow(global::System.Data.DataRowBuilder dataRowBuilder) : 
					base(dataRowBuilder)
			{
				// This creates a strongly typed CreditRating row using the generic construction methods.
				this.tableCreditRating = ((CreditRatingDataTable)(this.Table));
			}
			
			/// <summary>
			/// Gets or sets the data in the CreditRatingId column.
			/// </summary>
			public global::System.Guid CreditRatingId
			{
				get
				{
					return ((global::System.Guid)(this[this.tableCreditRating.CreditRatingIdColumn]));
				}
				set
				{
					this[this.tableCreditRating.CreditRatingIdColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the CreditRatingServiceId column.
			/// </summary>
			public global::System.Guid CreditRatingServiceId
			{
				get
				{
					return ((global::System.Guid)(this[this.tableCreditRating.CreditRatingServiceIdColumn]));
				}
				set
				{
					this[this.tableCreditRating.CreditRatingServiceIdColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets the parent row in the CreditRatingService table.
			/// </summary>
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public CreditRatingServiceRow CreditRatingServiceRow
			{
				get
				{
					return ((CreditRatingServiceRow)(this.GetParentRow(this.tableCreditRating.CreditRatingServiceCreditRatingRelation)));
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the ExternalId0 column.
			/// </summary>
			public string ExternalId0
			{
				get
				{
					try
					{
						return ((string)(this[this.tableCreditRating.ExternalId0Column]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableCreditRating.ExternalId0Column] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the ExternalId1 column.
			/// </summary>
			public string ExternalId1
			{
				get
				{
					try
					{
						return ((string)(this[this.tableCreditRating.ExternalId1Column]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableCreditRating.ExternalId1Column] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the RowVersion column.
			/// </summary>
			public long RowVersion
			{
				get
				{
					return ((long)(this[this.tableCreditRating.RowVersionColumn]));
				}
				set
				{
					this[this.tableCreditRating.RowVersionColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the Scale column.
			/// </summary>
			public string Scale
			{
				get
				{
					return ((string)(this[this.tableCreditRating.ScaleColumn]));
				}
				set
				{
					this[this.tableCreditRating.ScaleColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the Value column.
			/// </summary>
			public int Value
			{
				get
				{
					return ((int)(this[this.tableCreditRating.ValueColumn]));
				}
				set
				{
					this[this.tableCreditRating.ValueColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets the children rows in the SecuritySeries table.
			/// </summary>
			public SecuritySeriesRow[] GetSecuritySeriesRowsByFK_CreditRating_SecuritySeries_CreditRatingId0()
			{
				return ((SecuritySeriesRow[])(this.GetChildRows(this.tableCreditRating.CreditRatingSecuritySeriesByFK_CreditRating_SecuritySeries_CreditRatingId0Relation)));
			}
			
			/// <summary>
			/// Gets the children rows in the SecuritySeries table.
			/// </summary>
			public SecuritySeriesRow[] GetSecuritySeriesRowsByFK_CreditRating_SecuritySeries_CreditRatingId1()
			{
				return ((SecuritySeriesRow[])(this.GetChildRows(this.tableCreditRating.CreditRatingSecuritySeriesByFK_CreditRating_SecuritySeries_CreditRatingId1Relation)));
			}
			
			/// <summary>
			/// Gets the children rows in the SecuritySeries table.
			/// </summary>
			public SecuritySeriesRow[] GetSecuritySeriesRowsByFK_CreditRating_SecuritySeries_CreditRatingId2()
			{
				return ((SecuritySeriesRow[])(this.GetChildRows(this.tableCreditRating.CreditRatingSecuritySeriesByFK_CreditRating_SecuritySeries_CreditRatingId2Relation)));
			}
			
			/// <summary>
			/// Gets the children rows in the SecuritySeries table.
			/// </summary>
			public SecuritySeriesRow[] GetSecuritySeriesRowsByFK_CreditRating_SecuritySeries_CreditRatingId3()
			{
				return ((SecuritySeriesRow[])(this.GetChildRows(this.tableCreditRating.CreditRatingSecuritySeriesByFK_CreditRating_SecuritySeries_CreditRatingId3Relation)));
			}
			
			/// <summary>
			/// Gets the children rows in the SecuritySeries table.
			/// </summary>
			public SecuritySeriesRow[] GetSecuritySeriesRowsByFK_CreditRating_SecuritySeries_CreditRatingId4()
			{
				return ((SecuritySeriesRow[])(this.GetChildRows(this.tableCreditRating.CreditRatingSecuritySeriesByFK_CreditRating_SecuritySeries_CreditRatingId4Relation)));
			}
			
			/// <summary>
			/// Gets the children rows in the SecuritySeries table.
			/// </summary>
			public SecuritySeriesRow[] GetSecuritySeriesRowsByFK_CreditRating_SecuritySeries_CreditRatingId5()
			{
				return ((SecuritySeriesRow[])(this.GetChildRows(this.tableCreditRating.CreditRatingSecuritySeriesByFK_CreditRating_SecuritySeries_CreditRatingId5Relation)));
			}
			
			/// <summary>
			/// Gets the Null property of the ExternalId0 column.
			/// </summary>
			public bool IsExternalId0Null()
			{
				return (this[this.tableCreditRating.ExternalId0Column] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the ExternalId1 column.
			/// </summary>
			public bool IsExternalId1Null()
			{
				return (this[this.tableCreditRating.ExternalId1Column] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Sets the Null property of the ExternalId0 column.
			/// </summary>
			public void SetExternalId0Null()
			{
				this[this.tableCreditRating.ExternalId0Column] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the ExternalId1 column.
			/// </summary>
			public void SetExternalId1Null()
			{
				this[this.tableCreditRating.ExternalId1Column] = global::System.DBNull.Value;
			}
		}
		
		/// <summary>
		/// Represents a row of data in the CreditRatingService table.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		public partial class CreditRatingServiceRow : global::System.Data.DataRow
		{
			
			private CreditRatingServiceDataTable tableCreditRatingService;
			
			/// <summary>
			/// Creates a row of data from the CreditRatingService table schema.
			/// </summary>
			/// <param name="dataRowBuilder">An internal data structure used to build the row from the parent table schema.</param>
			internal CreditRatingServiceRow(global::System.Data.DataRowBuilder dataRowBuilder) : 
					base(dataRowBuilder)
			{
				// This creates a strongly typed CreditRatingService row using the generic construction methods.
				this.tableCreditRatingService = ((CreditRatingServiceDataTable)(this.Table));
			}
			
			/// <summary>
			/// Gets or sets the data in the CreditRatingServiceId column.
			/// </summary>
			public global::System.Guid CreditRatingServiceId
			{
				get
				{
					return ((global::System.Guid)(this[this.tableCreditRatingService.CreditRatingServiceIdColumn]));
				}
				set
				{
					this[this.tableCreditRatingService.CreditRatingServiceIdColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the ExternalId0 column.
			/// </summary>
			public string ExternalId0
			{
				get
				{
					try
					{
						return ((string)(this[this.tableCreditRatingService.ExternalId0Column]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableCreditRatingService.ExternalId0Column] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the ExternalId1 column.
			/// </summary>
			public string ExternalId1
			{
				get
				{
					try
					{
						return ((string)(this[this.tableCreditRatingService.ExternalId1Column]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableCreditRatingService.ExternalId1Column] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the Name column.
			/// </summary>
			public string Name
			{
				get
				{
					return ((string)(this[this.tableCreditRatingService.NameColumn]));
				}
				set
				{
					this[this.tableCreditRatingService.NameColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the RowVersion column.
			/// </summary>
			public long RowVersion
			{
				get
				{
					return ((long)(this[this.tableCreditRatingService.RowVersionColumn]));
				}
				set
				{
					this[this.tableCreditRatingService.RowVersionColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets the children rows in the CreditRating table.
			/// </summary>
			public CreditRatingRow[] GetCreditRatingRows()
			{
				return ((CreditRatingRow[])(this.GetChildRows(this.tableCreditRatingService.CreditRatingServiceCreditRatingRelation)));
			}
			
			/// <summary>
			/// Gets the Null property of the ExternalId0 column.
			/// </summary>
			public bool IsExternalId0Null()
			{
				return (this[this.tableCreditRatingService.ExternalId0Column] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the ExternalId1 column.
			/// </summary>
			public bool IsExternalId1Null()
			{
				return (this[this.tableCreditRatingService.ExternalId1Column] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Sets the Null property of the ExternalId0 column.
			/// </summary>
			public void SetExternalId0Null()
			{
				this[this.tableCreditRatingService.ExternalId0Column] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the ExternalId1 column.
			/// </summary>
			public void SetExternalId1Null()
			{
				this[this.tableCreditRatingService.ExternalId1Column] = global::System.DBNull.Value;
			}
		}
		
		/// <summary>
		/// Represents a row of data in the Crossing table.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		public partial class CrossingRow : global::System.Data.DataRow
		{
			
			private CrossingDataTable tableCrossing;
			
			/// <summary>
			/// Creates a row of data from the Crossing table schema.
			/// </summary>
			/// <param name="dataRowBuilder">An internal data structure used to build the row from the parent table schema.</param>
			internal CrossingRow(global::System.Data.DataRowBuilder dataRowBuilder) : 
					base(dataRowBuilder)
			{
				// This creates a strongly typed Crossing row using the generic construction methods.
				this.tableCrossing = ((CrossingDataTable)(this.Table));
			}
			
			/// <summary>
			/// Gets or sets the data in the CrossingCode column.
			/// </summary>
			public global::Teraque.CrossingCode CrossingCode
			{
				get
				{
					return ((global::Teraque.CrossingCode)(this[this.tableCrossing.CrossingCodeColumn]));
				}
				set
				{
					this[this.tableCrossing.CrossingCodeColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the Description column.
			/// </summary>
			public string Description
			{
				get
				{
					return ((string)(this[this.tableCrossing.DescriptionColumn]));
				}
				set
				{
					this[this.tableCrossing.DescriptionColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the ExternalId0 column.
			/// </summary>
			public string ExternalId0
			{
				get
				{
					try
					{
						return ((string)(this[this.tableCrossing.ExternalId0Column]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableCrossing.ExternalId0Column] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the ExternalId1 column.
			/// </summary>
			public string ExternalId1
			{
				get
				{
					try
					{
						return ((string)(this[this.tableCrossing.ExternalId1Column]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableCrossing.ExternalId1Column] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the Name column.
			/// </summary>
			public string Name
			{
				get
				{
					return ((string)(this[this.tableCrossing.NameColumn]));
				}
				set
				{
					this[this.tableCrossing.NameColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the RowVersion column.
			/// </summary>
			public long RowVersion
			{
				get
				{
					return ((long)(this[this.tableCrossing.RowVersionColumn]));
				}
				set
				{
					this[this.tableCrossing.RowVersionColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets the children rows in the WorkingOrder table.
			/// </summary>
			public WorkingOrderRow[] GetWorkingOrderRows()
			{
				return ((WorkingOrderRow[])(this.GetChildRows(this.tableCrossing.CrossingWorkingOrderRelation)));
			}
			
			/// <summary>
			/// Gets the Null property of the ExternalId0 column.
			/// </summary>
			public bool IsExternalId0Null()
			{
				return (this[this.tableCrossing.ExternalId0Column] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the ExternalId1 column.
			/// </summary>
			public bool IsExternalId1Null()
			{
				return (this[this.tableCrossing.ExternalId1Column] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Sets the Null property of the ExternalId0 column.
			/// </summary>
			public void SetExternalId0Null()
			{
				this[this.tableCrossing.ExternalId0Column] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the ExternalId1 column.
			/// </summary>
			public void SetExternalId1Null()
			{
				this[this.tableCrossing.ExternalId1Column] = global::System.DBNull.Value;
			}
		}
		
		/// <summary>
		/// Represents a row of data in the Currency table.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		public partial class CurrencyRow : global::System.Data.DataRow
		{
			
			private CurrencyDataTable tableCurrency;
			
			/// <summary>
			/// Creates a row of data from the Currency table schema.
			/// </summary>
			/// <param name="dataRowBuilder">An internal data structure used to build the row from the parent table schema.</param>
			internal CurrencyRow(global::System.Data.DataRowBuilder dataRowBuilder) : 
					base(dataRowBuilder)
			{
				// This creates a strongly typed Currency row using the generic construction methods.
				this.tableCurrency = ((CurrencyDataTable)(this.Table));
			}
			
			/// <summary>
			/// Gets or sets the data in the CurrencyId column.
			/// </summary>
			public global::System.Guid CurrencyId
			{
				get
				{
					return ((global::System.Guid)(this[this.tableCurrency.CurrencyIdColumn]));
				}
				set
				{
					this[this.tableCurrency.CurrencyIdColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the RowVersion column.
			/// </summary>
			public long RowVersion
			{
				get
				{
					return ((long)(this[this.tableCurrency.RowVersionColumn]));
				}
				set
				{
					this[this.tableCurrency.RowVersionColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets the parent row in the Security table.
			/// </summary>
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public SecurityRow SecurityRow
			{
				get
				{
					return ((SecurityRow)(this.GetParentRow(this.tableCurrency.SecurityCurrencyRelation)));
				}
			}
			
			/// <summary>
			/// Gets the children rows in the Account table.
			/// </summary>
			public AccountRow[] GetAccountRows()
			{
				return ((AccountRow[])(this.GetChildRows(this.tableCurrency.CurrencyAccountRelation)));
			}
		}
		
		/// <summary>
		/// Represents a row of data in the Debt table.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		public partial class DebtRow : global::System.Data.DataRow
		{
			
			private DebtDataTable tableDebt;
			
			/// <summary>
			/// Creates a row of data from the Debt table schema.
			/// </summary>
			/// <param name="dataRowBuilder">An internal data structure used to build the row from the parent table schema.</param>
			internal DebtRow(global::System.Data.DataRowBuilder dataRowBuilder) : 
					base(dataRowBuilder)
			{
				// This creates a strongly typed Debt row using the generic construction methods.
				this.tableDebt = ((DebtDataTable)(this.Table));
			}
			
			/// <summary>
			/// Gets or sets the data in the DebtId column.
			/// </summary>
			public global::System.Guid DebtId
			{
				get
				{
					return ((global::System.Guid)(this[this.tableDebt.DebtIdColumn]));
				}
				set
				{
					this[this.tableDebt.DebtIdColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the ExdividendDays column.
			/// </summary>
			public int ExdividendDays
			{
				get
				{
					return ((int)(this[this.tableDebt.ExdividendDaysColumn]));
				}
				set
				{
					this[this.tableDebt.ExdividendDaysColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the FaceOutstanding column.
			/// </summary>
			public decimal FaceOutstanding
			{
				get
				{
					return ((decimal)(this[this.tableDebt.FaceOutstandingColumn]));
				}
				set
				{
					this[this.tableDebt.FaceOutstandingColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the FirstCoupon column.
			/// </summary>
			public global::System.DateTime FirstCoupon
			{
				get
				{
					return ((global::System.DateTime)(this[this.tableDebt.FirstCouponColumn]));
				}
				set
				{
					this[this.tableDebt.FirstCouponColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the Frequency column.
			/// </summary>
			public int Frequency
			{
				get
				{
					return ((int)(this[this.tableDebt.FrequencyColumn]));
				}
				set
				{
					this[this.tableDebt.FrequencyColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the IssuePrice column.
			/// </summary>
			public int IssuePrice
			{
				get
				{
					return ((int)(this[this.tableDebt.IssuePriceColumn]));
				}
				set
				{
					this[this.tableDebt.IssuePriceColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the MaturityDate column.
			/// </summary>
			public global::System.DateTime MaturityDate
			{
				get
				{
					return ((global::System.DateTime)(this[this.tableDebt.MaturityDateColumn]));
				}
				set
				{
					this[this.tableDebt.MaturityDateColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the RedemptionValue column.
			/// </summary>
			public decimal RedemptionValue
			{
				get
				{
					return ((decimal)(this[this.tableDebt.RedemptionValueColumn]));
				}
				set
				{
					this[this.tableDebt.RedemptionValueColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the RowVersion column.
			/// </summary>
			public long RowVersion
			{
				get
				{
					return ((long)(this[this.tableDebt.RowVersionColumn]));
				}
				set
				{
					this[this.tableDebt.RowVersionColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets the parent row in the Security table.
			/// </summary>
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public SecurityRow SecurityRowByFK_Security_Debt_DebtId
			{
				get
				{
					return ((SecurityRow)(this.GetParentRow(this.tableDebt.SecurityDebtByFK_Security_Debt_DebtIdRelation)));
				}
			}
			
			/// <summary>
			/// Gets the parent row in the Security table.
			/// </summary>
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public SecurityRow SecurityRowByFK_Security_Debt_SettlementId
			{
				get
				{
					return ((SecurityRow)(this.GetParentRow(this.tableDebt.SecurityDebtByFK_Security_Debt_SettlementIdRelation)));
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the SettlementId column.
			/// </summary>
			public global::System.Guid SettlementId
			{
				get
				{
					return ((global::System.Guid)(this[this.tableDebt.SettlementIdColumn]));
				}
				set
				{
					this[this.tableDebt.SettlementIdColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the WeekendCode column.
			/// </summary>
			public global::Teraque.WeekendCode WeekendCode
			{
				get
				{
					return ((global::Teraque.WeekendCode)(this[this.tableDebt.WeekendCodeColumn]));
				}
				set
				{
					this[this.tableDebt.WeekendCodeColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets the parent row in the Weekend table.
			/// </summary>
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public WeekendRow WeekendRow
			{
				get
				{
					return ((WeekendRow)(this.GetParentRow(this.tableDebt.WeekendDebtRelation)));
				}
			}
		}
		
		/// <summary>
		/// Represents a row of data in the Destination table.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		public partial class DestinationRow : global::System.Data.DataRow
		{
			
			private DestinationDataTable tableDestination;
			
			/// <summary>
			/// Creates a row of data from the Destination table schema.
			/// </summary>
			/// <param name="dataRowBuilder">An internal data structure used to build the row from the parent table schema.</param>
			internal DestinationRow(global::System.Data.DataRowBuilder dataRowBuilder) : 
					base(dataRowBuilder)
			{
				// This creates a strongly typed Destination row using the generic construction methods.
				this.tableDestination = ((DestinationDataTable)(this.Table));
			}
			
			/// <summary>
			/// Gets or sets the data in the CancelCustomFixTag column.
			/// </summary>
			public string CancelCustomFixTag
			{
				get
				{
					try
					{
						return ((string)(this[this.tableDestination.CancelCustomFixTagColumn]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableDestination.CancelCustomFixTagColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the ClearingFirmId column.
			/// </summary>
			public string ClearingFirmId
			{
				get
				{
					try
					{
						return ((string)(this[this.tableDestination.ClearingFirmIdColumn]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableDestination.ClearingFirmIdColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the DestinationId column.
			/// </summary>
			public global::System.Guid DestinationId
			{
				get
				{
					return ((global::System.Guid)(this[this.tableDestination.DestinationIdColumn]));
				}
				set
				{
					this[this.tableDestination.DestinationIdColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the ExternalId0 column.
			/// </summary>
			public string ExternalId0
			{
				get
				{
					try
					{
						return ((string)(this[this.tableDestination.ExternalId0Column]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableDestination.ExternalId0Column] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the ExternalId1 column.
			/// </summary>
			public string ExternalId1
			{
				get
				{
					try
					{
						return ((string)(this[this.tableDestination.ExternalId1Column]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableDestination.ExternalId1Column] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the FixAccount column.
			/// </summary>
			public string FixAccount
			{
				get
				{
					try
					{
						return ((string)(this[this.tableDestination.FixAccountColumn]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableDestination.FixAccountColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the FixAccountSuffixLength column.
			/// </summary>
			public int FixAccountSuffixLength
			{
				get
				{
					try
					{
						return ((int)(this[this.tableDestination.FixAccountSuffixLengthColumn]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableDestination.FixAccountSuffixLengthColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the FixExchangeMnemonic column.
			/// </summary>
			public string FixExchangeMnemonic
			{
				get
				{
					try
					{
						return ((string)(this[this.tableDestination.FixExchangeMnemonicColumn]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableDestination.FixExchangeMnemonicColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the FixExecBroker column.
			/// </summary>
			public string FixExecBroker
			{
				get
				{
					try
					{
						return ((string)(this[this.tableDestination.FixExecBrokerColumn]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableDestination.FixExecBrokerColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the FixExecDestinationListed column.
			/// </summary>
			public string FixExecDestinationListed
			{
				get
				{
					try
					{
						return ((string)(this[this.tableDestination.FixExecDestinationListedColumn]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableDestination.FixExecDestinationListedColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the FixExecDestinationUnlisted column.
			/// </summary>
			public string FixExecDestinationUnlisted
			{
				get
				{
					try
					{
						return ((string)(this[this.tableDestination.FixExecDestinationUnlistedColumn]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableDestination.FixExecDestinationUnlistedColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the FixHandleInstListed column.
			/// </summary>
			public string FixHandleInstListed
			{
				get
				{
					try
					{
						return ((string)(this[this.tableDestination.FixHandleInstListedColumn]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableDestination.FixHandleInstListedColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the FixHandleInstUnlisted column.
			/// </summary>
			public string FixHandleInstUnlisted
			{
				get
				{
					try
					{
						return ((string)(this[this.tableDestination.FixHandleInstUnlistedColumn]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableDestination.FixHandleInstUnlistedColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the FixIoiRoutingId column.
			/// </summary>
			public string FixIoiRoutingId
			{
				get
				{
					try
					{
						return ((string)(this[this.tableDestination.FixIoiRoutingIdColumn]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableDestination.FixIoiRoutingIdColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the FixIoiRoutingType column.
			/// </summary>
			public string FixIoiRoutingType
			{
				get
				{
					try
					{
						return ((string)(this[this.tableDestination.FixIoiRoutingTypeColumn]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableDestination.FixIoiRoutingTypeColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the FixNetCommissionType column.
			/// </summary>
			public string FixNetCommissionType
			{
				get
				{
					try
					{
						return ((string)(this[this.tableDestination.FixNetCommissionTypeColumn]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableDestination.FixNetCommissionTypeColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the FixNoteTagId column.
			/// </summary>
			public string FixNoteTagId
			{
				get
				{
					try
					{
						return ((string)(this[this.tableDestination.FixNoteTagIdColumn]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableDestination.FixNoteTagIdColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the FixOnBehalfOf column.
			/// </summary>
			public string FixOnBehalfOf
			{
				get
				{
					try
					{
						return ((string)(this[this.tableDestination.FixOnBehalfOfColumn]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableDestination.FixOnBehalfOfColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the FixOnBehalfOfSub column.
			/// </summary>
			public string FixOnBehalfOfSub
			{
				get
				{
					try
					{
						return ((string)(this[this.tableDestination.FixOnBehalfOfSubColumn]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableDestination.FixOnBehalfOfSubColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the FixOrderIdFormat column.
			/// </summary>
			public string FixOrderIdFormat
			{
				get
				{
					return ((string)(this[this.tableDestination.FixOrderIdFormatColumn]));
				}
				set
				{
					this[this.tableDestination.FixOrderIdFormatColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the FixPassiveTag column.
			/// </summary>
			public string FixPassiveTag
			{
				get
				{
					try
					{
						return ((string)(this[this.tableDestination.FixPassiveTagColumn]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableDestination.FixPassiveTagColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the FixProactiveTag column.
			/// </summary>
			public string FixProactiveTag
			{
				get
				{
					try
					{
						return ((string)(this[this.tableDestination.FixProactiveTagColumn]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableDestination.FixProactiveTagColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the FixSourceCompany column.
			/// </summary>
			public string FixSourceCompany
			{
				get
				{
					try
					{
						return ((string)(this[this.tableDestination.FixSourceCompanyColumn]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableDestination.FixSourceCompanyColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the FixSourceId column.
			/// </summary>
			public string FixSourceId
			{
				get
				{
					try
					{
						return ((string)(this[this.tableDestination.FixSourceIdColumn]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableDestination.FixSourceIdColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the FixSourceTrader column.
			/// </summary>
			public string FixSourceTrader
			{
				get
				{
					try
					{
						return ((string)(this[this.tableDestination.FixSourceTraderColumn]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableDestination.FixSourceTraderColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the FixTargetCompany column.
			/// </summary>
			public string FixTargetCompany
			{
				get
				{
					try
					{
						return ((string)(this[this.tableDestination.FixTargetCompanyColumn]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableDestination.FixTargetCompanyColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the FixTargetLocationId column.
			/// </summary>
			public string FixTargetLocationId
			{
				get
				{
					try
					{
						return ((string)(this[this.tableDestination.FixTargetLocationIdColumn]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableDestination.FixTargetLocationIdColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the FixTargetTrader column.
			/// </summary>
			public string FixTargetTrader
			{
				get
				{
					try
					{
						return ((string)(this[this.tableDestination.FixTargetTraderColumn]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableDestination.FixTargetTraderColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the FixVersion column.
			/// </summary>
			public string FixVersion
			{
				get
				{
					return ((string)(this[this.tableDestination.FixVersionColumn]));
				}
				set
				{
					this[this.tableDestination.FixVersionColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the IsBroker column.
			/// </summary>
			public bool IsBroker
			{
				get
				{
					return ((bool)(this[this.tableDestination.IsBrokerColumn]));
				}
				set
				{
					this[this.tableDestination.IsBrokerColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the IsCancelAllowed column.
			/// </summary>
			public bool IsCancelAllowed
			{
				get
				{
					return ((bool)(this[this.tableDestination.IsCancelAllowedColumn]));
				}
				set
				{
					this[this.tableDestination.IsCancelAllowedColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the IsCancelReplaceAllowed column.
			/// </summary>
			public bool IsCancelReplaceAllowed
			{
				get
				{
					return ((bool)(this[this.tableDestination.IsCancelReplaceAllowedColumn]));
				}
				set
				{
					this[this.tableDestination.IsCancelReplaceAllowedColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the IsEcn column.
			/// </summary>
			public bool IsEcn
			{
				get
				{
					return ((bool)(this[this.tableDestination.IsEcnColumn]));
				}
				set
				{
					this[this.tableDestination.IsEcnColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the IsExchange column.
			/// </summary>
			public bool IsExchange
			{
				get
				{
					return ((bool)(this[this.tableDestination.IsExchangeColumn]));
				}
				set
				{
					this[this.tableDestination.IsExchangeColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the IsInternal column.
			/// </summary>
			public bool IsInternal
			{
				get
				{
					return ((bool)(this[this.tableDestination.IsInternalColumn]));
				}
				set
				{
					this[this.tableDestination.IsInternalColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the IsIoiAllowed column.
			/// </summary>
			public bool IsIoiAllowed
			{
				get
				{
					return ((bool)(this[this.tableDestination.IsIoiAllowedColumn]));
				}
				set
				{
					this[this.tableDestination.IsIoiAllowedColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the IsLimitPricingAllowed column.
			/// </summary>
			public bool IsLimitPricingAllowed
			{
				get
				{
					return ((bool)(this[this.tableDestination.IsLimitPricingAllowedColumn]));
				}
				set
				{
					this[this.tableDestination.IsLimitPricingAllowedColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the IsMarketOnClosePricingAllowed column.
			/// </summary>
			public bool IsMarketOnClosePricingAllowed
			{
				get
				{
					return ((bool)(this[this.tableDestination.IsMarketOnClosePricingAllowedColumn]));
				}
				set
				{
					this[this.tableDestination.IsMarketOnClosePricingAllowedColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the IsMarketPricingAllowed column.
			/// </summary>
			public bool IsMarketPricingAllowed
			{
				get
				{
					return ((bool)(this[this.tableDestination.IsMarketPricingAllowedColumn]));
				}
				set
				{
					this[this.tableDestination.IsMarketPricingAllowedColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the IsSystemUp column.
			/// </summary>
			public bool IsSystemUp
			{
				get
				{
					return ((bool)(this[this.tableDestination.IsSystemUpColumn]));
				}
				set
				{
					this[this.tableDestination.IsSystemUpColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the IsTagEligible column.
			/// </summary>
			public bool IsTagEligible
			{
				get
				{
					try
					{
						return ((bool)(this[this.tableDestination.IsTagEligibleColumn]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableDestination.IsTagEligibleColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the IsTradeAwayAllowed column.
			/// </summary>
			public bool IsTradeAwayAllowed
			{
				get
				{
					return ((bool)(this[this.tableDestination.IsTradeAwayAllowedColumn]));
				}
				set
				{
					this[this.tableDestination.IsTradeAwayAllowedColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the IsUnsolicitedTradeAllowed column.
			/// </summary>
			public bool IsUnsolicitedTradeAllowed
			{
				get
				{
					try
					{
						return ((bool)(this[this.tableDestination.IsUnsolicitedTradeAllowedColumn]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableDestination.IsUnsolicitedTradeAllowedColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the LotSize column.
			/// </summary>
			public int LotSize
			{
				get
				{
					try
					{
						return ((int)(this[this.tableDestination.LotSizeColumn]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableDestination.LotSizeColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the MaximumQuantityListedLimit column.
			/// </summary>
			public decimal MaximumQuantityListedLimit
			{
				get
				{
					try
					{
						return ((decimal)(this[this.tableDestination.MaximumQuantityListedLimitColumn]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableDestination.MaximumQuantityListedLimitColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the MaximumQuantityListedMarket column.
			/// </summary>
			public decimal MaximumQuantityListedMarket
			{
				get
				{
					try
					{
						return ((decimal)(this[this.tableDestination.MaximumQuantityListedMarketColumn]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableDestination.MaximumQuantityListedMarketColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the MaximumQuantityUnlistedLimit column.
			/// </summary>
			public decimal MaximumQuantityUnlistedLimit
			{
				get
				{
					try
					{
						return ((decimal)(this[this.tableDestination.MaximumQuantityUnlistedLimitColumn]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableDestination.MaximumQuantityUnlistedLimitColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the MaximumQuantityUnlistedMarket column.
			/// </summary>
			public decimal MaximumQuantityUnlistedMarket
			{
				get
				{
					try
					{
						return ((decimal)(this[this.tableDestination.MaximumQuantityUnlistedMarketColumn]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableDestination.MaximumQuantityUnlistedMarketColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the ModifiedTime column.
			/// </summary>
			public global::System.DateTime ModifiedTime
			{
				get
				{
					return ((global::System.DateTime)(this[this.tableDestination.ModifiedTimeColumn]));
				}
				set
				{
					this[this.tableDestination.ModifiedTimeColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the Name column.
			/// </summary>
			public string Name
			{
				get
				{
					try
					{
						return ((string)(this[this.tableDestination.NameColumn]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableDestination.NameColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the NewOrderCustomFixTag column.
			/// </summary>
			public string NewOrderCustomFixTag
			{
				get
				{
					try
					{
						return ((string)(this[this.tableDestination.NewOrderCustomFixTagColumn]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableDestination.NewOrderCustomFixTagColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the OatsDepartmentId column.
			/// </summary>
			public string OatsDepartmentId
			{
				get
				{
					try
					{
						return ((string)(this[this.tableDestination.OatsDepartmentIdColumn]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableDestination.OatsDepartmentIdColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the OatsDestinationCode column.
			/// </summary>
			public string OatsDestinationCode
			{
				get
				{
					try
					{
						return ((string)(this[this.tableDestination.OatsDestinationCodeColumn]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableDestination.OatsDestinationCodeColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the OatsReceivingMpi column.
			/// </summary>
			public string OatsReceivingMpi
			{
				get
				{
					try
					{
						return ((string)(this[this.tableDestination.OatsReceivingMpiColumn]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableDestination.OatsReceivingMpiColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the OatsRouteMethod column.
			/// </summary>
			public string OatsRouteMethod
			{
				get
				{
					try
					{
						return ((string)(this[this.tableDestination.OatsRouteMethodColumn]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableDestination.OatsRouteMethodColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the OatsRoutingMpi column.
			/// </summary>
			public string OatsRoutingMpi
			{
				get
				{
					try
					{
						return ((string)(this[this.tableDestination.OatsRoutingMpiColumn]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableDestination.OatsRoutingMpiColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the OatsSentMpi column.
			/// </summary>
			public string OatsSentMpi
			{
				get
				{
					try
					{
						return ((string)(this[this.tableDestination.OatsSentMpiColumn]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableDestination.OatsSentMpiColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the OatsTerminalId column.
			/// </summary>
			public string OatsTerminalId
			{
				get
				{
					try
					{
						return ((string)(this[this.tableDestination.OatsTerminalIdColumn]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableDestination.OatsTerminalIdColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the OnCloseCancelTime column.
			/// </summary>
			public int OnCloseCancelTime
			{
				get
				{
					try
					{
						return ((int)(this[this.tableDestination.OnCloseCancelTimeColumn]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableDestination.OnCloseCancelTimeColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the OnCloseOrderTime column.
			/// </summary>
			public int OnCloseOrderTime
			{
				get
				{
					try
					{
						return ((int)(this[this.tableDestination.OnCloseOrderTimeColumn]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableDestination.OnCloseOrderTimeColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the PerShareUsageFee column.
			/// </summary>
			public decimal PerShareUsageFee
			{
				get
				{
					try
					{
						return ((decimal)(this[this.tableDestination.PerShareUsageFeeColumn]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableDestination.PerShareUsageFeeColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the PostMarketLogic column.
			/// </summary>
			public string PostMarketLogic
			{
				get
				{
					try
					{
						return ((string)(this[this.tableDestination.PostMarketLogicColumn]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableDestination.PostMarketLogicColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the PrimaryBackupDestinationId column.
			/// </summary>
			public global::System.Guid PrimaryBackupDestinationId
			{
				get
				{
					try
					{
						return ((global::System.Guid)(this[this.tableDestination.PrimaryBackupDestinationIdColumn]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableDestination.PrimaryBackupDestinationIdColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the RowVersion column.
			/// </summary>
			public long RowVersion
			{
				get
				{
					return ((long)(this[this.tableDestination.RowVersionColumn]));
				}
				set
				{
					this[this.tableDestination.RowVersionColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the SecondaryBackupDestinationId column.
			/// </summary>
			public global::System.Guid SecondaryBackupDestinationId
			{
				get
				{
					try
					{
						return ((global::System.Guid)(this[this.tableDestination.SecondaryBackupDestinationIdColumn]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableDestination.SecondaryBackupDestinationIdColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the SelectnetFlag column.
			/// </summary>
			public bool SelectnetFlag
			{
				get
				{
					return ((bool)(this[this.tableDestination.SelectnetFlagColumn]));
				}
				set
				{
					this[this.tableDestination.SelectnetFlagColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the ShortName column.
			/// </summary>
			public string ShortName
			{
				get
				{
					return ((string)(this[this.tableDestination.ShortNameColumn]));
				}
				set
				{
					this[this.tableDestination.ShortNameColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the SourceId0 column.
			/// </summary>
			public string SourceId0
			{
				get
				{
					try
					{
						return ((string)(this[this.tableDestination.SourceId0Column]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableDestination.SourceId0Column] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the SourceId1 column.
			/// </summary>
			public string SourceId1
			{
				get
				{
					try
					{
						return ((string)(this[this.tableDestination.SourceId1Column]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableDestination.SourceId1Column] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the SourceId2 column.
			/// </summary>
			public string SourceId2
			{
				get
				{
					try
					{
						return ((string)(this[this.tableDestination.SourceId2Column]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableDestination.SourceId2Column] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the SourceId3 column.
			/// </summary>
			public string SourceId3
			{
				get
				{
					try
					{
						return ((string)(this[this.tableDestination.SourceId3Column]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableDestination.SourceId3Column] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the SourceId4 column.
			/// </summary>
			public string SourceId4
			{
				get
				{
					try
					{
						return ((string)(this[this.tableDestination.SourceId4Column]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableDestination.SourceId4Column] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the SourceId5 column.
			/// </summary>
			public string SourceId5
			{
				get
				{
					try
					{
						return ((string)(this[this.tableDestination.SourceId5Column]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableDestination.SourceId5Column] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the SourceId6 column.
			/// </summary>
			public string SourceId6
			{
				get
				{
					try
					{
						return ((string)(this[this.tableDestination.SourceId6Column]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableDestination.SourceId6Column] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the SourceId7 column.
			/// </summary>
			public string SourceId7
			{
				get
				{
					try
					{
						return ((string)(this[this.tableDestination.SourceId7Column]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableDestination.SourceId7Column] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the UniqueShortName column.
			/// </summary>
			public string UniqueShortName
			{
				get
				{
					return ((string)(this[this.tableDestination.UniqueShortNameColumn]));
				}
				set
				{
					this[this.tableDestination.UniqueShortNameColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets the children rows in the BlotterDestinationMap table.
			/// </summary>
			public BlotterDestinationMapRow[] GetBlotterDestinationMapRows()
			{
				return ((BlotterDestinationMapRow[])(this.GetChildRows(this.tableDestination.DestinationBlotterDestinationMapRelation)));
			}
			
			/// <summary>
			/// Gets the children rows in the DestinationExchangeMap table.
			/// </summary>
			public DestinationExchangeMapRow[] GetDestinationExchangeMapRows()
			{
				return ((DestinationExchangeMapRow[])(this.GetChildRows(this.tableDestination.DestinationDestinationExchangeMapRelation)));
			}
			
			/// <summary>
			/// Gets the children rows in the DestinationOrder table.
			/// </summary>
			public DestinationOrderRow[] GetDestinationOrderRows()
			{
				return ((DestinationOrderRow[])(this.GetChildRows(this.tableDestination.DestinationDestinationOrderRelation)));
			}
			
			/// <summary>
			/// Gets the children rows in the SourceOrder table.
			/// </summary>
			public SourceOrderRow[] GetSourceOrderRows()
			{
				return ((SourceOrderRow[])(this.GetChildRows(this.tableDestination.DestinationSourceOrderRelation)));
			}
			
			/// <summary>
			/// Gets the children rows in the WorkingOrder table.
			/// </summary>
			public WorkingOrderRow[] GetWorkingOrderRows()
			{
				return ((WorkingOrderRow[])(this.GetChildRows(this.tableDestination.DestinationWorkingOrderRelation)));
			}
			
			/// <summary>
			/// Gets the Null property of the CancelCustomFixTag column.
			/// </summary>
			public bool IsCancelCustomFixTagNull()
			{
				return (this[this.tableDestination.CancelCustomFixTagColumn] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the ClearingFirmId column.
			/// </summary>
			public bool IsClearingFirmIdNull()
			{
				return (this[this.tableDestination.ClearingFirmIdColumn] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the ExternalId0 column.
			/// </summary>
			public bool IsExternalId0Null()
			{
				return (this[this.tableDestination.ExternalId0Column] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the ExternalId1 column.
			/// </summary>
			public bool IsExternalId1Null()
			{
				return (this[this.tableDestination.ExternalId1Column] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the FixAccount column.
			/// </summary>
			public bool IsFixAccountNull()
			{
				return (this[this.tableDestination.FixAccountColumn] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the FixAccountSuffixLength column.
			/// </summary>
			public bool IsFixAccountSuffixLengthNull()
			{
				return (this[this.tableDestination.FixAccountSuffixLengthColumn] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the FixExchangeMnemonic column.
			/// </summary>
			public bool IsFixExchangeMnemonicNull()
			{
				return (this[this.tableDestination.FixExchangeMnemonicColumn] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the FixExecBroker column.
			/// </summary>
			public bool IsFixExecBrokerNull()
			{
				return (this[this.tableDestination.FixExecBrokerColumn] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the FixExecDestinationListed column.
			/// </summary>
			public bool IsFixExecDestinationListedNull()
			{
				return (this[this.tableDestination.FixExecDestinationListedColumn] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the FixExecDestinationUnlisted column.
			/// </summary>
			public bool IsFixExecDestinationUnlistedNull()
			{
				return (this[this.tableDestination.FixExecDestinationUnlistedColumn] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the FixHandleInstListed column.
			/// </summary>
			public bool IsFixHandleInstListedNull()
			{
				return (this[this.tableDestination.FixHandleInstListedColumn] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the FixHandleInstUnlisted column.
			/// </summary>
			public bool IsFixHandleInstUnlistedNull()
			{
				return (this[this.tableDestination.FixHandleInstUnlistedColumn] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the FixIoiRoutingId column.
			/// </summary>
			public bool IsFixIoiRoutingIdNull()
			{
				return (this[this.tableDestination.FixIoiRoutingIdColumn] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the FixIoiRoutingType column.
			/// </summary>
			public bool IsFixIoiRoutingTypeNull()
			{
				return (this[this.tableDestination.FixIoiRoutingTypeColumn] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the FixNetCommissionType column.
			/// </summary>
			public bool IsFixNetCommissionTypeNull()
			{
				return (this[this.tableDestination.FixNetCommissionTypeColumn] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the FixNoteTagId column.
			/// </summary>
			public bool IsFixNoteTagIdNull()
			{
				return (this[this.tableDestination.FixNoteTagIdColumn] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the FixOnBehalfOf column.
			/// </summary>
			public bool IsFixOnBehalfOfNull()
			{
				return (this[this.tableDestination.FixOnBehalfOfColumn] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the FixOnBehalfOfSub column.
			/// </summary>
			public bool IsFixOnBehalfOfSubNull()
			{
				return (this[this.tableDestination.FixOnBehalfOfSubColumn] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the FixPassiveTag column.
			/// </summary>
			public bool IsFixPassiveTagNull()
			{
				return (this[this.tableDestination.FixPassiveTagColumn] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the FixProactiveTag column.
			/// </summary>
			public bool IsFixProactiveTagNull()
			{
				return (this[this.tableDestination.FixProactiveTagColumn] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the FixSourceCompany column.
			/// </summary>
			public bool IsFixSourceCompanyNull()
			{
				return (this[this.tableDestination.FixSourceCompanyColumn] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the FixSourceId column.
			/// </summary>
			public bool IsFixSourceIdNull()
			{
				return (this[this.tableDestination.FixSourceIdColumn] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the FixSourceTrader column.
			/// </summary>
			public bool IsFixSourceTraderNull()
			{
				return (this[this.tableDestination.FixSourceTraderColumn] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the FixTargetCompany column.
			/// </summary>
			public bool IsFixTargetCompanyNull()
			{
				return (this[this.tableDestination.FixTargetCompanyColumn] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the FixTargetLocationId column.
			/// </summary>
			public bool IsFixTargetLocationIdNull()
			{
				return (this[this.tableDestination.FixTargetLocationIdColumn] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the FixTargetTrader column.
			/// </summary>
			public bool IsFixTargetTraderNull()
			{
				return (this[this.tableDestination.FixTargetTraderColumn] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the IsTagEligible column.
			/// </summary>
			public bool IsIsTagEligibleNull()
			{
				return (this[this.tableDestination.IsTagEligibleColumn] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the IsUnsolicitedTradeAllowed column.
			/// </summary>
			public bool IsIsUnsolicitedTradeAllowedNull()
			{
				return (this[this.tableDestination.IsUnsolicitedTradeAllowedColumn] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the LotSize column.
			/// </summary>
			public bool IsLotSizeNull()
			{
				return (this[this.tableDestination.LotSizeColumn] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the MaximumQuantityListedLimit column.
			/// </summary>
			public bool IsMaximumQuantityListedLimitNull()
			{
				return (this[this.tableDestination.MaximumQuantityListedLimitColumn] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the MaximumQuantityListedMarket column.
			/// </summary>
			public bool IsMaximumQuantityListedMarketNull()
			{
				return (this[this.tableDestination.MaximumQuantityListedMarketColumn] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the MaximumQuantityUnlistedLimit column.
			/// </summary>
			public bool IsMaximumQuantityUnlistedLimitNull()
			{
				return (this[this.tableDestination.MaximumQuantityUnlistedLimitColumn] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the MaximumQuantityUnlistedMarket column.
			/// </summary>
			public bool IsMaximumQuantityUnlistedMarketNull()
			{
				return (this[this.tableDestination.MaximumQuantityUnlistedMarketColumn] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the Name column.
			/// </summary>
			public bool IsNameNull()
			{
				return (this[this.tableDestination.NameColumn] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the NewOrderCustomFixTag column.
			/// </summary>
			public bool IsNewOrderCustomFixTagNull()
			{
				return (this[this.tableDestination.NewOrderCustomFixTagColumn] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the OatsDepartmentId column.
			/// </summary>
			public bool IsOatsDepartmentIdNull()
			{
				return (this[this.tableDestination.OatsDepartmentIdColumn] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the OatsDestinationCode column.
			/// </summary>
			public bool IsOatsDestinationCodeNull()
			{
				return (this[this.tableDestination.OatsDestinationCodeColumn] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the OatsReceivingMpi column.
			/// </summary>
			public bool IsOatsReceivingMpiNull()
			{
				return (this[this.tableDestination.OatsReceivingMpiColumn] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the OatsRouteMethod column.
			/// </summary>
			public bool IsOatsRouteMethodNull()
			{
				return (this[this.tableDestination.OatsRouteMethodColumn] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the OatsRoutingMpi column.
			/// </summary>
			public bool IsOatsRoutingMpiNull()
			{
				return (this[this.tableDestination.OatsRoutingMpiColumn] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the OatsSentMpi column.
			/// </summary>
			public bool IsOatsSentMpiNull()
			{
				return (this[this.tableDestination.OatsSentMpiColumn] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the OatsTerminalId column.
			/// </summary>
			public bool IsOatsTerminalIdNull()
			{
				return (this[this.tableDestination.OatsTerminalIdColumn] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the OnCloseCancelTime column.
			/// </summary>
			public bool IsOnCloseCancelTimeNull()
			{
				return (this[this.tableDestination.OnCloseCancelTimeColumn] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the OnCloseOrderTime column.
			/// </summary>
			public bool IsOnCloseOrderTimeNull()
			{
				return (this[this.tableDestination.OnCloseOrderTimeColumn] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the PerShareUsageFee column.
			/// </summary>
			public bool IsPerShareUsageFeeNull()
			{
				return (this[this.tableDestination.PerShareUsageFeeColumn] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the PostMarketLogic column.
			/// </summary>
			public bool IsPostMarketLogicNull()
			{
				return (this[this.tableDestination.PostMarketLogicColumn] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the PrimaryBackupDestinationId column.
			/// </summary>
			public bool IsPrimaryBackupDestinationIdNull()
			{
				return (this[this.tableDestination.PrimaryBackupDestinationIdColumn] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the SecondaryBackupDestinationId column.
			/// </summary>
			public bool IsSecondaryBackupDestinationIdNull()
			{
				return (this[this.tableDestination.SecondaryBackupDestinationIdColumn] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the SourceId0 column.
			/// </summary>
			public bool IsSourceId0Null()
			{
				return (this[this.tableDestination.SourceId0Column] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the SourceId1 column.
			/// </summary>
			public bool IsSourceId1Null()
			{
				return (this[this.tableDestination.SourceId1Column] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the SourceId2 column.
			/// </summary>
			public bool IsSourceId2Null()
			{
				return (this[this.tableDestination.SourceId2Column] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the SourceId3 column.
			/// </summary>
			public bool IsSourceId3Null()
			{
				return (this[this.tableDestination.SourceId3Column] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the SourceId4 column.
			/// </summary>
			public bool IsSourceId4Null()
			{
				return (this[this.tableDestination.SourceId4Column] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the SourceId5 column.
			/// </summary>
			public bool IsSourceId5Null()
			{
				return (this[this.tableDestination.SourceId5Column] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the SourceId6 column.
			/// </summary>
			public bool IsSourceId6Null()
			{
				return (this[this.tableDestination.SourceId6Column] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the SourceId7 column.
			/// </summary>
			public bool IsSourceId7Null()
			{
				return (this[this.tableDestination.SourceId7Column] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Sets the Null property of the CancelCustomFixTag column.
			/// </summary>
			public void SetCancelCustomFixTagNull()
			{
				this[this.tableDestination.CancelCustomFixTagColumn] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the ClearingFirmId column.
			/// </summary>
			public void SetClearingFirmIdNull()
			{
				this[this.tableDestination.ClearingFirmIdColumn] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the ExternalId0 column.
			/// </summary>
			public void SetExternalId0Null()
			{
				this[this.tableDestination.ExternalId0Column] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the ExternalId1 column.
			/// </summary>
			public void SetExternalId1Null()
			{
				this[this.tableDestination.ExternalId1Column] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the FixAccount column.
			/// </summary>
			public void SetFixAccountNull()
			{
				this[this.tableDestination.FixAccountColumn] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the FixAccountSuffixLength column.
			/// </summary>
			public void SetFixAccountSuffixLengthNull()
			{
				this[this.tableDestination.FixAccountSuffixLengthColumn] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the FixExchangeMnemonic column.
			/// </summary>
			public void SetFixExchangeMnemonicNull()
			{
				this[this.tableDestination.FixExchangeMnemonicColumn] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the FixExecBroker column.
			/// </summary>
			public void SetFixExecBrokerNull()
			{
				this[this.tableDestination.FixExecBrokerColumn] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the FixExecDestinationListed column.
			/// </summary>
			public void SetFixExecDestinationListedNull()
			{
				this[this.tableDestination.FixExecDestinationListedColumn] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the FixExecDestinationUnlisted column.
			/// </summary>
			public void SetFixExecDestinationUnlistedNull()
			{
				this[this.tableDestination.FixExecDestinationUnlistedColumn] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the FixHandleInstListed column.
			/// </summary>
			public void SetFixHandleInstListedNull()
			{
				this[this.tableDestination.FixHandleInstListedColumn] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the FixHandleInstUnlisted column.
			/// </summary>
			public void SetFixHandleInstUnlistedNull()
			{
				this[this.tableDestination.FixHandleInstUnlistedColumn] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the FixIoiRoutingId column.
			/// </summary>
			public void SetFixIoiRoutingIdNull()
			{
				this[this.tableDestination.FixIoiRoutingIdColumn] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the FixIoiRoutingType column.
			/// </summary>
			public void SetFixIoiRoutingTypeNull()
			{
				this[this.tableDestination.FixIoiRoutingTypeColumn] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the FixNetCommissionType column.
			/// </summary>
			public void SetFixNetCommissionTypeNull()
			{
				this[this.tableDestination.FixNetCommissionTypeColumn] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the FixNoteTagId column.
			/// </summary>
			public void SetFixNoteTagIdNull()
			{
				this[this.tableDestination.FixNoteTagIdColumn] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the FixOnBehalfOf column.
			/// </summary>
			public void SetFixOnBehalfOfNull()
			{
				this[this.tableDestination.FixOnBehalfOfColumn] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the FixOnBehalfOfSub column.
			/// </summary>
			public void SetFixOnBehalfOfSubNull()
			{
				this[this.tableDestination.FixOnBehalfOfSubColumn] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the FixPassiveTag column.
			/// </summary>
			public void SetFixPassiveTagNull()
			{
				this[this.tableDestination.FixPassiveTagColumn] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the FixProactiveTag column.
			/// </summary>
			public void SetFixProactiveTagNull()
			{
				this[this.tableDestination.FixProactiveTagColumn] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the FixSourceCompany column.
			/// </summary>
			public void SetFixSourceCompanyNull()
			{
				this[this.tableDestination.FixSourceCompanyColumn] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the FixSourceId column.
			/// </summary>
			public void SetFixSourceIdNull()
			{
				this[this.tableDestination.FixSourceIdColumn] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the FixSourceTrader column.
			/// </summary>
			public void SetFixSourceTraderNull()
			{
				this[this.tableDestination.FixSourceTraderColumn] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the FixTargetCompany column.
			/// </summary>
			public void SetFixTargetCompanyNull()
			{
				this[this.tableDestination.FixTargetCompanyColumn] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the FixTargetLocationId column.
			/// </summary>
			public void SetFixTargetLocationIdNull()
			{
				this[this.tableDestination.FixTargetLocationIdColumn] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the FixTargetTrader column.
			/// </summary>
			public void SetFixTargetTraderNull()
			{
				this[this.tableDestination.FixTargetTraderColumn] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the IsTagEligible column.
			/// </summary>
			public void SetIsTagEligibleNull()
			{
				this[this.tableDestination.IsTagEligibleColumn] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the IsUnsolicitedTradeAllowed column.
			/// </summary>
			public void SetIsUnsolicitedTradeAllowedNull()
			{
				this[this.tableDestination.IsUnsolicitedTradeAllowedColumn] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the LotSize column.
			/// </summary>
			public void SetLotSizeNull()
			{
				this[this.tableDestination.LotSizeColumn] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the MaximumQuantityListedLimit column.
			/// </summary>
			public void SetMaximumQuantityListedLimitNull()
			{
				this[this.tableDestination.MaximumQuantityListedLimitColumn] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the MaximumQuantityListedMarket column.
			/// </summary>
			public void SetMaximumQuantityListedMarketNull()
			{
				this[this.tableDestination.MaximumQuantityListedMarketColumn] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the MaximumQuantityUnlistedLimit column.
			/// </summary>
			public void SetMaximumQuantityUnlistedLimitNull()
			{
				this[this.tableDestination.MaximumQuantityUnlistedLimitColumn] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the MaximumQuantityUnlistedMarket column.
			/// </summary>
			public void SetMaximumQuantityUnlistedMarketNull()
			{
				this[this.tableDestination.MaximumQuantityUnlistedMarketColumn] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the Name column.
			/// </summary>
			public void SetNameNull()
			{
				this[this.tableDestination.NameColumn] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the NewOrderCustomFixTag column.
			/// </summary>
			public void SetNewOrderCustomFixTagNull()
			{
				this[this.tableDestination.NewOrderCustomFixTagColumn] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the OatsDepartmentId column.
			/// </summary>
			public void SetOatsDepartmentIdNull()
			{
				this[this.tableDestination.OatsDepartmentIdColumn] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the OatsDestinationCode column.
			/// </summary>
			public void SetOatsDestinationCodeNull()
			{
				this[this.tableDestination.OatsDestinationCodeColumn] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the OatsReceivingMpi column.
			/// </summary>
			public void SetOatsReceivingMpiNull()
			{
				this[this.tableDestination.OatsReceivingMpiColumn] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the OatsRouteMethod column.
			/// </summary>
			public void SetOatsRouteMethodNull()
			{
				this[this.tableDestination.OatsRouteMethodColumn] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the OatsRoutingMpi column.
			/// </summary>
			public void SetOatsRoutingMpiNull()
			{
				this[this.tableDestination.OatsRoutingMpiColumn] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the OatsSentMpi column.
			/// </summary>
			public void SetOatsSentMpiNull()
			{
				this[this.tableDestination.OatsSentMpiColumn] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the OatsTerminalId column.
			/// </summary>
			public void SetOatsTerminalIdNull()
			{
				this[this.tableDestination.OatsTerminalIdColumn] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the OnCloseCancelTime column.
			/// </summary>
			public void SetOnCloseCancelTimeNull()
			{
				this[this.tableDestination.OnCloseCancelTimeColumn] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the OnCloseOrderTime column.
			/// </summary>
			public void SetOnCloseOrderTimeNull()
			{
				this[this.tableDestination.OnCloseOrderTimeColumn] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the PerShareUsageFee column.
			/// </summary>
			public void SetPerShareUsageFeeNull()
			{
				this[this.tableDestination.PerShareUsageFeeColumn] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the PostMarketLogic column.
			/// </summary>
			public void SetPostMarketLogicNull()
			{
				this[this.tableDestination.PostMarketLogicColumn] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the PrimaryBackupDestinationId column.
			/// </summary>
			public void SetPrimaryBackupDestinationIdNull()
			{
				this[this.tableDestination.PrimaryBackupDestinationIdColumn] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the SecondaryBackupDestinationId column.
			/// </summary>
			public void SetSecondaryBackupDestinationIdNull()
			{
				this[this.tableDestination.SecondaryBackupDestinationIdColumn] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the SourceId0 column.
			/// </summary>
			public void SetSourceId0Null()
			{
				this[this.tableDestination.SourceId0Column] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the SourceId1 column.
			/// </summary>
			public void SetSourceId1Null()
			{
				this[this.tableDestination.SourceId1Column] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the SourceId2 column.
			/// </summary>
			public void SetSourceId2Null()
			{
				this[this.tableDestination.SourceId2Column] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the SourceId3 column.
			/// </summary>
			public void SetSourceId3Null()
			{
				this[this.tableDestination.SourceId3Column] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the SourceId4 column.
			/// </summary>
			public void SetSourceId4Null()
			{
				this[this.tableDestination.SourceId4Column] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the SourceId5 column.
			/// </summary>
			public void SetSourceId5Null()
			{
				this[this.tableDestination.SourceId5Column] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the SourceId6 column.
			/// </summary>
			public void SetSourceId6Null()
			{
				this[this.tableDestination.SourceId6Column] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the SourceId7 column.
			/// </summary>
			public void SetSourceId7Null()
			{
				this[this.tableDestination.SourceId7Column] = global::System.DBNull.Value;
			}
		}
		
		/// <summary>
		/// Represents a row of data in the DestinationExchangeMap table.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		public partial class DestinationExchangeMapRow : global::System.Data.DataRow
		{
			
			private DestinationExchangeMapDataTable tableDestinationExchangeMap;
			
			/// <summary>
			/// Creates a row of data from the DestinationExchangeMap table schema.
			/// </summary>
			/// <param name="dataRowBuilder">An internal data structure used to build the row from the parent table schema.</param>
			internal DestinationExchangeMapRow(global::System.Data.DataRowBuilder dataRowBuilder) : 
					base(dataRowBuilder)
			{
				// This creates a strongly typed DestinationExchangeMap row using the generic construction methods.
				this.tableDestinationExchangeMap = ((DestinationExchangeMapDataTable)(this.Table));
			}
			
			/// <summary>
			/// Gets or sets the data in the DestinationExchangeMapId column.
			/// </summary>
			public global::System.Guid DestinationExchangeMapId
			{
				get
				{
					return ((global::System.Guid)(this[this.tableDestinationExchangeMap.DestinationExchangeMapIdColumn]));
				}
				set
				{
					this[this.tableDestinationExchangeMap.DestinationExchangeMapIdColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the DestinationId column.
			/// </summary>
			public global::System.Guid DestinationId
			{
				get
				{
					try
					{
						return ((global::System.Guid)(this[this.tableDestinationExchangeMap.DestinationIdColumn]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableDestinationExchangeMap.DestinationIdColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets the parent row in the Destination table.
			/// </summary>
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public DestinationRow DestinationRow
			{
				get
				{
					return ((DestinationRow)(this.GetParentRow(this.tableDestinationExchangeMap.DestinationDestinationExchangeMapRelation)));
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the ExchangeId column.
			/// </summary>
			public global::System.Guid ExchangeId
			{
				get
				{
					try
					{
						return ((global::System.Guid)(this[this.tableDestinationExchangeMap.ExchangeIdColumn]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableDestinationExchangeMap.ExchangeIdColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets the parent row in the Exchange table.
			/// </summary>
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public ExchangeRow ExchangeRow
			{
				get
				{
					return ((ExchangeRow)(this.GetParentRow(this.tableDestinationExchangeMap.ExchangeDestinationExchangeMapRelation)));
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the ExternalId0 column.
			/// </summary>
			public string ExternalId0
			{
				get
				{
					try
					{
						return ((string)(this[this.tableDestinationExchangeMap.ExternalId0Column]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableDestinationExchangeMap.ExternalId0Column] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the RowVersion column.
			/// </summary>
			public long RowVersion
			{
				get
				{
					return ((long)(this[this.tableDestinationExchangeMap.RowVersionColumn]));
				}
				set
				{
					this[this.tableDestinationExchangeMap.RowVersionColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets the Null property of the DestinationId column.
			/// </summary>
			public bool IsDestinationIdNull()
			{
				return (this[this.tableDestinationExchangeMap.DestinationIdColumn] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the ExchangeId column.
			/// </summary>
			public bool IsExchangeIdNull()
			{
				return (this[this.tableDestinationExchangeMap.ExchangeIdColumn] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the ExternalId0 column.
			/// </summary>
			public bool IsExternalId0Null()
			{
				return (this[this.tableDestinationExchangeMap.ExternalId0Column] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Sets the Null property of the DestinationId column.
			/// </summary>
			public void SetDestinationIdNull()
			{
				this[this.tableDestinationExchangeMap.DestinationIdColumn] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the ExchangeId column.
			/// </summary>
			public void SetExchangeIdNull()
			{
				this[this.tableDestinationExchangeMap.ExchangeIdColumn] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the ExternalId0 column.
			/// </summary>
			public void SetExternalId0Null()
			{
				this[this.tableDestinationExchangeMap.ExternalId0Column] = global::System.DBNull.Value;
			}
		}
		
		/// <summary>
		/// Represents a row of data in the DestinationOrder table.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		public partial class DestinationOrderRow : global::System.Data.DataRow
		{
			
			private DestinationOrderDataTable tableDestinationOrder;
			
			/// <summary>
			/// Creates a row of data from the DestinationOrder table schema.
			/// </summary>
			/// <param name="dataRowBuilder">An internal data structure used to build the row from the parent table schema.</param>
			internal DestinationOrderRow(global::System.Data.DataRowBuilder dataRowBuilder) : 
					base(dataRowBuilder)
			{
				// This creates a strongly typed DestinationOrder row using the generic construction methods.
				this.tableDestinationOrder = ((DestinationOrderDataTable)(this.Table));
			}
			
			/// <summary>
			/// Gets or sets the data in the CanceledQuantity column.
			/// </summary>
			public decimal CanceledQuantity
			{
				get
				{
					return ((decimal)(this[this.tableDestinationOrder.CanceledQuantityColumn]));
				}
				set
				{
					this[this.tableDestinationOrder.CanceledQuantityColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the CanceledTime column.
			/// </summary>
			public global::System.DateTime CanceledTime
			{
				get
				{
					try
					{
						return ((global::System.DateTime)(this[this.tableDestinationOrder.CanceledTimeColumn]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableDestinationOrder.CanceledTimeColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the CreatedTime column.
			/// </summary>
			public global::System.DateTime CreatedTime
			{
				get
				{
					return ((global::System.DateTime)(this[this.tableDestinationOrder.CreatedTimeColumn]));
				}
				set
				{
					this[this.tableDestinationOrder.CreatedTimeColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the CreatedUserId column.
			/// </summary>
			public global::System.Guid CreatedUserId
			{
				get
				{
					return ((global::System.Guid)(this[this.tableDestinationOrder.CreatedUserIdColumn]));
				}
				set
				{
					this[this.tableDestinationOrder.CreatedUserIdColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the DestinationId column.
			/// </summary>
			public global::System.Guid DestinationId
			{
				get
				{
					return ((global::System.Guid)(this[this.tableDestinationOrder.DestinationIdColumn]));
				}
				set
				{
					this[this.tableDestinationOrder.DestinationIdColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the DestinationOrderId column.
			/// </summary>
			public global::System.Guid DestinationOrderId
			{
				get
				{
					return ((global::System.Guid)(this[this.tableDestinationOrder.DestinationOrderIdColumn]));
				}
				set
				{
					this[this.tableDestinationOrder.DestinationOrderIdColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets the parent row in the Destination table.
			/// </summary>
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public DestinationRow DestinationRow
			{
				get
				{
					return ((DestinationRow)(this.GetParentRow(this.tableDestinationOrder.DestinationDestinationOrderRelation)));
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the ExternalId0 column.
			/// </summary>
			public string ExternalId0
			{
				get
				{
					try
					{
						return ((string)(this[this.tableDestinationOrder.ExternalId0Column]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableDestinationOrder.ExternalId0Column] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the IsCanceledByUser column.
			/// </summary>
			public bool IsCanceledByUser
			{
				get
				{
					return ((bool)(this[this.tableDestinationOrder.IsCanceledByUserColumn]));
				}
				set
				{
					this[this.tableDestinationOrder.IsCanceledByUserColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the IsHidden column.
			/// </summary>
			public bool IsHidden
			{
				get
				{
					return ((bool)(this[this.tableDestinationOrder.IsHiddenColumn]));
				}
				set
				{
					this[this.tableDestinationOrder.IsHiddenColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the LimitPrice column.
			/// </summary>
			public decimal LimitPrice
			{
				get
				{
					try
					{
						return ((decimal)(this[this.tableDestinationOrder.LimitPriceColumn]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableDestinationOrder.LimitPriceColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the ModifiedTime column.
			/// </summary>
			public global::System.DateTime ModifiedTime
			{
				get
				{
					return ((global::System.DateTime)(this[this.tableDestinationOrder.ModifiedTimeColumn]));
				}
				set
				{
					this[this.tableDestinationOrder.ModifiedTimeColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the ModifiedUserId column.
			/// </summary>
			public global::System.Guid ModifiedUserId
			{
				get
				{
					return ((global::System.Guid)(this[this.tableDestinationOrder.ModifiedUserIdColumn]));
				}
				set
				{
					this[this.tableDestinationOrder.ModifiedUserIdColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the OrderedQuantity column.
			/// </summary>
			public decimal OrderedQuantity
			{
				get
				{
					return ((decimal)(this[this.tableDestinationOrder.OrderedQuantityColumn]));
				}
				set
				{
					this[this.tableDestinationOrder.OrderedQuantityColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the OrderTypeCode column.
			/// </summary>
			public global::Teraque.OrderTypeCode OrderTypeCode
			{
				get
				{
					return ((global::Teraque.OrderTypeCode)(this[this.tableDestinationOrder.OrderTypeCodeColumn]));
				}
				set
				{
					this[this.tableDestinationOrder.OrderTypeCodeColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets the parent row in the OrderType table.
			/// </summary>
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public OrderTypeRow OrderTypeRow
			{
				get
				{
					return ((OrderTypeRow)(this.GetParentRow(this.tableDestinationOrder.OrderTypeDestinationOrderRelation)));
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the RowVersion column.
			/// </summary>
			public long RowVersion
			{
				get
				{
					return ((long)(this[this.tableDestinationOrder.RowVersionColumn]));
				}
				set
				{
					this[this.tableDestinationOrder.RowVersionColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the SecurityId column.
			/// </summary>
			public global::System.Guid SecurityId
			{
				get
				{
					try
					{
						return ((global::System.Guid)(this[this.tableDestinationOrder.SecurityIdColumn]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableDestinationOrder.SecurityIdColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets the parent row in the Security table.
			/// </summary>
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public SecurityRow SecurityRowByFK_Security_DestinationOrder_SecurityId
			{
				get
				{
					return ((SecurityRow)(this.GetParentRow(this.tableDestinationOrder.SecurityDestinationOrderByFK_Security_DestinationOrder_SecurityIdRelation)));
				}
			}
			
			/// <summary>
			/// Gets the parent row in the Security table.
			/// </summary>
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public SecurityRow SecurityRowByFK_Security_DestinationOrder_SettlementId
			{
				get
				{
					return ((SecurityRow)(this.GetParentRow(this.tableDestinationOrder.SecurityDestinationOrderByFK_Security_DestinationOrder_SettlementIdRelation)));
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the SettlementDate column.
			/// </summary>
			public global::System.DateTime SettlementDate
			{
				get
				{
					return ((global::System.DateTime)(this[this.tableDestinationOrder.SettlementDateColumn]));
				}
				set
				{
					this[this.tableDestinationOrder.SettlementDateColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the SettlementId column.
			/// </summary>
			public global::System.Guid SettlementId
			{
				get
				{
					try
					{
						return ((global::System.Guid)(this[this.tableDestinationOrder.SettlementIdColumn]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableDestinationOrder.SettlementIdColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the SideCode column.
			/// </summary>
			public global::Teraque.SideCode SideCode
			{
				get
				{
					return ((global::Teraque.SideCode)(this[this.tableDestinationOrder.SideCodeColumn]));
				}
				set
				{
					this[this.tableDestinationOrder.SideCodeColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets the parent row in the Side table.
			/// </summary>
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public SideRow SideRow
			{
				get
				{
					return ((SideRow)(this.GetParentRow(this.tableDestinationOrder.SideDestinationOrderRelation)));
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the StateCode column.
			/// </summary>
			public global::Teraque.StateCode StateCode
			{
				get
				{
					return ((global::Teraque.StateCode)(this[this.tableDestinationOrder.StateCodeColumn]));
				}
				set
				{
					this[this.tableDestinationOrder.StateCodeColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets the parent row in the State table.
			/// </summary>
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public StateRow StateRow
			{
				get
				{
					return ((StateRow)(this.GetParentRow(this.tableDestinationOrder.StateDestinationOrderRelation)));
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the StatusCode column.
			/// </summary>
			public global::Teraque.StatusCode StatusCode
			{
				get
				{
					return ((global::Teraque.StatusCode)(this[this.tableDestinationOrder.StatusCodeColumn]));
				}
				set
				{
					this[this.tableDestinationOrder.StatusCodeColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets the parent row in the Status table.
			/// </summary>
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public StatusRow StatusRow
			{
				get
				{
					return ((StatusRow)(this.GetParentRow(this.tableDestinationOrder.StatusDestinationOrderRelation)));
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the StopPrice column.
			/// </summary>
			public decimal StopPrice
			{
				get
				{
					try
					{
						return ((decimal)(this[this.tableDestinationOrder.StopPriceColumn]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableDestinationOrder.StopPriceColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the TimeInForceCode column.
			/// </summary>
			public global::Teraque.TimeInForceCode TimeInForceCode
			{
				get
				{
					return ((global::Teraque.TimeInForceCode)(this[this.tableDestinationOrder.TimeInForceCodeColumn]));
				}
				set
				{
					this[this.tableDestinationOrder.TimeInForceCodeColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets the parent row in the TimeInForce table.
			/// </summary>
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public TimeInForceRow TimeInForceRow
			{
				get
				{
					return ((TimeInForceRow)(this.GetParentRow(this.tableDestinationOrder.TimeInForceDestinationOrderRelation)));
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the TradeDate column.
			/// </summary>
			public global::System.DateTime TradeDate
			{
				get
				{
					return ((global::System.DateTime)(this[this.tableDestinationOrder.TradeDateColumn]));
				}
				set
				{
					this[this.tableDestinationOrder.TradeDateColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the TraderId column.
			/// </summary>
			public global::System.Guid TraderId
			{
				get
				{
					try
					{
						return ((global::System.Guid)(this[this.tableDestinationOrder.TraderIdColumn]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableDestinationOrder.TraderIdColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets the parent row in the Trader table.
			/// </summary>
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public TraderRow TraderRow
			{
				get
				{
					return ((TraderRow)(this.GetParentRow(this.tableDestinationOrder.TraderDestinationOrderRelation)));
				}
			}
			
			/// <summary>
			/// Gets the parent row in the User table.
			/// </summary>
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public UserRow UserRowByFK_User_DestinationOrder_CreatedUserId
			{
				get
				{
					return ((UserRow)(this.GetParentRow(this.tableDestinationOrder.UserDestinationOrderByFK_User_DestinationOrder_CreatedUserIdRelation)));
				}
			}
			
			/// <summary>
			/// Gets the parent row in the User table.
			/// </summary>
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public UserRow UserRowByFK_User_DestinationOrder_ModifiedUserId
			{
				get
				{
					return ((UserRow)(this.GetParentRow(this.tableDestinationOrder.UserDestinationOrderByFK_User_DestinationOrder_ModifiedUserIdRelation)));
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the WorkingOrderId column.
			/// </summary>
			public global::System.Guid WorkingOrderId
			{
				get
				{
					return ((global::System.Guid)(this[this.tableDestinationOrder.WorkingOrderIdColumn]));
				}
				set
				{
					this[this.tableDestinationOrder.WorkingOrderIdColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets the parent row in the WorkingOrder table.
			/// </summary>
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public WorkingOrderRow WorkingOrderRow
			{
				get
				{
					return ((WorkingOrderRow)(this.GetParentRow(this.tableDestinationOrder.WorkingOrderDestinationOrderRelation)));
				}
			}
			
			/// <summary>
			/// Gets the children rows in the Execution table.
			/// </summary>
			public ExecutionRow[] GetExecutionRows()
			{
				return ((ExecutionRow[])(this.GetChildRows(this.tableDestinationOrder.DestinationOrderExecutionRelation)));
			}
			
			/// <summary>
			/// Gets the Null property of the CanceledTime column.
			/// </summary>
			public bool IsCanceledTimeNull()
			{
				return (this[this.tableDestinationOrder.CanceledTimeColumn] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the ExternalId0 column.
			/// </summary>
			public bool IsExternalId0Null()
			{
				return (this[this.tableDestinationOrder.ExternalId0Column] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the LimitPrice column.
			/// </summary>
			public bool IsLimitPriceNull()
			{
				return (this[this.tableDestinationOrder.LimitPriceColumn] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the SecurityId column.
			/// </summary>
			public bool IsSecurityIdNull()
			{
				return (this[this.tableDestinationOrder.SecurityIdColumn] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the SettlementId column.
			/// </summary>
			public bool IsSettlementIdNull()
			{
				return (this[this.tableDestinationOrder.SettlementIdColumn] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the StopPrice column.
			/// </summary>
			public bool IsStopPriceNull()
			{
				return (this[this.tableDestinationOrder.StopPriceColumn] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the TraderId column.
			/// </summary>
			public bool IsTraderIdNull()
			{
				return (this[this.tableDestinationOrder.TraderIdColumn] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Sets the Null property of the CanceledTime column.
			/// </summary>
			public void SetCanceledTimeNull()
			{
				this[this.tableDestinationOrder.CanceledTimeColumn] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the ExternalId0 column.
			/// </summary>
			public void SetExternalId0Null()
			{
				this[this.tableDestinationOrder.ExternalId0Column] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the LimitPrice column.
			/// </summary>
			public void SetLimitPriceNull()
			{
				this[this.tableDestinationOrder.LimitPriceColumn] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the SecurityId column.
			/// </summary>
			public void SetSecurityIdNull()
			{
				this[this.tableDestinationOrder.SecurityIdColumn] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the SettlementId column.
			/// </summary>
			public void SetSettlementIdNull()
			{
				this[this.tableDestinationOrder.SettlementIdColumn] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the StopPrice column.
			/// </summary>
			public void SetStopPriceNull()
			{
				this[this.tableDestinationOrder.StopPriceColumn] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the TraderId column.
			/// </summary>
			public void SetTraderIdNull()
			{
				this[this.tableDestinationOrder.TraderIdColumn] = global::System.DBNull.Value;
			}
		}
		
		/// <summary>
		/// Represents a row of data in the Entity table.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		public partial class EntityRow : global::System.Data.DataRow
		{
			
			private EntityDataTable tableEntity;
			
			/// <summary>
			/// Creates a row of data from the Entity table schema.
			/// </summary>
			/// <param name="dataRowBuilder">An internal data structure used to build the row from the parent table schema.</param>
			internal EntityRow(global::System.Data.DataRowBuilder dataRowBuilder) : 
					base(dataRowBuilder)
			{
				// This creates a strongly typed Entity row using the generic construction methods.
				this.tableEntity = ((EntityDataTable)(this.Table));
			}
			
			/// <summary>
			/// Gets or sets the data in the CreatedTime column.
			/// </summary>
			public global::System.DateTime CreatedTime
			{
				get
				{
					return ((global::System.DateTime)(this[this.tableEntity.CreatedTimeColumn]));
				}
				set
				{
					this[this.tableEntity.CreatedTimeColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the Description column.
			/// </summary>
			public string Description
			{
				get
				{
					try
					{
						return ((string)(this[this.tableEntity.DescriptionColumn]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableEntity.DescriptionColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the EntityId column.
			/// </summary>
			public global::System.Guid EntityId
			{
				get
				{
					return ((global::System.Guid)(this[this.tableEntity.EntityIdColumn]));
				}
				set
				{
					this[this.tableEntity.EntityIdColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the ExternalId0 column.
			/// </summary>
			public string ExternalId0
			{
				get
				{
					try
					{
						return ((string)(this[this.tableEntity.ExternalId0Column]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableEntity.ExternalId0Column] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the ExternalId1 column.
			/// </summary>
			public string ExternalId1
			{
				get
				{
					try
					{
						return ((string)(this[this.tableEntity.ExternalId1Column]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableEntity.ExternalId1Column] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the ExternalId2 column.
			/// </summary>
			public string ExternalId2
			{
				get
				{
					try
					{
						return ((string)(this[this.tableEntity.ExternalId2Column]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableEntity.ExternalId2Column] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the ExternalId3 column.
			/// </summary>
			public string ExternalId3
			{
				get
				{
					try
					{
						return ((string)(this[this.tableEntity.ExternalId3Column]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableEntity.ExternalId3Column] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the ExternalId4 column.
			/// </summary>
			public string ExternalId4
			{
				get
				{
					try
					{
						return ((string)(this[this.tableEntity.ExternalId4Column]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableEntity.ExternalId4Column] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the ExternalId5 column.
			/// </summary>
			public string ExternalId5
			{
				get
				{
					try
					{
						return ((string)(this[this.tableEntity.ExternalId5Column]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableEntity.ExternalId5Column] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the ExternalId6 column.
			/// </summary>
			public string ExternalId6
			{
				get
				{
					try
					{
						return ((string)(this[this.tableEntity.ExternalId6Column]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableEntity.ExternalId6Column] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the ExternalId7 column.
			/// </summary>
			public string ExternalId7
			{
				get
				{
					try
					{
						return ((string)(this[this.tableEntity.ExternalId7Column]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableEntity.ExternalId7Column] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the ImageId column.
			/// </summary>
			public global::System.Guid ImageId
			{
				get
				{
					return ((global::System.Guid)(this[this.tableEntity.ImageIdColumn]));
				}
				set
				{
					this[this.tableEntity.ImageIdColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets the parent row in the Image table.
			/// </summary>
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public ImageRow ImageRow
			{
				get
				{
					return ((ImageRow)(this.GetParentRow(this.tableEntity.ImageEntityRelation)));
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the IsContainer column.
			/// </summary>
			public bool IsContainer
			{
				get
				{
					return ((bool)(this[this.tableEntity.IsContainerColumn]));
				}
				set
				{
					this[this.tableEntity.IsContainerColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the IsHidden column.
			/// </summary>
			public bool IsHidden
			{
				get
				{
					return ((bool)(this[this.tableEntity.IsHiddenColumn]));
				}
				set
				{
					this[this.tableEntity.IsHiddenColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the IsReadOnly column.
			/// </summary>
			public bool IsReadOnly
			{
				get
				{
					return ((bool)(this[this.tableEntity.IsReadOnlyColumn]));
				}
				set
				{
					this[this.tableEntity.IsReadOnlyColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the ModifiedTime column.
			/// </summary>
			public global::System.DateTime ModifiedTime
			{
				get
				{
					return ((global::System.DateTime)(this[this.tableEntity.ModifiedTimeColumn]));
				}
				set
				{
					this[this.tableEntity.ModifiedTimeColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the Name column.
			/// </summary>
			public string Name
			{
				get
				{
					return ((string)(this[this.tableEntity.NameColumn]));
				}
				set
				{
					this[this.tableEntity.NameColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the RowVersion column.
			/// </summary>
			public long RowVersion
			{
				get
				{
					return ((long)(this[this.tableEntity.RowVersionColumn]));
				}
				set
				{
					this[this.tableEntity.RowVersionColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the TypeId column.
			/// </summary>
			public global::System.Guid TypeId
			{
				get
				{
					return ((global::System.Guid)(this[this.tableEntity.TypeIdColumn]));
				}
				set
				{
					this[this.tableEntity.TypeIdColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets the parent row in the Type table.
			/// </summary>
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public TypeRow TypeRow
			{
				get
				{
					return ((TypeRow)(this.GetParentRow(this.tableEntity.TypeEntityRelation)));
				}
			}
			
			/// <summary>
			/// Gets the children rows in the Account table.
			/// </summary>
			public AccountRow[] GetAccountRows()
			{
				return ((AccountRow[])(this.GetChildRows(this.tableEntity.EntityAccountRelation)));
			}
			
			/// <summary>
			/// Gets the children rows in the Blotter table.
			/// </summary>
			public BlotterRow[] GetBlotterRows()
			{
				return ((BlotterRow[])(this.GetChildRows(this.tableEntity.EntityBlotterRelation)));
			}
			
			/// <summary>
			/// Gets the children rows in the EntityTree table.
			/// </summary>
			public EntityTreeRow[] GetEntityTreeRowsByFK_Entity_EntityTree_ChildId()
			{
				return ((EntityTreeRow[])(this.GetChildRows(this.tableEntity.EntityEntityTreeByFK_Entity_EntityTree_ChildIdRelation)));
			}
			
			/// <summary>
			/// Gets the children rows in the EntityTree table.
			/// </summary>
			public EntityTreeRow[] GetEntityTreeRowsByFK_Entity_EntityTree_ParentId()
			{
				return ((EntityTreeRow[])(this.GetChildRows(this.tableEntity.EntityEntityTreeByFK_Entity_EntityTree_ParentIdRelation)));
			}
			
			/// <summary>
			/// Gets the children rows in the Folder table.
			/// </summary>
			public FolderRow[] GetFolderRows()
			{
				return ((FolderRow[])(this.GetChildRows(this.tableEntity.EntityFolderRelation)));
			}
			
			/// <summary>
			/// Gets the children rows in the Issuer table.
			/// </summary>
			public IssuerRow[] GetIssuerRows()
			{
				return ((IssuerRow[])(this.GetChildRows(this.tableEntity.EntityIssuerRelation)));
			}
			
			/// <summary>
			/// Gets the children rows in the PropertyStore table.
			/// </summary>
			public PropertyStoreRow[] GetPropertyStoreRows()
			{
				return ((PropertyStoreRow[])(this.GetChildRows(this.tableEntity.EntityPropertyStoreRelation)));
			}
			
			/// <summary>
			/// Gets the children rows in the Security table.
			/// </summary>
			public SecurityRow[] GetSecurityRows()
			{
				return ((SecurityRow[])(this.GetChildRows(this.tableEntity.EntitySecurityRelation)));
			}
			
			/// <summary>
			/// Gets the children rows in the User table.
			/// </summary>
			public UserRow[] GetUserRows()
			{
				return ((UserRow[])(this.GetChildRows(this.tableEntity.EntityUserRelation)));
			}
			
			/// <summary>
			/// Gets the Null property of the Description column.
			/// </summary>
			public bool IsDescriptionNull()
			{
				return (this[this.tableEntity.DescriptionColumn] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the ExternalId0 column.
			/// </summary>
			public bool IsExternalId0Null()
			{
				return (this[this.tableEntity.ExternalId0Column] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the ExternalId1 column.
			/// </summary>
			public bool IsExternalId1Null()
			{
				return (this[this.tableEntity.ExternalId1Column] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the ExternalId2 column.
			/// </summary>
			public bool IsExternalId2Null()
			{
				return (this[this.tableEntity.ExternalId2Column] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the ExternalId3 column.
			/// </summary>
			public bool IsExternalId3Null()
			{
				return (this[this.tableEntity.ExternalId3Column] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the ExternalId4 column.
			/// </summary>
			public bool IsExternalId4Null()
			{
				return (this[this.tableEntity.ExternalId4Column] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the ExternalId5 column.
			/// </summary>
			public bool IsExternalId5Null()
			{
				return (this[this.tableEntity.ExternalId5Column] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the ExternalId6 column.
			/// </summary>
			public bool IsExternalId6Null()
			{
				return (this[this.tableEntity.ExternalId6Column] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the ExternalId7 column.
			/// </summary>
			public bool IsExternalId7Null()
			{
				return (this[this.tableEntity.ExternalId7Column] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Sets the Null property of the Description column.
			/// </summary>
			public void SetDescriptionNull()
			{
				this[this.tableEntity.DescriptionColumn] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the ExternalId0 column.
			/// </summary>
			public void SetExternalId0Null()
			{
				this[this.tableEntity.ExternalId0Column] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the ExternalId1 column.
			/// </summary>
			public void SetExternalId1Null()
			{
				this[this.tableEntity.ExternalId1Column] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the ExternalId2 column.
			/// </summary>
			public void SetExternalId2Null()
			{
				this[this.tableEntity.ExternalId2Column] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the ExternalId3 column.
			/// </summary>
			public void SetExternalId3Null()
			{
				this[this.tableEntity.ExternalId3Column] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the ExternalId4 column.
			/// </summary>
			public void SetExternalId4Null()
			{
				this[this.tableEntity.ExternalId4Column] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the ExternalId5 column.
			/// </summary>
			public void SetExternalId5Null()
			{
				this[this.tableEntity.ExternalId5Column] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the ExternalId6 column.
			/// </summary>
			public void SetExternalId6Null()
			{
				this[this.tableEntity.ExternalId6Column] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the ExternalId7 column.
			/// </summary>
			public void SetExternalId7Null()
			{
				this[this.tableEntity.ExternalId7Column] = global::System.DBNull.Value;
			}
		}
		
		/// <summary>
		/// Represents a row of data in the EntityTree table.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		public partial class EntityTreeRow : global::System.Data.DataRow
		{
			
			private EntityTreeDataTable tableEntityTree;
			
			/// <summary>
			/// Creates a row of data from the EntityTree table schema.
			/// </summary>
			/// <param name="dataRowBuilder">An internal data structure used to build the row from the parent table schema.</param>
			internal EntityTreeRow(global::System.Data.DataRowBuilder dataRowBuilder) : 
					base(dataRowBuilder)
			{
				// This creates a strongly typed EntityTree row using the generic construction methods.
				this.tableEntityTree = ((EntityTreeDataTable)(this.Table));
			}
			
			/// <summary>
			/// Gets or sets the data in the ChildId column.
			/// </summary>
			public global::System.Guid ChildId
			{
				get
				{
					return ((global::System.Guid)(this[this.tableEntityTree.ChildIdColumn]));
				}
				set
				{
					this[this.tableEntityTree.ChildIdColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets the parent row in the Entity table.
			/// </summary>
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public EntityRow EntityRowByFK_Entity_EntityTree_ChildId
			{
				get
				{
					return ((EntityRow)(this.GetParentRow(this.tableEntityTree.EntityEntityTreeByFK_Entity_EntityTree_ChildIdRelation)));
				}
			}
			
			/// <summary>
			/// Gets the parent row in the Entity table.
			/// </summary>
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public EntityRow EntityRowByFK_Entity_EntityTree_ParentId
			{
				get
				{
					return ((EntityRow)(this.GetParentRow(this.tableEntityTree.EntityEntityTreeByFK_Entity_EntityTree_ParentIdRelation)));
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the EntityTreeId column.
			/// </summary>
			public global::System.Guid EntityTreeId
			{
				get
				{
					return ((global::System.Guid)(this[this.tableEntityTree.EntityTreeIdColumn]));
				}
				set
				{
					this[this.tableEntityTree.EntityTreeIdColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the ExternalId0 column.
			/// </summary>
			public string ExternalId0
			{
				get
				{
					try
					{
						return ((string)(this[this.tableEntityTree.ExternalId0Column]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableEntityTree.ExternalId0Column] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the ParentId column.
			/// </summary>
			public global::System.Guid ParentId
			{
				get
				{
					return ((global::System.Guid)(this[this.tableEntityTree.ParentIdColumn]));
				}
				set
				{
					this[this.tableEntityTree.ParentIdColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the RowVersion column.
			/// </summary>
			public long RowVersion
			{
				get
				{
					return ((long)(this[this.tableEntityTree.RowVersionColumn]));
				}
				set
				{
					this[this.tableEntityTree.RowVersionColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets the Null property of the ExternalId0 column.
			/// </summary>
			public bool IsExternalId0Null()
			{
				return (this[this.tableEntityTree.ExternalId0Column] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Sets the Null property of the ExternalId0 column.
			/// </summary>
			public void SetExternalId0Null()
			{
				this[this.tableEntityTree.ExternalId0Column] = global::System.DBNull.Value;
			}
		}
		
		/// <summary>
		/// Represents a row of data in the Equity table.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		public partial class EquityRow : global::System.Data.DataRow
		{
			
			private EquityDataTable tableEquity;
			
			/// <summary>
			/// Creates a row of data from the Equity table schema.
			/// </summary>
			/// <param name="dataRowBuilder">An internal data structure used to build the row from the parent table schema.</param>
			internal EquityRow(global::System.Data.DataRowBuilder dataRowBuilder) : 
					base(dataRowBuilder)
			{
				// This creates a strongly typed Equity row using the generic construction methods.
				this.tableEquity = ((EquityDataTable)(this.Table));
			}
			
			/// <summary>
			/// Gets or sets the data in the EquityId column.
			/// </summary>
			public global::System.Guid EquityId
			{
				get
				{
					return ((global::System.Guid)(this[this.tableEquity.EquityIdColumn]));
				}
				set
				{
					this[this.tableEquity.EquityIdColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the ExchangeId column.
			/// </summary>
			public global::System.Guid ExchangeId
			{
				get
				{
					try
					{
						return ((global::System.Guid)(this[this.tableEquity.ExchangeIdColumn]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableEquity.ExchangeIdColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets the parent row in the Exchange table.
			/// </summary>
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public ExchangeRow ExchangeRow
			{
				get
				{
					return ((ExchangeRow)(this.GetParentRow(this.tableEquity.ExchangeEquityRelation)));
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the IssuerId column.
			/// </summary>
			public global::System.Guid IssuerId
			{
				get
				{
					try
					{
						return ((global::System.Guid)(this[this.tableEquity.IssuerIdColumn]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableEquity.IssuerIdColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the RowVersion column.
			/// </summary>
			public long RowVersion
			{
				get
				{
					return ((long)(this[this.tableEquity.RowVersionColumn]));
				}
				set
				{
					this[this.tableEquity.RowVersionColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets the parent row in the Security table.
			/// </summary>
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public SecurityRow SecurityRowByFK_Security_Equity_EquityId
			{
				get
				{
					return ((SecurityRow)(this.GetParentRow(this.tableEquity.SecurityEquityByFK_Security_Equity_EquityIdRelation)));
				}
			}
			
			/// <summary>
			/// Gets the parent row in the Security table.
			/// </summary>
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public SecurityRow SecurityRowByFK_Security_Equity_SettlementId
			{
				get
				{
					return ((SecurityRow)(this.GetParentRow(this.tableEquity.SecurityEquityByFK_Security_Equity_SettlementIdRelation)));
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the SettlementId column.
			/// </summary>
			public global::System.Guid SettlementId
			{
				get
				{
					return ((global::System.Guid)(this[this.tableEquity.SettlementIdColumn]));
				}
				set
				{
					this[this.tableEquity.SettlementIdColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the SharesOutstanding column.
			/// </summary>
			public decimal SharesOutstanding
			{
				get
				{
					try
					{
						return ((decimal)(this[this.tableEquity.SharesOutstandingColumn]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableEquity.SharesOutstandingColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets the Null property of the ExchangeId column.
			/// </summary>
			public bool IsExchangeIdNull()
			{
				return (this[this.tableEquity.ExchangeIdColumn] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the IssuerId column.
			/// </summary>
			public bool IsIssuerIdNull()
			{
				return (this[this.tableEquity.IssuerIdColumn] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the SharesOutstanding column.
			/// </summary>
			public bool IsSharesOutstandingNull()
			{
				return (this[this.tableEquity.SharesOutstandingColumn] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Sets the Null property of the ExchangeId column.
			/// </summary>
			public void SetExchangeIdNull()
			{
				this[this.tableEquity.ExchangeIdColumn] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the IssuerId column.
			/// </summary>
			public void SetIssuerIdNull()
			{
				this[this.tableEquity.IssuerIdColumn] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the SharesOutstanding column.
			/// </summary>
			public void SetSharesOutstandingNull()
			{
				this[this.tableEquity.SharesOutstandingColumn] = global::System.DBNull.Value;
			}
		}
		
		/// <summary>
		/// Represents a row of data in the Exchange table.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		public partial class ExchangeRow : global::System.Data.DataRow
		{
			
			private ExchangeDataTable tableExchange;
			
			/// <summary>
			/// Creates a row of data from the Exchange table schema.
			/// </summary>
			/// <param name="dataRowBuilder">An internal data structure used to build the row from the parent table schema.</param>
			internal ExchangeRow(global::System.Data.DataRowBuilder dataRowBuilder) : 
					base(dataRowBuilder)
			{
				// This creates a strongly typed Exchange row using the generic construction methods.
				this.tableExchange = ((ExchangeDataTable)(this.Table));
			}
			
			/// <summary>
			/// Gets or sets the data in the CountryId column.
			/// </summary>
			public global::System.Guid CountryId
			{
				get
				{
					return ((global::System.Guid)(this[this.tableExchange.CountryIdColumn]));
				}
				set
				{
					this[this.tableExchange.CountryIdColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets the parent row in the Country table.
			/// </summary>
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public CountryRow CountryRow
			{
				get
				{
					return ((CountryRow)(this.GetParentRow(this.tableExchange.CountryExchangeRelation)));
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the ExchangeId column.
			/// </summary>
			public global::System.Guid ExchangeId
			{
				get
				{
					return ((global::System.Guid)(this[this.tableExchange.ExchangeIdColumn]));
				}
				set
				{
					this[this.tableExchange.ExchangeIdColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the ExternalId0 column.
			/// </summary>
			public string ExternalId0
			{
				get
				{
					try
					{
						return ((string)(this[this.tableExchange.ExternalId0Column]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableExchange.ExternalId0Column] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the ExternalId1 column.
			/// </summary>
			public string ExternalId1
			{
				get
				{
					try
					{
						return ((string)(this[this.tableExchange.ExternalId1Column]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableExchange.ExternalId1Column] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the ExternalId2 column.
			/// </summary>
			public string ExternalId2
			{
				get
				{
					try
					{
						return ((string)(this[this.tableExchange.ExternalId2Column]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableExchange.ExternalId2Column] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the ExternalId3 column.
			/// </summary>
			public string ExternalId3
			{
				get
				{
					try
					{
						return ((string)(this[this.tableExchange.ExternalId3Column]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableExchange.ExternalId3Column] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the IsListed column.
			/// </summary>
			public bool IsListed
			{
				get
				{
					return ((bool)(this[this.tableExchange.IsListedColumn]));
				}
				set
				{
					this[this.tableExchange.IsListedColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the Mnemonic column.
			/// </summary>
			public string Mnemonic
			{
				get
				{
					return ((string)(this[this.tableExchange.MnemonicColumn]));
				}
				set
				{
					this[this.tableExchange.MnemonicColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the Name column.
			/// </summary>
			public string Name
			{
				get
				{
					return ((string)(this[this.tableExchange.NameColumn]));
				}
				set
				{
					this[this.tableExchange.NameColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the RowVersion column.
			/// </summary>
			public long RowVersion
			{
				get
				{
					return ((long)(this[this.tableExchange.RowVersionColumn]));
				}
				set
				{
					this[this.tableExchange.RowVersionColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets the children rows in the DestinationExchangeMap table.
			/// </summary>
			public DestinationExchangeMapRow[] GetDestinationExchangeMapRows()
			{
				return ((DestinationExchangeMapRow[])(this.GetChildRows(this.tableExchange.ExchangeDestinationExchangeMapRelation)));
			}
			
			/// <summary>
			/// Gets the children rows in the Equity table.
			/// </summary>
			public EquityRow[] GetEquityRows()
			{
				return ((EquityRow[])(this.GetChildRows(this.tableExchange.ExchangeEquityRelation)));
			}
			
			/// <summary>
			/// Gets the Null property of the ExternalId0 column.
			/// </summary>
			public bool IsExternalId0Null()
			{
				return (this[this.tableExchange.ExternalId0Column] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the ExternalId1 column.
			/// </summary>
			public bool IsExternalId1Null()
			{
				return (this[this.tableExchange.ExternalId1Column] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the ExternalId2 column.
			/// </summary>
			public bool IsExternalId2Null()
			{
				return (this[this.tableExchange.ExternalId2Column] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the ExternalId3 column.
			/// </summary>
			public bool IsExternalId3Null()
			{
				return (this[this.tableExchange.ExternalId3Column] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Sets the Null property of the ExternalId0 column.
			/// </summary>
			public void SetExternalId0Null()
			{
				this[this.tableExchange.ExternalId0Column] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the ExternalId1 column.
			/// </summary>
			public void SetExternalId1Null()
			{
				this[this.tableExchange.ExternalId1Column] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the ExternalId2 column.
			/// </summary>
			public void SetExternalId2Null()
			{
				this[this.tableExchange.ExternalId2Column] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the ExternalId3 column.
			/// </summary>
			public void SetExternalId3Null()
			{
				this[this.tableExchange.ExternalId3Column] = global::System.DBNull.Value;
			}
		}
		
		/// <summary>
		/// Represents a row of data in the Execution table.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		public partial class ExecutionRow : global::System.Data.DataRow
		{
			
			private ExecutionDataTable tableExecution;
			
			/// <summary>
			/// Creates a row of data from the Execution table schema.
			/// </summary>
			/// <param name="dataRowBuilder">An internal data structure used to build the row from the parent table schema.</param>
			internal ExecutionRow(global::System.Data.DataRowBuilder dataRowBuilder) : 
					base(dataRowBuilder)
			{
				// This creates a strongly typed Execution row using the generic construction methods.
				this.tableExecution = ((ExecutionDataTable)(this.Table));
			}
			
			/// <summary>
			/// Gets or sets the data in the AccruedInterest column.
			/// </summary>
			public decimal AccruedInterest
			{
				get
				{
					return ((decimal)(this[this.tableExecution.AccruedInterestColumn]));
				}
				set
				{
					this[this.tableExecution.AccruedInterestColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the BrokerAccountId column.
			/// </summary>
			public global::System.Guid BrokerAccountId
			{
				get
				{
					try
					{
						return ((global::System.Guid)(this[this.tableExecution.BrokerAccountIdColumn]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableExecution.BrokerAccountIdColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets the parent row in the BrokerAccount table.
			/// </summary>
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public BrokerAccountRow BrokerAccountRow
			{
				get
				{
					return ((BrokerAccountRow)(this.GetParentRow(this.tableExecution.BrokerAccountExecutionRelation)));
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the BrokerId column.
			/// </summary>
			public global::System.Guid BrokerId
			{
				get
				{
					try
					{
						return ((global::System.Guid)(this[this.tableExecution.BrokerIdColumn]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableExecution.BrokerIdColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets the parent row in the Broker table.
			/// </summary>
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public BrokerRow BrokerRow
			{
				get
				{
					return ((BrokerRow)(this.GetParentRow(this.tableExecution.BrokerExecutionRelation)));
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the Commission column.
			/// </summary>
			public decimal Commission
			{
				get
				{
					return ((decimal)(this[this.tableExecution.CommissionColumn]));
				}
				set
				{
					this[this.tableExecution.CommissionColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the CreatedTime column.
			/// </summary>
			public global::System.DateTime CreatedTime
			{
				get
				{
					return ((global::System.DateTime)(this[this.tableExecution.CreatedTimeColumn]));
				}
				set
				{
					this[this.tableExecution.CreatedTimeColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the CreatedUserId column.
			/// </summary>
			public global::System.Guid CreatedUserId
			{
				get
				{
					return ((global::System.Guid)(this[this.tableExecution.CreatedUserIdColumn]));
				}
				set
				{
					this[this.tableExecution.CreatedUserIdColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the DestinationOrderId column.
			/// </summary>
			public global::System.Guid DestinationOrderId
			{
				get
				{
					return ((global::System.Guid)(this[this.tableExecution.DestinationOrderIdColumn]));
				}
				set
				{
					this[this.tableExecution.DestinationOrderIdColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets the parent row in the DestinationOrder table.
			/// </summary>
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public DestinationOrderRow DestinationOrderRow
			{
				get
				{
					return ((DestinationOrderRow)(this.GetParentRow(this.tableExecution.DestinationOrderExecutionRelation)));
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the DestinationStateCode column.
			/// </summary>
			public global::Teraque.StateCode DestinationStateCode
			{
				get
				{
					return ((global::Teraque.StateCode)(this[this.tableExecution.DestinationStateCodeColumn]));
				}
				set
				{
					this[this.tableExecution.DestinationStateCodeColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the ExecutionId column.
			/// </summary>
			public global::System.Guid ExecutionId
			{
				get
				{
					return ((global::System.Guid)(this[this.tableExecution.ExecutionIdColumn]));
				}
				set
				{
					this[this.tableExecution.ExecutionIdColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the ExecutionPrice column.
			/// </summary>
			public decimal ExecutionPrice
			{
				get
				{
					return ((decimal)(this[this.tableExecution.ExecutionPriceColumn]));
				}
				set
				{
					this[this.tableExecution.ExecutionPriceColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the ExecutionQuantity column.
			/// </summary>
			public decimal ExecutionQuantity
			{
				get
				{
					return ((decimal)(this[this.tableExecution.ExecutionQuantityColumn]));
				}
				set
				{
					this[this.tableExecution.ExecutionQuantityColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the ExternalId0 column.
			/// </summary>
			public string ExternalId0
			{
				get
				{
					try
					{
						return ((string)(this[this.tableExecution.ExternalId0Column]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableExecution.ExternalId0Column] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the IsHidden column.
			/// </summary>
			public bool IsHidden
			{
				get
				{
					return ((bool)(this[this.tableExecution.IsHiddenColumn]));
				}
				set
				{
					this[this.tableExecution.IsHiddenColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the ModifiedTime column.
			/// </summary>
			public global::System.DateTime ModifiedTime
			{
				get
				{
					try
					{
						return ((global::System.DateTime)(this[this.tableExecution.ModifiedTimeColumn]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableExecution.ModifiedTimeColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the ModifiedUserId column.
			/// </summary>
			public global::System.Guid ModifiedUserId
			{
				get
				{
					try
					{
						return ((global::System.Guid)(this[this.tableExecution.ModifiedUserIdColumn]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableExecution.ModifiedUserIdColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the OriginalDestinationOrderId column.
			/// </summary>
			public global::System.Guid OriginalDestinationOrderId
			{
				get
				{
					try
					{
						return ((global::System.Guid)(this[this.tableExecution.OriginalDestinationOrderIdColumn]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableExecution.OriginalDestinationOrderIdColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the OriginalPrice column.
			/// </summary>
			public decimal OriginalPrice
			{
				get
				{
					try
					{
						return ((decimal)(this[this.tableExecution.OriginalPriceColumn]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableExecution.OriginalPriceColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the OriginalQuantity column.
			/// </summary>
			public decimal OriginalQuantity
			{
				get
				{
					try
					{
						return ((decimal)(this[this.tableExecution.OriginalQuantityColumn]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableExecution.OriginalQuantityColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the RowVersion column.
			/// </summary>
			public long RowVersion
			{
				get
				{
					return ((long)(this[this.tableExecution.RowVersionColumn]));
				}
				set
				{
					this[this.tableExecution.RowVersionColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the SourceExecutionId column.
			/// </summary>
			public string SourceExecutionId
			{
				get
				{
					try
					{
						return ((string)(this[this.tableExecution.SourceExecutionIdColumn]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableExecution.SourceExecutionIdColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the SourceStateCode column.
			/// </summary>
			public global::Teraque.StateCode SourceStateCode
			{
				get
				{
					return ((global::Teraque.StateCode)(this[this.tableExecution.SourceStateCodeColumn]));
				}
				set
				{
					this[this.tableExecution.SourceStateCodeColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets the parent row in the State table.
			/// </summary>
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public StateRow StateRowByFK_State_Execution_DestinationStateCode
			{
				get
				{
					return ((StateRow)(this.GetParentRow(this.tableExecution.StateExecutionByFK_State_Execution_DestinationStateCodeRelation)));
				}
			}
			
			/// <summary>
			/// Gets the parent row in the State table.
			/// </summary>
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public StateRow StateRowByFK_State_Execution_SourceStateCode
			{
				get
				{
					return ((StateRow)(this.GetParentRow(this.tableExecution.StateExecutionByFK_State_Execution_SourceStateCodeRelation)));
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the UserFee0 column.
			/// </summary>
			public decimal UserFee0
			{
				get
				{
					return ((decimal)(this[this.tableExecution.UserFee0Column]));
				}
				set
				{
					this[this.tableExecution.UserFee0Column] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the UserFee1 column.
			/// </summary>
			public decimal UserFee1
			{
				get
				{
					return ((decimal)(this[this.tableExecution.UserFee1Column]));
				}
				set
				{
					this[this.tableExecution.UserFee1Column] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the UserFee2 column.
			/// </summary>
			public decimal UserFee2
			{
				get
				{
					return ((decimal)(this[this.tableExecution.UserFee2Column]));
				}
				set
				{
					this[this.tableExecution.UserFee2Column] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the UserFee3 column.
			/// </summary>
			public decimal UserFee3
			{
				get
				{
					return ((decimal)(this[this.tableExecution.UserFee3Column]));
				}
				set
				{
					this[this.tableExecution.UserFee3Column] = value;
				}
			}
			
			/// <summary>
			/// Gets the parent row in the User table.
			/// </summary>
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public UserRow UserRowByFK_User_Execution_CreatedUserId
			{
				get
				{
					return ((UserRow)(this.GetParentRow(this.tableExecution.UserExecutionByFK_User_Execution_CreatedUserIdRelation)));
				}
			}
			
			/// <summary>
			/// Gets the parent row in the User table.
			/// </summary>
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public UserRow UserRowByFK_User_Execution_ModifiedUserId
			{
				get
				{
					return ((UserRow)(this.GetParentRow(this.tableExecution.UserExecutionByFK_User_Execution_ModifiedUserIdRelation)));
				}
			}
			
			/// <summary>
			/// Gets the children rows in the Negotiation table.
			/// </summary>
			public NegotiationRow[] GetNegotiationRows()
			{
				return ((NegotiationRow[])(this.GetChildRows(this.tableExecution.ExecutionNegotiationRelation)));
			}
			
			/// <summary>
			/// Gets the Null property of the BrokerAccountId column.
			/// </summary>
			public bool IsBrokerAccountIdNull()
			{
				return (this[this.tableExecution.BrokerAccountIdColumn] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the BrokerId column.
			/// </summary>
			public bool IsBrokerIdNull()
			{
				return (this[this.tableExecution.BrokerIdColumn] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the ExternalId0 column.
			/// </summary>
			public bool IsExternalId0Null()
			{
				return (this[this.tableExecution.ExternalId0Column] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the ModifiedTime column.
			/// </summary>
			public bool IsModifiedTimeNull()
			{
				return (this[this.tableExecution.ModifiedTimeColumn] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the ModifiedUserId column.
			/// </summary>
			public bool IsModifiedUserIdNull()
			{
				return (this[this.tableExecution.ModifiedUserIdColumn] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the OriginalDestinationOrderId column.
			/// </summary>
			public bool IsOriginalDestinationOrderIdNull()
			{
				return (this[this.tableExecution.OriginalDestinationOrderIdColumn] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the OriginalPrice column.
			/// </summary>
			public bool IsOriginalPriceNull()
			{
				return (this[this.tableExecution.OriginalPriceColumn] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the OriginalQuantity column.
			/// </summary>
			public bool IsOriginalQuantityNull()
			{
				return (this[this.tableExecution.OriginalQuantityColumn] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the SourceExecutionId column.
			/// </summary>
			public bool IsSourceExecutionIdNull()
			{
				return (this[this.tableExecution.SourceExecutionIdColumn] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Sets the Null property of the BrokerAccountId column.
			/// </summary>
			public void SetBrokerAccountIdNull()
			{
				this[this.tableExecution.BrokerAccountIdColumn] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the BrokerId column.
			/// </summary>
			public void SetBrokerIdNull()
			{
				this[this.tableExecution.BrokerIdColumn] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the ExternalId0 column.
			/// </summary>
			public void SetExternalId0Null()
			{
				this[this.tableExecution.ExternalId0Column] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the ModifiedTime column.
			/// </summary>
			public void SetModifiedTimeNull()
			{
				this[this.tableExecution.ModifiedTimeColumn] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the ModifiedUserId column.
			/// </summary>
			public void SetModifiedUserIdNull()
			{
				this[this.tableExecution.ModifiedUserIdColumn] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the OriginalDestinationOrderId column.
			/// </summary>
			public void SetOriginalDestinationOrderIdNull()
			{
				this[this.tableExecution.OriginalDestinationOrderIdColumn] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the OriginalPrice column.
			/// </summary>
			public void SetOriginalPriceNull()
			{
				this[this.tableExecution.OriginalPriceColumn] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the OriginalQuantity column.
			/// </summary>
			public void SetOriginalQuantityNull()
			{
				this[this.tableExecution.OriginalQuantityColumn] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the SourceExecutionId column.
			/// </summary>
			public void SetSourceExecutionIdNull()
			{
				this[this.tableExecution.SourceExecutionIdColumn] = global::System.DBNull.Value;
			}
		}
		
		/// <summary>
		/// Represents a row of data in the Folder table.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		public partial class FolderRow : global::System.Data.DataRow
		{
			
			private FolderDataTable tableFolder;
			
			/// <summary>
			/// Creates a row of data from the Folder table schema.
			/// </summary>
			/// <param name="dataRowBuilder">An internal data structure used to build the row from the parent table schema.</param>
			internal FolderRow(global::System.Data.DataRowBuilder dataRowBuilder) : 
					base(dataRowBuilder)
			{
				// This creates a strongly typed Folder row using the generic construction methods.
				this.tableFolder = ((FolderDataTable)(this.Table));
			}
			
			/// <summary>
			/// Gets the parent row in the Entity table.
			/// </summary>
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public EntityRow EntityRow
			{
				get
				{
					return ((EntityRow)(this.GetParentRow(this.tableFolder.EntityFolderRelation)));
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the FolderId column.
			/// </summary>
			public global::System.Guid FolderId
			{
				get
				{
					return ((global::System.Guid)(this[this.tableFolder.FolderIdColumn]));
				}
				set
				{
					this[this.tableFolder.FolderIdColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the RowVersion column.
			/// </summary>
			public long RowVersion
			{
				get
				{
					return ((long)(this[this.tableFolder.RowVersionColumn]));
				}
				set
				{
					this[this.tableFolder.RowVersionColumn] = value;
				}
			}
		}
		
		/// <summary>
		/// Represents a row of data in the GroupAccount table.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		public partial class GroupAccountRow : global::System.Data.DataRow
		{
			
			private GroupAccountDataTable tableGroupAccount;
			
			/// <summary>
			/// Creates a row of data from the GroupAccount table schema.
			/// </summary>
			/// <param name="dataRowBuilder">An internal data structure used to build the row from the parent table schema.</param>
			internal GroupAccountRow(global::System.Data.DataRowBuilder dataRowBuilder) : 
					base(dataRowBuilder)
			{
				// This creates a strongly typed GroupAccount row using the generic construction methods.
				this.tableGroupAccount = ((GroupAccountDataTable)(this.Table));
			}
			
			/// <summary>
			/// Gets the parent row in the Account table.
			/// </summary>
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public AccountRow AccountRow
			{
				get
				{
					return ((AccountRow)(this.GetParentRow(this.tableGroupAccount.AccountGroupAccountRelation)));
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the GroupAccountId column.
			/// </summary>
			public global::System.Guid GroupAccountId
			{
				get
				{
					return ((global::System.Guid)(this[this.tableGroupAccount.GroupAccountIdColumn]));
				}
				set
				{
					this[this.tableGroupAccount.GroupAccountIdColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the RowVersion column.
			/// </summary>
			public long RowVersion
			{
				get
				{
					return ((long)(this[this.tableGroupAccount.RowVersionColumn]));
				}
				set
				{
					this[this.tableGroupAccount.RowVersionColumn] = value;
				}
			}
		}
		
		/// <summary>
		/// Represents a row of data in the Holiday table.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		public partial class HolidayRow : global::System.Data.DataRow
		{
			
			private HolidayDataTable tableHoliday;
			
			/// <summary>
			/// Creates a row of data from the Holiday table schema.
			/// </summary>
			/// <param name="dataRowBuilder">An internal data structure used to build the row from the parent table schema.</param>
			internal HolidayRow(global::System.Data.DataRowBuilder dataRowBuilder) : 
					base(dataRowBuilder)
			{
				// This creates a strongly typed Holiday row using the generic construction methods.
				this.tableHoliday = ((HolidayDataTable)(this.Table));
			}
			
			/// <summary>
			/// Gets or sets the data in the CountryId column.
			/// </summary>
			public global::System.Guid CountryId
			{
				get
				{
					return ((global::System.Guid)(this[this.tableHoliday.CountryIdColumn]));
				}
				set
				{
					this[this.tableHoliday.CountryIdColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets the parent row in the Country table.
			/// </summary>
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public CountryRow CountryRow
			{
				get
				{
					return ((CountryRow)(this.GetParentRow(this.tableHoliday.CountryHolidayRelation)));
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the Date column.
			/// </summary>
			public global::System.DateTime Date
			{
				get
				{
					return ((global::System.DateTime)(this[this.tableHoliday.DateColumn]));
				}
				set
				{
					this[this.tableHoliday.DateColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the ExternalId0 column.
			/// </summary>
			public string ExternalId0
			{
				get
				{
					try
					{
						return ((string)(this[this.tableHoliday.ExternalId0Column]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableHoliday.ExternalId0Column] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the ExternalId1 column.
			/// </summary>
			public string ExternalId1
			{
				get
				{
					try
					{
						return ((string)(this[this.tableHoliday.ExternalId1Column]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableHoliday.ExternalId1Column] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the HolidayId column.
			/// </summary>
			public global::System.Guid HolidayId
			{
				get
				{
					return ((global::System.Guid)(this[this.tableHoliday.HolidayIdColumn]));
				}
				set
				{
					this[this.tableHoliday.HolidayIdColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the HolidayTypeCode column.
			/// </summary>
			public global::Teraque.HolidayTypeCode HolidayTypeCode
			{
				get
				{
					return ((global::Teraque.HolidayTypeCode)(this[this.tableHoliday.HolidayTypeCodeColumn]));
				}
				set
				{
					this[this.tableHoliday.HolidayTypeCodeColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets the parent row in the HolidayType table.
			/// </summary>
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public HolidayTypeRow HolidayTypeRow
			{
				get
				{
					return ((HolidayTypeRow)(this.GetParentRow(this.tableHoliday.HolidayTypeHolidayRelation)));
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the RowVersion column.
			/// </summary>
			public long RowVersion
			{
				get
				{
					return ((long)(this[this.tableHoliday.RowVersionColumn]));
				}
				set
				{
					this[this.tableHoliday.RowVersionColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets the Null property of the ExternalId0 column.
			/// </summary>
			public bool IsExternalId0Null()
			{
				return (this[this.tableHoliday.ExternalId0Column] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the ExternalId1 column.
			/// </summary>
			public bool IsExternalId1Null()
			{
				return (this[this.tableHoliday.ExternalId1Column] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Sets the Null property of the ExternalId0 column.
			/// </summary>
			public void SetExternalId0Null()
			{
				this[this.tableHoliday.ExternalId0Column] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the ExternalId1 column.
			/// </summary>
			public void SetExternalId1Null()
			{
				this[this.tableHoliday.ExternalId1Column] = global::System.DBNull.Value;
			}
		}
		
		/// <summary>
		/// Represents a row of data in the HolidayType table.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		public partial class HolidayTypeRow : global::System.Data.DataRow
		{
			
			private HolidayTypeDataTable tableHolidayType;
			
			/// <summary>
			/// Creates a row of data from the HolidayType table schema.
			/// </summary>
			/// <param name="dataRowBuilder">An internal data structure used to build the row from the parent table schema.</param>
			internal HolidayTypeRow(global::System.Data.DataRowBuilder dataRowBuilder) : 
					base(dataRowBuilder)
			{
				// This creates a strongly typed HolidayType row using the generic construction methods.
				this.tableHolidayType = ((HolidayTypeDataTable)(this.Table));
			}
			
			/// <summary>
			/// Gets or sets the data in the Description column.
			/// </summary>
			public string Description
			{
				get
				{
					return ((string)(this[this.tableHolidayType.DescriptionColumn]));
				}
				set
				{
					this[this.tableHolidayType.DescriptionColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the ExternalId0 column.
			/// </summary>
			public string ExternalId0
			{
				get
				{
					try
					{
						return ((string)(this[this.tableHolidayType.ExternalId0Column]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableHolidayType.ExternalId0Column] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the ExternalId1 column.
			/// </summary>
			public string ExternalId1
			{
				get
				{
					try
					{
						return ((string)(this[this.tableHolidayType.ExternalId1Column]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableHolidayType.ExternalId1Column] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the ExternalId2 column.
			/// </summary>
			public string ExternalId2
			{
				get
				{
					try
					{
						return ((string)(this[this.tableHolidayType.ExternalId2Column]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableHolidayType.ExternalId2Column] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the ExternalId3 column.
			/// </summary>
			public string ExternalId3
			{
				get
				{
					try
					{
						return ((string)(this[this.tableHolidayType.ExternalId3Column]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableHolidayType.ExternalId3Column] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the HolidayTypeCode column.
			/// </summary>
			public global::Teraque.HolidayTypeCode HolidayTypeCode
			{
				get
				{
					return ((global::Teraque.HolidayTypeCode)(this[this.tableHolidayType.HolidayTypeCodeColumn]));
				}
				set
				{
					this[this.tableHolidayType.HolidayTypeCodeColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the RowVersion column.
			/// </summary>
			public long RowVersion
			{
				get
				{
					return ((long)(this[this.tableHolidayType.RowVersionColumn]));
				}
				set
				{
					this[this.tableHolidayType.RowVersionColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets the children rows in the Holiday table.
			/// </summary>
			public HolidayRow[] GetHolidayRows()
			{
				return ((HolidayRow[])(this.GetChildRows(this.tableHolidayType.HolidayTypeHolidayRelation)));
			}
			
			/// <summary>
			/// Gets the Null property of the ExternalId0 column.
			/// </summary>
			public bool IsExternalId0Null()
			{
				return (this[this.tableHolidayType.ExternalId0Column] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the ExternalId1 column.
			/// </summary>
			public bool IsExternalId1Null()
			{
				return (this[this.tableHolidayType.ExternalId1Column] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the ExternalId2 column.
			/// </summary>
			public bool IsExternalId2Null()
			{
				return (this[this.tableHolidayType.ExternalId2Column] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the ExternalId3 column.
			/// </summary>
			public bool IsExternalId3Null()
			{
				return (this[this.tableHolidayType.ExternalId3Column] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Sets the Null property of the ExternalId0 column.
			/// </summary>
			public void SetExternalId0Null()
			{
				this[this.tableHolidayType.ExternalId0Column] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the ExternalId1 column.
			/// </summary>
			public void SetExternalId1Null()
			{
				this[this.tableHolidayType.ExternalId1Column] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the ExternalId2 column.
			/// </summary>
			public void SetExternalId2Null()
			{
				this[this.tableHolidayType.ExternalId2Column] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the ExternalId3 column.
			/// </summary>
			public void SetExternalId3Null()
			{
				this[this.tableHolidayType.ExternalId3Column] = global::System.DBNull.Value;
			}
		}
		
		/// <summary>
		/// Represents a row of data in the Image table.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		public partial class ImageRow : global::System.Data.DataRow
		{
			
			private ImageDataTable tableImage;
			
			/// <summary>
			/// Creates a row of data from the Image table schema.
			/// </summary>
			/// <param name="dataRowBuilder">An internal data structure used to build the row from the parent table schema.</param>
			internal ImageRow(global::System.Data.DataRowBuilder dataRowBuilder) : 
					base(dataRowBuilder)
			{
				// This creates a strongly typed Image row using the generic construction methods.
				this.tableImage = ((ImageDataTable)(this.Table));
			}
			
			/// <summary>
			/// Gets or sets the data in the ExternalId0 column.
			/// </summary>
			public string ExternalId0
			{
				get
				{
					try
					{
						return ((string)(this[this.tableImage.ExternalId0Column]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableImage.ExternalId0Column] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the Image column.
			/// </summary>
			public string Image
			{
				get
				{
					return ((string)(this[this.tableImage.ImageColumn]));
				}
				set
				{
					this[this.tableImage.ImageColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the ImageId column.
			/// </summary>
			public global::System.Guid ImageId
			{
				get
				{
					return ((global::System.Guid)(this[this.tableImage.ImageIdColumn]));
				}
				set
				{
					this[this.tableImage.ImageIdColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the RowVersion column.
			/// </summary>
			public long RowVersion
			{
				get
				{
					return ((long)(this[this.tableImage.RowVersionColumn]));
				}
				set
				{
					this[this.tableImage.RowVersionColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets the children rows in the Entity table.
			/// </summary>
			public EntityRow[] GetEntityRows()
			{
				return ((EntityRow[])(this.GetChildRows(this.tableImage.ImageEntityRelation)));
			}
			
			/// <summary>
			/// Gets the children rows in the Type table.
			/// </summary>
			public TypeRow[] GetTypeRows()
			{
				return ((TypeRow[])(this.GetChildRows(this.tableImage.ImageTypeRelation)));
			}
			
			/// <summary>
			/// Gets the Null property of the ExternalId0 column.
			/// </summary>
			public bool IsExternalId0Null()
			{
				return (this[this.tableImage.ExternalId0Column] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Sets the Null property of the ExternalId0 column.
			/// </summary>
			public void SetExternalId0Null()
			{
				this[this.tableImage.ExternalId0Column] = global::System.DBNull.Value;
			}
		}
		
		/// <summary>
		/// Represents a row of data in the Industry table.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		public partial class IndustryRow : global::System.Data.DataRow
		{
			
			private IndustryDataTable tableIndustry;
			
			/// <summary>
			/// Creates a row of data from the Industry table schema.
			/// </summary>
			/// <param name="dataRowBuilder">An internal data structure used to build the row from the parent table schema.</param>
			internal IndustryRow(global::System.Data.DataRowBuilder dataRowBuilder) : 
					base(dataRowBuilder)
			{
				// This creates a strongly typed Industry row using the generic construction methods.
				this.tableIndustry = ((IndustryDataTable)(this.Table));
			}
			
			/// <summary>
			/// Gets or sets the data in the ExternalId0 column.
			/// </summary>
			public string ExternalId0
			{
				get
				{
					try
					{
						return ((string)(this[this.tableIndustry.ExternalId0Column]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableIndustry.ExternalId0Column] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the ExternalId1 column.
			/// </summary>
			public string ExternalId1
			{
				get
				{
					try
					{
						return ((string)(this[this.tableIndustry.ExternalId1Column]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableIndustry.ExternalId1Column] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the IndustryClassificationId column.
			/// </summary>
			public global::System.Guid IndustryClassificationId
			{
				get
				{
					return ((global::System.Guid)(this[this.tableIndustry.IndustryClassificationIdColumn]));
				}
				set
				{
					this[this.tableIndustry.IndustryClassificationIdColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets the parent row in the IndustryClassification table.
			/// </summary>
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public IndustryClassificationRow IndustryClassificationRow
			{
				get
				{
					return ((IndustryClassificationRow)(this.GetParentRow(this.tableIndustry.IndustryClassificationIndustryRelation)));
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the IndustryId column.
			/// </summary>
			public global::System.Guid IndustryId
			{
				get
				{
					return ((global::System.Guid)(this[this.tableIndustry.IndustryIdColumn]));
				}
				set
				{
					this[this.tableIndustry.IndustryIdColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the Mnemonic column.
			/// </summary>
			public string Mnemonic
			{
				get
				{
					return ((string)(this[this.tableIndustry.MnemonicColumn]));
				}
				set
				{
					this[this.tableIndustry.MnemonicColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the Name column.
			/// </summary>
			public string Name
			{
				get
				{
					return ((string)(this[this.tableIndustry.NameColumn]));
				}
				set
				{
					this[this.tableIndustry.NameColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the RowVersion column.
			/// </summary>
			public long RowVersion
			{
				get
				{
					return ((long)(this[this.tableIndustry.RowVersionColumn]));
				}
				set
				{
					this[this.tableIndustry.RowVersionColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets the children rows in the IndustryLeaf table.
			/// </summary>
			public IndustryLeafRow[] GetIndustryLeafRows()
			{
				return ((IndustryLeafRow[])(this.GetChildRows(this.tableIndustry.IndustryIndustryLeafRelation)));
			}
			
			/// <summary>
			/// Gets the children rows in the IndustryTree table.
			/// </summary>
			public IndustryTreeRow[] GetIndustryTreeRowsByFK_Industry_IndustryTree_ChildId()
			{
				return ((IndustryTreeRow[])(this.GetChildRows(this.tableIndustry.IndustryIndustryTreeByFK_Industry_IndustryTree_ChildIdRelation)));
			}
			
			/// <summary>
			/// Gets the children rows in the IndustryTree table.
			/// </summary>
			public IndustryTreeRow[] GetIndustryTreeRowsByFK_Industry_IndustryTree_ParentId()
			{
				return ((IndustryTreeRow[])(this.GetChildRows(this.tableIndustry.IndustryIndustryTreeByFK_Industry_IndustryTree_ParentIdRelation)));
			}
			
			/// <summary>
			/// Gets the Null property of the ExternalId0 column.
			/// </summary>
			public bool IsExternalId0Null()
			{
				return (this[this.tableIndustry.ExternalId0Column] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the ExternalId1 column.
			/// </summary>
			public bool IsExternalId1Null()
			{
				return (this[this.tableIndustry.ExternalId1Column] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Sets the Null property of the ExternalId0 column.
			/// </summary>
			public void SetExternalId0Null()
			{
				this[this.tableIndustry.ExternalId0Column] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the ExternalId1 column.
			/// </summary>
			public void SetExternalId1Null()
			{
				this[this.tableIndustry.ExternalId1Column] = global::System.DBNull.Value;
			}
		}
		
		/// <summary>
		/// Represents a row of data in the IndustryClassification table.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		public partial class IndustryClassificationRow : global::System.Data.DataRow
		{
			
			private IndustryClassificationDataTable tableIndustryClassification;
			
			/// <summary>
			/// Creates a row of data from the IndustryClassification table schema.
			/// </summary>
			/// <param name="dataRowBuilder">An internal data structure used to build the row from the parent table schema.</param>
			internal IndustryClassificationRow(global::System.Data.DataRowBuilder dataRowBuilder) : 
					base(dataRowBuilder)
			{
				// This creates a strongly typed IndustryClassification row using the generic construction methods.
				this.tableIndustryClassification = ((IndustryClassificationDataTable)(this.Table));
			}
			
			/// <summary>
			/// Gets or sets the data in the ExternalId0 column.
			/// </summary>
			public string ExternalId0
			{
				get
				{
					try
					{
						return ((string)(this[this.tableIndustryClassification.ExternalId0Column]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableIndustryClassification.ExternalId0Column] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the ExternalId1 column.
			/// </summary>
			public string ExternalId1
			{
				get
				{
					try
					{
						return ((string)(this[this.tableIndustryClassification.ExternalId1Column]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableIndustryClassification.ExternalId1Column] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the IndustryClassificationId column.
			/// </summary>
			public global::System.Guid IndustryClassificationId
			{
				get
				{
					return ((global::System.Guid)(this[this.tableIndustryClassification.IndustryClassificationIdColumn]));
				}
				set
				{
					this[this.tableIndustryClassification.IndustryClassificationIdColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the Mnemonic column.
			/// </summary>
			public string Mnemonic
			{
				get
				{
					return ((string)(this[this.tableIndustryClassification.MnemonicColumn]));
				}
				set
				{
					this[this.tableIndustryClassification.MnemonicColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the Name column.
			/// </summary>
			public string Name
			{
				get
				{
					return ((string)(this[this.tableIndustryClassification.NameColumn]));
				}
				set
				{
					this[this.tableIndustryClassification.NameColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the RowVersion column.
			/// </summary>
			public long RowVersion
			{
				get
				{
					return ((long)(this[this.tableIndustryClassification.RowVersionColumn]));
				}
				set
				{
					this[this.tableIndustryClassification.RowVersionColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets the children rows in the Industry table.
			/// </summary>
			public IndustryRow[] GetIndustryRows()
			{
				return ((IndustryRow[])(this.GetChildRows(this.tableIndustryClassification.IndustryClassificationIndustryRelation)));
			}
			
			/// <summary>
			/// Gets the Null property of the ExternalId0 column.
			/// </summary>
			public bool IsExternalId0Null()
			{
				return (this[this.tableIndustryClassification.ExternalId0Column] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the ExternalId1 column.
			/// </summary>
			public bool IsExternalId1Null()
			{
				return (this[this.tableIndustryClassification.ExternalId1Column] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Sets the Null property of the ExternalId0 column.
			/// </summary>
			public void SetExternalId0Null()
			{
				this[this.tableIndustryClassification.ExternalId0Column] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the ExternalId1 column.
			/// </summary>
			public void SetExternalId1Null()
			{
				this[this.tableIndustryClassification.ExternalId1Column] = global::System.DBNull.Value;
			}
		}
		
		/// <summary>
		/// Represents a row of data in the IndustryLeaf table.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		public partial class IndustryLeafRow : global::System.Data.DataRow
		{
			
			private IndustryLeafDataTable tableIndustryLeaf;
			
			/// <summary>
			/// Creates a row of data from the IndustryLeaf table schema.
			/// </summary>
			/// <param name="dataRowBuilder">An internal data structure used to build the row from the parent table schema.</param>
			internal IndustryLeafRow(global::System.Data.DataRowBuilder dataRowBuilder) : 
					base(dataRowBuilder)
			{
				// This creates a strongly typed IndustryLeaf row using the generic construction methods.
				this.tableIndustryLeaf = ((IndustryLeafDataTable)(this.Table));
			}
			
			/// <summary>
			/// Gets or sets the data in the ExternalId0 column.
			/// </summary>
			public string ExternalId0
			{
				get
				{
					try
					{
						return ((string)(this[this.tableIndustryLeaf.ExternalId0Column]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableIndustryLeaf.ExternalId0Column] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the ExternalId1 column.
			/// </summary>
			public string ExternalId1
			{
				get
				{
					try
					{
						return ((string)(this[this.tableIndustryLeaf.ExternalId1Column]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableIndustryLeaf.ExternalId1Column] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the IndustryLeafId column.
			/// </summary>
			public global::System.Guid IndustryLeafId
			{
				get
				{
					return ((global::System.Guid)(this[this.tableIndustryLeaf.IndustryLeafIdColumn]));
				}
				set
				{
					this[this.tableIndustryLeaf.IndustryLeafIdColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets the parent row in the Industry table.
			/// </summary>
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public IndustryRow IndustryRow
			{
				get
				{
					return ((IndustryRow)(this.GetParentRow(this.tableIndustryLeaf.IndustryIndustryLeafRelation)));
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the ParentId column.
			/// </summary>
			public global::System.Guid ParentId
			{
				get
				{
					return ((global::System.Guid)(this[this.tableIndustryLeaf.ParentIdColumn]));
				}
				set
				{
					this[this.tableIndustryLeaf.ParentIdColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the RowVersion column.
			/// </summary>
			public long RowVersion
			{
				get
				{
					return ((long)(this[this.tableIndustryLeaf.RowVersionColumn]));
				}
				set
				{
					this[this.tableIndustryLeaf.RowVersionColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the SecurityId column.
			/// </summary>
			public global::System.Guid SecurityId
			{
				get
				{
					return ((global::System.Guid)(this[this.tableIndustryLeaf.SecurityIdColumn]));
				}
				set
				{
					this[this.tableIndustryLeaf.SecurityIdColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets the parent row in the Security table.
			/// </summary>
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public SecurityRow SecurityRow
			{
				get
				{
					return ((SecurityRow)(this.GetParentRow(this.tableIndustryLeaf.SecurityIndustryLeafRelation)));
				}
			}
			
			/// <summary>
			/// Gets the Null property of the ExternalId0 column.
			/// </summary>
			public bool IsExternalId0Null()
			{
				return (this[this.tableIndustryLeaf.ExternalId0Column] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the ExternalId1 column.
			/// </summary>
			public bool IsExternalId1Null()
			{
				return (this[this.tableIndustryLeaf.ExternalId1Column] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Sets the Null property of the ExternalId0 column.
			/// </summary>
			public void SetExternalId0Null()
			{
				this[this.tableIndustryLeaf.ExternalId0Column] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the ExternalId1 column.
			/// </summary>
			public void SetExternalId1Null()
			{
				this[this.tableIndustryLeaf.ExternalId1Column] = global::System.DBNull.Value;
			}
		}
		
		/// <summary>
		/// Represents a row of data in the IndustryTree table.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		public partial class IndustryTreeRow : global::System.Data.DataRow
		{
			
			private IndustryTreeDataTable tableIndustryTree;
			
			/// <summary>
			/// Creates a row of data from the IndustryTree table schema.
			/// </summary>
			/// <param name="dataRowBuilder">An internal data structure used to build the row from the parent table schema.</param>
			internal IndustryTreeRow(global::System.Data.DataRowBuilder dataRowBuilder) : 
					base(dataRowBuilder)
			{
				// This creates a strongly typed IndustryTree row using the generic construction methods.
				this.tableIndustryTree = ((IndustryTreeDataTable)(this.Table));
			}
			
			/// <summary>
			/// Gets or sets the data in the ChildId column.
			/// </summary>
			public global::System.Guid ChildId
			{
				get
				{
					return ((global::System.Guid)(this[this.tableIndustryTree.ChildIdColumn]));
				}
				set
				{
					this[this.tableIndustryTree.ChildIdColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the ExternalId0 column.
			/// </summary>
			public string ExternalId0
			{
				get
				{
					try
					{
						return ((string)(this[this.tableIndustryTree.ExternalId0Column]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableIndustryTree.ExternalId0Column] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the ExternalId1 column.
			/// </summary>
			public string ExternalId1
			{
				get
				{
					try
					{
						return ((string)(this[this.tableIndustryTree.ExternalId1Column]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableIndustryTree.ExternalId1Column] = value;
				}
			}
			
			/// <summary>
			/// Gets the parent row in the Industry table.
			/// </summary>
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public IndustryRow IndustryRowByFK_Industry_IndustryTree_ChildId
			{
				get
				{
					return ((IndustryRow)(this.GetParentRow(this.tableIndustryTree.IndustryIndustryTreeByFK_Industry_IndustryTree_ChildIdRelation)));
				}
			}
			
			/// <summary>
			/// Gets the parent row in the Industry table.
			/// </summary>
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public IndustryRow IndustryRowByFK_Industry_IndustryTree_ParentId
			{
				get
				{
					return ((IndustryRow)(this.GetParentRow(this.tableIndustryTree.IndustryIndustryTreeByFK_Industry_IndustryTree_ParentIdRelation)));
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the IndustryTreeId column.
			/// </summary>
			public global::System.Guid IndustryTreeId
			{
				get
				{
					return ((global::System.Guid)(this[this.tableIndustryTree.IndustryTreeIdColumn]));
				}
				set
				{
					this[this.tableIndustryTree.IndustryTreeIdColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the ParentId column.
			/// </summary>
			public global::System.Guid ParentId
			{
				get
				{
					return ((global::System.Guid)(this[this.tableIndustryTree.ParentIdColumn]));
				}
				set
				{
					this[this.tableIndustryTree.ParentIdColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the RowVersion column.
			/// </summary>
			public long RowVersion
			{
				get
				{
					return ((long)(this[this.tableIndustryTree.RowVersionColumn]));
				}
				set
				{
					this[this.tableIndustryTree.RowVersionColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets the Null property of the ExternalId0 column.
			/// </summary>
			public bool IsExternalId0Null()
			{
				return (this[this.tableIndustryTree.ExternalId0Column] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the ExternalId1 column.
			/// </summary>
			public bool IsExternalId1Null()
			{
				return (this[this.tableIndustryTree.ExternalId1Column] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Sets the Null property of the ExternalId0 column.
			/// </summary>
			public void SetExternalId0Null()
			{
				this[this.tableIndustryTree.ExternalId0Column] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the ExternalId1 column.
			/// </summary>
			public void SetExternalId1Null()
			{
				this[this.tableIndustryTree.ExternalId1Column] = global::System.DBNull.Value;
			}
		}
		
		/// <summary>
		/// Represents a row of data in the Institution table.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		public partial class InstitutionRow : global::System.Data.DataRow
		{
			
			private InstitutionDataTable tableInstitution;
			
			/// <summary>
			/// Creates a row of data from the Institution table schema.
			/// </summary>
			/// <param name="dataRowBuilder">An internal data structure used to build the row from the parent table schema.</param>
			internal InstitutionRow(global::System.Data.DataRowBuilder dataRowBuilder) : 
					base(dataRowBuilder)
			{
				// This creates a strongly typed Institution row using the generic construction methods.
				this.tableInstitution = ((InstitutionDataTable)(this.Table));
			}
			
			/// <summary>
			/// Gets or sets the data in the InstitutionId column.
			/// </summary>
			public global::System.Guid InstitutionId
			{
				get
				{
					return ((global::System.Guid)(this[this.tableInstitution.InstitutionIdColumn]));
				}
				set
				{
					this[this.tableInstitution.InstitutionIdColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the RowVersion column.
			/// </summary>
			public long RowVersion
			{
				get
				{
					return ((long)(this[this.tableInstitution.RowVersionColumn]));
				}
				set
				{
					this[this.tableInstitution.RowVersionColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets the parent row in the Source table.
			/// </summary>
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public SourceRow SourceRow
			{
				get
				{
					return ((SourceRow)(this.GetParentRow(this.tableInstitution.SourceInstitutionRelation)));
				}
			}
		}
		
		/// <summary>
		/// Represents a row of data in the Issuer table.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		public partial class IssuerRow : global::System.Data.DataRow
		{
			
			private IssuerDataTable tableIssuer;
			
			/// <summary>
			/// Creates a row of data from the Issuer table schema.
			/// </summary>
			/// <param name="dataRowBuilder">An internal data structure used to build the row from the parent table schema.</param>
			internal IssuerRow(global::System.Data.DataRowBuilder dataRowBuilder) : 
					base(dataRowBuilder)
			{
				// This creates a strongly typed Issuer row using the generic construction methods.
				this.tableIssuer = ((IssuerDataTable)(this.Table));
			}
			
			/// <summary>
			/// Gets the parent row in the Entity table.
			/// </summary>
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public EntityRow EntityRow
			{
				get
				{
					return ((EntityRow)(this.GetParentRow(this.tableIssuer.EntityIssuerRelation)));
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the IssuerId column.
			/// </summary>
			public global::System.Guid IssuerId
			{
				get
				{
					return ((global::System.Guid)(this[this.tableIssuer.IssuerIdColumn]));
				}
				set
				{
					this[this.tableIssuer.IssuerIdColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the RowVersion column.
			/// </summary>
			public long RowVersion
			{
				get
				{
					return ((long)(this[this.tableIssuer.RowVersionColumn]));
				}
				set
				{
					this[this.tableIssuer.RowVersionColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets the children rows in the Security table.
			/// </summary>
			public SecurityRow[] GetSecurityRows()
			{
				return ((SecurityRow[])(this.GetChildRows(this.tableIssuer.IssuerSecurityRelation)));
			}
		}
		
		/// <summary>
		/// Represents a row of data in the LotHandling table.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		public partial class LotHandlingRow : global::System.Data.DataRow
		{
			
			private LotHandlingDataTable tableLotHandling;
			
			/// <summary>
			/// Creates a row of data from the LotHandling table schema.
			/// </summary>
			/// <param name="dataRowBuilder">An internal data structure used to build the row from the parent table schema.</param>
			internal LotHandlingRow(global::System.Data.DataRowBuilder dataRowBuilder) : 
					base(dataRowBuilder)
			{
				// This creates a strongly typed LotHandling row using the generic construction methods.
				this.tableLotHandling = ((LotHandlingDataTable)(this.Table));
			}
			
			/// <summary>
			/// Gets or sets the data in the Description column.
			/// </summary>
			public string Description
			{
				get
				{
					return ((string)(this[this.tableLotHandling.DescriptionColumn]));
				}
				set
				{
					this[this.tableLotHandling.DescriptionColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the ExternalId0 column.
			/// </summary>
			public string ExternalId0
			{
				get
				{
					try
					{
						return ((string)(this[this.tableLotHandling.ExternalId0Column]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableLotHandling.ExternalId0Column] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the ExternalId1 column.
			/// </summary>
			public string ExternalId1
			{
				get
				{
					try
					{
						return ((string)(this[this.tableLotHandling.ExternalId1Column]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableLotHandling.ExternalId1Column] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the ExternalId2 column.
			/// </summary>
			public string ExternalId2
			{
				get
				{
					try
					{
						return ((string)(this[this.tableLotHandling.ExternalId2Column]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableLotHandling.ExternalId2Column] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the ExternalId3 column.
			/// </summary>
			public string ExternalId3
			{
				get
				{
					try
					{
						return ((string)(this[this.tableLotHandling.ExternalId3Column]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableLotHandling.ExternalId3Column] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the LotHandlingCode column.
			/// </summary>
			public global::Teraque.LotHandlingCode LotHandlingCode
			{
				get
				{
					return ((global::Teraque.LotHandlingCode)(this[this.tableLotHandling.LotHandlingCodeColumn]));
				}
				set
				{
					this[this.tableLotHandling.LotHandlingCodeColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the Mnemonic column.
			/// </summary>
			public string Mnemonic
			{
				get
				{
					return ((string)(this[this.tableLotHandling.MnemonicColumn]));
				}
				set
				{
					this[this.tableLotHandling.MnemonicColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the RowVersion column.
			/// </summary>
			public long RowVersion
			{
				get
				{
					return ((long)(this[this.tableLotHandling.RowVersionColumn]));
				}
				set
				{
					this[this.tableLotHandling.RowVersionColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets the children rows in the SingleAccount table.
			/// </summary>
			public SingleAccountRow[] GetSingleAccountRows()
			{
				return ((SingleAccountRow[])(this.GetChildRows(this.tableLotHandling.LotHandlingSingleAccountRelation)));
			}
			
			/// <summary>
			/// Gets the Null property of the ExternalId0 column.
			/// </summary>
			public bool IsExternalId0Null()
			{
				return (this[this.tableLotHandling.ExternalId0Column] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the ExternalId1 column.
			/// </summary>
			public bool IsExternalId1Null()
			{
				return (this[this.tableLotHandling.ExternalId1Column] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the ExternalId2 column.
			/// </summary>
			public bool IsExternalId2Null()
			{
				return (this[this.tableLotHandling.ExternalId2Column] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the ExternalId3 column.
			/// </summary>
			public bool IsExternalId3Null()
			{
				return (this[this.tableLotHandling.ExternalId3Column] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Sets the Null property of the ExternalId0 column.
			/// </summary>
			public void SetExternalId0Null()
			{
				this[this.tableLotHandling.ExternalId0Column] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the ExternalId1 column.
			/// </summary>
			public void SetExternalId1Null()
			{
				this[this.tableLotHandling.ExternalId1Column] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the ExternalId2 column.
			/// </summary>
			public void SetExternalId2Null()
			{
				this[this.tableLotHandling.ExternalId2Column] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the ExternalId3 column.
			/// </summary>
			public void SetExternalId3Null()
			{
				this[this.tableLotHandling.ExternalId3Column] = global::System.DBNull.Value;
			}
		}
		
		/// <summary>
		/// Represents a row of data in the MajorInstrumentType table.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		public partial class MajorInstrumentTypeRow : global::System.Data.DataRow
		{
			
			private MajorInstrumentTypeDataTable tableMajorInstrumentType;
			
			/// <summary>
			/// Creates a row of data from the MajorInstrumentType table schema.
			/// </summary>
			/// <param name="dataRowBuilder">An internal data structure used to build the row from the parent table schema.</param>
			internal MajorInstrumentTypeRow(global::System.Data.DataRowBuilder dataRowBuilder) : 
					base(dataRowBuilder)
			{
				// This creates a strongly typed MajorInstrumentType row using the generic construction methods.
				this.tableMajorInstrumentType = ((MajorInstrumentTypeDataTable)(this.Table));
			}
			
			/// <summary>
			/// Gets or sets the data in the ExternalId0 column.
			/// </summary>
			public string ExternalId0
			{
				get
				{
					try
					{
						return ((string)(this[this.tableMajorInstrumentType.ExternalId0Column]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableMajorInstrumentType.ExternalId0Column] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the ExternalId1 column.
			/// </summary>
			public string ExternalId1
			{
				get
				{
					try
					{
						return ((string)(this[this.tableMajorInstrumentType.ExternalId1Column]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableMajorInstrumentType.ExternalId1Column] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the MajorInstrumentTypeId column.
			/// </summary>
			public global::System.Guid MajorInstrumentTypeId
			{
				get
				{
					return ((global::System.Guid)(this[this.tableMajorInstrumentType.MajorInstrumentTypeIdColumn]));
				}
				set
				{
					this[this.tableMajorInstrumentType.MajorInstrumentTypeIdColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the Mnemonic column.
			/// </summary>
			public string Mnemonic
			{
				get
				{
					return ((string)(this[this.tableMajorInstrumentType.MnemonicColumn]));
				}
				set
				{
					this[this.tableMajorInstrumentType.MnemonicColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the Name column.
			/// </summary>
			public string Name
			{
				get
				{
					return ((string)(this[this.tableMajorInstrumentType.NameColumn]));
				}
				set
				{
					this[this.tableMajorInstrumentType.NameColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the RowVersion column.
			/// </summary>
			public long RowVersion
			{
				get
				{
					return ((long)(this[this.tableMajorInstrumentType.RowVersionColumn]));
				}
				set
				{
					this[this.tableMajorInstrumentType.RowVersionColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets the children rows in the Security table.
			/// </summary>
			public SecurityRow[] GetSecurityRows()
			{
				return ((SecurityRow[])(this.GetChildRows(this.tableMajorInstrumentType.MajorInstrumentTypeSecurityRelation)));
			}
			
			/// <summary>
			/// Gets the Null property of the ExternalId0 column.
			/// </summary>
			public bool IsExternalId0Null()
			{
				return (this[this.tableMajorInstrumentType.ExternalId0Column] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the ExternalId1 column.
			/// </summary>
			public bool IsExternalId1Null()
			{
				return (this[this.tableMajorInstrumentType.ExternalId1Column] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Sets the Null property of the ExternalId0 column.
			/// </summary>
			public void SetExternalId0Null()
			{
				this[this.tableMajorInstrumentType.ExternalId0Column] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the ExternalId1 column.
			/// </summary>
			public void SetExternalId1Null()
			{
				this[this.tableMajorInstrumentType.ExternalId1Column] = global::System.DBNull.Value;
			}
		}
		
		/// <summary>
		/// Represents a row of data in the Match table.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		public partial class MatchRow : global::System.Data.DataRow
		{
			
			private MatchDataTable tableMatch;
			
			/// <summary>
			/// Creates a row of data from the Match table schema.
			/// </summary>
			/// <param name="dataRowBuilder">An internal data structure used to build the row from the parent table schema.</param>
			internal MatchRow(global::System.Data.DataRowBuilder dataRowBuilder) : 
					base(dataRowBuilder)
			{
				// This creates a strongly typed Match row using the generic construction methods.
				this.tableMatch = ((MatchDataTable)(this.Table));
			}
			
			/// <summary>
			/// Gets or sets the data in the BlotterId column.
			/// </summary>
			public global::System.Guid BlotterId
			{
				get
				{
					return ((global::System.Guid)(this[this.tableMatch.BlotterIdColumn]));
				}
				set
				{
					this[this.tableMatch.BlotterIdColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets the parent row in the Blotter table.
			/// </summary>
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public BlotterRow BlotterRow
			{
				get
				{
					return ((BlotterRow)(this.GetParentRow(this.tableMatch.BlotterMatchRelation)));
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the ContraMatchId column.
			/// </summary>
			public global::System.Guid ContraMatchId
			{
				get
				{
					return ((global::System.Guid)(this[this.tableMatch.ContraMatchIdColumn]));
				}
				set
				{
					this[this.tableMatch.ContraMatchIdColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the ContraOrderId column.
			/// </summary>
			public global::System.Guid ContraOrderId
			{
				get
				{
					return ((global::System.Guid)(this[this.tableMatch.ContraOrderIdColumn]));
				}
				set
				{
					this[this.tableMatch.ContraOrderIdColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the HeatIndex column.
			/// </summary>
			public decimal HeatIndex
			{
				get
				{
					return ((decimal)(this[this.tableMatch.HeatIndexColumn]));
				}
				set
				{
					this[this.tableMatch.HeatIndexColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the HeatIndexDetails column.
			/// </summary>
			public string HeatIndexDetails
			{
				get
				{
					try
					{
						return ((string)(this[this.tableMatch.HeatIndexDetailsColumn]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableMatch.HeatIndexDetailsColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the MatchedTime column.
			/// </summary>
			public global::System.DateTime MatchedTime
			{
				get
				{
					return ((global::System.DateTime)(this[this.tableMatch.MatchedTimeColumn]));
				}
				set
				{
					this[this.tableMatch.MatchedTimeColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the MatchId column.
			/// </summary>
			public global::System.Guid MatchId
			{
				get
				{
					return ((global::System.Guid)(this[this.tableMatch.MatchIdColumn]));
				}
				set
				{
					this[this.tableMatch.MatchIdColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the RowVersion column.
			/// </summary>
			public long RowVersion
			{
				get
				{
					return ((long)(this[this.tableMatch.RowVersionColumn]));
				}
				set
				{
					this[this.tableMatch.RowVersionColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the StatusCode column.
			/// </summary>
			public global::Teraque.StatusCode StatusCode
			{
				get
				{
					return ((global::Teraque.StatusCode)(this[this.tableMatch.StatusCodeColumn]));
				}
				set
				{
					this[this.tableMatch.StatusCodeColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets the parent row in the Status table.
			/// </summary>
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public StatusRow StatusRow
			{
				get
				{
					return ((StatusRow)(this.GetParentRow(this.tableMatch.StatusMatchRelation)));
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the WorkingOrderId column.
			/// </summary>
			public global::System.Guid WorkingOrderId
			{
				get
				{
					return ((global::System.Guid)(this[this.tableMatch.WorkingOrderIdColumn]));
				}
				set
				{
					this[this.tableMatch.WorkingOrderIdColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets the parent row in the WorkingOrder table.
			/// </summary>
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public WorkingOrderRow WorkingOrderRow
			{
				get
				{
					return ((WorkingOrderRow)(this.GetParentRow(this.tableMatch.WorkingOrderMatchRelation)));
				}
			}
			
			/// <summary>
			/// Gets the children rows in the Negotiation table.
			/// </summary>
			public NegotiationRow[] GetNegotiationRows()
			{
				return ((NegotiationRow[])(this.GetChildRows(this.tableMatch.MatchNegotiationRelation)));
			}
			
			/// <summary>
			/// Gets the Null property of the HeatIndexDetails column.
			/// </summary>
			public bool IsHeatIndexDetailsNull()
			{
				return (this[this.tableMatch.HeatIndexDetailsColumn] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Sets the Null property of the HeatIndexDetails column.
			/// </summary>
			public void SetHeatIndexDetailsNull()
			{
				this[this.tableMatch.HeatIndexDetailsColumn] = global::System.DBNull.Value;
			}
		}
		
		/// <summary>
		/// Represents a row of data in the MinorInstrumentType table.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		public partial class MinorInstrumentTypeRow : global::System.Data.DataRow
		{
			
			private MinorInstrumentTypeDataTable tableMinorInstrumentType;
			
			/// <summary>
			/// Creates a row of data from the MinorInstrumentType table schema.
			/// </summary>
			/// <param name="dataRowBuilder">An internal data structure used to build the row from the parent table schema.</param>
			internal MinorInstrumentTypeRow(global::System.Data.DataRowBuilder dataRowBuilder) : 
					base(dataRowBuilder)
			{
				// This creates a strongly typed MinorInstrumentType row using the generic construction methods.
				this.tableMinorInstrumentType = ((MinorInstrumentTypeDataTable)(this.Table));
			}
			
			/// <summary>
			/// Gets or sets the data in the ExternalId0 column.
			/// </summary>
			public string ExternalId0
			{
				get
				{
					try
					{
						return ((string)(this[this.tableMinorInstrumentType.ExternalId0Column]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableMinorInstrumentType.ExternalId0Column] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the ExternalId1 column.
			/// </summary>
			public string ExternalId1
			{
				get
				{
					try
					{
						return ((string)(this[this.tableMinorInstrumentType.ExternalId1Column]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableMinorInstrumentType.ExternalId1Column] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the MinorInstrumentTypeId column.
			/// </summary>
			public global::System.Guid MinorInstrumentTypeId
			{
				get
				{
					return ((global::System.Guid)(this[this.tableMinorInstrumentType.MinorInstrumentTypeIdColumn]));
				}
				set
				{
					this[this.tableMinorInstrumentType.MinorInstrumentTypeIdColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the Mnemonic column.
			/// </summary>
			public string Mnemonic
			{
				get
				{
					return ((string)(this[this.tableMinorInstrumentType.MnemonicColumn]));
				}
				set
				{
					this[this.tableMinorInstrumentType.MnemonicColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the Name column.
			/// </summary>
			public string Name
			{
				get
				{
					return ((string)(this[this.tableMinorInstrumentType.NameColumn]));
				}
				set
				{
					this[this.tableMinorInstrumentType.NameColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the RowVersion column.
			/// </summary>
			public long RowVersion
			{
				get
				{
					return ((long)(this[this.tableMinorInstrumentType.RowVersionColumn]));
				}
				set
				{
					this[this.tableMinorInstrumentType.RowVersionColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets the children rows in the Security table.
			/// </summary>
			public SecurityRow[] GetSecurityRows()
			{
				return ((SecurityRow[])(this.GetChildRows(this.tableMinorInstrumentType.MinorInstrumentTypeSecurityRelation)));
			}
			
			/// <summary>
			/// Gets the Null property of the ExternalId0 column.
			/// </summary>
			public bool IsExternalId0Null()
			{
				return (this[this.tableMinorInstrumentType.ExternalId0Column] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the ExternalId1 column.
			/// </summary>
			public bool IsExternalId1Null()
			{
				return (this[this.tableMinorInstrumentType.ExternalId1Column] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Sets the Null property of the ExternalId0 column.
			/// </summary>
			public void SetExternalId0Null()
			{
				this[this.tableMinorInstrumentType.ExternalId0Column] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the ExternalId1 column.
			/// </summary>
			public void SetExternalId1Null()
			{
				this[this.tableMinorInstrumentType.ExternalId1Column] = global::System.DBNull.Value;
			}
		}
		
		/// <summary>
		/// Represents a row of data in the MssaBucket table.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		public partial class MssaBucketRow : global::System.Data.DataRow
		{
			
			private MssaBucketDataTable tableMssaBucket;
			
			/// <summary>
			/// Creates a row of data from the MssaBucket table schema.
			/// </summary>
			/// <param name="dataRowBuilder">An internal data structure used to build the row from the parent table schema.</param>
			internal MssaBucketRow(global::System.Data.DataRowBuilder dataRowBuilder) : 
					base(dataRowBuilder)
			{
				// This creates a strongly typed MssaBucket row using the generic construction methods.
				this.tableMssaBucket = ((MssaBucketDataTable)(this.Table));
			}
			
			/// <summary>
			/// Gets or sets the data in the ExternalId0 column.
			/// </summary>
			public string ExternalId0
			{
				get
				{
					try
					{
						return ((string)(this[this.tableMssaBucket.ExternalId0Column]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableMssaBucket.ExternalId0Column] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the ExternalId1 column.
			/// </summary>
			public string ExternalId1
			{
				get
				{
					try
					{
						return ((string)(this[this.tableMssaBucket.ExternalId1Column]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableMssaBucket.ExternalId1Column] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the MssaBucketId column.
			/// </summary>
			public global::System.Guid MssaBucketId
			{
				get
				{
					return ((global::System.Guid)(this[this.tableMssaBucket.MssaBucketIdColumn]));
				}
				set
				{
					this[this.tableMssaBucket.MssaBucketIdColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the Name column.
			/// </summary>
			public string Name
			{
				get
				{
					return ((string)(this[this.tableMssaBucket.NameColumn]));
				}
				set
				{
					this[this.tableMssaBucket.NameColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the RowVersion column.
			/// </summary>
			public long RowVersion
			{
				get
				{
					return ((long)(this[this.tableMssaBucket.RowVersionColumn]));
				}
				set
				{
					this[this.tableMssaBucket.RowVersionColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets the children rows in the SecuritySeries table.
			/// </summary>
			public SecuritySeriesRow[] GetSecuritySeriesRows()
			{
				return ((SecuritySeriesRow[])(this.GetChildRows(this.tableMssaBucket.MssaBucketSecuritySeriesRelation)));
			}
			
			/// <summary>
			/// Gets the Null property of the ExternalId0 column.
			/// </summary>
			public bool IsExternalId0Null()
			{
				return (this[this.tableMssaBucket.ExternalId0Column] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the ExternalId1 column.
			/// </summary>
			public bool IsExternalId1Null()
			{
				return (this[this.tableMssaBucket.ExternalId1Column] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Sets the Null property of the ExternalId0 column.
			/// </summary>
			public void SetExternalId0Null()
			{
				this[this.tableMssaBucket.ExternalId0Column] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the ExternalId1 column.
			/// </summary>
			public void SetExternalId1Null()
			{
				this[this.tableMssaBucket.ExternalId1Column] = global::System.DBNull.Value;
			}
		}
		
		/// <summary>
		/// Represents a row of data in the Negotiation table.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		public partial class NegotiationRow : global::System.Data.DataRow
		{
			
			private NegotiationDataTable tableNegotiation;
			
			/// <summary>
			/// Creates a row of data from the Negotiation table schema.
			/// </summary>
			/// <param name="dataRowBuilder">An internal data structure used to build the row from the parent table schema.</param>
			internal NegotiationRow(global::System.Data.DataRowBuilder dataRowBuilder) : 
					base(dataRowBuilder)
			{
				// This creates a strongly typed Negotiation row using the generic construction methods.
				this.tableNegotiation = ((NegotiationDataTable)(this.Table));
			}
			
			/// <summary>
			/// Gets or sets the data in the BlotterId column.
			/// </summary>
			public global::System.Guid BlotterId
			{
				get
				{
					return ((global::System.Guid)(this[this.tableNegotiation.BlotterIdColumn]));
				}
				set
				{
					this[this.tableNegotiation.BlotterIdColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets the parent row in the Blotter table.
			/// </summary>
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public BlotterRow BlotterRow
			{
				get
				{
					return ((BlotterRow)(this.GetParentRow(this.tableNegotiation.BlotterNegotiationRelation)));
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the ExecutionId column.
			/// </summary>
			public global::System.Guid ExecutionId
			{
				get
				{
					try
					{
						return ((global::System.Guid)(this[this.tableNegotiation.ExecutionIdColumn]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableNegotiation.ExecutionIdColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets the parent row in the Execution table.
			/// </summary>
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public ExecutionRow ExecutionRow
			{
				get
				{
					return ((ExecutionRow)(this.GetParentRow(this.tableNegotiation.ExecutionNegotiationRelation)));
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the IsRead column.
			/// </summary>
			public bool IsRead
			{
				get
				{
					return ((bool)(this[this.tableNegotiation.IsReadColumn]));
				}
				set
				{
					this[this.tableNegotiation.IsReadColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the MatchId column.
			/// </summary>
			public global::System.Guid MatchId
			{
				get
				{
					return ((global::System.Guid)(this[this.tableNegotiation.MatchIdColumn]));
				}
				set
				{
					this[this.tableNegotiation.MatchIdColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets the parent row in the Match table.
			/// </summary>
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public MatchRow MatchRow
			{
				get
				{
					return ((MatchRow)(this.GetParentRow(this.tableNegotiation.MatchNegotiationRelation)));
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the NegotiationId column.
			/// </summary>
			public global::System.Guid NegotiationId
			{
				get
				{
					return ((global::System.Guid)(this[this.tableNegotiation.NegotiationIdColumn]));
				}
				set
				{
					this[this.tableNegotiation.NegotiationIdColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the Quantity column.
			/// </summary>
			public decimal Quantity
			{
				get
				{
					return ((decimal)(this[this.tableNegotiation.QuantityColumn]));
				}
				set
				{
					this[this.tableNegotiation.QuantityColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the RowVersion column.
			/// </summary>
			public long RowVersion
			{
				get
				{
					return ((long)(this[this.tableNegotiation.RowVersionColumn]));
				}
				set
				{
					this[this.tableNegotiation.RowVersionColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the StatusCode column.
			/// </summary>
			public global::Teraque.StatusCode StatusCode
			{
				get
				{
					return ((global::Teraque.StatusCode)(this[this.tableNegotiation.StatusCodeColumn]));
				}
				set
				{
					this[this.tableNegotiation.StatusCodeColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets the parent row in the Status table.
			/// </summary>
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public StatusRow StatusRow
			{
				get
				{
					return ((StatusRow)(this.GetParentRow(this.tableNegotiation.StatusNegotiationRelation)));
				}
			}
			
			/// <summary>
			/// Gets the Null property of the ExecutionId column.
			/// </summary>
			public bool IsExecutionIdNull()
			{
				return (this[this.tableNegotiation.ExecutionIdColumn] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Sets the Null property of the ExecutionId column.
			/// </summary>
			public void SetExecutionIdNull()
			{
				this[this.tableNegotiation.ExecutionIdColumn] = global::System.DBNull.Value;
			}
		}
		
		/// <summary>
		/// Represents a row of data in the OrderType table.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		public partial class OrderTypeRow : global::System.Data.DataRow
		{
			
			private OrderTypeDataTable tableOrderType;
			
			/// <summary>
			/// Creates a row of data from the OrderType table schema.
			/// </summary>
			/// <param name="dataRowBuilder">An internal data structure used to build the row from the parent table schema.</param>
			internal OrderTypeRow(global::System.Data.DataRowBuilder dataRowBuilder) : 
					base(dataRowBuilder)
			{
				// This creates a strongly typed OrderType row using the generic construction methods.
				this.tableOrderType = ((OrderTypeDataTable)(this.Table));
			}
			
			/// <summary>
			/// Gets or sets the data in the Description column.
			/// </summary>
			public string Description
			{
				get
				{
					return ((string)(this[this.tableOrderType.DescriptionColumn]));
				}
				set
				{
					this[this.tableOrderType.DescriptionColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the ExternalId0 column.
			/// </summary>
			public string ExternalId0
			{
				get
				{
					try
					{
						return ((string)(this[this.tableOrderType.ExternalId0Column]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableOrderType.ExternalId0Column] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the ExternalId1 column.
			/// </summary>
			public string ExternalId1
			{
				get
				{
					try
					{
						return ((string)(this[this.tableOrderType.ExternalId1Column]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableOrderType.ExternalId1Column] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the ExternalId2 column.
			/// </summary>
			public string ExternalId2
			{
				get
				{
					try
					{
						return ((string)(this[this.tableOrderType.ExternalId2Column]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableOrderType.ExternalId2Column] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the ExternalId3 column.
			/// </summary>
			public string ExternalId3
			{
				get
				{
					try
					{
						return ((string)(this[this.tableOrderType.ExternalId3Column]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableOrderType.ExternalId3Column] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the Mnemonic column.
			/// </summary>
			public string Mnemonic
			{
				get
				{
					return ((string)(this[this.tableOrderType.MnemonicColumn]));
				}
				set
				{
					this[this.tableOrderType.MnemonicColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the OrderTypeCode column.
			/// </summary>
			public global::Teraque.OrderTypeCode OrderTypeCode
			{
				get
				{
					return ((global::Teraque.OrderTypeCode)(this[this.tableOrderType.OrderTypeCodeColumn]));
				}
				set
				{
					this[this.tableOrderType.OrderTypeCodeColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the RowVersion column.
			/// </summary>
			public long RowVersion
			{
				get
				{
					return ((long)(this[this.tableOrderType.RowVersionColumn]));
				}
				set
				{
					this[this.tableOrderType.RowVersionColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets the children rows in the DestinationOrder table.
			/// </summary>
			public DestinationOrderRow[] GetDestinationOrderRows()
			{
				return ((DestinationOrderRow[])(this.GetChildRows(this.tableOrderType.OrderTypeDestinationOrderRelation)));
			}
			
			/// <summary>
			/// Gets the children rows in the SourceOrder table.
			/// </summary>
			public SourceOrderRow[] GetSourceOrderRows()
			{
				return ((SourceOrderRow[])(this.GetChildRows(this.tableOrderType.OrderTypeSourceOrderRelation)));
			}
			
			/// <summary>
			/// Gets the children rows in the WorkingOrder table.
			/// </summary>
			public WorkingOrderRow[] GetWorkingOrderRows()
			{
				return ((WorkingOrderRow[])(this.GetChildRows(this.tableOrderType.OrderTypeWorkingOrderRelation)));
			}
			
			/// <summary>
			/// Gets the Null property of the ExternalId0 column.
			/// </summary>
			public bool IsExternalId0Null()
			{
				return (this[this.tableOrderType.ExternalId0Column] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the ExternalId1 column.
			/// </summary>
			public bool IsExternalId1Null()
			{
				return (this[this.tableOrderType.ExternalId1Column] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the ExternalId2 column.
			/// </summary>
			public bool IsExternalId2Null()
			{
				return (this[this.tableOrderType.ExternalId2Column] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the ExternalId3 column.
			/// </summary>
			public bool IsExternalId3Null()
			{
				return (this[this.tableOrderType.ExternalId3Column] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Sets the Null property of the ExternalId0 column.
			/// </summary>
			public void SetExternalId0Null()
			{
				this[this.tableOrderType.ExternalId0Column] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the ExternalId1 column.
			/// </summary>
			public void SetExternalId1Null()
			{
				this[this.tableOrderType.ExternalId1Column] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the ExternalId2 column.
			/// </summary>
			public void SetExternalId2Null()
			{
				this[this.tableOrderType.ExternalId2Column] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the ExternalId3 column.
			/// </summary>
			public void SetExternalId3Null()
			{
				this[this.tableOrderType.ExternalId3Column] = global::System.DBNull.Value;
			}
		}
		
		/// <summary>
		/// Represents a row of data in the PartyType table.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		public partial class PartyTypeRow : global::System.Data.DataRow
		{
			
			private PartyTypeDataTable tablePartyType;
			
			/// <summary>
			/// Creates a row of data from the PartyType table schema.
			/// </summary>
			/// <param name="dataRowBuilder">An internal data structure used to build the row from the parent table schema.</param>
			internal PartyTypeRow(global::System.Data.DataRowBuilder dataRowBuilder) : 
					base(dataRowBuilder)
			{
				// This creates a strongly typed PartyType row using the generic construction methods.
				this.tablePartyType = ((PartyTypeDataTable)(this.Table));
			}
			
			/// <summary>
			/// Gets or sets the data in the Description column.
			/// </summary>
			public string Description
			{
				get
				{
					return ((string)(this[this.tablePartyType.DescriptionColumn]));
				}
				set
				{
					this[this.tablePartyType.DescriptionColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the ExternalId0 column.
			/// </summary>
			public string ExternalId0
			{
				get
				{
					try
					{
						return ((string)(this[this.tablePartyType.ExternalId0Column]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tablePartyType.ExternalId0Column] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the ExternalId1 column.
			/// </summary>
			public string ExternalId1
			{
				get
				{
					try
					{
						return ((string)(this[this.tablePartyType.ExternalId1Column]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tablePartyType.ExternalId1Column] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the Mnemonic column.
			/// </summary>
			public string Mnemonic
			{
				get
				{
					return ((string)(this[this.tablePartyType.MnemonicColumn]));
				}
				set
				{
					this[this.tablePartyType.MnemonicColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the PartyTypeCode column.
			/// </summary>
			public global::Teraque.PartyTypeCode PartyTypeCode
			{
				get
				{
					return ((global::Teraque.PartyTypeCode)(this[this.tablePartyType.PartyTypeCodeColumn]));
				}
				set
				{
					this[this.tablePartyType.PartyTypeCodeColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the RowVersion column.
			/// </summary>
			public long RowVersion
			{
				get
				{
					return ((long)(this[this.tablePartyType.RowVersionColumn]));
				}
				set
				{
					this[this.tablePartyType.RowVersionColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets the children rows in the Blotter table.
			/// </summary>
			public BlotterRow[] GetBlotterRows()
			{
				return ((BlotterRow[])(this.GetChildRows(this.tablePartyType.PartyTypeBlotterRelation)));
			}
			
			/// <summary>
			/// Gets the Null property of the ExternalId0 column.
			/// </summary>
			public bool IsExternalId0Null()
			{
				return (this[this.tablePartyType.ExternalId0Column] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the ExternalId1 column.
			/// </summary>
			public bool IsExternalId1Null()
			{
				return (this[this.tablePartyType.ExternalId1Column] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Sets the Null property of the ExternalId0 column.
			/// </summary>
			public void SetExternalId0Null()
			{
				this[this.tablePartyType.ExternalId0Column] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the ExternalId1 column.
			/// </summary>
			public void SetExternalId1Null()
			{
				this[this.tablePartyType.ExternalId1Column] = global::System.DBNull.Value;
			}
		}
		
		/// <summary>
		/// Represents a row of data in the Position table.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		public partial class PositionRow : global::System.Data.DataRow
		{
			
			private PositionDataTable tablePosition;
			
			/// <summary>
			/// Creates a row of data from the Position table schema.
			/// </summary>
			/// <param name="dataRowBuilder">An internal data structure used to build the row from the parent table schema.</param>
			internal PositionRow(global::System.Data.DataRowBuilder dataRowBuilder) : 
					base(dataRowBuilder)
			{
				// This creates a strongly typed Position row using the generic construction methods.
				this.tablePosition = ((PositionDataTable)(this.Table));
			}
			
			/// <summary>
			/// Gets or sets the data in the AccountId column.
			/// </summary>
			public global::System.Guid AccountId
			{
				get
				{
					return ((global::System.Guid)(this[this.tablePosition.AccountIdColumn]));
				}
				set
				{
					this[this.tablePosition.AccountIdColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets the parent row in the Account table.
			/// </summary>
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public AccountRow AccountRow
			{
				get
				{
					return ((AccountRow)(this.GetParentRow(this.tablePosition.AccountPositionRelation)));
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the ExternalId0 column.
			/// </summary>
			public string ExternalId0
			{
				get
				{
					try
					{
						return ((string)(this[this.tablePosition.ExternalId0Column]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tablePosition.ExternalId0Column] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the ExternalId1 column.
			/// </summary>
			public string ExternalId1
			{
				get
				{
					try
					{
						return ((string)(this[this.tablePosition.ExternalId1Column]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tablePosition.ExternalId1Column] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the ExternalId2 column.
			/// </summary>
			public string ExternalId2
			{
				get
				{
					try
					{
						return ((string)(this[this.tablePosition.ExternalId2Column]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tablePosition.ExternalId2Column] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the ExternalId3 column.
			/// </summary>
			public string ExternalId3
			{
				get
				{
					try
					{
						return ((string)(this[this.tablePosition.ExternalId3Column]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tablePosition.ExternalId3Column] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the PositionId column.
			/// </summary>
			public global::System.Guid PositionId
			{
				get
				{
					return ((global::System.Guid)(this[this.tablePosition.PositionIdColumn]));
				}
				set
				{
					this[this.tablePosition.PositionIdColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the PositionTypeCode column.
			/// </summary>
			public global::Teraque.PositionTypeCode PositionTypeCode
			{
				get
				{
					return ((global::Teraque.PositionTypeCode)(this[this.tablePosition.PositionTypeCodeColumn]));
				}
				set
				{
					this[this.tablePosition.PositionTypeCodeColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets the parent row in the PositionType table.
			/// </summary>
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public PositionTypeRow PositionTypeRow
			{
				get
				{
					return ((PositionTypeRow)(this.GetParentRow(this.tablePosition.PositionTypePositionRelation)));
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the RowVersion column.
			/// </summary>
			public long RowVersion
			{
				get
				{
					return ((long)(this[this.tablePosition.RowVersionColumn]));
				}
				set
				{
					this[this.tablePosition.RowVersionColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the SecurityId column.
			/// </summary>
			public global::System.Guid SecurityId
			{
				get
				{
					return ((global::System.Guid)(this[this.tablePosition.SecurityIdColumn]));
				}
				set
				{
					this[this.tablePosition.SecurityIdColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets the parent row in the Security table.
			/// </summary>
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public SecurityRow SecurityRow
			{
				get
				{
					return ((SecurityRow)(this.GetParentRow(this.tablePosition.SecurityPositionRelation)));
				}
			}
			
			/// <summary>
			/// Gets the children rows in the PositionSeries table.
			/// </summary>
			public PositionSeriesRow[] GetPositionSeriesRows()
			{
				return ((PositionSeriesRow[])(this.GetChildRows(this.tablePosition.PositionPositionSeriesRelation)));
			}
			
			/// <summary>
			/// Gets the children rows in the TaxLot table.
			/// </summary>
			public TaxLotRow[] GetTaxLotRows()
			{
				return ((TaxLotRow[])(this.GetChildRows(this.tablePosition.PositionTaxLotRelation)));
			}
			
			/// <summary>
			/// Gets the Null property of the ExternalId0 column.
			/// </summary>
			public bool IsExternalId0Null()
			{
				return (this[this.tablePosition.ExternalId0Column] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the ExternalId1 column.
			/// </summary>
			public bool IsExternalId1Null()
			{
				return (this[this.tablePosition.ExternalId1Column] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the ExternalId2 column.
			/// </summary>
			public bool IsExternalId2Null()
			{
				return (this[this.tablePosition.ExternalId2Column] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the ExternalId3 column.
			/// </summary>
			public bool IsExternalId3Null()
			{
				return (this[this.tablePosition.ExternalId3Column] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Sets the Null property of the ExternalId0 column.
			/// </summary>
			public void SetExternalId0Null()
			{
				this[this.tablePosition.ExternalId0Column] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the ExternalId1 column.
			/// </summary>
			public void SetExternalId1Null()
			{
				this[this.tablePosition.ExternalId1Column] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the ExternalId2 column.
			/// </summary>
			public void SetExternalId2Null()
			{
				this[this.tablePosition.ExternalId2Column] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the ExternalId3 column.
			/// </summary>
			public void SetExternalId3Null()
			{
				this[this.tablePosition.ExternalId3Column] = global::System.DBNull.Value;
			}
		}
		
		/// <summary>
		/// Represents a row of data in the PositionSeries table.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		public partial class PositionSeriesRow : global::System.Data.DataRow
		{
			
			private PositionSeriesDataTable tablePositionSeries;
			
			/// <summary>
			/// Creates a row of data from the PositionSeries table schema.
			/// </summary>
			/// <param name="dataRowBuilder">An internal data structure used to build the row from the parent table schema.</param>
			internal PositionSeriesRow(global::System.Data.DataRowBuilder dataRowBuilder) : 
					base(dataRowBuilder)
			{
				// This creates a strongly typed PositionSeries row using the generic construction methods.
				this.tablePositionSeries = ((PositionSeriesDataTable)(this.Table));
			}
			
			/// <summary>
			/// Gets or sets the data in the AccountId column.
			/// </summary>
			public global::System.Guid AccountId
			{
				get
				{
					return ((global::System.Guid)(this[this.tablePositionSeries.AccountIdColumn]));
				}
				set
				{
					this[this.tablePositionSeries.AccountIdColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets the parent row in the Account table.
			/// </summary>
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public AccountRow AccountRow
			{
				get
				{
					return ((AccountRow)(this.GetParentRow(this.tablePositionSeries.AccountPositionSeriesRelation)));
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the BaseCost column.
			/// </summary>
			public decimal BaseCost
			{
				get
				{
					return ((decimal)(this[this.tablePositionSeries.BaseCostColumn]));
				}
				set
				{
					this[this.tablePositionSeries.BaseCostColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the BasePrice column.
			/// </summary>
			public decimal BasePrice
			{
				get
				{
					return ((decimal)(this[this.tablePositionSeries.BasePriceColumn]));
				}
				set
				{
					this[this.tablePositionSeries.BasePriceColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the Date column.
			/// </summary>
			public global::System.DateTime Date
			{
				get
				{
					return ((global::System.DateTime)(this[this.tablePositionSeries.DateColumn]));
				}
				set
				{
					this[this.tablePositionSeries.DateColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the ExternalId0 column.
			/// </summary>
			public string ExternalId0
			{
				get
				{
					try
					{
						return ((string)(this[this.tablePositionSeries.ExternalId0Column]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tablePositionSeries.ExternalId0Column] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the ExternalId1 column.
			/// </summary>
			public string ExternalId1
			{
				get
				{
					try
					{
						return ((string)(this[this.tablePositionSeries.ExternalId1Column]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tablePositionSeries.ExternalId1Column] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the LocalCost column.
			/// </summary>
			public decimal LocalCost
			{
				get
				{
					return ((decimal)(this[this.tablePositionSeries.LocalCostColumn]));
				}
				set
				{
					this[this.tablePositionSeries.LocalCostColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the LocalPrice column.
			/// </summary>
			public decimal LocalPrice
			{
				get
				{
					return ((decimal)(this[this.tablePositionSeries.LocalPriceColumn]));
				}
				set
				{
					this[this.tablePositionSeries.LocalPriceColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the PositionId column.
			/// </summary>
			public global::System.Guid PositionId
			{
				get
				{
					return ((global::System.Guid)(this[this.tablePositionSeries.PositionIdColumn]));
				}
				set
				{
					this[this.tablePositionSeries.PositionIdColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets the parent row in the Position table.
			/// </summary>
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public PositionRow PositionRow
			{
				get
				{
					return ((PositionRow)(this.GetParentRow(this.tablePositionSeries.PositionPositionSeriesRelation)));
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the PositionSeriesId column.
			/// </summary>
			public global::System.Guid PositionSeriesId
			{
				get
				{
					return ((global::System.Guid)(this[this.tablePositionSeries.PositionSeriesIdColumn]));
				}
				set
				{
					this[this.tablePositionSeries.PositionSeriesIdColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the PositionTypeCode column.
			/// </summary>
			public global::Teraque.PositionTypeCode PositionTypeCode
			{
				get
				{
					return ((global::Teraque.PositionTypeCode)(this[this.tablePositionSeries.PositionTypeCodeColumn]));
				}
				set
				{
					this[this.tablePositionSeries.PositionTypeCodeColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets the parent row in the PositionType table.
			/// </summary>
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public PositionTypeRow PositionTypeRow
			{
				get
				{
					return ((PositionTypeRow)(this.GetParentRow(this.tablePositionSeries.PositionTypePositionSeriesRelation)));
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the RowVersion column.
			/// </summary>
			public long RowVersion
			{
				get
				{
					return ((long)(this[this.tablePositionSeries.RowVersionColumn]));
				}
				set
				{
					this[this.tablePositionSeries.RowVersionColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the SecurityId column.
			/// </summary>
			public global::System.Guid SecurityId
			{
				get
				{
					return ((global::System.Guid)(this[this.tablePositionSeries.SecurityIdColumn]));
				}
				set
				{
					this[this.tablePositionSeries.SecurityIdColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets the parent row in the Security table.
			/// </summary>
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public SecurityRow SecurityRow
			{
				get
				{
					return ((SecurityRow)(this.GetParentRow(this.tablePositionSeries.SecurityPositionSeriesRelation)));
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the SecuritySeriesId column.
			/// </summary>
			public global::System.Guid SecuritySeriesId
			{
				get
				{
					return ((global::System.Guid)(this[this.tablePositionSeries.SecuritySeriesIdColumn]));
				}
				set
				{
					this[this.tablePositionSeries.SecuritySeriesIdColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets the parent row in the SecuritySeries table.
			/// </summary>
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public SecuritySeriesRow SecuritySeriesRow
			{
				get
				{
					return ((SecuritySeriesRow)(this.GetParentRow(this.tablePositionSeries.SecuritySeriesPositionSeriesRelation)));
				}
			}
			
			/// <summary>
			/// Gets the children rows in the TaxLotSeries table.
			/// </summary>
			public TaxLotSeriesRow[] GetTaxLotSeriesRows()
			{
				return ((TaxLotSeriesRow[])(this.GetChildRows(this.tablePositionSeries.PositionSeriesTaxLotSeriesRelation)));
			}
			
			/// <summary>
			/// Gets the Null property of the ExternalId0 column.
			/// </summary>
			public bool IsExternalId0Null()
			{
				return (this[this.tablePositionSeries.ExternalId0Column] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the ExternalId1 column.
			/// </summary>
			public bool IsExternalId1Null()
			{
				return (this[this.tablePositionSeries.ExternalId1Column] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Sets the Null property of the ExternalId0 column.
			/// </summary>
			public void SetExternalId0Null()
			{
				this[this.tablePositionSeries.ExternalId0Column] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the ExternalId1 column.
			/// </summary>
			public void SetExternalId1Null()
			{
				this[this.tablePositionSeries.ExternalId1Column] = global::System.DBNull.Value;
			}
		}
		
		/// <summary>
		/// Represents a row of data in the PositionType table.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		public partial class PositionTypeRow : global::System.Data.DataRow
		{
			
			private PositionTypeDataTable tablePositionType;
			
			/// <summary>
			/// Creates a row of data from the PositionType table schema.
			/// </summary>
			/// <param name="dataRowBuilder">An internal data structure used to build the row from the parent table schema.</param>
			internal PositionTypeRow(global::System.Data.DataRowBuilder dataRowBuilder) : 
					base(dataRowBuilder)
			{
				// This creates a strongly typed PositionType row using the generic construction methods.
				this.tablePositionType = ((PositionTypeDataTable)(this.Table));
			}
			
			/// <summary>
			/// Gets or sets the data in the ExternalId0 column.
			/// </summary>
			public string ExternalId0
			{
				get
				{
					try
					{
						return ((string)(this[this.tablePositionType.ExternalId0Column]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tablePositionType.ExternalId0Column] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the ExternalId1 column.
			/// </summary>
			public string ExternalId1
			{
				get
				{
					try
					{
						return ((string)(this[this.tablePositionType.ExternalId1Column]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tablePositionType.ExternalId1Column] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the ExternalId2 column.
			/// </summary>
			public string ExternalId2
			{
				get
				{
					try
					{
						return ((string)(this[this.tablePositionType.ExternalId2Column]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tablePositionType.ExternalId2Column] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the ExternalId3 column.
			/// </summary>
			public string ExternalId3
			{
				get
				{
					try
					{
						return ((string)(this[this.tablePositionType.ExternalId3Column]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tablePositionType.ExternalId3Column] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the Mnemonic column.
			/// </summary>
			public string Mnemonic
			{
				get
				{
					return ((string)(this[this.tablePositionType.MnemonicColumn]));
				}
				set
				{
					this[this.tablePositionType.MnemonicColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the PositionTypeCode column.
			/// </summary>
			public global::Teraque.PositionTypeCode PositionTypeCode
			{
				get
				{
					return ((global::Teraque.PositionTypeCode)(this[this.tablePositionType.PositionTypeCodeColumn]));
				}
				set
				{
					this[this.tablePositionType.PositionTypeCodeColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the RowVersion column.
			/// </summary>
			public long RowVersion
			{
				get
				{
					return ((long)(this[this.tablePositionType.RowVersionColumn]));
				}
				set
				{
					this[this.tablePositionType.RowVersionColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the Sign column.
			/// </summary>
			public decimal Sign
			{
				get
				{
					return ((decimal)(this[this.tablePositionType.SignColumn]));
				}
				set
				{
					this[this.tablePositionType.SignColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets the children rows in the Position table.
			/// </summary>
			public PositionRow[] GetPositionRows()
			{
				return ((PositionRow[])(this.GetChildRows(this.tablePositionType.PositionTypePositionRelation)));
			}
			
			/// <summary>
			/// Gets the children rows in the PositionSeries table.
			/// </summary>
			public PositionSeriesRow[] GetPositionSeriesRows()
			{
				return ((PositionSeriesRow[])(this.GetChildRows(this.tablePositionType.PositionTypePositionSeriesRelation)));
			}
			
			/// <summary>
			/// Gets the children rows in the TaxLot table.
			/// </summary>
			public TaxLotRow[] GetTaxLotRows()
			{
				return ((TaxLotRow[])(this.GetChildRows(this.tablePositionType.PositionTypeTaxLotRelation)));
			}
			
			/// <summary>
			/// Gets the children rows in the TaxLotSeries table.
			/// </summary>
			public TaxLotSeriesRow[] GetTaxLotSeriesRows()
			{
				return ((TaxLotSeriesRow[])(this.GetChildRows(this.tablePositionType.PositionTypeTaxLotSeriesRelation)));
			}
			
			/// <summary>
			/// Gets the Null property of the ExternalId0 column.
			/// </summary>
			public bool IsExternalId0Null()
			{
				return (this[this.tablePositionType.ExternalId0Column] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the ExternalId1 column.
			/// </summary>
			public bool IsExternalId1Null()
			{
				return (this[this.tablePositionType.ExternalId1Column] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the ExternalId2 column.
			/// </summary>
			public bool IsExternalId2Null()
			{
				return (this[this.tablePositionType.ExternalId2Column] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the ExternalId3 column.
			/// </summary>
			public bool IsExternalId3Null()
			{
				return (this[this.tablePositionType.ExternalId3Column] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Sets the Null property of the ExternalId0 column.
			/// </summary>
			public void SetExternalId0Null()
			{
				this[this.tablePositionType.ExternalId0Column] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the ExternalId1 column.
			/// </summary>
			public void SetExternalId1Null()
			{
				this[this.tablePositionType.ExternalId1Column] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the ExternalId2 column.
			/// </summary>
			public void SetExternalId2Null()
			{
				this[this.tablePositionType.ExternalId2Column] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the ExternalId3 column.
			/// </summary>
			public void SetExternalId3Null()
			{
				this[this.tablePositionType.ExternalId3Column] = global::System.DBNull.Value;
			}
		}
		
		/// <summary>
		/// Represents a row of data in the Price table.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		public partial class PriceRow : global::System.Data.DataRow
		{
			
			private PriceDataTable tablePrice;
			
			/// <summary>
			/// Creates a row of data from the Price table schema.
			/// </summary>
			/// <param name="dataRowBuilder">An internal data structure used to build the row from the parent table schema.</param>
			internal PriceRow(global::System.Data.DataRowBuilder dataRowBuilder) : 
					base(dataRowBuilder)
			{
				// This creates a strongly typed Price row using the generic construction methods.
				this.tablePrice = ((PriceDataTable)(this.Table));
			}
			
			/// <summary>
			/// Gets or sets the data in the AskPrice column.
			/// </summary>
			public decimal AskPrice
			{
				get
				{
					return ((decimal)(this[this.tablePrice.AskPriceColumn]));
				}
				set
				{
					this[this.tablePrice.AskPriceColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the AskSize column.
			/// </summary>
			public decimal AskSize
			{
				get
				{
					return ((decimal)(this[this.tablePrice.AskSizeColumn]));
				}
				set
				{
					this[this.tablePrice.AskSizeColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the BidPrice column.
			/// </summary>
			public decimal BidPrice
			{
				get
				{
					return ((decimal)(this[this.tablePrice.BidPriceColumn]));
				}
				set
				{
					this[this.tablePrice.BidPriceColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the BidSize column.
			/// </summary>
			public decimal BidSize
			{
				get
				{
					return ((decimal)(this[this.tablePrice.BidSizeColumn]));
				}
				set
				{
					this[this.tablePrice.BidSizeColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the ClosePrice column.
			/// </summary>
			public decimal ClosePrice
			{
				get
				{
					return ((decimal)(this[this.tablePrice.ClosePriceColumn]));
				}
				set
				{
					this[this.tablePrice.ClosePriceColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the CurrencyId column.
			/// </summary>
			public global::System.Guid CurrencyId
			{
				get
				{
					return ((global::System.Guid)(this[this.tablePrice.CurrencyIdColumn]));
				}
				set
				{
					this[this.tablePrice.CurrencyIdColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the HighPrice column.
			/// </summary>
			public decimal HighPrice
			{
				get
				{
					return ((decimal)(this[this.tablePrice.HighPriceColumn]));
				}
				set
				{
					this[this.tablePrice.HighPriceColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the LastPrice column.
			/// </summary>
			public decimal LastPrice
			{
				get
				{
					return ((decimal)(this[this.tablePrice.LastPriceColumn]));
				}
				set
				{
					this[this.tablePrice.LastPriceColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the LastSize column.
			/// </summary>
			public decimal LastSize
			{
				get
				{
					return ((decimal)(this[this.tablePrice.LastSizeColumn]));
				}
				set
				{
					this[this.tablePrice.LastSizeColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the LowPrice column.
			/// </summary>
			public decimal LowPrice
			{
				get
				{
					return ((decimal)(this[this.tablePrice.LowPriceColumn]));
				}
				set
				{
					this[this.tablePrice.LowPriceColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the OpenPrice column.
			/// </summary>
			public decimal OpenPrice
			{
				get
				{
					return ((decimal)(this[this.tablePrice.OpenPriceColumn]));
				}
				set
				{
					this[this.tablePrice.OpenPriceColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the PriceChange column.
			/// </summary>
			public decimal PriceChange
			{
				get
				{
					return ((decimal)(this[this.tablePrice.PriceChangeColumn]));
				}
				set
				{
					this[this.tablePrice.PriceChangeColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the RowVersion column.
			/// </summary>
			public long RowVersion
			{
				get
				{
					return ((long)(this[this.tablePrice.RowVersionColumn]));
				}
				set
				{
					this[this.tablePrice.RowVersionColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the SecurityId column.
			/// </summary>
			public global::System.Guid SecurityId
			{
				get
				{
					return ((global::System.Guid)(this[this.tablePrice.SecurityIdColumn]));
				}
				set
				{
					this[this.tablePrice.SecurityIdColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets the parent row in the Security table.
			/// </summary>
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public SecurityRow SecurityRowByFK_Security_Price_CurrencyId
			{
				get
				{
					return ((SecurityRow)(this.GetParentRow(this.tablePrice.SecurityPriceByFK_Security_Price_CurrencyIdRelation)));
				}
			}
			
			/// <summary>
			/// Gets the parent row in the Security table.
			/// </summary>
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public SecurityRow SecurityRowByFK_Security_Price_SecurityId
			{
				get
				{
					return ((SecurityRow)(this.GetParentRow(this.tablePrice.SecurityPriceByFK_Security_Price_SecurityIdRelation)));
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the Volume column.
			/// </summary>
			public decimal Volume
			{
				get
				{
					return ((decimal)(this[this.tablePrice.VolumeColumn]));
				}
				set
				{
					this[this.tablePrice.VolumeColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the VolumeWeightedAveragePrice column.
			/// </summary>
			public decimal VolumeWeightedAveragePrice
			{
				get
				{
					return ((decimal)(this[this.tablePrice.VolumeWeightedAveragePriceColumn]));
				}
				set
				{
					this[this.tablePrice.VolumeWeightedAveragePriceColumn] = value;
				}
			}
		}
		
		/// <summary>
		/// Represents a row of data in the Property table.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		public partial class PropertyRow : global::System.Data.DataRow
		{
			
			private PropertyDataTable tableProperty;
			
			/// <summary>
			/// Creates a row of data from the Property table schema.
			/// </summary>
			/// <param name="dataRowBuilder">An internal data structure used to build the row from the parent table schema.</param>
			internal PropertyRow(global::System.Data.DataRowBuilder dataRowBuilder) : 
					base(dataRowBuilder)
			{
				// This creates a strongly typed Property row using the generic construction methods.
				this.tableProperty = ((PropertyDataTable)(this.Table));
			}
			
			/// <summary>
			/// Gets or sets the data in the ExternalId0 column.
			/// </summary>
			public string ExternalId0
			{
				get
				{
					try
					{
						return ((string)(this[this.tableProperty.ExternalId0Column]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableProperty.ExternalId0Column] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the Name column.
			/// </summary>
			public string Name
			{
				get
				{
					return ((string)(this[this.tableProperty.NameColumn]));
				}
				set
				{
					this[this.tableProperty.NameColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the PropertyId column.
			/// </summary>
			public global::System.Guid PropertyId
			{
				get
				{
					return ((global::System.Guid)(this[this.tableProperty.PropertyIdColumn]));
				}
				set
				{
					this[this.tableProperty.PropertyIdColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the RowVersion column.
			/// </summary>
			public long RowVersion
			{
				get
				{
					return ((long)(this[this.tableProperty.RowVersionColumn]));
				}
				set
				{
					this[this.tableProperty.RowVersionColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets the children rows in the PropertyStore table.
			/// </summary>
			public PropertyStoreRow[] GetPropertyStoreRows()
			{
				return ((PropertyStoreRow[])(this.GetChildRows(this.tableProperty.PropertyPropertyStoreRelation)));
			}
			
			/// <summary>
			/// Gets the Null property of the ExternalId0 column.
			/// </summary>
			public bool IsExternalId0Null()
			{
				return (this[this.tableProperty.ExternalId0Column] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Sets the Null property of the ExternalId0 column.
			/// </summary>
			public void SetExternalId0Null()
			{
				this[this.tableProperty.ExternalId0Column] = global::System.DBNull.Value;
			}
		}
		
		/// <summary>
		/// Represents a row of data in the PropertyStore table.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		public partial class PropertyStoreRow : global::System.Data.DataRow
		{
			
			private PropertyStoreDataTable tablePropertyStore;
			
			/// <summary>
			/// Creates a row of data from the PropertyStore table schema.
			/// </summary>
			/// <param name="dataRowBuilder">An internal data structure used to build the row from the parent table schema.</param>
			internal PropertyStoreRow(global::System.Data.DataRowBuilder dataRowBuilder) : 
					base(dataRowBuilder)
			{
				// This creates a strongly typed PropertyStore row using the generic construction methods.
				this.tablePropertyStore = ((PropertyStoreDataTable)(this.Table));
			}
			
			/// <summary>
			/// Gets or sets the data in the EntityId column.
			/// </summary>
			public global::System.Guid EntityId
			{
				get
				{
					return ((global::System.Guid)(this[this.tablePropertyStore.EntityIdColumn]));
				}
				set
				{
					this[this.tablePropertyStore.EntityIdColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets the parent row in the Entity table.
			/// </summary>
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public EntityRow EntityRow
			{
				get
				{
					return ((EntityRow)(this.GetParentRow(this.tablePropertyStore.EntityPropertyStoreRelation)));
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the ExternalId0 column.
			/// </summary>
			public string ExternalId0
			{
				get
				{
					try
					{
						return ((string)(this[this.tablePropertyStore.ExternalId0Column]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tablePropertyStore.ExternalId0Column] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the PropertyId column.
			/// </summary>
			public global::System.Guid PropertyId
			{
				get
				{
					try
					{
						return ((global::System.Guid)(this[this.tablePropertyStore.PropertyIdColumn]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tablePropertyStore.PropertyIdColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets the parent row in the Property table.
			/// </summary>
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public PropertyRow PropertyRow
			{
				get
				{
					return ((PropertyRow)(this.GetParentRow(this.tablePropertyStore.PropertyPropertyStoreRelation)));
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the PropertyStoreId column.
			/// </summary>
			public global::System.Guid PropertyStoreId
			{
				get
				{
					return ((global::System.Guid)(this[this.tablePropertyStore.PropertyStoreIdColumn]));
				}
				set
				{
					this[this.tablePropertyStore.PropertyStoreIdColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the RowVersion column.
			/// </summary>
			public long RowVersion
			{
				get
				{
					return ((long)(this[this.tablePropertyStore.RowVersionColumn]));
				}
				set
				{
					this[this.tablePropertyStore.RowVersionColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the Value column.
			/// </summary>
			public byte[] Value
			{
				get
				{
					return ((byte[])(this[this.tablePropertyStore.ValueColumn]));
				}
				set
				{
					this[this.tablePropertyStore.ValueColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets the Null property of the ExternalId0 column.
			/// </summary>
			public bool IsExternalId0Null()
			{
				return (this[this.tablePropertyStore.ExternalId0Column] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the PropertyId column.
			/// </summary>
			public bool IsPropertyIdNull()
			{
				return (this[this.tablePropertyStore.PropertyIdColumn] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Sets the Null property of the ExternalId0 column.
			/// </summary>
			public void SetExternalId0Null()
			{
				this[this.tablePropertyStore.ExternalId0Column] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the PropertyId column.
			/// </summary>
			public void SetPropertyIdNull()
			{
				this[this.tablePropertyStore.PropertyIdColumn] = global::System.DBNull.Value;
			}
		}
		
		/// <summary>
		/// Represents a row of data in the Province table.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		public partial class ProvinceRow : global::System.Data.DataRow
		{
			
			private ProvinceDataTable tableProvince;
			
			/// <summary>
			/// Creates a row of data from the Province table schema.
			/// </summary>
			/// <param name="dataRowBuilder">An internal data structure used to build the row from the parent table schema.</param>
			internal ProvinceRow(global::System.Data.DataRowBuilder dataRowBuilder) : 
					base(dataRowBuilder)
			{
				// This creates a strongly typed Province row using the generic construction methods.
				this.tableProvince = ((ProvinceDataTable)(this.Table));
			}
			
			/// <summary>
			/// Gets or sets the data in the Abbreviation column.
			/// </summary>
			public string Abbreviation
			{
				get
				{
					return ((string)(this[this.tableProvince.AbbreviationColumn]));
				}
				set
				{
					this[this.tableProvince.AbbreviationColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the CountryId column.
			/// </summary>
			public global::System.Guid CountryId
			{
				get
				{
					return ((global::System.Guid)(this[this.tableProvince.CountryIdColumn]));
				}
				set
				{
					this[this.tableProvince.CountryIdColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets the parent row in the Country table.
			/// </summary>
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public CountryRow CountryRow
			{
				get
				{
					return ((CountryRow)(this.GetParentRow(this.tableProvince.CountryProvinceRelation)));
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the ExternalId0 column.
			/// </summary>
			public string ExternalId0
			{
				get
				{
					try
					{
						return ((string)(this[this.tableProvince.ExternalId0Column]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableProvince.ExternalId0Column] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the ExternalId1 column.
			/// </summary>
			public string ExternalId1
			{
				get
				{
					try
					{
						return ((string)(this[this.tableProvince.ExternalId1Column]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableProvince.ExternalId1Column] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the Name column.
			/// </summary>
			public string Name
			{
				get
				{
					return ((string)(this[this.tableProvince.NameColumn]));
				}
				set
				{
					this[this.tableProvince.NameColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the ProvinceId column.
			/// </summary>
			public global::System.Guid ProvinceId
			{
				get
				{
					return ((global::System.Guid)(this[this.tableProvince.ProvinceIdColumn]));
				}
				set
				{
					this[this.tableProvince.ProvinceIdColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the RowVersion column.
			/// </summary>
			public long RowVersion
			{
				get
				{
					return ((long)(this[this.tableProvince.RowVersionColumn]));
				}
				set
				{
					this[this.tableProvince.RowVersionColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets the children rows in the SingleAccount table.
			/// </summary>
			public SingleAccountRow[] GetSingleAccountRows()
			{
				return ((SingleAccountRow[])(this.GetChildRows(this.tableProvince.ProvinceSingleAccountRelation)));
			}
			
			/// <summary>
			/// Gets the Null property of the ExternalId0 column.
			/// </summary>
			public bool IsExternalId0Null()
			{
				return (this[this.tableProvince.ExternalId0Column] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the ExternalId1 column.
			/// </summary>
			public bool IsExternalId1Null()
			{
				return (this[this.tableProvince.ExternalId1Column] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Sets the Null property of the ExternalId0 column.
			/// </summary>
			public void SetExternalId0Null()
			{
				this[this.tableProvince.ExternalId0Column] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the ExternalId1 column.
			/// </summary>
			public void SetExternalId1Null()
			{
				this[this.tableProvince.ExternalId1Column] = global::System.DBNull.Value;
			}
		}
		
		/// <summary>
		/// Represents a row of data in the Security table.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		public partial class SecurityRow : global::System.Data.DataRow
		{
			
			private SecurityDataTable tableSecurity;
			
			/// <summary>
			/// Creates a row of data from the Security table schema.
			/// </summary>
			/// <param name="dataRowBuilder">An internal data structure used to build the row from the parent table schema.</param>
			internal SecurityRow(global::System.Data.DataRowBuilder dataRowBuilder) : 
					base(dataRowBuilder)
			{
				// This creates a strongly typed Security row using the generic construction methods.
				this.tableSecurity = ((SecurityDataTable)(this.Table));
			}
			
			/// <summary>
			/// Gets or sets the data in the AverageDailyVolume column.
			/// </summary>
			public decimal AverageDailyVolume
			{
				get
				{
					try
					{
						return ((decimal)(this[this.tableSecurity.AverageDailyVolumeColumn]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableSecurity.AverageDailyVolumeColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the CountryId column.
			/// </summary>
			public global::System.Guid CountryId
			{
				get
				{
					return ((global::System.Guid)(this[this.tableSecurity.CountryIdColumn]));
				}
				set
				{
					this[this.tableSecurity.CountryIdColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets the parent row in the Country table.
			/// </summary>
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public CountryRow CountryRow
			{
				get
				{
					return ((CountryRow)(this.GetParentRow(this.tableSecurity.CountrySecurityRelation)));
				}
			}
			
			/// <summary>
			/// Gets the parent row in the Entity table.
			/// </summary>
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public EntityRow EntityRow
			{
				get
				{
					return ((EntityRow)(this.GetParentRow(this.tableSecurity.EntitySecurityRelation)));
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the IsDerivative column.
			/// </summary>
			public bool IsDerivative
			{
				get
				{
					return ((bool)(this[this.tableSecurity.IsDerivativeColumn]));
				}
				set
				{
					this[this.tableSecurity.IsDerivativeColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the IssuerId column.
			/// </summary>
			public global::System.Guid IssuerId
			{
				get
				{
					return ((global::System.Guid)(this[this.tableSecurity.IssuerIdColumn]));
				}
				set
				{
					this[this.tableSecurity.IssuerIdColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets the parent row in the Issuer table.
			/// </summary>
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public IssuerRow IssuerRow
			{
				get
				{
					return ((IssuerRow)(this.GetParentRow(this.tableSecurity.IssuerSecurityRelation)));
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the Logo column.
			/// </summary>
			public string Logo
			{
				get
				{
					try
					{
						return ((string)(this[this.tableSecurity.LogoColumn]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableSecurity.LogoColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the MajorInstrumentTypeId column.
			/// </summary>
			public global::System.Guid MajorInstrumentTypeId
			{
				get
				{
					return ((global::System.Guid)(this[this.tableSecurity.MajorInstrumentTypeIdColumn]));
				}
				set
				{
					this[this.tableSecurity.MajorInstrumentTypeIdColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets the parent row in the MajorInstrumentType table.
			/// </summary>
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public MajorInstrumentTypeRow MajorInstrumentTypeRow
			{
				get
				{
					return ((MajorInstrumentTypeRow)(this.GetParentRow(this.tableSecurity.MajorInstrumentTypeSecurityRelation)));
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the MarketCapitalization column.
			/// </summary>
			public decimal MarketCapitalization
			{
				get
				{
					try
					{
						return ((decimal)(this[this.tableSecurity.MarketCapitalizationColumn]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableSecurity.MarketCapitalizationColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the MinimumQuantity column.
			/// </summary>
			public decimal MinimumQuantity
			{
				get
				{
					try
					{
						return ((decimal)(this[this.tableSecurity.MinimumQuantityColumn]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableSecurity.MinimumQuantityColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the MinorInstrumentTypeId column.
			/// </summary>
			public global::System.Guid MinorInstrumentTypeId
			{
				get
				{
					return ((global::System.Guid)(this[this.tableSecurity.MinorInstrumentTypeIdColumn]));
				}
				set
				{
					this[this.tableSecurity.MinorInstrumentTypeIdColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets the parent row in the MinorInstrumentType table.
			/// </summary>
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public MinorInstrumentTypeRow MinorInstrumentTypeRow
			{
				get
				{
					return ((MinorInstrumentTypeRow)(this.GetParentRow(this.tableSecurity.MinorInstrumentTypeSecurityRelation)));
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the PriceFactor column.
			/// </summary>
			public decimal PriceFactor
			{
				get
				{
					return ((decimal)(this[this.tableSecurity.PriceFactorColumn]));
				}
				set
				{
					this[this.tableSecurity.PriceFactorColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the QuantityFactor column.
			/// </summary>
			public decimal QuantityFactor
			{
				get
				{
					return ((decimal)(this[this.tableSecurity.QuantityFactorColumn]));
				}
				set
				{
					this[this.tableSecurity.QuantityFactorColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the RowVersion column.
			/// </summary>
			public long RowVersion
			{
				get
				{
					return ((long)(this[this.tableSecurity.RowVersionColumn]));
				}
				set
				{
					this[this.tableSecurity.RowVersionColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the SecurityId column.
			/// </summary>
			public global::System.Guid SecurityId
			{
				get
				{
					return ((global::System.Guid)(this[this.tableSecurity.SecurityIdColumn]));
				}
				set
				{
					this[this.tableSecurity.SecurityIdColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the Symbol column.
			/// </summary>
			public string Symbol
			{
				get
				{
					return ((string)(this[this.tableSecurity.SymbolColumn]));
				}
				set
				{
					this[this.tableSecurity.SymbolColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the VolumeCategoryCode column.
			/// </summary>
			public global::Teraque.VolumeCategoryCode VolumeCategoryCode
			{
				get
				{
					return ((global::Teraque.VolumeCategoryCode)(this[this.tableSecurity.VolumeCategoryCodeColumn]));
				}
				set
				{
					this[this.tableSecurity.VolumeCategoryCodeColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets the parent row in the VolumeCategory table.
			/// </summary>
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public VolumeCategoryRow VolumeCategoryRow
			{
				get
				{
					return ((VolumeCategoryRow)(this.GetParentRow(this.tableSecurity.VolumeCategorySecurityRelation)));
				}
			}
			
			/// <summary>
			/// Gets the children rows in the Allocation table.
			/// </summary>
			public AllocationRow[] GetAllocationRowsByFK_Security_Allocation_SecurityId()
			{
				return ((AllocationRow[])(this.GetChildRows(this.tableSecurity.SecurityAllocationByFK_Security_Allocation_SecurityIdRelation)));
			}
			
			/// <summary>
			/// Gets the children rows in the Allocation table.
			/// </summary>
			public AllocationRow[] GetAllocationRowsByFK_Security_Allocation_SettlementId()
			{
				return ((AllocationRow[])(this.GetChildRows(this.tableSecurity.SecurityAllocationByFK_Security_Allocation_SettlementIdRelation)));
			}
			
			/// <summary>
			/// Gets the children rows in the Currency table.
			/// </summary>
			public CurrencyRow[] GetCurrencyRows()
			{
				return ((CurrencyRow[])(this.GetChildRows(this.tableSecurity.SecurityCurrencyRelation)));
			}
			
			/// <summary>
			/// Gets the children rows in the Debt table.
			/// </summary>
			public DebtRow[] GetDebtRowsByFK_Security_Debt_DebtId()
			{
				return ((DebtRow[])(this.GetChildRows(this.tableSecurity.SecurityDebtByFK_Security_Debt_DebtIdRelation)));
			}
			
			/// <summary>
			/// Gets the children rows in the Debt table.
			/// </summary>
			public DebtRow[] GetDebtRowsByFK_Security_Debt_SettlementId()
			{
				return ((DebtRow[])(this.GetChildRows(this.tableSecurity.SecurityDebtByFK_Security_Debt_SettlementIdRelation)));
			}
			
			/// <summary>
			/// Gets the children rows in the DestinationOrder table.
			/// </summary>
			public DestinationOrderRow[] GetDestinationOrderRowsByFK_Security_DestinationOrder_SecurityId()
			{
				return ((DestinationOrderRow[])(this.GetChildRows(this.tableSecurity.SecurityDestinationOrderByFK_Security_DestinationOrder_SecurityIdRelation)));
			}
			
			/// <summary>
			/// Gets the children rows in the DestinationOrder table.
			/// </summary>
			public DestinationOrderRow[] GetDestinationOrderRowsByFK_Security_DestinationOrder_SettlementId()
			{
				return ((DestinationOrderRow[])(this.GetChildRows(this.tableSecurity.SecurityDestinationOrderByFK_Security_DestinationOrder_SettlementIdRelation)));
			}
			
			/// <summary>
			/// Gets the children rows in the Equity table.
			/// </summary>
			public EquityRow[] GetEquityRowsByFK_Security_Equity_EquityId()
			{
				return ((EquityRow[])(this.GetChildRows(this.tableSecurity.SecurityEquityByFK_Security_Equity_EquityIdRelation)));
			}
			
			/// <summary>
			/// Gets the children rows in the Equity table.
			/// </summary>
			public EquityRow[] GetEquityRowsByFK_Security_Equity_SettlementId()
			{
				return ((EquityRow[])(this.GetChildRows(this.tableSecurity.SecurityEquityByFK_Security_Equity_SettlementIdRelation)));
			}
			
			/// <summary>
			/// Gets the children rows in the IndustryLeaf table.
			/// </summary>
			public IndustryLeafRow[] GetIndustryLeafRows()
			{
				return ((IndustryLeafRow[])(this.GetChildRows(this.tableSecurity.SecurityIndustryLeafRelation)));
			}
			
			/// <summary>
			/// Gets the children rows in the Position table.
			/// </summary>
			public PositionRow[] GetPositionRows()
			{
				return ((PositionRow[])(this.GetChildRows(this.tableSecurity.SecurityPositionRelation)));
			}
			
			/// <summary>
			/// Gets the children rows in the PositionSeries table.
			/// </summary>
			public PositionSeriesRow[] GetPositionSeriesRows()
			{
				return ((PositionSeriesRow[])(this.GetChildRows(this.tableSecurity.SecurityPositionSeriesRelation)));
			}
			
			/// <summary>
			/// Gets the children rows in the Price table.
			/// </summary>
			public PriceRow[] GetPriceRowsByFK_Security_Price_CurrencyId()
			{
				return ((PriceRow[])(this.GetChildRows(this.tableSecurity.SecurityPriceByFK_Security_Price_CurrencyIdRelation)));
			}
			
			/// <summary>
			/// Gets the children rows in the Price table.
			/// </summary>
			public PriceRow[] GetPriceRowsByFK_Security_Price_SecurityId()
			{
				return ((PriceRow[])(this.GetChildRows(this.tableSecurity.SecurityPriceByFK_Security_Price_SecurityIdRelation)));
			}
			
			/// <summary>
			/// Gets the children rows in the SecuritySeries table.
			/// </summary>
			public SecuritySeriesRow[] GetSecuritySeriesRows()
			{
				return ((SecuritySeriesRow[])(this.GetChildRows(this.tableSecurity.SecuritySecuritySeriesRelation)));
			}
			
			/// <summary>
			/// Gets the children rows in the SourceOrder table.
			/// </summary>
			public SourceOrderRow[] GetSourceOrderRowsByFK_Security_SourceOrder_SecurityId()
			{
				return ((SourceOrderRow[])(this.GetChildRows(this.tableSecurity.SecuritySourceOrderByFK_Security_SourceOrder_SecurityIdRelation)));
			}
			
			/// <summary>
			/// Gets the children rows in the SourceOrder table.
			/// </summary>
			public SourceOrderRow[] GetSourceOrderRowsByFK_Security_SourceOrder_SettlementId()
			{
				return ((SourceOrderRow[])(this.GetChildRows(this.tableSecurity.SecuritySourceOrderByFK_Security_SourceOrder_SettlementIdRelation)));
			}
			
			/// <summary>
			/// Gets the children rows in the TaxLot table.
			/// </summary>
			public TaxLotRow[] GetTaxLotRows()
			{
				return ((TaxLotRow[])(this.GetChildRows(this.tableSecurity.SecurityTaxLotRelation)));
			}
			
			/// <summary>
			/// Gets the children rows in the TaxLotSeries table.
			/// </summary>
			public TaxLotSeriesRow[] GetTaxLotSeriesRows()
			{
				return ((TaxLotSeriesRow[])(this.GetChildRows(this.tableSecurity.SecurityTaxLotSeriesRelation)));
			}
			
			/// <summary>
			/// Gets the children rows in the WorkingOrder table.
			/// </summary>
			public WorkingOrderRow[] GetWorkingOrderRowsByFK_Security_WorkingOrder_SecurityId()
			{
				return ((WorkingOrderRow[])(this.GetChildRows(this.tableSecurity.SecurityWorkingOrderByFK_Security_WorkingOrder_SecurityIdRelation)));
			}
			
			/// <summary>
			/// Gets the children rows in the WorkingOrder table.
			/// </summary>
			public WorkingOrderRow[] GetWorkingOrderRowsByFK_Security_WorkingOrder_SettlementId()
			{
				return ((WorkingOrderRow[])(this.GetChildRows(this.tableSecurity.SecurityWorkingOrderByFK_Security_WorkingOrder_SettlementIdRelation)));
			}
			
			/// <summary>
			/// Gets the Null property of the AverageDailyVolume column.
			/// </summary>
			public bool IsAverageDailyVolumeNull()
			{
				return (this[this.tableSecurity.AverageDailyVolumeColumn] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the Logo column.
			/// </summary>
			public bool IsLogoNull()
			{
				return (this[this.tableSecurity.LogoColumn] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the MarketCapitalization column.
			/// </summary>
			public bool IsMarketCapitalizationNull()
			{
				return (this[this.tableSecurity.MarketCapitalizationColumn] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the MinimumQuantity column.
			/// </summary>
			public bool IsMinimumQuantityNull()
			{
				return (this[this.tableSecurity.MinimumQuantityColumn] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Sets the Null property of the AverageDailyVolume column.
			/// </summary>
			public void SetAverageDailyVolumeNull()
			{
				this[this.tableSecurity.AverageDailyVolumeColumn] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the Logo column.
			/// </summary>
			public void SetLogoNull()
			{
				this[this.tableSecurity.LogoColumn] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the MarketCapitalization column.
			/// </summary>
			public void SetMarketCapitalizationNull()
			{
				this[this.tableSecurity.MarketCapitalizationColumn] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the MinimumQuantity column.
			/// </summary>
			public void SetMinimumQuantityNull()
			{
				this[this.tableSecurity.MinimumQuantityColumn] = global::System.DBNull.Value;
			}
		}
		
		/// <summary>
		/// Represents a row of data in the SecuritySeries table.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		public partial class SecuritySeriesRow : global::System.Data.DataRow
		{
			
			private SecuritySeriesDataTable tableSecuritySeries;
			
			/// <summary>
			/// Creates a row of data from the SecuritySeries table schema.
			/// </summary>
			/// <param name="dataRowBuilder">An internal data structure used to build the row from the parent table schema.</param>
			internal SecuritySeriesRow(global::System.Data.DataRowBuilder dataRowBuilder) : 
					base(dataRowBuilder)
			{
				// This creates a strongly typed SecuritySeries row using the generic construction methods.
				this.tableSecuritySeries = ((SecuritySeriesDataTable)(this.Table));
			}
			
			/// <summary>
			/// Gets or sets the data in the BetaAdjustedKrd10Year column.
			/// </summary>
			public decimal BetaAdjustedKrd10Year
			{
				get
				{
					return ((decimal)(this[this.tableSecuritySeries.BetaAdjustedKrd10YearColumn]));
				}
				set
				{
					this[this.tableSecuritySeries.BetaAdjustedKrd10YearColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the BetaAdjustedKrd20Year column.
			/// </summary>
			public decimal BetaAdjustedKrd20Year
			{
				get
				{
					return ((decimal)(this[this.tableSecuritySeries.BetaAdjustedKrd20YearColumn]));
				}
				set
				{
					this[this.tableSecuritySeries.BetaAdjustedKrd20YearColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the BetaAdjustedKrd2Year column.
			/// </summary>
			public decimal BetaAdjustedKrd2Year
			{
				get
				{
					return ((decimal)(this[this.tableSecuritySeries.BetaAdjustedKrd2YearColumn]));
				}
				set
				{
					this[this.tableSecuritySeries.BetaAdjustedKrd2YearColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the BetaAdjustedKrd30Year column.
			/// </summary>
			public decimal BetaAdjustedKrd30Year
			{
				get
				{
					return ((decimal)(this[this.tableSecuritySeries.BetaAdjustedKrd30YearColumn]));
				}
				set
				{
					this[this.tableSecuritySeries.BetaAdjustedKrd30YearColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the BetaAdjustedKrd5Year column.
			/// </summary>
			public decimal BetaAdjustedKrd5Year
			{
				get
				{
					return ((decimal)(this[this.tableSecuritySeries.BetaAdjustedKrd5YearColumn]));
				}
				set
				{
					this[this.tableSecuritySeries.BetaAdjustedKrd5YearColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the BetaAdjustedKrd6Month column.
			/// </summary>
			public decimal BetaAdjustedKrd6Month
			{
				get
				{
					return ((decimal)(this[this.tableSecuritySeries.BetaAdjustedKrd6MonthColumn]));
				}
				set
				{
					this[this.tableSecuritySeries.BetaAdjustedKrd6MonthColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the Coupon column.
			/// </summary>
			public decimal Coupon
			{
				get
				{
					return ((decimal)(this[this.tableSecuritySeries.CouponColumn]));
				}
				set
				{
					this[this.tableSecuritySeries.CouponColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the CreditRatingId0 column.
			/// </summary>
			public global::System.Guid CreditRatingId0
			{
				get
				{
					return ((global::System.Guid)(this[this.tableSecuritySeries.CreditRatingId0Column]));
				}
				set
				{
					this[this.tableSecuritySeries.CreditRatingId0Column] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the CreditRatingId1 column.
			/// </summary>
			public global::System.Guid CreditRatingId1
			{
				get
				{
					return ((global::System.Guid)(this[this.tableSecuritySeries.CreditRatingId1Column]));
				}
				set
				{
					this[this.tableSecuritySeries.CreditRatingId1Column] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the CreditRatingId2 column.
			/// </summary>
			public global::System.Guid CreditRatingId2
			{
				get
				{
					return ((global::System.Guid)(this[this.tableSecuritySeries.CreditRatingId2Column]));
				}
				set
				{
					this[this.tableSecuritySeries.CreditRatingId2Column] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the CreditRatingId3 column.
			/// </summary>
			public global::System.Guid CreditRatingId3
			{
				get
				{
					return ((global::System.Guid)(this[this.tableSecuritySeries.CreditRatingId3Column]));
				}
				set
				{
					this[this.tableSecuritySeries.CreditRatingId3Column] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the CreditRatingId4 column.
			/// </summary>
			public global::System.Guid CreditRatingId4
			{
				get
				{
					return ((global::System.Guid)(this[this.tableSecuritySeries.CreditRatingId4Column]));
				}
				set
				{
					this[this.tableSecuritySeries.CreditRatingId4Column] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the CreditRatingId5 column.
			/// </summary>
			public global::System.Guid CreditRatingId5
			{
				get
				{
					return ((global::System.Guid)(this[this.tableSecuritySeries.CreditRatingId5Column]));
				}
				set
				{
					this[this.tableSecuritySeries.CreditRatingId5Column] = value;
				}
			}
			
			/// <summary>
			/// Gets the parent row in the CreditRating table.
			/// </summary>
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public CreditRatingRow CreditRatingRowByFK_CreditRating_SecuritySeries_CreditRatingId0
			{
				get
				{
					return ((CreditRatingRow)(this.GetParentRow(this.tableSecuritySeries.CreditRatingSecuritySeriesByFK_CreditRating_SecuritySeries_CreditRatingId0Relation)));
				}
			}
			
			/// <summary>
			/// Gets the parent row in the CreditRating table.
			/// </summary>
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public CreditRatingRow CreditRatingRowByFK_CreditRating_SecuritySeries_CreditRatingId1
			{
				get
				{
					return ((CreditRatingRow)(this.GetParentRow(this.tableSecuritySeries.CreditRatingSecuritySeriesByFK_CreditRating_SecuritySeries_CreditRatingId1Relation)));
				}
			}
			
			/// <summary>
			/// Gets the parent row in the CreditRating table.
			/// </summary>
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public CreditRatingRow CreditRatingRowByFK_CreditRating_SecuritySeries_CreditRatingId2
			{
				get
				{
					return ((CreditRatingRow)(this.GetParentRow(this.tableSecuritySeries.CreditRatingSecuritySeriesByFK_CreditRating_SecuritySeries_CreditRatingId2Relation)));
				}
			}
			
			/// <summary>
			/// Gets the parent row in the CreditRating table.
			/// </summary>
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public CreditRatingRow CreditRatingRowByFK_CreditRating_SecuritySeries_CreditRatingId3
			{
				get
				{
					return ((CreditRatingRow)(this.GetParentRow(this.tableSecuritySeries.CreditRatingSecuritySeriesByFK_CreditRating_SecuritySeries_CreditRatingId3Relation)));
				}
			}
			
			/// <summary>
			/// Gets the parent row in the CreditRating table.
			/// </summary>
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public CreditRatingRow CreditRatingRowByFK_CreditRating_SecuritySeries_CreditRatingId4
			{
				get
				{
					return ((CreditRatingRow)(this.GetParentRow(this.tableSecuritySeries.CreditRatingSecuritySeriesByFK_CreditRating_SecuritySeries_CreditRatingId4Relation)));
				}
			}
			
			/// <summary>
			/// Gets the parent row in the CreditRating table.
			/// </summary>
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public CreditRatingRow CreditRatingRowByFK_CreditRating_SecuritySeries_CreditRatingId5
			{
				get
				{
					return ((CreditRatingRow)(this.GetParentRow(this.tableSecuritySeries.CreditRatingSecuritySeriesByFK_CreditRating_SecuritySeries_CreditRatingId5Relation)));
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the CurrentYield column.
			/// </summary>
			public decimal CurrentYield
			{
				get
				{
					return ((decimal)(this[this.tableSecuritySeries.CurrentYieldColumn]));
				}
				set
				{
					this[this.tableSecuritySeries.CurrentYieldColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the Date column.
			/// </summary>
			public global::System.DateTime Date
			{
				get
				{
					return ((global::System.DateTime)(this[this.tableSecuritySeries.DateColumn]));
				}
				set
				{
					this[this.tableSecuritySeries.DateColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the EffectiveConvexity column.
			/// </summary>
			public decimal EffectiveConvexity
			{
				get
				{
					return ((decimal)(this[this.tableSecuritySeries.EffectiveConvexityColumn]));
				}
				set
				{
					this[this.tableSecuritySeries.EffectiveConvexityColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the EffectiveDuration column.
			/// </summary>
			public decimal EffectiveDuration
			{
				get
				{
					return ((decimal)(this[this.tableSecuritySeries.EffectiveDurationColumn]));
				}
				set
				{
					this[this.tableSecuritySeries.EffectiveDurationColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the ExternalId0 column.
			/// </summary>
			public string ExternalId0
			{
				get
				{
					try
					{
						return ((string)(this[this.tableSecuritySeries.ExternalId0Column]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableSecuritySeries.ExternalId0Column] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the ExternalId1 column.
			/// </summary>
			public string ExternalId1
			{
				get
				{
					try
					{
						return ((string)(this[this.tableSecuritySeries.ExternalId1Column]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableSecuritySeries.ExternalId1Column] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the ModifiedDurationToWorst column.
			/// </summary>
			public decimal ModifiedDurationToWorst
			{
				get
				{
					return ((decimal)(this[this.tableSecuritySeries.ModifiedDurationToWorstColumn]));
				}
				set
				{
					this[this.tableSecuritySeries.ModifiedDurationToWorstColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the ModifiedOptionAdjustedDuration column.
			/// </summary>
			public decimal ModifiedOptionAdjustedDuration
			{
				get
				{
					return ((decimal)(this[this.tableSecuritySeries.ModifiedOptionAdjustedDurationColumn]));
				}
				set
				{
					this[this.tableSecuritySeries.ModifiedOptionAdjustedDurationColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the MssaBucketId column.
			/// </summary>
			public global::System.Guid MssaBucketId
			{
				get
				{
					return ((global::System.Guid)(this[this.tableSecuritySeries.MssaBucketIdColumn]));
				}
				set
				{
					this[this.tableSecuritySeries.MssaBucketIdColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets the parent row in the MssaBucket table.
			/// </summary>
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public MssaBucketRow MssaBucketRow
			{
				get
				{
					return ((MssaBucketRow)(this.GetParentRow(this.tableSecuritySeries.MssaBucketSecuritySeriesRelation)));
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the OptionAdjustedDuration column.
			/// </summary>
			public decimal OptionAdjustedDuration
			{
				get
				{
					return ((decimal)(this[this.tableSecuritySeries.OptionAdjustedDurationColumn]));
				}
				set
				{
					this[this.tableSecuritySeries.OptionAdjustedDurationColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the OptionAdjustedSpread column.
			/// </summary>
			public decimal OptionAdjustedSpread
			{
				get
				{
					return ((decimal)(this[this.tableSecuritySeries.OptionAdjustedSpreadColumn]));
				}
				set
				{
					this[this.tableSecuritySeries.OptionAdjustedSpreadColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the OptionAdjustedSpreadDuration column.
			/// </summary>
			public decimal OptionAdjustedSpreadDuration
			{
				get
				{
					return ((decimal)(this[this.tableSecuritySeries.OptionAdjustedSpreadDurationColumn]));
				}
				set
				{
					this[this.tableSecuritySeries.OptionAdjustedSpreadDurationColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the OptionAdjustedYieldToWorst column.
			/// </summary>
			public decimal OptionAdjustedYieldToWorst
			{
				get
				{
					return ((decimal)(this[this.tableSecuritySeries.OptionAdjustedYieldToWorstColumn]));
				}
				set
				{
					this[this.tableSecuritySeries.OptionAdjustedYieldToWorstColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the RowVersion column.
			/// </summary>
			public long RowVersion
			{
				get
				{
					return ((long)(this[this.tableSecuritySeries.RowVersionColumn]));
				}
				set
				{
					this[this.tableSecuritySeries.RowVersionColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the SecurityId column.
			/// </summary>
			public global::System.Guid SecurityId
			{
				get
				{
					return ((global::System.Guid)(this[this.tableSecuritySeries.SecurityIdColumn]));
				}
				set
				{
					this[this.tableSecuritySeries.SecurityIdColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets the parent row in the Security table.
			/// </summary>
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public SecurityRow SecurityRow
			{
				get
				{
					return ((SecurityRow)(this.GetParentRow(this.tableSecuritySeries.SecuritySecuritySeriesRelation)));
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the SecuritySeriesId column.
			/// </summary>
			public global::System.Guid SecuritySeriesId
			{
				get
				{
					return ((global::System.Guid)(this[this.tableSecuritySeries.SecuritySeriesIdColumn]));
				}
				set
				{
					this[this.tableSecuritySeries.SecuritySeriesIdColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the SubordinateTypeCode column.
			/// </summary>
			public global::Teraque.SubordinateTypeCode SubordinateTypeCode
			{
				get
				{
					return ((global::Teraque.SubordinateTypeCode)(this[this.tableSecuritySeries.SubordinateTypeCodeColumn]));
				}
				set
				{
					this[this.tableSecuritySeries.SubordinateTypeCodeColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets the parent row in the SubordinateType table.
			/// </summary>
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public SubordinateTypeRow SubordinateTypeRow
			{
				get
				{
					return ((SubordinateTypeRow)(this.GetParentRow(this.tableSecuritySeries.SubordinateTypeSecuritySeriesRelation)));
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the YearsToAverageLife column.
			/// </summary>
			public decimal YearsToAverageLife
			{
				get
				{
					return ((decimal)(this[this.tableSecuritySeries.YearsToAverageLifeColumn]));
				}
				set
				{
					this[this.tableSecuritySeries.YearsToAverageLifeColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the YearsToMaturity column.
			/// </summary>
			public decimal YearsToMaturity
			{
				get
				{
					return ((decimal)(this[this.tableSecuritySeries.YearsToMaturityColumn]));
				}
				set
				{
					this[this.tableSecuritySeries.YearsToMaturityColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the YieldToEffectiveMaturity column.
			/// </summary>
			public decimal YieldToEffectiveMaturity
			{
				get
				{
					return ((decimal)(this[this.tableSecuritySeries.YieldToEffectiveMaturityColumn]));
				}
				set
				{
					this[this.tableSecuritySeries.YieldToEffectiveMaturityColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the YieldToMaturity column.
			/// </summary>
			public decimal YieldToMaturity
			{
				get
				{
					return ((decimal)(this[this.tableSecuritySeries.YieldToMaturityColumn]));
				}
				set
				{
					this[this.tableSecuritySeries.YieldToMaturityColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the YieldToWorst column.
			/// </summary>
			public decimal YieldToWorst
			{
				get
				{
					return ((decimal)(this[this.tableSecuritySeries.YieldToWorstColumn]));
				}
				set
				{
					this[this.tableSecuritySeries.YieldToWorstColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets the children rows in the PositionSeries table.
			/// </summary>
			public PositionSeriesRow[] GetPositionSeriesRows()
			{
				return ((PositionSeriesRow[])(this.GetChildRows(this.tableSecuritySeries.SecuritySeriesPositionSeriesRelation)));
			}
			
			/// <summary>
			/// Gets the children rows in the TaxLotSeries table.
			/// </summary>
			public TaxLotSeriesRow[] GetTaxLotSeriesRows()
			{
				return ((TaxLotSeriesRow[])(this.GetChildRows(this.tableSecuritySeries.SecuritySeriesTaxLotSeriesRelation)));
			}
			
			/// <summary>
			/// Gets the Null property of the ExternalId0 column.
			/// </summary>
			public bool IsExternalId0Null()
			{
				return (this[this.tableSecuritySeries.ExternalId0Column] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the ExternalId1 column.
			/// </summary>
			public bool IsExternalId1Null()
			{
				return (this[this.tableSecuritySeries.ExternalId1Column] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Sets the Null property of the ExternalId0 column.
			/// </summary>
			public void SetExternalId0Null()
			{
				this[this.tableSecuritySeries.ExternalId0Column] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the ExternalId1 column.
			/// </summary>
			public void SetExternalId1Null()
			{
				this[this.tableSecuritySeries.ExternalId1Column] = global::System.DBNull.Value;
			}
		}
		
		/// <summary>
		/// Represents a row of data in the SettlementUnit table.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		public partial class SettlementUnitRow : global::System.Data.DataRow
		{
			
			private SettlementUnitDataTable tableSettlementUnit;
			
			/// <summary>
			/// Creates a row of data from the SettlementUnit table schema.
			/// </summary>
			/// <param name="dataRowBuilder">An internal data structure used to build the row from the parent table schema.</param>
			internal SettlementUnitRow(global::System.Data.DataRowBuilder dataRowBuilder) : 
					base(dataRowBuilder)
			{
				// This creates a strongly typed SettlementUnit row using the generic construction methods.
				this.tableSettlementUnit = ((SettlementUnitDataTable)(this.Table));
			}
			
			/// <summary>
			/// Gets or sets the data in the Description column.
			/// </summary>
			public string Description
			{
				get
				{
					try
					{
						return ((string)(this[this.tableSettlementUnit.DescriptionColumn]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableSettlementUnit.DescriptionColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the ExternalId0 column.
			/// </summary>
			public string ExternalId0
			{
				get
				{
					try
					{
						return ((string)(this[this.tableSettlementUnit.ExternalId0Column]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableSettlementUnit.ExternalId0Column] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the Name column.
			/// </summary>
			public string Name
			{
				get
				{
					try
					{
						return ((string)(this[this.tableSettlementUnit.NameColumn]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableSettlementUnit.NameColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the RowVersion column.
			/// </summary>
			public long RowVersion
			{
				get
				{
					return ((long)(this[this.tableSettlementUnit.RowVersionColumn]));
				}
				set
				{
					this[this.tableSettlementUnit.RowVersionColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the SettlementUnitCode column.
			/// </summary>
			public global::Teraque.SettlementUnitCode SettlementUnitCode
			{
				get
				{
					return ((global::Teraque.SettlementUnitCode)(this[this.tableSettlementUnit.SettlementUnitCodeColumn]));
				}
				set
				{
					this[this.tableSettlementUnit.SettlementUnitCodeColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets the Null property of the Description column.
			/// </summary>
			public bool IsDescriptionNull()
			{
				return (this[this.tableSettlementUnit.DescriptionColumn] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the ExternalId0 column.
			/// </summary>
			public bool IsExternalId0Null()
			{
				return (this[this.tableSettlementUnit.ExternalId0Column] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the Name column.
			/// </summary>
			public bool IsNameNull()
			{
				return (this[this.tableSettlementUnit.NameColumn] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Sets the Null property of the Description column.
			/// </summary>
			public void SetDescriptionNull()
			{
				this[this.tableSettlementUnit.DescriptionColumn] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the ExternalId0 column.
			/// </summary>
			public void SetExternalId0Null()
			{
				this[this.tableSettlementUnit.ExternalId0Column] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the Name column.
			/// </summary>
			public void SetNameNull()
			{
				this[this.tableSettlementUnit.NameColumn] = global::System.DBNull.Value;
			}
		}
		
		/// <summary>
		/// Represents a row of data in the Side table.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		public partial class SideRow : global::System.Data.DataRow
		{
			
			private SideDataTable tableSide;
			
			/// <summary>
			/// Creates a row of data from the Side table schema.
			/// </summary>
			/// <param name="dataRowBuilder">An internal data structure used to build the row from the parent table schema.</param>
			internal SideRow(global::System.Data.DataRowBuilder dataRowBuilder) : 
					base(dataRowBuilder)
			{
				// This creates a strongly typed Side row using the generic construction methods.
				this.tableSide = ((SideDataTable)(this.Table));
			}
			
			/// <summary>
			/// Gets or sets the data in the CashSign column.
			/// </summary>
			public decimal CashSign
			{
				get
				{
					return ((decimal)(this[this.tableSide.CashSignColumn]));
				}
				set
				{
					this[this.tableSide.CashSignColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the Description column.
			/// </summary>
			public string Description
			{
				get
				{
					return ((string)(this[this.tableSide.DescriptionColumn]));
				}
				set
				{
					this[this.tableSide.DescriptionColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the ExternalId0 column.
			/// </summary>
			public string ExternalId0
			{
				get
				{
					try
					{
						return ((string)(this[this.tableSide.ExternalId0Column]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableSide.ExternalId0Column] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the ExternalId1 column.
			/// </summary>
			public string ExternalId1
			{
				get
				{
					try
					{
						return ((string)(this[this.tableSide.ExternalId1Column]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableSide.ExternalId1Column] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the ExternalId2 column.
			/// </summary>
			public string ExternalId2
			{
				get
				{
					try
					{
						return ((string)(this[this.tableSide.ExternalId2Column]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableSide.ExternalId2Column] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the ExternalId3 column.
			/// </summary>
			public string ExternalId3
			{
				get
				{
					try
					{
						return ((string)(this[this.tableSide.ExternalId3Column]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableSide.ExternalId3Column] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the Image column.
			/// </summary>
			public string Image
			{
				get
				{
					return ((string)(this[this.tableSide.ImageColumn]));
				}
				set
				{
					this[this.tableSide.ImageColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the Mnemonic column.
			/// </summary>
			public string Mnemonic
			{
				get
				{
					return ((string)(this[this.tableSide.MnemonicColumn]));
				}
				set
				{
					this[this.tableSide.MnemonicColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the QuantitySign column.
			/// </summary>
			public decimal QuantitySign
			{
				get
				{
					return ((decimal)(this[this.tableSide.QuantitySignColumn]));
				}
				set
				{
					this[this.tableSide.QuantitySignColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the RowVersion column.
			/// </summary>
			public long RowVersion
			{
				get
				{
					return ((long)(this[this.tableSide.RowVersionColumn]));
				}
				set
				{
					this[this.tableSide.RowVersionColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the SideCode column.
			/// </summary>
			public global::Teraque.SideCode SideCode
			{
				get
				{
					return ((global::Teraque.SideCode)(this[this.tableSide.SideCodeColumn]));
				}
				set
				{
					this[this.tableSide.SideCodeColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the SortOrder column.
			/// </summary>
			public int SortOrder
			{
				get
				{
					return ((int)(this[this.tableSide.SortOrderColumn]));
				}
				set
				{
					this[this.tableSide.SortOrderColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets the children rows in the Allocation table.
			/// </summary>
			public AllocationRow[] GetAllocationRows()
			{
				return ((AllocationRow[])(this.GetChildRows(this.tableSide.SideAllocationRelation)));
			}
			
			/// <summary>
			/// Gets the children rows in the DestinationOrder table.
			/// </summary>
			public DestinationOrderRow[] GetDestinationOrderRows()
			{
				return ((DestinationOrderRow[])(this.GetChildRows(this.tableSide.SideDestinationOrderRelation)));
			}
			
			/// <summary>
			/// Gets the children rows in the SourceOrder table.
			/// </summary>
			public SourceOrderRow[] GetSourceOrderRows()
			{
				return ((SourceOrderRow[])(this.GetChildRows(this.tableSide.SideSourceOrderRelation)));
			}
			
			/// <summary>
			/// Gets the children rows in the WorkingOrder table.
			/// </summary>
			public WorkingOrderRow[] GetWorkingOrderRows()
			{
				return ((WorkingOrderRow[])(this.GetChildRows(this.tableSide.SideWorkingOrderRelation)));
			}
			
			/// <summary>
			/// Gets the Null property of the ExternalId0 column.
			/// </summary>
			public bool IsExternalId0Null()
			{
				return (this[this.tableSide.ExternalId0Column] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the ExternalId1 column.
			/// </summary>
			public bool IsExternalId1Null()
			{
				return (this[this.tableSide.ExternalId1Column] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the ExternalId2 column.
			/// </summary>
			public bool IsExternalId2Null()
			{
				return (this[this.tableSide.ExternalId2Column] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the ExternalId3 column.
			/// </summary>
			public bool IsExternalId3Null()
			{
				return (this[this.tableSide.ExternalId3Column] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Sets the Null property of the ExternalId0 column.
			/// </summary>
			public void SetExternalId0Null()
			{
				this[this.tableSide.ExternalId0Column] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the ExternalId1 column.
			/// </summary>
			public void SetExternalId1Null()
			{
				this[this.tableSide.ExternalId1Column] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the ExternalId2 column.
			/// </summary>
			public void SetExternalId2Null()
			{
				this[this.tableSide.ExternalId2Column] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the ExternalId3 column.
			/// </summary>
			public void SetExternalId3Null()
			{
				this[this.tableSide.ExternalId3Column] = global::System.DBNull.Value;
			}
		}
		
		/// <summary>
		/// Represents a row of data in the SingleAccount table.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		public partial class SingleAccountRow : global::System.Data.DataRow
		{
			
			private SingleAccountDataTable tableSingleAccount;
			
			/// <summary>
			/// Creates a row of data from the SingleAccount table schema.
			/// </summary>
			/// <param name="dataRowBuilder">An internal data structure used to build the row from the parent table schema.</param>
			internal SingleAccountRow(global::System.Data.DataRowBuilder dataRowBuilder) : 
					base(dataRowBuilder)
			{
				// This creates a strongly typed SingleAccount row using the generic construction methods.
				this.tableSingleAccount = ((SingleAccountDataTable)(this.Table));
			}
			
			/// <summary>
			/// Gets the parent row in the Account table.
			/// </summary>
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public AccountRow AccountRow
			{
				get
				{
					return ((AccountRow)(this.GetParentRow(this.tableSingleAccount.AccountSingleAccountRelation)));
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the Address0 column.
			/// </summary>
			public string Address0
			{
				get
				{
					try
					{
						return ((string)(this[this.tableSingleAccount.Address0Column]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableSingleAccount.Address0Column] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the Address1 column.
			/// </summary>
			public string Address1
			{
				get
				{
					try
					{
						return ((string)(this[this.tableSingleAccount.Address1Column]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableSingleAccount.Address1Column] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the City column.
			/// </summary>
			public string City
			{
				get
				{
					try
					{
						return ((string)(this[this.tableSingleAccount.CityColumn]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableSingleAccount.CityColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the CountryId column.
			/// </summary>
			public global::System.Guid CountryId
			{
				get
				{
					try
					{
						return ((global::System.Guid)(this[this.tableSingleAccount.CountryIdColumn]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableSingleAccount.CountryIdColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets the parent row in the Country table.
			/// </summary>
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public CountryRow CountryRow
			{
				get
				{
					return ((CountryRow)(this.GetParentRow(this.tableSingleAccount.CountrySingleAccountRelation)));
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the LotHandlingCode column.
			/// </summary>
			public global::Teraque.LotHandlingCode LotHandlingCode
			{
				get
				{
					return ((global::Teraque.LotHandlingCode)(this[this.tableSingleAccount.LotHandlingCodeColumn]));
				}
				set
				{
					this[this.tableSingleAccount.LotHandlingCodeColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets the parent row in the LotHandling table.
			/// </summary>
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public LotHandlingRow LotHandlingRow
			{
				get
				{
					return ((LotHandlingRow)(this.GetParentRow(this.tableSingleAccount.LotHandlingSingleAccountRelation)));
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the PostalCode column.
			/// </summary>
			public string PostalCode
			{
				get
				{
					try
					{
						return ((string)(this[this.tableSingleAccount.PostalCodeColumn]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableSingleAccount.PostalCodeColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the ProvinceId column.
			/// </summary>
			public global::System.Guid ProvinceId
			{
				get
				{
					try
					{
						return ((global::System.Guid)(this[this.tableSingleAccount.ProvinceIdColumn]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableSingleAccount.ProvinceIdColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets the parent row in the Province table.
			/// </summary>
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public ProvinceRow ProvinceRow
			{
				get
				{
					return ((ProvinceRow)(this.GetParentRow(this.tableSingleAccount.ProvinceSingleAccountRelation)));
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the RowVersion column.
			/// </summary>
			public long RowVersion
			{
				get
				{
					return ((long)(this[this.tableSingleAccount.RowVersionColumn]));
				}
				set
				{
					this[this.tableSingleAccount.RowVersionColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the SingleAccountId column.
			/// </summary>
			public global::System.Guid SingleAccountId
			{
				get
				{
					return ((global::System.Guid)(this[this.tableSingleAccount.SingleAccountIdColumn]));
				}
				set
				{
					this[this.tableSingleAccount.SingleAccountIdColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets the Null property of the Address0 column.
			/// </summary>
			public bool IsAddress0Null()
			{
				return (this[this.tableSingleAccount.Address0Column] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the Address1 column.
			/// </summary>
			public bool IsAddress1Null()
			{
				return (this[this.tableSingleAccount.Address1Column] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the City column.
			/// </summary>
			public bool IsCityNull()
			{
				return (this[this.tableSingleAccount.CityColumn] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the CountryId column.
			/// </summary>
			public bool IsCountryIdNull()
			{
				return (this[this.tableSingleAccount.CountryIdColumn] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the PostalCode column.
			/// </summary>
			public bool IsPostalCodeNull()
			{
				return (this[this.tableSingleAccount.PostalCodeColumn] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the ProvinceId column.
			/// </summary>
			public bool IsProvinceIdNull()
			{
				return (this[this.tableSingleAccount.ProvinceIdColumn] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Sets the Null property of the Address0 column.
			/// </summary>
			public void SetAddress0Null()
			{
				this[this.tableSingleAccount.Address0Column] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the Address1 column.
			/// </summary>
			public void SetAddress1Null()
			{
				this[this.tableSingleAccount.Address1Column] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the City column.
			/// </summary>
			public void SetCityNull()
			{
				this[this.tableSingleAccount.CityColumn] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the CountryId column.
			/// </summary>
			public void SetCountryIdNull()
			{
				this[this.tableSingleAccount.CountryIdColumn] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the PostalCode column.
			/// </summary>
			public void SetPostalCodeNull()
			{
				this[this.tableSingleAccount.PostalCodeColumn] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the ProvinceId column.
			/// </summary>
			public void SetProvinceIdNull()
			{
				this[this.tableSingleAccount.ProvinceIdColumn] = global::System.DBNull.Value;
			}
		}
		
		/// <summary>
		/// Represents a row of data in the Source table.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		public partial class SourceRow : global::System.Data.DataRow
		{
			
			private SourceDataTable tableSource;
			
			/// <summary>
			/// Creates a row of data from the Source table schema.
			/// </summary>
			/// <param name="dataRowBuilder">An internal data structure used to build the row from the parent table schema.</param>
			internal SourceRow(global::System.Data.DataRowBuilder dataRowBuilder) : 
					base(dataRowBuilder)
			{
				// This creates a strongly typed Source row using the generic construction methods.
				this.tableSource = ((SourceDataTable)(this.Table));
			}
			
			/// <summary>
			/// Gets or sets the data in the AdvertisementSchemaId column.
			/// </summary>
			public global::System.Guid AdvertisementSchemaId
			{
				get
				{
					try
					{
						return ((global::System.Guid)(this[this.tableSource.AdvertisementSchemaIdColumn]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableSource.AdvertisementSchemaIdColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets the parent row in the Blotter table.
			/// </summary>
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public BlotterRow BlotterRow
			{
				get
				{
					return ((BlotterRow)(this.GetParentRow(this.tableSource.BlotterSourceRelation)));
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the BuyMarketValueThreshold column.
			/// </summary>
			public decimal BuyMarketValueThreshold
			{
				get
				{
					try
					{
						return ((decimal)(this[this.tableSource.BuyMarketValueThresholdColumn]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableSource.BuyMarketValueThresholdColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the BuyQuantityThreshold column.
			/// </summary>
			public decimal BuyQuantityThreshold
			{
				get
				{
					try
					{
						return ((decimal)(this[this.tableSource.BuyQuantityThresholdColumn]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableSource.BuyQuantityThresholdColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the PartyTypeCode column.
			/// </summary>
			public global::Teraque.PartyTypeCode PartyTypeCode
			{
				get
				{
					return ((global::Teraque.PartyTypeCode)(this[this.tableSource.PartyTypeCodeColumn]));
				}
				set
				{
					this[this.tableSource.PartyTypeCodeColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the RowVersion column.
			/// </summary>
			public long RowVersion
			{
				get
				{
					return ((long)(this[this.tableSource.RowVersionColumn]));
				}
				set
				{
					this[this.tableSource.RowVersionColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the SellMarketValueThreshold column.
			/// </summary>
			public decimal SellMarketValueThreshold
			{
				get
				{
					try
					{
						return ((decimal)(this[this.tableSource.SellMarketValueThresholdColumn]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableSource.SellMarketValueThresholdColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the SellQuantityThreshold column.
			/// </summary>
			public decimal SellQuantityThreshold
			{
				get
				{
					try
					{
						return ((decimal)(this[this.tableSource.SellQuantityThresholdColumn]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableSource.SellQuantityThresholdColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the ShortName column.
			/// </summary>
			public string ShortName
			{
				get
				{
					return ((string)(this[this.tableSource.ShortNameColumn]));
				}
				set
				{
					this[this.tableSource.ShortNameColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the SourceId column.
			/// </summary>
			public global::System.Guid SourceId
			{
				get
				{
					return ((global::System.Guid)(this[this.tableSource.SourceIdColumn]));
				}
				set
				{
					this[this.tableSource.SourceIdColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets the children rows in the Broker table.
			/// </summary>
			public BrokerRow[] GetBrokerRows()
			{
				return ((BrokerRow[])(this.GetChildRows(this.tableSource.SourceBrokerRelation)));
			}
			
			/// <summary>
			/// Gets the children rows in the Institution table.
			/// </summary>
			public InstitutionRow[] GetInstitutionRows()
			{
				return ((InstitutionRow[])(this.GetChildRows(this.tableSource.SourceInstitutionRelation)));
			}
			
			/// <summary>
			/// Gets the Null property of the AdvertisementSchemaId column.
			/// </summary>
			public bool IsAdvertisementSchemaIdNull()
			{
				return (this[this.tableSource.AdvertisementSchemaIdColumn] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the BuyMarketValueThreshold column.
			/// </summary>
			public bool IsBuyMarketValueThresholdNull()
			{
				return (this[this.tableSource.BuyMarketValueThresholdColumn] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the BuyQuantityThreshold column.
			/// </summary>
			public bool IsBuyQuantityThresholdNull()
			{
				return (this[this.tableSource.BuyQuantityThresholdColumn] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the SellMarketValueThreshold column.
			/// </summary>
			public bool IsSellMarketValueThresholdNull()
			{
				return (this[this.tableSource.SellMarketValueThresholdColumn] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the SellQuantityThreshold column.
			/// </summary>
			public bool IsSellQuantityThresholdNull()
			{
				return (this[this.tableSource.SellQuantityThresholdColumn] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Sets the Null property of the AdvertisementSchemaId column.
			/// </summary>
			public void SetAdvertisementSchemaIdNull()
			{
				this[this.tableSource.AdvertisementSchemaIdColumn] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the BuyMarketValueThreshold column.
			/// </summary>
			public void SetBuyMarketValueThresholdNull()
			{
				this[this.tableSource.BuyMarketValueThresholdColumn] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the BuyQuantityThreshold column.
			/// </summary>
			public void SetBuyQuantityThresholdNull()
			{
				this[this.tableSource.BuyQuantityThresholdColumn] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the SellMarketValueThreshold column.
			/// </summary>
			public void SetSellMarketValueThresholdNull()
			{
				this[this.tableSource.SellMarketValueThresholdColumn] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the SellQuantityThreshold column.
			/// </summary>
			public void SetSellQuantityThresholdNull()
			{
				this[this.tableSource.SellQuantityThresholdColumn] = global::System.DBNull.Value;
			}
		}
		
		/// <summary>
		/// Represents a row of data in the SourceOrder table.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		public partial class SourceOrderRow : global::System.Data.DataRow
		{
			
			private SourceOrderDataTable tableSourceOrder;
			
			/// <summary>
			/// Creates a row of data from the SourceOrder table schema.
			/// </summary>
			/// <param name="dataRowBuilder">An internal data structure used to build the row from the parent table schema.</param>
			internal SourceOrderRow(global::System.Data.DataRowBuilder dataRowBuilder) : 
					base(dataRowBuilder)
			{
				// This creates a strongly typed SourceOrder row using the generic construction methods.
				this.tableSourceOrder = ((SourceOrderDataTable)(this.Table));
			}
			
			/// <summary>
			/// Gets or sets the data in the CreatedTime column.
			/// </summary>
			public global::System.DateTime CreatedTime
			{
				get
				{
					return ((global::System.DateTime)(this[this.tableSourceOrder.CreatedTimeColumn]));
				}
				set
				{
					this[this.tableSourceOrder.CreatedTimeColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the CreatedUserId column.
			/// </summary>
			public global::System.Guid CreatedUserId
			{
				get
				{
					return ((global::System.Guid)(this[this.tableSourceOrder.CreatedUserIdColumn]));
				}
				set
				{
					this[this.tableSourceOrder.CreatedUserIdColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the DestinationId column.
			/// </summary>
			public global::System.Guid DestinationId
			{
				get
				{
					try
					{
						return ((global::System.Guid)(this[this.tableSourceOrder.DestinationIdColumn]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableSourceOrder.DestinationIdColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets the parent row in the Destination table.
			/// </summary>
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public DestinationRow DestinationRow
			{
				get
				{
					return ((DestinationRow)(this.GetParentRow(this.tableSourceOrder.DestinationSourceOrderRelation)));
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the ExternalId0 column.
			/// </summary>
			public string ExternalId0
			{
				get
				{
					try
					{
						return ((string)(this[this.tableSourceOrder.ExternalId0Column]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableSourceOrder.ExternalId0Column] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the IsAdvertised column.
			/// </summary>
			public bool IsAdvertised
			{
				get
				{
					return ((bool)(this[this.tableSourceOrder.IsAdvertisedColumn]));
				}
				set
				{
					this[this.tableSourceOrder.IsAdvertisedColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the IsAutoExecute column.
			/// </summary>
			public bool IsAutoExecute
			{
				get
				{
					return ((bool)(this[this.tableSourceOrder.IsAutoExecuteColumn]));
				}
				set
				{
					this[this.tableSourceOrder.IsAutoExecuteColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the IsCanceled column.
			/// </summary>
			public bool IsCanceled
			{
				get
				{
					return ((bool)(this[this.tableSourceOrder.IsCanceledColumn]));
				}
				set
				{
					this[this.tableSourceOrder.IsCanceledColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the IsHeld column.
			/// </summary>
			public bool IsHeld
			{
				get
				{
					return ((bool)(this[this.tableSourceOrder.IsHeldColumn]));
				}
				set
				{
					this[this.tableSourceOrder.IsHeldColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the IsSteppedIn column.
			/// </summary>
			public bool IsSteppedIn
			{
				get
				{
					return ((bool)(this[this.tableSourceOrder.IsSteppedInColumn]));
				}
				set
				{
					this[this.tableSourceOrder.IsSteppedInColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the IsSubmitted column.
			/// </summary>
			public bool IsSubmitted
			{
				get
				{
					return ((bool)(this[this.tableSourceOrder.IsSubmittedColumn]));
				}
				set
				{
					this[this.tableSourceOrder.IsSubmittedColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the LimitPrice column.
			/// </summary>
			public decimal LimitPrice
			{
				get
				{
					try
					{
						return ((decimal)(this[this.tableSourceOrder.LimitPriceColumn]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableSourceOrder.LimitPriceColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the MaximumVolatility column.
			/// </summary>
			public decimal MaximumVolatility
			{
				get
				{
					try
					{
						return ((decimal)(this[this.tableSourceOrder.MaximumVolatilityColumn]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableSourceOrder.MaximumVolatilityColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the ModifiedTime column.
			/// </summary>
			public global::System.DateTime ModifiedTime
			{
				get
				{
					return ((global::System.DateTime)(this[this.tableSourceOrder.ModifiedTimeColumn]));
				}
				set
				{
					this[this.tableSourceOrder.ModifiedTimeColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the ModifiedUserId column.
			/// </summary>
			public global::System.Guid ModifiedUserId
			{
				get
				{
					return ((global::System.Guid)(this[this.tableSourceOrder.ModifiedUserIdColumn]));
				}
				set
				{
					this[this.tableSourceOrder.ModifiedUserIdColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the NewsFreeTime column.
			/// </summary>
			public int NewsFreeTime
			{
				get
				{
					try
					{
						return ((int)(this[this.tableSourceOrder.NewsFreeTimeColumn]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableSourceOrder.NewsFreeTimeColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the OrderedQuantity column.
			/// </summary>
			public decimal OrderedQuantity
			{
				get
				{
					return ((decimal)(this[this.tableSourceOrder.OrderedQuantityColumn]));
				}
				set
				{
					this[this.tableSourceOrder.OrderedQuantityColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the OrderTypeCode column.
			/// </summary>
			public global::Teraque.OrderTypeCode OrderTypeCode
			{
				get
				{
					return ((global::Teraque.OrderTypeCode)(this[this.tableSourceOrder.OrderTypeCodeColumn]));
				}
				set
				{
					this[this.tableSourceOrder.OrderTypeCodeColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets the parent row in the OrderType table.
			/// </summary>
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public OrderTypeRow OrderTypeRow
			{
				get
				{
					return ((OrderTypeRow)(this.GetParentRow(this.tableSourceOrder.OrderTypeSourceOrderRelation)));
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the ReceivedTime column.
			/// </summary>
			public string ReceivedTime
			{
				get
				{
					try
					{
						return ((string)(this[this.tableSourceOrder.ReceivedTimeColumn]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableSourceOrder.ReceivedTimeColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the RowVersion column.
			/// </summary>
			public long RowVersion
			{
				get
				{
					return ((long)(this[this.tableSourceOrder.RowVersionColumn]));
				}
				set
				{
					this[this.tableSourceOrder.RowVersionColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the SecurityId column.
			/// </summary>
			public global::System.Guid SecurityId
			{
				get
				{
					return ((global::System.Guid)(this[this.tableSourceOrder.SecurityIdColumn]));
				}
				set
				{
					this[this.tableSourceOrder.SecurityIdColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets the parent row in the Security table.
			/// </summary>
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public SecurityRow SecurityRowByFK_Security_SourceOrder_SecurityId
			{
				get
				{
					return ((SecurityRow)(this.GetParentRow(this.tableSourceOrder.SecuritySourceOrderByFK_Security_SourceOrder_SecurityIdRelation)));
				}
			}
			
			/// <summary>
			/// Gets the parent row in the Security table.
			/// </summary>
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public SecurityRow SecurityRowByFK_Security_SourceOrder_SettlementId
			{
				get
				{
					return ((SecurityRow)(this.GetParentRow(this.tableSourceOrder.SecuritySourceOrderByFK_Security_SourceOrder_SettlementIdRelation)));
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the SettlementDate column.
			/// </summary>
			public global::System.DateTime SettlementDate
			{
				get
				{
					try
					{
						return ((global::System.DateTime)(this[this.tableSourceOrder.SettlementDateColumn]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableSourceOrder.SettlementDateColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the SettlementId column.
			/// </summary>
			public global::System.Guid SettlementId
			{
				get
				{
					try
					{
						return ((global::System.Guid)(this[this.tableSourceOrder.SettlementIdColumn]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableSourceOrder.SettlementIdColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the SideCode column.
			/// </summary>
			public global::Teraque.SideCode SideCode
			{
				get
				{
					return ((global::Teraque.SideCode)(this[this.tableSourceOrder.SideCodeColumn]));
				}
				set
				{
					this[this.tableSourceOrder.SideCodeColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets the parent row in the Side table.
			/// </summary>
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public SideRow SideRow
			{
				get
				{
					return ((SideRow)(this.GetParentRow(this.tableSourceOrder.SideSourceOrderRelation)));
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the SourceOrderId column.
			/// </summary>
			public global::System.Guid SourceOrderId
			{
				get
				{
					return ((global::System.Guid)(this[this.tableSourceOrder.SourceOrderIdColumn]));
				}
				set
				{
					this[this.tableSourceOrder.SourceOrderIdColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the StartTime column.
			/// </summary>
			public global::System.DateTime StartTime
			{
				get
				{
					try
					{
						return ((global::System.DateTime)(this[this.tableSourceOrder.StartTimeColumn]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableSourceOrder.StartTimeColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the StatusCode column.
			/// </summary>
			public global::Teraque.StatusCode StatusCode
			{
				get
				{
					return ((global::Teraque.StatusCode)(this[this.tableSourceOrder.StatusCodeColumn]));
				}
				set
				{
					this[this.tableSourceOrder.StatusCodeColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets the parent row in the Status table.
			/// </summary>
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public StatusRow StatusRow
			{
				get
				{
					return ((StatusRow)(this.GetParentRow(this.tableSourceOrder.StatusSourceOrderRelation)));
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the StopPrice column.
			/// </summary>
			public decimal StopPrice
			{
				get
				{
					try
					{
						return ((decimal)(this[this.tableSourceOrder.StopPriceColumn]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableSourceOrder.StopPriceColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the StopTime column.
			/// </summary>
			public global::System.DateTime StopTime
			{
				get
				{
					try
					{
						return ((global::System.DateTime)(this[this.tableSourceOrder.StopTimeColumn]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableSourceOrder.StopTimeColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the SubmittedQuantity column.
			/// </summary>
			public decimal SubmittedQuantity
			{
				get
				{
					return ((decimal)(this[this.tableSourceOrder.SubmittedQuantityColumn]));
				}
				set
				{
					this[this.tableSourceOrder.SubmittedQuantityColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the SubmittedTime column.
			/// </summary>
			public string SubmittedTime
			{
				get
				{
					try
					{
						return ((string)(this[this.tableSourceOrder.SubmittedTimeColumn]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableSourceOrder.SubmittedTimeColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the TargetPrice column.
			/// </summary>
			public decimal TargetPrice
			{
				get
				{
					try
					{
						return ((decimal)(this[this.tableSourceOrder.TargetPriceColumn]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableSourceOrder.TargetPriceColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the TimeInForceCode column.
			/// </summary>
			public global::Teraque.TimeInForceCode TimeInForceCode
			{
				get
				{
					return ((global::Teraque.TimeInForceCode)(this[this.tableSourceOrder.TimeInForceCodeColumn]));
				}
				set
				{
					this[this.tableSourceOrder.TimeInForceCodeColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets the parent row in the TimeInForce table.
			/// </summary>
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public TimeInForceRow TimeInForceRow
			{
				get
				{
					return ((TimeInForceRow)(this.GetParentRow(this.tableSourceOrder.TimeInForceSourceOrderRelation)));
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the TradeDate column.
			/// </summary>
			public global::System.DateTime TradeDate
			{
				get
				{
					try
					{
						return ((global::System.DateTime)(this[this.tableSourceOrder.TradeDateColumn]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableSourceOrder.TradeDateColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets the parent row in the User table.
			/// </summary>
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public UserRow UserRowByFK_User_SourceOrder_CreatedUserId
			{
				get
				{
					return ((UserRow)(this.GetParentRow(this.tableSourceOrder.UserSourceOrderByFK_User_SourceOrder_CreatedUserIdRelation)));
				}
			}
			
			/// <summary>
			/// Gets the parent row in the User table.
			/// </summary>
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public UserRow UserRowByFK_User_SourceOrder_ModifiedUserId
			{
				get
				{
					return ((UserRow)(this.GetParentRow(this.tableSourceOrder.UserSourceOrderByFK_User_SourceOrder_ModifiedUserIdRelation)));
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the WorkingOrderId column.
			/// </summary>
			public global::System.Guid WorkingOrderId
			{
				get
				{
					return ((global::System.Guid)(this[this.tableSourceOrder.WorkingOrderIdColumn]));
				}
				set
				{
					this[this.tableSourceOrder.WorkingOrderIdColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets the parent row in the WorkingOrder table.
			/// </summary>
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public WorkingOrderRow WorkingOrderRow
			{
				get
				{
					return ((WorkingOrderRow)(this.GetParentRow(this.tableSourceOrder.WorkingOrderSourceOrderRelation)));
				}
			}
			
			/// <summary>
			/// Gets the Null property of the DestinationId column.
			/// </summary>
			public bool IsDestinationIdNull()
			{
				return (this[this.tableSourceOrder.DestinationIdColumn] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the ExternalId0 column.
			/// </summary>
			public bool IsExternalId0Null()
			{
				return (this[this.tableSourceOrder.ExternalId0Column] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the LimitPrice column.
			/// </summary>
			public bool IsLimitPriceNull()
			{
				return (this[this.tableSourceOrder.LimitPriceColumn] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the MaximumVolatility column.
			/// </summary>
			public bool IsMaximumVolatilityNull()
			{
				return (this[this.tableSourceOrder.MaximumVolatilityColumn] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the NewsFreeTime column.
			/// </summary>
			public bool IsNewsFreeTimeNull()
			{
				return (this[this.tableSourceOrder.NewsFreeTimeColumn] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the ReceivedTime column.
			/// </summary>
			public bool IsReceivedTimeNull()
			{
				return (this[this.tableSourceOrder.ReceivedTimeColumn] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the SettlementDate column.
			/// </summary>
			public bool IsSettlementDateNull()
			{
				return (this[this.tableSourceOrder.SettlementDateColumn] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the SettlementId column.
			/// </summary>
			public bool IsSettlementIdNull()
			{
				return (this[this.tableSourceOrder.SettlementIdColumn] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the StartTime column.
			/// </summary>
			public bool IsStartTimeNull()
			{
				return (this[this.tableSourceOrder.StartTimeColumn] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the StopPrice column.
			/// </summary>
			public bool IsStopPriceNull()
			{
				return (this[this.tableSourceOrder.StopPriceColumn] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the StopTime column.
			/// </summary>
			public bool IsStopTimeNull()
			{
				return (this[this.tableSourceOrder.StopTimeColumn] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the SubmittedTime column.
			/// </summary>
			public bool IsSubmittedTimeNull()
			{
				return (this[this.tableSourceOrder.SubmittedTimeColumn] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the TargetPrice column.
			/// </summary>
			public bool IsTargetPriceNull()
			{
				return (this[this.tableSourceOrder.TargetPriceColumn] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the TradeDate column.
			/// </summary>
			public bool IsTradeDateNull()
			{
				return (this[this.tableSourceOrder.TradeDateColumn] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Sets the Null property of the DestinationId column.
			/// </summary>
			public void SetDestinationIdNull()
			{
				this[this.tableSourceOrder.DestinationIdColumn] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the ExternalId0 column.
			/// </summary>
			public void SetExternalId0Null()
			{
				this[this.tableSourceOrder.ExternalId0Column] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the LimitPrice column.
			/// </summary>
			public void SetLimitPriceNull()
			{
				this[this.tableSourceOrder.LimitPriceColumn] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the MaximumVolatility column.
			/// </summary>
			public void SetMaximumVolatilityNull()
			{
				this[this.tableSourceOrder.MaximumVolatilityColumn] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the NewsFreeTime column.
			/// </summary>
			public void SetNewsFreeTimeNull()
			{
				this[this.tableSourceOrder.NewsFreeTimeColumn] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the ReceivedTime column.
			/// </summary>
			public void SetReceivedTimeNull()
			{
				this[this.tableSourceOrder.ReceivedTimeColumn] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the SettlementDate column.
			/// </summary>
			public void SetSettlementDateNull()
			{
				this[this.tableSourceOrder.SettlementDateColumn] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the SettlementId column.
			/// </summary>
			public void SetSettlementIdNull()
			{
				this[this.tableSourceOrder.SettlementIdColumn] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the StartTime column.
			/// </summary>
			public void SetStartTimeNull()
			{
				this[this.tableSourceOrder.StartTimeColumn] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the StopPrice column.
			/// </summary>
			public void SetStopPriceNull()
			{
				this[this.tableSourceOrder.StopPriceColumn] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the StopTime column.
			/// </summary>
			public void SetStopTimeNull()
			{
				this[this.tableSourceOrder.StopTimeColumn] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the SubmittedTime column.
			/// </summary>
			public void SetSubmittedTimeNull()
			{
				this[this.tableSourceOrder.SubmittedTimeColumn] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the TargetPrice column.
			/// </summary>
			public void SetTargetPriceNull()
			{
				this[this.tableSourceOrder.TargetPriceColumn] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the TradeDate column.
			/// </summary>
			public void SetTradeDateNull()
			{
				this[this.tableSourceOrder.TradeDateColumn] = global::System.DBNull.Value;
			}
		}
		
		/// <summary>
		/// Represents a row of data in the State table.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		public partial class StateRow : global::System.Data.DataRow
		{
			
			private StateDataTable tableState;
			
			/// <summary>
			/// Creates a row of data from the State table schema.
			/// </summary>
			/// <param name="dataRowBuilder">An internal data structure used to build the row from the parent table schema.</param>
			internal StateRow(global::System.Data.DataRowBuilder dataRowBuilder) : 
					base(dataRowBuilder)
			{
				// This creates a strongly typed State row using the generic construction methods.
				this.tableState = ((StateDataTable)(this.Table));
			}
			
			/// <summary>
			/// Gets or sets the data in the Description column.
			/// </summary>
			public string Description
			{
				get
				{
					return ((string)(this[this.tableState.DescriptionColumn]));
				}
				set
				{
					this[this.tableState.DescriptionColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the ExternalId0 column.
			/// </summary>
			public string ExternalId0
			{
				get
				{
					try
					{
						return ((string)(this[this.tableState.ExternalId0Column]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableState.ExternalId0Column] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the ExternalId1 column.
			/// </summary>
			public string ExternalId1
			{
				get
				{
					try
					{
						return ((string)(this[this.tableState.ExternalId1Column]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableState.ExternalId1Column] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the ExternalId2 column.
			/// </summary>
			public string ExternalId2
			{
				get
				{
					try
					{
						return ((string)(this[this.tableState.ExternalId2Column]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableState.ExternalId2Column] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the ExternalId3 column.
			/// </summary>
			public string ExternalId3
			{
				get
				{
					try
					{
						return ((string)(this[this.tableState.ExternalId3Column]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableState.ExternalId3Column] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the Mnemonic column.
			/// </summary>
			public string Mnemonic
			{
				get
				{
					return ((string)(this[this.tableState.MnemonicColumn]));
				}
				set
				{
					this[this.tableState.MnemonicColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the RowVersion column.
			/// </summary>
			public long RowVersion
			{
				get
				{
					return ((long)(this[this.tableState.RowVersionColumn]));
				}
				set
				{
					this[this.tableState.RowVersionColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the StateCode column.
			/// </summary>
			public global::Teraque.StateCode StateCode
			{
				get
				{
					return ((global::Teraque.StateCode)(this[this.tableState.StateCodeColumn]));
				}
				set
				{
					this[this.tableState.StateCodeColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets the children rows in the DestinationOrder table.
			/// </summary>
			public DestinationOrderRow[] GetDestinationOrderRows()
			{
				return ((DestinationOrderRow[])(this.GetChildRows(this.tableState.StateDestinationOrderRelation)));
			}
			
			/// <summary>
			/// Gets the children rows in the Execution table.
			/// </summary>
			public ExecutionRow[] GetExecutionRowsByFK_State_Execution_DestinationStateCode()
			{
				return ((ExecutionRow[])(this.GetChildRows(this.tableState.StateExecutionByFK_State_Execution_DestinationStateCodeRelation)));
			}
			
			/// <summary>
			/// Gets the children rows in the Execution table.
			/// </summary>
			public ExecutionRow[] GetExecutionRowsByFK_State_Execution_SourceStateCode()
			{
				return ((ExecutionRow[])(this.GetChildRows(this.tableState.StateExecutionByFK_State_Execution_SourceStateCodeRelation)));
			}
			
			/// <summary>
			/// Gets the Null property of the ExternalId0 column.
			/// </summary>
			public bool IsExternalId0Null()
			{
				return (this[this.tableState.ExternalId0Column] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the ExternalId1 column.
			/// </summary>
			public bool IsExternalId1Null()
			{
				return (this[this.tableState.ExternalId1Column] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the ExternalId2 column.
			/// </summary>
			public bool IsExternalId2Null()
			{
				return (this[this.tableState.ExternalId2Column] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the ExternalId3 column.
			/// </summary>
			public bool IsExternalId3Null()
			{
				return (this[this.tableState.ExternalId3Column] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Sets the Null property of the ExternalId0 column.
			/// </summary>
			public void SetExternalId0Null()
			{
				this[this.tableState.ExternalId0Column] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the ExternalId1 column.
			/// </summary>
			public void SetExternalId1Null()
			{
				this[this.tableState.ExternalId1Column] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the ExternalId2 column.
			/// </summary>
			public void SetExternalId2Null()
			{
				this[this.tableState.ExternalId2Column] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the ExternalId3 column.
			/// </summary>
			public void SetExternalId3Null()
			{
				this[this.tableState.ExternalId3Column] = global::System.DBNull.Value;
			}
		}
		
		/// <summary>
		/// Represents a row of data in the Status table.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		public partial class StatusRow : global::System.Data.DataRow
		{
			
			private StatusDataTable tableStatus;
			
			/// <summary>
			/// Creates a row of data from the Status table schema.
			/// </summary>
			/// <param name="dataRowBuilder">An internal data structure used to build the row from the parent table schema.</param>
			internal StatusRow(global::System.Data.DataRowBuilder dataRowBuilder) : 
					base(dataRowBuilder)
			{
				// This creates a strongly typed Status row using the generic construction methods.
				this.tableStatus = ((StatusDataTable)(this.Table));
			}
			
			/// <summary>
			/// Gets or sets the data in the Description column.
			/// </summary>
			public string Description
			{
				get
				{
					return ((string)(this[this.tableStatus.DescriptionColumn]));
				}
				set
				{
					this[this.tableStatus.DescriptionColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the ExternalId0 column.
			/// </summary>
			public string ExternalId0
			{
				get
				{
					try
					{
						return ((string)(this[this.tableStatus.ExternalId0Column]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableStatus.ExternalId0Column] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the ExternalId1 column.
			/// </summary>
			public string ExternalId1
			{
				get
				{
					try
					{
						return ((string)(this[this.tableStatus.ExternalId1Column]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableStatus.ExternalId1Column] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the ExternalId2 column.
			/// </summary>
			public string ExternalId2
			{
				get
				{
					try
					{
						return ((string)(this[this.tableStatus.ExternalId2Column]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableStatus.ExternalId2Column] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the ExternalId3 column.
			/// </summary>
			public string ExternalId3
			{
				get
				{
					try
					{
						return ((string)(this[this.tableStatus.ExternalId3Column]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableStatus.ExternalId3Column] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the Image column.
			/// </summary>
			public string Image
			{
				get
				{
					return ((string)(this[this.tableStatus.ImageColumn]));
				}
				set
				{
					this[this.tableStatus.ImageColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the Mnemonic column.
			/// </summary>
			public string Mnemonic
			{
				get
				{
					return ((string)(this[this.tableStatus.MnemonicColumn]));
				}
				set
				{
					this[this.tableStatus.MnemonicColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the RowVersion column.
			/// </summary>
			public long RowVersion
			{
				get
				{
					return ((long)(this[this.tableStatus.RowVersionColumn]));
				}
				set
				{
					this[this.tableStatus.RowVersionColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the SortOrder column.
			/// </summary>
			public int SortOrder
			{
				get
				{
					return ((int)(this[this.tableStatus.SortOrderColumn]));
				}
				set
				{
					this[this.tableStatus.SortOrderColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the StatusCode column.
			/// </summary>
			public global::Teraque.StatusCode StatusCode
			{
				get
				{
					return ((global::Teraque.StatusCode)(this[this.tableStatus.StatusCodeColumn]));
				}
				set
				{
					this[this.tableStatus.StatusCodeColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets the children rows in the DestinationOrder table.
			/// </summary>
			public DestinationOrderRow[] GetDestinationOrderRows()
			{
				return ((DestinationOrderRow[])(this.GetChildRows(this.tableStatus.StatusDestinationOrderRelation)));
			}
			
			/// <summary>
			/// Gets the children rows in the Match table.
			/// </summary>
			public MatchRow[] GetMatchRows()
			{
				return ((MatchRow[])(this.GetChildRows(this.tableStatus.StatusMatchRelation)));
			}
			
			/// <summary>
			/// Gets the children rows in the Negotiation table.
			/// </summary>
			public NegotiationRow[] GetNegotiationRows()
			{
				return ((NegotiationRow[])(this.GetChildRows(this.tableStatus.StatusNegotiationRelation)));
			}
			
			/// <summary>
			/// Gets the children rows in the SourceOrder table.
			/// </summary>
			public SourceOrderRow[] GetSourceOrderRows()
			{
				return ((SourceOrderRow[])(this.GetChildRows(this.tableStatus.StatusSourceOrderRelation)));
			}
			
			/// <summary>
			/// Gets the children rows in the WorkingOrder table.
			/// </summary>
			public WorkingOrderRow[] GetWorkingOrderRows()
			{
				return ((WorkingOrderRow[])(this.GetChildRows(this.tableStatus.StatusWorkingOrderRelation)));
			}
			
			/// <summary>
			/// Gets the Null property of the ExternalId0 column.
			/// </summary>
			public bool IsExternalId0Null()
			{
				return (this[this.tableStatus.ExternalId0Column] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the ExternalId1 column.
			/// </summary>
			public bool IsExternalId1Null()
			{
				return (this[this.tableStatus.ExternalId1Column] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the ExternalId2 column.
			/// </summary>
			public bool IsExternalId2Null()
			{
				return (this[this.tableStatus.ExternalId2Column] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the ExternalId3 column.
			/// </summary>
			public bool IsExternalId3Null()
			{
				return (this[this.tableStatus.ExternalId3Column] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Sets the Null property of the ExternalId0 column.
			/// </summary>
			public void SetExternalId0Null()
			{
				this[this.tableStatus.ExternalId0Column] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the ExternalId1 column.
			/// </summary>
			public void SetExternalId1Null()
			{
				this[this.tableStatus.ExternalId1Column] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the ExternalId2 column.
			/// </summary>
			public void SetExternalId2Null()
			{
				this[this.tableStatus.ExternalId2Column] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the ExternalId3 column.
			/// </summary>
			public void SetExternalId3Null()
			{
				this[this.tableStatus.ExternalId3Column] = global::System.DBNull.Value;
			}
		}
		
		/// <summary>
		/// Represents a row of data in the SubordinateType table.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		public partial class SubordinateTypeRow : global::System.Data.DataRow
		{
			
			private SubordinateTypeDataTable tableSubordinateType;
			
			/// <summary>
			/// Creates a row of data from the SubordinateType table schema.
			/// </summary>
			/// <param name="dataRowBuilder">An internal data structure used to build the row from the parent table schema.</param>
			internal SubordinateTypeRow(global::System.Data.DataRowBuilder dataRowBuilder) : 
					base(dataRowBuilder)
			{
				// This creates a strongly typed SubordinateType row using the generic construction methods.
				this.tableSubordinateType = ((SubordinateTypeDataTable)(this.Table));
			}
			
			/// <summary>
			/// Gets or sets the data in the Description column.
			/// </summary>
			public string Description
			{
				get
				{
					return ((string)(this[this.tableSubordinateType.DescriptionColumn]));
				}
				set
				{
					this[this.tableSubordinateType.DescriptionColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the ExternalId0 column.
			/// </summary>
			public string ExternalId0
			{
				get
				{
					try
					{
						return ((string)(this[this.tableSubordinateType.ExternalId0Column]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableSubordinateType.ExternalId0Column] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the ExternalId1 column.
			/// </summary>
			public string ExternalId1
			{
				get
				{
					try
					{
						return ((string)(this[this.tableSubordinateType.ExternalId1Column]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableSubordinateType.ExternalId1Column] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the RowVersion column.
			/// </summary>
			public long RowVersion
			{
				get
				{
					return ((long)(this[this.tableSubordinateType.RowVersionColumn]));
				}
				set
				{
					this[this.tableSubordinateType.RowVersionColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the SubordinateTypeCode column.
			/// </summary>
			public global::Teraque.SubordinateTypeCode SubordinateTypeCode
			{
				get
				{
					return ((global::Teraque.SubordinateTypeCode)(this[this.tableSubordinateType.SubordinateTypeCodeColumn]));
				}
				set
				{
					this[this.tableSubordinateType.SubordinateTypeCodeColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets the children rows in the SecuritySeries table.
			/// </summary>
			public SecuritySeriesRow[] GetSecuritySeriesRows()
			{
				return ((SecuritySeriesRow[])(this.GetChildRows(this.tableSubordinateType.SubordinateTypeSecuritySeriesRelation)));
			}
			
			/// <summary>
			/// Gets the Null property of the ExternalId0 column.
			/// </summary>
			public bool IsExternalId0Null()
			{
				return (this[this.tableSubordinateType.ExternalId0Column] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the ExternalId1 column.
			/// </summary>
			public bool IsExternalId1Null()
			{
				return (this[this.tableSubordinateType.ExternalId1Column] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Sets the Null property of the ExternalId0 column.
			/// </summary>
			public void SetExternalId0Null()
			{
				this[this.tableSubordinateType.ExternalId0Column] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the ExternalId1 column.
			/// </summary>
			public void SetExternalId1Null()
			{
				this[this.tableSubordinateType.ExternalId1Column] = global::System.DBNull.Value;
			}
		}
		
		/// <summary>
		/// Represents a row of data in the TaxLot table.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		public partial class TaxLotRow : global::System.Data.DataRow
		{
			
			private TaxLotDataTable tableTaxLot;
			
			/// <summary>
			/// Creates a row of data from the TaxLot table schema.
			/// </summary>
			/// <param name="dataRowBuilder">An internal data structure used to build the row from the parent table schema.</param>
			internal TaxLotRow(global::System.Data.DataRowBuilder dataRowBuilder) : 
					base(dataRowBuilder)
			{
				// This creates a strongly typed TaxLot row using the generic construction methods.
				this.tableTaxLot = ((TaxLotDataTable)(this.Table));
			}
			
			/// <summary>
			/// Gets or sets the data in the AccountId column.
			/// </summary>
			public global::System.Guid AccountId
			{
				get
				{
					return ((global::System.Guid)(this[this.tableTaxLot.AccountIdColumn]));
				}
				set
				{
					this[this.tableTaxLot.AccountIdColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets the parent row in the Account table.
			/// </summary>
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public AccountRow AccountRow
			{
				get
				{
					return ((AccountRow)(this.GetParentRow(this.tableTaxLot.AccountTaxLotRelation)));
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the BaseCost column.
			/// </summary>
			public decimal BaseCost
			{
				get
				{
					return ((decimal)(this[this.tableTaxLot.BaseCostColumn]));
				}
				set
				{
					this[this.tableTaxLot.BaseCostColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the ExternalId0 column.
			/// </summary>
			public string ExternalId0
			{
				get
				{
					try
					{
						return ((string)(this[this.tableTaxLot.ExternalId0Column]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableTaxLot.ExternalId0Column] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the ExternalId1 column.
			/// </summary>
			public string ExternalId1
			{
				get
				{
					try
					{
						return ((string)(this[this.tableTaxLot.ExternalId1Column]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableTaxLot.ExternalId1Column] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the LocalCost column.
			/// </summary>
			public decimal LocalCost
			{
				get
				{
					return ((decimal)(this[this.tableTaxLot.LocalCostColumn]));
				}
				set
				{
					this[this.tableTaxLot.LocalCostColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the PositionId column.
			/// </summary>
			public global::System.Guid PositionId
			{
				get
				{
					return ((global::System.Guid)(this[this.tableTaxLot.PositionIdColumn]));
				}
				set
				{
					this[this.tableTaxLot.PositionIdColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets the parent row in the Position table.
			/// </summary>
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public PositionRow PositionRow
			{
				get
				{
					return ((PositionRow)(this.GetParentRow(this.tableTaxLot.PositionTaxLotRelation)));
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the PositionTypeCode column.
			/// </summary>
			public global::Teraque.PositionTypeCode PositionTypeCode
			{
				get
				{
					return ((global::Teraque.PositionTypeCode)(this[this.tableTaxLot.PositionTypeCodeColumn]));
				}
				set
				{
					this[this.tableTaxLot.PositionTypeCodeColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets the parent row in the PositionType table.
			/// </summary>
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public PositionTypeRow PositionTypeRow
			{
				get
				{
					return ((PositionTypeRow)(this.GetParentRow(this.tableTaxLot.PositionTypeTaxLotRelation)));
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the RowVersion column.
			/// </summary>
			public long RowVersion
			{
				get
				{
					return ((long)(this[this.tableTaxLot.RowVersionColumn]));
				}
				set
				{
					this[this.tableTaxLot.RowVersionColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the SecurityId column.
			/// </summary>
			public global::System.Guid SecurityId
			{
				get
				{
					return ((global::System.Guid)(this[this.tableTaxLot.SecurityIdColumn]));
				}
				set
				{
					this[this.tableTaxLot.SecurityIdColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets the parent row in the Security table.
			/// </summary>
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public SecurityRow SecurityRow
			{
				get
				{
					return ((SecurityRow)(this.GetParentRow(this.tableTaxLot.SecurityTaxLotRelation)));
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the SettlementDate column.
			/// </summary>
			public global::System.DateTime SettlementDate
			{
				get
				{
					try
					{
						return ((global::System.DateTime)(this[this.tableTaxLot.SettlementDateColumn]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableTaxLot.SettlementDateColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the TaxLotId column.
			/// </summary>
			public global::System.Guid TaxLotId
			{
				get
				{
					return ((global::System.Guid)(this[this.tableTaxLot.TaxLotIdColumn]));
				}
				set
				{
					this[this.tableTaxLot.TaxLotIdColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the TradeDate column.
			/// </summary>
			public global::System.DateTime TradeDate
			{
				get
				{
					try
					{
						return ((global::System.DateTime)(this[this.tableTaxLot.TradeDateColumn]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableTaxLot.TradeDateColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets the children rows in the TaxLotSeries table.
			/// </summary>
			public TaxLotSeriesRow[] GetTaxLotSeriesRows()
			{
				return ((TaxLotSeriesRow[])(this.GetChildRows(this.tableTaxLot.TaxLotTaxLotSeriesRelation)));
			}
			
			/// <summary>
			/// Gets the Null property of the ExternalId0 column.
			/// </summary>
			public bool IsExternalId0Null()
			{
				return (this[this.tableTaxLot.ExternalId0Column] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the ExternalId1 column.
			/// </summary>
			public bool IsExternalId1Null()
			{
				return (this[this.tableTaxLot.ExternalId1Column] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the SettlementDate column.
			/// </summary>
			public bool IsSettlementDateNull()
			{
				return (this[this.tableTaxLot.SettlementDateColumn] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the TradeDate column.
			/// </summary>
			public bool IsTradeDateNull()
			{
				return (this[this.tableTaxLot.TradeDateColumn] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Sets the Null property of the ExternalId0 column.
			/// </summary>
			public void SetExternalId0Null()
			{
				this[this.tableTaxLot.ExternalId0Column] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the ExternalId1 column.
			/// </summary>
			public void SetExternalId1Null()
			{
				this[this.tableTaxLot.ExternalId1Column] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the SettlementDate column.
			/// </summary>
			public void SetSettlementDateNull()
			{
				this[this.tableTaxLot.SettlementDateColumn] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the TradeDate column.
			/// </summary>
			public void SetTradeDateNull()
			{
				this[this.tableTaxLot.TradeDateColumn] = global::System.DBNull.Value;
			}
		}
		
		/// <summary>
		/// Represents a row of data in the TaxLotSeries table.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		public partial class TaxLotSeriesRow : global::System.Data.DataRow
		{
			
			private TaxLotSeriesDataTable tableTaxLotSeries;
			
			/// <summary>
			/// Creates a row of data from the TaxLotSeries table schema.
			/// </summary>
			/// <param name="dataRowBuilder">An internal data structure used to build the row from the parent table schema.</param>
			internal TaxLotSeriesRow(global::System.Data.DataRowBuilder dataRowBuilder) : 
					base(dataRowBuilder)
			{
				// This creates a strongly typed TaxLotSeries row using the generic construction methods.
				this.tableTaxLotSeries = ((TaxLotSeriesDataTable)(this.Table));
			}
			
			/// <summary>
			/// Gets or sets the data in the AccountId column.
			/// </summary>
			public global::System.Guid AccountId
			{
				get
				{
					return ((global::System.Guid)(this[this.tableTaxLotSeries.AccountIdColumn]));
				}
				set
				{
					this[this.tableTaxLotSeries.AccountIdColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets the parent row in the Account table.
			/// </summary>
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public AccountRow AccountRow
			{
				get
				{
					return ((AccountRow)(this.GetParentRow(this.tableTaxLotSeries.AccountTaxLotSeriesRelation)));
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the Date column.
			/// </summary>
			public global::System.DateTime Date
			{
				get
				{
					return ((global::System.DateTime)(this[this.tableTaxLotSeries.DateColumn]));
				}
				set
				{
					this[this.tableTaxLotSeries.DateColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the DealSpread column.
			/// </summary>
			public decimal DealSpread
			{
				get
				{
					return ((decimal)(this[this.tableTaxLotSeries.DealSpreadColumn]));
				}
				set
				{
					this[this.tableTaxLotSeries.DealSpreadColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the Duration column.
			/// </summary>
			public decimal Duration
			{
				get
				{
					return ((decimal)(this[this.tableTaxLotSeries.DurationColumn]));
				}
				set
				{
					this[this.tableTaxLotSeries.DurationColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the ExposureWeight column.
			/// </summary>
			public decimal ExposureWeight
			{
				get
				{
					return ((decimal)(this[this.tableTaxLotSeries.ExposureWeightColumn]));
				}
				set
				{
					this[this.tableTaxLotSeries.ExposureWeightColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the ExternalId0 column.
			/// </summary>
			public string ExternalId0
			{
				get
				{
					try
					{
						return ((string)(this[this.tableTaxLotSeries.ExternalId0Column]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableTaxLotSeries.ExternalId0Column] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the ExternalId1 column.
			/// </summary>
			public string ExternalId1
			{
				get
				{
					try
					{
						return ((string)(this[this.tableTaxLotSeries.ExternalId1Column]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableTaxLotSeries.ExternalId1Column] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the LotExposureBase column.
			/// </summary>
			public decimal LotExposureBase
			{
				get
				{
					return ((decimal)(this[this.tableTaxLotSeries.LotExposureBaseColumn]));
				}
				set
				{
					this[this.tableTaxLotSeries.LotExposureBaseColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the LotExposureLocal column.
			/// </summary>
			public decimal LotExposureLocal
			{
				get
				{
					return ((decimal)(this[this.tableTaxLotSeries.LotExposureLocalColumn]));
				}
				set
				{
					this[this.tableTaxLotSeries.LotExposureLocalColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the LotMarketValueBase column.
			/// </summary>
			public decimal LotMarketValueBase
			{
				get
				{
					return ((decimal)(this[this.tableTaxLotSeries.LotMarketValueBaseColumn]));
				}
				set
				{
					this[this.tableTaxLotSeries.LotMarketValueBaseColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the LotMarketValueLocal column.
			/// </summary>
			public decimal LotMarketValueLocal
			{
				get
				{
					return ((decimal)(this[this.tableTaxLotSeries.LotMarketValueLocalColumn]));
				}
				set
				{
					this[this.tableTaxLotSeries.LotMarketValueLocalColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the LotQuantity column.
			/// </summary>
			public decimal LotQuantity
			{
				get
				{
					return ((decimal)(this[this.tableTaxLotSeries.LotQuantityColumn]));
				}
				set
				{
					this[this.tableTaxLotSeries.LotQuantityColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the MarketWeight column.
			/// </summary>
			public decimal MarketWeight
			{
				get
				{
					return ((decimal)(this[this.tableTaxLotSeries.MarketWeightColumn]));
				}
				set
				{
					this[this.tableTaxLotSeries.MarketWeightColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the MonthToDayLinkedReturn column.
			/// </summary>
			public decimal MonthToDayLinkedReturn
			{
				get
				{
					return ((decimal)(this[this.tableTaxLotSeries.MonthToDayLinkedReturnColumn]));
				}
				set
				{
					this[this.tableTaxLotSeries.MonthToDayLinkedReturnColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the MonthToDayProfitAndLoss column.
			/// </summary>
			public decimal MonthToDayProfitAndLoss
			{
				get
				{
					return ((decimal)(this[this.tableTaxLotSeries.MonthToDayProfitAndLossColumn]));
				}
				set
				{
					this[this.tableTaxLotSeries.MonthToDayProfitAndLossColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the NetAssetValue column.
			/// </summary>
			public decimal NetAssetValue
			{
				get
				{
					return ((decimal)(this[this.tableTaxLotSeries.NetAssetValueColumn]));
				}
				set
				{
					this[this.tableTaxLotSeries.NetAssetValueColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the OriginalBuyTransaction column.
			/// </summary>
			public string OriginalBuyTransaction
			{
				get
				{
					try
					{
						return ((string)(this[this.tableTaxLotSeries.OriginalBuyTransactionColumn]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableTaxLotSeries.OriginalBuyTransactionColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the PositionSeriesId column.
			/// </summary>
			public global::System.Guid PositionSeriesId
			{
				get
				{
					return ((global::System.Guid)(this[this.tableTaxLotSeries.PositionSeriesIdColumn]));
				}
				set
				{
					this[this.tableTaxLotSeries.PositionSeriesIdColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets the parent row in the PositionSeries table.
			/// </summary>
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public PositionSeriesRow PositionSeriesRow
			{
				get
				{
					return ((PositionSeriesRow)(this.GetParentRow(this.tableTaxLotSeries.PositionSeriesTaxLotSeriesRelation)));
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the PositionTypeCode column.
			/// </summary>
			public global::Teraque.PositionTypeCode PositionTypeCode
			{
				get
				{
					return ((global::Teraque.PositionTypeCode)(this[this.tableTaxLotSeries.PositionTypeCodeColumn]));
				}
				set
				{
					this[this.tableTaxLotSeries.PositionTypeCodeColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets the parent row in the PositionType table.
			/// </summary>
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public PositionTypeRow PositionTypeRow
			{
				get
				{
					return ((PositionTypeRow)(this.GetParentRow(this.tableTaxLotSeries.PositionTypeTaxLotSeriesRelation)));
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the QualityLabel column.
			/// </summary>
			public string QualityLabel
			{
				get
				{
					try
					{
						return ((string)(this[this.tableTaxLotSeries.QualityLabelColumn]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableTaxLotSeries.QualityLabelColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the Quantity column.
			/// </summary>
			public decimal Quantity
			{
				get
				{
					return ((decimal)(this[this.tableTaxLotSeries.QuantityColumn]));
				}
				set
				{
					this[this.tableTaxLotSeries.QuantityColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the QuarterToDayLinkedReturn column.
			/// </summary>
			public decimal QuarterToDayLinkedReturn
			{
				get
				{
					return ((decimal)(this[this.tableTaxLotSeries.QuarterToDayLinkedReturnColumn]));
				}
				set
				{
					this[this.tableTaxLotSeries.QuarterToDayLinkedReturnColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the QuarterToDayProfitAndLoss column.
			/// </summary>
			public decimal QuarterToDayProfitAndLoss
			{
				get
				{
					return ((decimal)(this[this.tableTaxLotSeries.QuarterToDayProfitAndLossColumn]));
				}
				set
				{
					this[this.tableTaxLotSeries.QuarterToDayProfitAndLossColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the RatingScore column.
			/// </summary>
			public int RatingScore
			{
				get
				{
					try
					{
						return ((int)(this[this.tableTaxLotSeries.RatingScoreColumn]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableTaxLotSeries.RatingScoreColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the RowVersion column.
			/// </summary>
			public long RowVersion
			{
				get
				{
					return ((long)(this[this.tableTaxLotSeries.RowVersionColumn]));
				}
				set
				{
					this[this.tableTaxLotSeries.RowVersionColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the Sector column.
			/// </summary>
			public string Sector
			{
				get
				{
					try
					{
						return ((string)(this[this.tableTaxLotSeries.SectorColumn]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableTaxLotSeries.SectorColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the SecurityId column.
			/// </summary>
			public global::System.Guid SecurityId
			{
				get
				{
					return ((global::System.Guid)(this[this.tableTaxLotSeries.SecurityIdColumn]));
				}
				set
				{
					this[this.tableTaxLotSeries.SecurityIdColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets the parent row in the Security table.
			/// </summary>
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public SecurityRow SecurityRow
			{
				get
				{
					return ((SecurityRow)(this.GetParentRow(this.tableTaxLotSeries.SecurityTaxLotSeriesRelation)));
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the SecuritySeriesId column.
			/// </summary>
			public global::System.Guid SecuritySeriesId
			{
				get
				{
					return ((global::System.Guid)(this[this.tableTaxLotSeries.SecuritySeriesIdColumn]));
				}
				set
				{
					this[this.tableTaxLotSeries.SecuritySeriesIdColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets the parent row in the SecuritySeries table.
			/// </summary>
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public SecuritySeriesRow SecuritySeriesRow
			{
				get
				{
					return ((SecuritySeriesRow)(this.GetParentRow(this.tableTaxLotSeries.SecuritySeriesTaxLotSeriesRelation)));
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the Strategy column.
			/// </summary>
			public string Strategy
			{
				get
				{
					try
					{
						return ((string)(this[this.tableTaxLotSeries.StrategyColumn]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableTaxLotSeries.StrategyColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the StrategyDescription column.
			/// </summary>
			public string StrategyDescription
			{
				get
				{
					try
					{
						return ((string)(this[this.tableTaxLotSeries.StrategyDescriptionColumn]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableTaxLotSeries.StrategyDescriptionColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the SumExposure column.
			/// </summary>
			public decimal SumExposure
			{
				get
				{
					return ((decimal)(this[this.tableTaxLotSeries.SumExposureColumn]));
				}
				set
				{
					this[this.tableTaxLotSeries.SumExposureColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the SumMarketValue column.
			/// </summary>
			public decimal SumMarketValue
			{
				get
				{
					return ((decimal)(this[this.tableTaxLotSeries.SumMarketValueColumn]));
				}
				set
				{
					this[this.tableTaxLotSeries.SumMarketValueColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the TaxLotId column.
			/// </summary>
			public global::System.Guid TaxLotId
			{
				get
				{
					return ((global::System.Guid)(this[this.tableTaxLotSeries.TaxLotIdColumn]));
				}
				set
				{
					this[this.tableTaxLotSeries.TaxLotIdColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets the parent row in the TaxLot table.
			/// </summary>
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public TaxLotRow TaxLotRow
			{
				get
				{
					return ((TaxLotRow)(this.GetParentRow(this.tableTaxLotSeries.TaxLotTaxLotSeriesRelation)));
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the TaxLotSeriesId column.
			/// </summary>
			public global::System.Guid TaxLotSeriesId
			{
				get
				{
					return ((global::System.Guid)(this[this.tableTaxLotSeries.TaxLotSeriesIdColumn]));
				}
				set
				{
					this[this.tableTaxLotSeries.TaxLotSeriesIdColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the Trade column.
			/// </summary>
			public string Trade
			{
				get
				{
					try
					{
						return ((string)(this[this.tableTaxLotSeries.TradeColumn]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableTaxLotSeries.TradeColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the Weight column.
			/// </summary>
			public decimal Weight
			{
				get
				{
					return ((decimal)(this[this.tableTaxLotSeries.WeightColumn]));
				}
				set
				{
					this[this.tableTaxLotSeries.WeightColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the YearToDayLinkedReturn column.
			/// </summary>
			public decimal YearToDayLinkedReturn
			{
				get
				{
					return ((decimal)(this[this.tableTaxLotSeries.YearToDayLinkedReturnColumn]));
				}
				set
				{
					this[this.tableTaxLotSeries.YearToDayLinkedReturnColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the YearToDayProfitAndLoss column.
			/// </summary>
			public decimal YearToDayProfitAndLoss
			{
				get
				{
					return ((decimal)(this[this.tableTaxLotSeries.YearToDayProfitAndLossColumn]));
				}
				set
				{
					this[this.tableTaxLotSeries.YearToDayProfitAndLossColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets the Null property of the ExternalId0 column.
			/// </summary>
			public bool IsExternalId0Null()
			{
				return (this[this.tableTaxLotSeries.ExternalId0Column] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the ExternalId1 column.
			/// </summary>
			public bool IsExternalId1Null()
			{
				return (this[this.tableTaxLotSeries.ExternalId1Column] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the OriginalBuyTransaction column.
			/// </summary>
			public bool IsOriginalBuyTransactionNull()
			{
				return (this[this.tableTaxLotSeries.OriginalBuyTransactionColumn] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the QualityLabel column.
			/// </summary>
			public bool IsQualityLabelNull()
			{
				return (this[this.tableTaxLotSeries.QualityLabelColumn] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the RatingScore column.
			/// </summary>
			public bool IsRatingScoreNull()
			{
				return (this[this.tableTaxLotSeries.RatingScoreColumn] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the Sector column.
			/// </summary>
			public bool IsSectorNull()
			{
				return (this[this.tableTaxLotSeries.SectorColumn] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the StrategyDescription column.
			/// </summary>
			public bool IsStrategyDescriptionNull()
			{
				return (this[this.tableTaxLotSeries.StrategyDescriptionColumn] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the Strategy column.
			/// </summary>
			public bool IsStrategyNull()
			{
				return (this[this.tableTaxLotSeries.StrategyColumn] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the Trade column.
			/// </summary>
			public bool IsTradeNull()
			{
				return (this[this.tableTaxLotSeries.TradeColumn] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Sets the Null property of the ExternalId0 column.
			/// </summary>
			public void SetExternalId0Null()
			{
				this[this.tableTaxLotSeries.ExternalId0Column] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the ExternalId1 column.
			/// </summary>
			public void SetExternalId1Null()
			{
				this[this.tableTaxLotSeries.ExternalId1Column] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the OriginalBuyTransaction column.
			/// </summary>
			public void SetOriginalBuyTransactionNull()
			{
				this[this.tableTaxLotSeries.OriginalBuyTransactionColumn] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the QualityLabel column.
			/// </summary>
			public void SetQualityLabelNull()
			{
				this[this.tableTaxLotSeries.QualityLabelColumn] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the RatingScore column.
			/// </summary>
			public void SetRatingScoreNull()
			{
				this[this.tableTaxLotSeries.RatingScoreColumn] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the Sector column.
			/// </summary>
			public void SetSectorNull()
			{
				this[this.tableTaxLotSeries.SectorColumn] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the StrategyDescription column.
			/// </summary>
			public void SetStrategyDescriptionNull()
			{
				this[this.tableTaxLotSeries.StrategyDescriptionColumn] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the Strategy column.
			/// </summary>
			public void SetStrategyNull()
			{
				this[this.tableTaxLotSeries.StrategyColumn] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the Trade column.
			/// </summary>
			public void SetTradeNull()
			{
				this[this.tableTaxLotSeries.TradeColumn] = global::System.DBNull.Value;
			}
		}
		
		/// <summary>
		/// Represents a row of data in the TimeInForce table.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		public partial class TimeInForceRow : global::System.Data.DataRow
		{
			
			private TimeInForceDataTable tableTimeInForce;
			
			/// <summary>
			/// Creates a row of data from the TimeInForce table schema.
			/// </summary>
			/// <param name="dataRowBuilder">An internal data structure used to build the row from the parent table schema.</param>
			internal TimeInForceRow(global::System.Data.DataRowBuilder dataRowBuilder) : 
					base(dataRowBuilder)
			{
				// This creates a strongly typed TimeInForce row using the generic construction methods.
				this.tableTimeInForce = ((TimeInForceDataTable)(this.Table));
			}
			
			/// <summary>
			/// Gets or sets the data in the Description column.
			/// </summary>
			public string Description
			{
				get
				{
					return ((string)(this[this.tableTimeInForce.DescriptionColumn]));
				}
				set
				{
					this[this.tableTimeInForce.DescriptionColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the ExternalId0 column.
			/// </summary>
			public string ExternalId0
			{
				get
				{
					try
					{
						return ((string)(this[this.tableTimeInForce.ExternalId0Column]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableTimeInForce.ExternalId0Column] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the ExternalId1 column.
			/// </summary>
			public string ExternalId1
			{
				get
				{
					try
					{
						return ((string)(this[this.tableTimeInForce.ExternalId1Column]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableTimeInForce.ExternalId1Column] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the ExternalId2 column.
			/// </summary>
			public string ExternalId2
			{
				get
				{
					try
					{
						return ((string)(this[this.tableTimeInForce.ExternalId2Column]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableTimeInForce.ExternalId2Column] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the ExternalId3 column.
			/// </summary>
			public string ExternalId3
			{
				get
				{
					try
					{
						return ((string)(this[this.tableTimeInForce.ExternalId3Column]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableTimeInForce.ExternalId3Column] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the Mnemonic column.
			/// </summary>
			public string Mnemonic
			{
				get
				{
					return ((string)(this[this.tableTimeInForce.MnemonicColumn]));
				}
				set
				{
					this[this.tableTimeInForce.MnemonicColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the RowVersion column.
			/// </summary>
			public long RowVersion
			{
				get
				{
					return ((long)(this[this.tableTimeInForce.RowVersionColumn]));
				}
				set
				{
					this[this.tableTimeInForce.RowVersionColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the SortOrder column.
			/// </summary>
			public int SortOrder
			{
				get
				{
					return ((int)(this[this.tableTimeInForce.SortOrderColumn]));
				}
				set
				{
					this[this.tableTimeInForce.SortOrderColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the TimeInForceCode column.
			/// </summary>
			public global::Teraque.TimeInForceCode TimeInForceCode
			{
				get
				{
					return ((global::Teraque.TimeInForceCode)(this[this.tableTimeInForce.TimeInForceCodeColumn]));
				}
				set
				{
					this[this.tableTimeInForce.TimeInForceCodeColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets the children rows in the DestinationOrder table.
			/// </summary>
			public DestinationOrderRow[] GetDestinationOrderRows()
			{
				return ((DestinationOrderRow[])(this.GetChildRows(this.tableTimeInForce.TimeInForceDestinationOrderRelation)));
			}
			
			/// <summary>
			/// Gets the children rows in the SourceOrder table.
			/// </summary>
			public SourceOrderRow[] GetSourceOrderRows()
			{
				return ((SourceOrderRow[])(this.GetChildRows(this.tableTimeInForce.TimeInForceSourceOrderRelation)));
			}
			
			/// <summary>
			/// Gets the children rows in the WorkingOrder table.
			/// </summary>
			public WorkingOrderRow[] GetWorkingOrderRows()
			{
				return ((WorkingOrderRow[])(this.GetChildRows(this.tableTimeInForce.TimeInForceWorkingOrderRelation)));
			}
			
			/// <summary>
			/// Gets the Null property of the ExternalId0 column.
			/// </summary>
			public bool IsExternalId0Null()
			{
				return (this[this.tableTimeInForce.ExternalId0Column] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the ExternalId1 column.
			/// </summary>
			public bool IsExternalId1Null()
			{
				return (this[this.tableTimeInForce.ExternalId1Column] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the ExternalId2 column.
			/// </summary>
			public bool IsExternalId2Null()
			{
				return (this[this.tableTimeInForce.ExternalId2Column] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the ExternalId3 column.
			/// </summary>
			public bool IsExternalId3Null()
			{
				return (this[this.tableTimeInForce.ExternalId3Column] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Sets the Null property of the ExternalId0 column.
			/// </summary>
			public void SetExternalId0Null()
			{
				this[this.tableTimeInForce.ExternalId0Column] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the ExternalId1 column.
			/// </summary>
			public void SetExternalId1Null()
			{
				this[this.tableTimeInForce.ExternalId1Column] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the ExternalId2 column.
			/// </summary>
			public void SetExternalId2Null()
			{
				this[this.tableTimeInForce.ExternalId2Column] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the ExternalId3 column.
			/// </summary>
			public void SetExternalId3Null()
			{
				this[this.tableTimeInForce.ExternalId3Column] = global::System.DBNull.Value;
			}
		}
		
		/// <summary>
		/// Represents a row of data in the TimeUnit table.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		public partial class TimeUnitRow : global::System.Data.DataRow
		{
			
			private TimeUnitDataTable tableTimeUnit;
			
			/// <summary>
			/// Creates a row of data from the TimeUnit table schema.
			/// </summary>
			/// <param name="dataRowBuilder">An internal data structure used to build the row from the parent table schema.</param>
			internal TimeUnitRow(global::System.Data.DataRowBuilder dataRowBuilder) : 
					base(dataRowBuilder)
			{
				// This creates a strongly typed TimeUnit row using the generic construction methods.
				this.tableTimeUnit = ((TimeUnitDataTable)(this.Table));
			}
			
			/// <summary>
			/// Gets or sets the data in the ExternalId0 column.
			/// </summary>
			public string ExternalId0
			{
				get
				{
					try
					{
						return ((string)(this[this.tableTimeUnit.ExternalId0Column]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableTimeUnit.ExternalId0Column] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the InDays column.
			/// </summary>
			public decimal InDays
			{
				get
				{
					return ((decimal)(this[this.tableTimeUnit.InDaysColumn]));
				}
				set
				{
					this[this.tableTimeUnit.InDaysColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the Name column.
			/// </summary>
			public string Name
			{
				get
				{
					try
					{
						return ((string)(this[this.tableTimeUnit.NameColumn]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableTimeUnit.NameColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the RowVersion column.
			/// </summary>
			public long RowVersion
			{
				get
				{
					return ((long)(this[this.tableTimeUnit.RowVersionColumn]));
				}
				set
				{
					this[this.tableTimeUnit.RowVersionColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the TimeUnitCode column.
			/// </summary>
			public global::Teraque.TimeUnitCode TimeUnitCode
			{
				get
				{
					return ((global::Teraque.TimeUnitCode)(this[this.tableTimeUnit.TimeUnitCodeColumn]));
				}
				set
				{
					this[this.tableTimeUnit.TimeUnitCodeColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets the Null property of the ExternalId0 column.
			/// </summary>
			public bool IsExternalId0Null()
			{
				return (this[this.tableTimeUnit.ExternalId0Column] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the Name column.
			/// </summary>
			public bool IsNameNull()
			{
				return (this[this.tableTimeUnit.NameColumn] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Sets the Null property of the ExternalId0 column.
			/// </summary>
			public void SetExternalId0Null()
			{
				this[this.tableTimeUnit.ExternalId0Column] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the Name column.
			/// </summary>
			public void SetNameNull()
			{
				this[this.tableTimeUnit.NameColumn] = global::System.DBNull.Value;
			}
		}
		
		/// <summary>
		/// Represents a row of data in the Trader table.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		public partial class TraderRow : global::System.Data.DataRow
		{
			
			private TraderDataTable tableTrader;
			
			/// <summary>
			/// Creates a row of data from the Trader table schema.
			/// </summary>
			/// <param name="dataRowBuilder">An internal data structure used to build the row from the parent table schema.</param>
			internal TraderRow(global::System.Data.DataRowBuilder dataRowBuilder) : 
					base(dataRowBuilder)
			{
				// This creates a strongly typed Trader row using the generic construction methods.
				this.tableTrader = ((TraderDataTable)(this.Table));
			}
			
			/// <summary>
			/// Gets or sets the data in the Address1 column.
			/// </summary>
			public string Address1
			{
				get
				{
					try
					{
						return ((string)(this[this.tableTrader.Address1Column]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableTrader.Address1Column] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the Address2 column.
			/// </summary>
			public string Address2
			{
				get
				{
					try
					{
						return ((string)(this[this.tableTrader.Address2Column]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableTrader.Address2Column] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the Address3 column.
			/// </summary>
			public string Address3
			{
				get
				{
					try
					{
						return ((string)(this[this.tableTrader.Address3Column]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableTrader.Address3Column] = value;
				}
			}
			
			/// <summary>
			/// Gets the parent row in the Blotter table.
			/// </summary>
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public BlotterRow BlotterRow
			{
				get
				{
					return ((BlotterRow)(this.GetParentRow(this.tableTrader.BlotterTraderRelation)));
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the CommissionMaximum column.
			/// </summary>
			public decimal CommissionMaximum
			{
				get
				{
					try
					{
						return ((decimal)(this[this.tableTrader.CommissionMaximumColumn]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableTrader.CommissionMaximumColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the CommissionMinimum column.
			/// </summary>
			public decimal CommissionMinimum
			{
				get
				{
					try
					{
						return ((decimal)(this[this.tableTrader.CommissionMinimumColumn]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableTrader.CommissionMinimumColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the CommissionRate column.
			/// </summary>
			public decimal CommissionRate
			{
				get
				{
					try
					{
						return ((decimal)(this[this.tableTrader.CommissionRateColumn]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableTrader.CommissionRateColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the CommissionRateTypeCode column.
			/// </summary>
			public int CommissionRateTypeCode
			{
				get
				{
					try
					{
						return ((int)(this[this.tableTrader.CommissionRateTypeCodeColumn]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableTrader.CommissionRateTypeCodeColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the CrossingCode column.
			/// </summary>
			public global::Teraque.CrossingCode CrossingCode
			{
				get
				{
					return ((global::Teraque.CrossingCode)(this[this.tableTrader.CrossingCodeColumn]));
				}
				set
				{
					this[this.tableTrader.CrossingCodeColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the DefaultAccountId column.
			/// </summary>
			public global::System.Guid DefaultAccountId
			{
				get
				{
					try
					{
						return ((global::System.Guid)(this[this.tableTrader.DefaultAccountIdColumn]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableTrader.DefaultAccountIdColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the DefaultBlotterId column.
			/// </summary>
			public global::System.Guid DefaultBlotterId
			{
				get
				{
					try
					{
						return ((global::System.Guid)(this[this.tableTrader.DefaultBlotterIdColumn]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableTrader.DefaultBlotterIdColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the EmailAddress column.
			/// </summary>
			public string EmailAddress
			{
				get
				{
					try
					{
						return ((string)(this[this.tableTrader.EmailAddressColumn]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableTrader.EmailAddressColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the FixAccountId column.
			/// </summary>
			public string FixAccountId
			{
				get
				{
					try
					{
						return ((string)(this[this.tableTrader.FixAccountIdColumn]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableTrader.FixAccountIdColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the IsAgencyMatch column.
			/// </summary>
			public bool IsAgencyMatch
			{
				get
				{
					return ((bool)(this[this.tableTrader.IsAgencyMatchColumn]));
				}
				set
				{
					this[this.tableTrader.IsAgencyMatchColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the IsBrokerMatch column.
			/// </summary>
			public bool IsBrokerMatch
			{
				get
				{
					return ((bool)(this[this.tableTrader.IsBrokerMatchColumn]));
				}
				set
				{
					this[this.tableTrader.IsBrokerMatchColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the IsCommissionChangeAllowed column.
			/// </summary>
			public bool IsCommissionChangeAllowed
			{
				get
				{
					return ((bool)(this[this.tableTrader.IsCommissionChangeAllowedColumn]));
				}
				set
				{
					this[this.tableTrader.IsCommissionChangeAllowedColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the IsEditExecutionsAllowed column.
			/// </summary>
			public bool IsEditExecutionsAllowed
			{
				get
				{
					return ((bool)(this[this.tableTrader.IsEditExecutionsAllowedColumn]));
				}
				set
				{
					this[this.tableTrader.IsEditExecutionsAllowedColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the IsHedgeMatch column.
			/// </summary>
			public bool IsHedgeMatch
			{
				get
				{
					return ((bool)(this[this.tableTrader.IsHedgeMatchColumn]));
				}
				set
				{
					this[this.tableTrader.IsHedgeMatchColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the IsHeld column.
			/// </summary>
			public bool IsHeld
			{
				get
				{
					return ((bool)(this[this.tableTrader.IsHeldColumn]));
				}
				set
				{
					this[this.tableTrader.IsHeldColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the IsInstitutionMatch column.
			/// </summary>
			public bool IsInstitutionMatch
			{
				get
				{
					return ((bool)(this[this.tableTrader.IsInstitutionMatchColumn]));
				}
				set
				{
					this[this.tableTrader.IsInstitutionMatchColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the LastDeletedOrder column.
			/// </summary>
			public global::System.DateTime LastDeletedOrder
			{
				get
				{
					try
					{
						return ((global::System.DateTime)(this[this.tableTrader.LastDeletedOrderColumn]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableTrader.LastDeletedOrderColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the LastFilledOrder column.
			/// </summary>
			public global::System.DateTime LastFilledOrder
			{
				get
				{
					try
					{
						return ((global::System.DateTime)(this[this.tableTrader.LastFilledOrderColumn]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableTrader.LastFilledOrderColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the LastFilledSourceOrder column.
			/// </summary>
			public global::System.DateTime LastFilledSourceOrder
			{
				get
				{
					try
					{
						return ((global::System.DateTime)(this[this.tableTrader.LastFilledSourceOrderColumn]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableTrader.LastFilledSourceOrderColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the LastTrade column.
			/// </summary>
			public global::System.DateTime LastTrade
			{
				get
				{
					try
					{
						return ((global::System.DateTime)(this[this.tableTrader.LastTradeColumn]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableTrader.LastTradeColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the LotSizeDefault column.
			/// </summary>
			public int LotSizeDefault
			{
				get
				{
					return ((int)(this[this.tableTrader.LotSizeDefaultColumn]));
				}
				set
				{
					this[this.tableTrader.LotSizeDefaultColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the MarketSleep column.
			/// </summary>
			public int MarketSleep
			{
				get
				{
					return ((int)(this[this.tableTrader.MarketSleepColumn]));
				}
				set
				{
					this[this.tableTrader.MarketSleepColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the MaximumVolatilityDefault column.
			/// </summary>
			public decimal MaximumVolatilityDefault
			{
				get
				{
					try
					{
						return ((decimal)(this[this.tableTrader.MaximumVolatilityDefaultColumn]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableTrader.MaximumVolatilityDefaultColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the NewsFreeTimeDefault column.
			/// </summary>
			public int NewsFreeTimeDefault
			{
				get
				{
					try
					{
						return ((int)(this[this.tableTrader.NewsFreeTimeDefaultColumn]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableTrader.NewsFreeTimeDefaultColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the OatsAccountType column.
			/// </summary>
			public string OatsAccountType
			{
				get
				{
					try
					{
						return ((string)(this[this.tableTrader.OatsAccountTypeColumn]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableTrader.OatsAccountTypeColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the OatsOrigDeptId column.
			/// </summary>
			public string OatsOrigDeptId
			{
				get
				{
					try
					{
						return ((string)(this[this.tableTrader.OatsOrigDeptIdColumn]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableTrader.OatsOrigDeptIdColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the OrderMaximumLimitDelta column.
			/// </summary>
			public decimal OrderMaximumLimitDelta
			{
				get
				{
					try
					{
						return ((decimal)(this[this.tableTrader.OrderMaximumLimitDeltaColumn]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableTrader.OrderMaximumLimitDeltaColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the OrderMaximumMarketValue column.
			/// </summary>
			public decimal OrderMaximumMarketValue
			{
				get
				{
					try
					{
						return ((decimal)(this[this.tableTrader.OrderMaximumMarketValueColumn]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableTrader.OrderMaximumMarketValueColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the OrderMaximumQuantity column.
			/// </summary>
			public decimal OrderMaximumQuantity
			{
				get
				{
					try
					{
						return ((decimal)(this[this.tableTrader.OrderMaximumQuantityColumn]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableTrader.OrderMaximumQuantityColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the OrderWarningMarketValue column.
			/// </summary>
			public decimal OrderWarningMarketValue
			{
				get
				{
					try
					{
						return ((decimal)(this[this.tableTrader.OrderWarningMarketValueColumn]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableTrader.OrderWarningMarketValueColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the OrderWarningQuantity column.
			/// </summary>
			public decimal OrderWarningQuantity
			{
				get
				{
					try
					{
						return ((decimal)(this[this.tableTrader.OrderWarningQuantityColumn]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableTrader.OrderWarningQuantityColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the Phone column.
			/// </summary>
			public string Phone
			{
				get
				{
					try
					{
						return ((string)(this[this.tableTrader.PhoneColumn]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableTrader.PhoneColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the ReviewWindow column.
			/// </summary>
			public int ReviewWindow
			{
				get
				{
					return ((int)(this[this.tableTrader.ReviewWindowColumn]));
				}
				set
				{
					this[this.tableTrader.ReviewWindowColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the RowVersion column.
			/// </summary>
			public long RowVersion
			{
				get
				{
					return ((long)(this[this.tableTrader.RowVersionColumn]));
				}
				set
				{
					this[this.tableTrader.RowVersionColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the ScraperConfigurationString column.
			/// </summary>
			public string ScraperConfigurationString
			{
				get
				{
					try
					{
						return ((string)(this[this.tableTrader.ScraperConfigurationStringColumn]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableTrader.ScraperConfigurationStringColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the StartTimeDefault column.
			/// </summary>
			public global::System.DateTime StartTimeDefault
			{
				get
				{
					try
					{
						return ((global::System.DateTime)(this[this.tableTrader.StartTimeDefaultColumn]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableTrader.StartTimeDefaultColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the StopTimeDefault column.
			/// </summary>
			public global::System.DateTime StopTimeDefault
			{
				get
				{
					try
					{
						return ((global::System.DateTime)(this[this.tableTrader.StopTimeDefaultColumn]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableTrader.StopTimeDefaultColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the TagId column.
			/// </summary>
			public string TagId
			{
				get
				{
					try
					{
						return ((string)(this[this.tableTrader.TagIdColumn]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableTrader.TagIdColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the TraderId column.
			/// </summary>
			public global::System.Guid TraderId
			{
				get
				{
					return ((global::System.Guid)(this[this.tableTrader.TraderIdColumn]));
				}
				set
				{
					this[this.tableTrader.TraderIdColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets the parent row in the User table.
			/// </summary>
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public UserRow UserRow
			{
				get
				{
					return ((UserRow)(this.GetParentRow(this.tableTrader.UserTraderRelation)));
				}
			}
			
			/// <summary>
			/// Gets the children rows in the BrokerAccount table.
			/// </summary>
			public BrokerAccountRow[] GetBrokerAccountRows()
			{
				return ((BrokerAccountRow[])(this.GetChildRows(this.tableTrader.TraderBrokerAccountRelation)));
			}
			
			/// <summary>
			/// Gets the children rows in the DestinationOrder table.
			/// </summary>
			public DestinationOrderRow[] GetDestinationOrderRows()
			{
				return ((DestinationOrderRow[])(this.GetChildRows(this.tableTrader.TraderDestinationOrderRelation)));
			}
			
			/// <summary>
			/// Gets the children rows in the TraderVolumeSetting table.
			/// </summary>
			public TraderVolumeSettingRow[] GetTraderVolumeSettingRows()
			{
				return ((TraderVolumeSettingRow[])(this.GetChildRows(this.tableTrader.TraderTraderVolumeSettingRelation)));
			}
			
			/// <summary>
			/// Gets the Null property of the Address1 column.
			/// </summary>
			public bool IsAddress1Null()
			{
				return (this[this.tableTrader.Address1Column] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the Address2 column.
			/// </summary>
			public bool IsAddress2Null()
			{
				return (this[this.tableTrader.Address2Column] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the Address3 column.
			/// </summary>
			public bool IsAddress3Null()
			{
				return (this[this.tableTrader.Address3Column] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the CommissionMaximum column.
			/// </summary>
			public bool IsCommissionMaximumNull()
			{
				return (this[this.tableTrader.CommissionMaximumColumn] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the CommissionMinimum column.
			/// </summary>
			public bool IsCommissionMinimumNull()
			{
				return (this[this.tableTrader.CommissionMinimumColumn] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the CommissionRate column.
			/// </summary>
			public bool IsCommissionRateNull()
			{
				return (this[this.tableTrader.CommissionRateColumn] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the CommissionRateTypeCode column.
			/// </summary>
			public bool IsCommissionRateTypeCodeNull()
			{
				return (this[this.tableTrader.CommissionRateTypeCodeColumn] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the DefaultAccountId column.
			/// </summary>
			public bool IsDefaultAccountIdNull()
			{
				return (this[this.tableTrader.DefaultAccountIdColumn] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the DefaultBlotterId column.
			/// </summary>
			public bool IsDefaultBlotterIdNull()
			{
				return (this[this.tableTrader.DefaultBlotterIdColumn] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the EmailAddress column.
			/// </summary>
			public bool IsEmailAddressNull()
			{
				return (this[this.tableTrader.EmailAddressColumn] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the FixAccountId column.
			/// </summary>
			public bool IsFixAccountIdNull()
			{
				return (this[this.tableTrader.FixAccountIdColumn] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the LastDeletedOrder column.
			/// </summary>
			public bool IsLastDeletedOrderNull()
			{
				return (this[this.tableTrader.LastDeletedOrderColumn] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the LastFilledOrder column.
			/// </summary>
			public bool IsLastFilledOrderNull()
			{
				return (this[this.tableTrader.LastFilledOrderColumn] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the LastFilledSourceOrder column.
			/// </summary>
			public bool IsLastFilledSourceOrderNull()
			{
				return (this[this.tableTrader.LastFilledSourceOrderColumn] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the LastTrade column.
			/// </summary>
			public bool IsLastTradeNull()
			{
				return (this[this.tableTrader.LastTradeColumn] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the MaximumVolatilityDefault column.
			/// </summary>
			public bool IsMaximumVolatilityDefaultNull()
			{
				return (this[this.tableTrader.MaximumVolatilityDefaultColumn] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the NewsFreeTimeDefault column.
			/// </summary>
			public bool IsNewsFreeTimeDefaultNull()
			{
				return (this[this.tableTrader.NewsFreeTimeDefaultColumn] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the OatsAccountType column.
			/// </summary>
			public bool IsOatsAccountTypeNull()
			{
				return (this[this.tableTrader.OatsAccountTypeColumn] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the OatsOrigDeptId column.
			/// </summary>
			public bool IsOatsOrigDeptIdNull()
			{
				return (this[this.tableTrader.OatsOrigDeptIdColumn] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the OrderMaximumLimitDelta column.
			/// </summary>
			public bool IsOrderMaximumLimitDeltaNull()
			{
				return (this[this.tableTrader.OrderMaximumLimitDeltaColumn] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the OrderMaximumMarketValue column.
			/// </summary>
			public bool IsOrderMaximumMarketValueNull()
			{
				return (this[this.tableTrader.OrderMaximumMarketValueColumn] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the OrderMaximumQuantity column.
			/// </summary>
			public bool IsOrderMaximumQuantityNull()
			{
				return (this[this.tableTrader.OrderMaximumQuantityColumn] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the OrderWarningMarketValue column.
			/// </summary>
			public bool IsOrderWarningMarketValueNull()
			{
				return (this[this.tableTrader.OrderWarningMarketValueColumn] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the OrderWarningQuantity column.
			/// </summary>
			public bool IsOrderWarningQuantityNull()
			{
				return (this[this.tableTrader.OrderWarningQuantityColumn] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the Phone column.
			/// </summary>
			public bool IsPhoneNull()
			{
				return (this[this.tableTrader.PhoneColumn] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the ScraperConfigurationString column.
			/// </summary>
			public bool IsScraperConfigurationStringNull()
			{
				return (this[this.tableTrader.ScraperConfigurationStringColumn] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the StartTimeDefault column.
			/// </summary>
			public bool IsStartTimeDefaultNull()
			{
				return (this[this.tableTrader.StartTimeDefaultColumn] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the StopTimeDefault column.
			/// </summary>
			public bool IsStopTimeDefaultNull()
			{
				return (this[this.tableTrader.StopTimeDefaultColumn] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the TagId column.
			/// </summary>
			public bool IsTagIdNull()
			{
				return (this[this.tableTrader.TagIdColumn] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Sets the Null property of the Address1 column.
			/// </summary>
			public void SetAddress1Null()
			{
				this[this.tableTrader.Address1Column] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the Address2 column.
			/// </summary>
			public void SetAddress2Null()
			{
				this[this.tableTrader.Address2Column] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the Address3 column.
			/// </summary>
			public void SetAddress3Null()
			{
				this[this.tableTrader.Address3Column] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the CommissionMaximum column.
			/// </summary>
			public void SetCommissionMaximumNull()
			{
				this[this.tableTrader.CommissionMaximumColumn] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the CommissionMinimum column.
			/// </summary>
			public void SetCommissionMinimumNull()
			{
				this[this.tableTrader.CommissionMinimumColumn] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the CommissionRate column.
			/// </summary>
			public void SetCommissionRateNull()
			{
				this[this.tableTrader.CommissionRateColumn] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the CommissionRateTypeCode column.
			/// </summary>
			public void SetCommissionRateTypeCodeNull()
			{
				this[this.tableTrader.CommissionRateTypeCodeColumn] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the DefaultAccountId column.
			/// </summary>
			public void SetDefaultAccountIdNull()
			{
				this[this.tableTrader.DefaultAccountIdColumn] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the DefaultBlotterId column.
			/// </summary>
			public void SetDefaultBlotterIdNull()
			{
				this[this.tableTrader.DefaultBlotterIdColumn] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the EmailAddress column.
			/// </summary>
			public void SetEmailAddressNull()
			{
				this[this.tableTrader.EmailAddressColumn] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the FixAccountId column.
			/// </summary>
			public void SetFixAccountIdNull()
			{
				this[this.tableTrader.FixAccountIdColumn] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the LastDeletedOrder column.
			/// </summary>
			public void SetLastDeletedOrderNull()
			{
				this[this.tableTrader.LastDeletedOrderColumn] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the LastFilledOrder column.
			/// </summary>
			public void SetLastFilledOrderNull()
			{
				this[this.tableTrader.LastFilledOrderColumn] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the LastFilledSourceOrder column.
			/// </summary>
			public void SetLastFilledSourceOrderNull()
			{
				this[this.tableTrader.LastFilledSourceOrderColumn] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the LastTrade column.
			/// </summary>
			public void SetLastTradeNull()
			{
				this[this.tableTrader.LastTradeColumn] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the MaximumVolatilityDefault column.
			/// </summary>
			public void SetMaximumVolatilityDefaultNull()
			{
				this[this.tableTrader.MaximumVolatilityDefaultColumn] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the NewsFreeTimeDefault column.
			/// </summary>
			public void SetNewsFreeTimeDefaultNull()
			{
				this[this.tableTrader.NewsFreeTimeDefaultColumn] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the OatsAccountType column.
			/// </summary>
			public void SetOatsAccountTypeNull()
			{
				this[this.tableTrader.OatsAccountTypeColumn] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the OatsOrigDeptId column.
			/// </summary>
			public void SetOatsOrigDeptIdNull()
			{
				this[this.tableTrader.OatsOrigDeptIdColumn] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the OrderMaximumLimitDelta column.
			/// </summary>
			public void SetOrderMaximumLimitDeltaNull()
			{
				this[this.tableTrader.OrderMaximumLimitDeltaColumn] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the OrderMaximumMarketValue column.
			/// </summary>
			public void SetOrderMaximumMarketValueNull()
			{
				this[this.tableTrader.OrderMaximumMarketValueColumn] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the OrderMaximumQuantity column.
			/// </summary>
			public void SetOrderMaximumQuantityNull()
			{
				this[this.tableTrader.OrderMaximumQuantityColumn] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the OrderWarningMarketValue column.
			/// </summary>
			public void SetOrderWarningMarketValueNull()
			{
				this[this.tableTrader.OrderWarningMarketValueColumn] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the OrderWarningQuantity column.
			/// </summary>
			public void SetOrderWarningQuantityNull()
			{
				this[this.tableTrader.OrderWarningQuantityColumn] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the Phone column.
			/// </summary>
			public void SetPhoneNull()
			{
				this[this.tableTrader.PhoneColumn] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the ScraperConfigurationString column.
			/// </summary>
			public void SetScraperConfigurationStringNull()
			{
				this[this.tableTrader.ScraperConfigurationStringColumn] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the StartTimeDefault column.
			/// </summary>
			public void SetStartTimeDefaultNull()
			{
				this[this.tableTrader.StartTimeDefaultColumn] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the StopTimeDefault column.
			/// </summary>
			public void SetStopTimeDefaultNull()
			{
				this[this.tableTrader.StopTimeDefaultColumn] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the TagId column.
			/// </summary>
			public void SetTagIdNull()
			{
				this[this.tableTrader.TagIdColumn] = global::System.DBNull.Value;
			}
		}
		
		/// <summary>
		/// Represents a row of data in the TraderVolumeSetting table.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		public partial class TraderVolumeSettingRow : global::System.Data.DataRow
		{
			
			private TraderVolumeSettingDataTable tableTraderVolumeSetting;
			
			/// <summary>
			/// Creates a row of data from the TraderVolumeSetting table schema.
			/// </summary>
			/// <param name="dataRowBuilder">An internal data structure used to build the row from the parent table schema.</param>
			internal TraderVolumeSettingRow(global::System.Data.DataRowBuilder dataRowBuilder) : 
					base(dataRowBuilder)
			{
				// This creates a strongly typed TraderVolumeSetting row using the generic construction methods.
				this.tableTraderVolumeSetting = ((TraderVolumeSettingDataTable)(this.Table));
			}
			
			/// <summary>
			/// Gets or sets the data in the AutoExecuteQuantity column.
			/// </summary>
			public decimal AutoExecuteQuantity
			{
				get
				{
					return ((decimal)(this[this.tableTraderVolumeSetting.AutoExecuteQuantityColumn]));
				}
				set
				{
					this[this.tableTraderVolumeSetting.AutoExecuteQuantityColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the ExternalId0 column.
			/// </summary>
			public string ExternalId0
			{
				get
				{
					try
					{
						return ((string)(this[this.tableTraderVolumeSetting.ExternalId0Column]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableTraderVolumeSetting.ExternalId0Column] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the RowVersion column.
			/// </summary>
			public long RowVersion
			{
				get
				{
					return ((long)(this[this.tableTraderVolumeSetting.RowVersionColumn]));
				}
				set
				{
					this[this.tableTraderVolumeSetting.RowVersionColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the ThresholdQuantity column.
			/// </summary>
			public decimal ThresholdQuantity
			{
				get
				{
					return ((decimal)(this[this.tableTraderVolumeSetting.ThresholdQuantityColumn]));
				}
				set
				{
					this[this.tableTraderVolumeSetting.ThresholdQuantityColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the TraderId column.
			/// </summary>
			public global::System.Guid TraderId
			{
				get
				{
					return ((global::System.Guid)(this[this.tableTraderVolumeSetting.TraderIdColumn]));
				}
				set
				{
					this[this.tableTraderVolumeSetting.TraderIdColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets the parent row in the Trader table.
			/// </summary>
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public TraderRow TraderRow
			{
				get
				{
					return ((TraderRow)(this.GetParentRow(this.tableTraderVolumeSetting.TraderTraderVolumeSettingRelation)));
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the TraderVolumeSettingId column.
			/// </summary>
			public global::System.Guid TraderVolumeSettingId
			{
				get
				{
					return ((global::System.Guid)(this[this.tableTraderVolumeSetting.TraderVolumeSettingIdColumn]));
				}
				set
				{
					this[this.tableTraderVolumeSetting.TraderVolumeSettingIdColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the VolumeCategoryCode column.
			/// </summary>
			public global::Teraque.VolumeCategoryCode VolumeCategoryCode
			{
				get
				{
					return ((global::Teraque.VolumeCategoryCode)(this[this.tableTraderVolumeSetting.VolumeCategoryCodeColumn]));
				}
				set
				{
					this[this.tableTraderVolumeSetting.VolumeCategoryCodeColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets the parent row in the VolumeCategory table.
			/// </summary>
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public VolumeCategoryRow VolumeCategoryRow
			{
				get
				{
					return ((VolumeCategoryRow)(this.GetParentRow(this.tableTraderVolumeSetting.VolumeCategoryTraderVolumeSettingRelation)));
				}
			}
			
			/// <summary>
			/// Gets the Null property of the ExternalId0 column.
			/// </summary>
			public bool IsExternalId0Null()
			{
				return (this[this.tableTraderVolumeSetting.ExternalId0Column] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Sets the Null property of the ExternalId0 column.
			/// </summary>
			public void SetExternalId0Null()
			{
				this[this.tableTraderVolumeSetting.ExternalId0Column] = global::System.DBNull.Value;
			}
		}
		
		/// <summary>
		/// Represents a row of data in the Type table.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		public partial class TypeRow : global::System.Data.DataRow
		{
			
			private TypeDataTable tableType;
			
			/// <summary>
			/// Creates a row of data from the Type table schema.
			/// </summary>
			/// <param name="dataRowBuilder">An internal data structure used to build the row from the parent table schema.</param>
			internal TypeRow(global::System.Data.DataRowBuilder dataRowBuilder) : 
					base(dataRowBuilder)
			{
				// This creates a strongly typed Type row using the generic construction methods.
				this.tableType = ((TypeDataTable)(this.Table));
			}
			
			/// <summary>
			/// Gets or sets the data in the Description column.
			/// </summary>
			public string Description
			{
				get
				{
					return ((string)(this[this.tableType.DescriptionColumn]));
				}
				set
				{
					this[this.tableType.DescriptionColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the ExternalId0 column.
			/// </summary>
			public string ExternalId0
			{
				get
				{
					try
					{
						return ((string)(this[this.tableType.ExternalId0Column]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableType.ExternalId0Column] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the ImageId column.
			/// </summary>
			public global::System.Guid ImageId
			{
				get
				{
					try
					{
						return ((global::System.Guid)(this[this.tableType.ImageIdColumn]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableType.ImageIdColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets the parent row in the Image table.
			/// </summary>
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public ImageRow ImageRow
			{
				get
				{
					return ((ImageRow)(this.GetParentRow(this.tableType.ImageTypeRelation)));
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the RowVersion column.
			/// </summary>
			public long RowVersion
			{
				get
				{
					return ((long)(this[this.tableType.RowVersionColumn]));
				}
				set
				{
					this[this.tableType.RowVersionColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the Type column.
			/// </summary>
			public string Type
			{
				get
				{
					return ((string)(this[this.tableType.TypeColumn]));
				}
				set
				{
					this[this.tableType.TypeColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the TypeId column.
			/// </summary>
			public global::System.Guid TypeId
			{
				get
				{
					return ((global::System.Guid)(this[this.tableType.TypeIdColumn]));
				}
				set
				{
					this[this.tableType.TypeIdColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets the children rows in the Entity table.
			/// </summary>
			public EntityRow[] GetEntityRows()
			{
				return ((EntityRow[])(this.GetChildRows(this.tableType.TypeEntityRelation)));
			}
			
			/// <summary>
			/// Gets the Null property of the ExternalId0 column.
			/// </summary>
			public bool IsExternalId0Null()
			{
				return (this[this.tableType.ExternalId0Column] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the ImageId column.
			/// </summary>
			public bool IsImageIdNull()
			{
				return (this[this.tableType.ImageIdColumn] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Sets the Null property of the ExternalId0 column.
			/// </summary>
			public void SetExternalId0Null()
			{
				this[this.tableType.ExternalId0Column] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the ImageId column.
			/// </summary>
			public void SetImageIdNull()
			{
				this[this.tableType.ImageIdColumn] = global::System.DBNull.Value;
			}
		}
		
		/// <summary>
		/// Represents a row of data in the User table.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		public partial class UserRow : global::System.Data.DataRow
		{
			
			private UserDataTable tableUser;
			
			/// <summary>
			/// Creates a row of data from the User table schema.
			/// </summary>
			/// <param name="dataRowBuilder">An internal data structure used to build the row from the parent table schema.</param>
			internal UserRow(global::System.Data.DataRowBuilder dataRowBuilder) : 
					base(dataRowBuilder)
			{
				// This creates a strongly typed User row using the generic construction methods.
				this.tableUser = ((UserDataTable)(this.Table));
			}
			
			/// <summary>
			/// Gets or sets the data in the DistinguishedName column.
			/// </summary>
			public string DistinguishedName
			{
				get
				{
					return ((string)(this[this.tableUser.DistinguishedNameColumn]));
				}
				set
				{
					this[this.tableUser.DistinguishedNameColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets the parent row in the Entity table.
			/// </summary>
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public EntityRow EntityRow
			{
				get
				{
					return ((EntityRow)(this.GetParentRow(this.tableUser.EntityUserRelation)));
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the IsRemoved column.
			/// </summary>
			public bool IsRemoved
			{
				get
				{
					return ((bool)(this[this.tableUser.IsRemovedColumn]));
				}
				set
				{
					this[this.tableUser.IsRemovedColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the Preferences column.
			/// </summary>
			public byte[] Preferences
			{
				get
				{
					try
					{
						return ((byte[])(this[this.tableUser.PreferencesColumn]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableUser.PreferencesColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the RowVersion column.
			/// </summary>
			public long RowVersion
			{
				get
				{
					return ((long)(this[this.tableUser.RowVersionColumn]));
				}
				set
				{
					this[this.tableUser.RowVersionColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the UserId column.
			/// </summary>
			public global::System.Guid UserId
			{
				get
				{
					return ((global::System.Guid)(this[this.tableUser.UserIdColumn]));
				}
				set
				{
					this[this.tableUser.UserIdColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets the children rows in the Allocation table.
			/// </summary>
			public AllocationRow[] GetAllocationRowsByFK_User_Allocation_CreatedUserId()
			{
				return ((AllocationRow[])(this.GetChildRows(this.tableUser.UserAllocationByFK_User_Allocation_CreatedUserIdRelation)));
			}
			
			/// <summary>
			/// Gets the children rows in the Allocation table.
			/// </summary>
			public AllocationRow[] GetAllocationRowsByFK_User_Allocation_ModifiedUserId()
			{
				return ((AllocationRow[])(this.GetChildRows(this.tableUser.UserAllocationByFK_User_Allocation_ModifiedUserIdRelation)));
			}
			
			/// <summary>
			/// Gets the children rows in the ComplianceOfficer table.
			/// </summary>
			public ComplianceOfficerRow[] GetComplianceOfficerRows()
			{
				return ((ComplianceOfficerRow[])(this.GetChildRows(this.tableUser.UserComplianceOfficerRelation)));
			}
			
			/// <summary>
			/// Gets the children rows in the DestinationOrder table.
			/// </summary>
			public DestinationOrderRow[] GetDestinationOrderRowsByFK_User_DestinationOrder_CreatedUserId()
			{
				return ((DestinationOrderRow[])(this.GetChildRows(this.tableUser.UserDestinationOrderByFK_User_DestinationOrder_CreatedUserIdRelation)));
			}
			
			/// <summary>
			/// Gets the children rows in the DestinationOrder table.
			/// </summary>
			public DestinationOrderRow[] GetDestinationOrderRowsByFK_User_DestinationOrder_ModifiedUserId()
			{
				return ((DestinationOrderRow[])(this.GetChildRows(this.tableUser.UserDestinationOrderByFK_User_DestinationOrder_ModifiedUserIdRelation)));
			}
			
			/// <summary>
			/// Gets the children rows in the Execution table.
			/// </summary>
			public ExecutionRow[] GetExecutionRowsByFK_User_Execution_CreatedUserId()
			{
				return ((ExecutionRow[])(this.GetChildRows(this.tableUser.UserExecutionByFK_User_Execution_CreatedUserIdRelation)));
			}
			
			/// <summary>
			/// Gets the children rows in the Execution table.
			/// </summary>
			public ExecutionRow[] GetExecutionRowsByFK_User_Execution_ModifiedUserId()
			{
				return ((ExecutionRow[])(this.GetChildRows(this.tableUser.UserExecutionByFK_User_Execution_ModifiedUserIdRelation)));
			}
			
			/// <summary>
			/// Gets the children rows in the SourceOrder table.
			/// </summary>
			public SourceOrderRow[] GetSourceOrderRowsByFK_User_SourceOrder_CreatedUserId()
			{
				return ((SourceOrderRow[])(this.GetChildRows(this.tableUser.UserSourceOrderByFK_User_SourceOrder_CreatedUserIdRelation)));
			}
			
			/// <summary>
			/// Gets the children rows in the SourceOrder table.
			/// </summary>
			public SourceOrderRow[] GetSourceOrderRowsByFK_User_SourceOrder_ModifiedUserId()
			{
				return ((SourceOrderRow[])(this.GetChildRows(this.tableUser.UserSourceOrderByFK_User_SourceOrder_ModifiedUserIdRelation)));
			}
			
			/// <summary>
			/// Gets the children rows in the Trader table.
			/// </summary>
			public TraderRow[] GetTraderRows()
			{
				return ((TraderRow[])(this.GetChildRows(this.tableUser.UserTraderRelation)));
			}
			
			/// <summary>
			/// Gets the children rows in the WorkingOrder table.
			/// </summary>
			public WorkingOrderRow[] GetWorkingOrderRowsByFK_User_WorkingOrder_CreatedUserId()
			{
				return ((WorkingOrderRow[])(this.GetChildRows(this.tableUser.UserWorkingOrderByFK_User_WorkingOrder_CreatedUserIdRelation)));
			}
			
			/// <summary>
			/// Gets the children rows in the WorkingOrder table.
			/// </summary>
			public WorkingOrderRow[] GetWorkingOrderRowsByFK_User_WorkingOrder_ModifiedUserId()
			{
				return ((WorkingOrderRow[])(this.GetChildRows(this.tableUser.UserWorkingOrderByFK_User_WorkingOrder_ModifiedUserIdRelation)));
			}
			
			/// <summary>
			/// Gets the Null property of the Preferences column.
			/// </summary>
			public bool IsPreferencesNull()
			{
				return (this[this.tableUser.PreferencesColumn] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Sets the Null property of the Preferences column.
			/// </summary>
			public void SetPreferencesNull()
			{
				this[this.tableUser.PreferencesColumn] = global::System.DBNull.Value;
			}
		}
		
		/// <summary>
		/// Represents a row of data in the VolumeCategory table.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		public partial class VolumeCategoryRow : global::System.Data.DataRow
		{
			
			private VolumeCategoryDataTable tableVolumeCategory;
			
			/// <summary>
			/// Creates a row of data from the VolumeCategory table schema.
			/// </summary>
			/// <param name="dataRowBuilder">An internal data structure used to build the row from the parent table schema.</param>
			internal VolumeCategoryRow(global::System.Data.DataRowBuilder dataRowBuilder) : 
					base(dataRowBuilder)
			{
				// This creates a strongly typed VolumeCategory row using the generic construction methods.
				this.tableVolumeCategory = ((VolumeCategoryDataTable)(this.Table));
			}
			
			/// <summary>
			/// Gets or sets the data in the Description column.
			/// </summary>
			public string Description
			{
				get
				{
					try
					{
						return ((string)(this[this.tableVolumeCategory.DescriptionColumn]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableVolumeCategory.DescriptionColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the ExternalId0 column.
			/// </summary>
			public string ExternalId0
			{
				get
				{
					try
					{
						return ((string)(this[this.tableVolumeCategory.ExternalId0Column]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableVolumeCategory.ExternalId0Column] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the HighVolumeRange column.
			/// </summary>
			public decimal HighVolumeRange
			{
				get
				{
					try
					{
						return ((decimal)(this[this.tableVolumeCategory.HighVolumeRangeColumn]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableVolumeCategory.HighVolumeRangeColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the LowVolumeRange column.
			/// </summary>
			public decimal LowVolumeRange
			{
				get
				{
					try
					{
						return ((decimal)(this[this.tableVolumeCategory.LowVolumeRangeColumn]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableVolumeCategory.LowVolumeRangeColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the Mnemonic column.
			/// </summary>
			public string Mnemonic
			{
				get
				{
					return ((string)(this[this.tableVolumeCategory.MnemonicColumn]));
				}
				set
				{
					this[this.tableVolumeCategory.MnemonicColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the RowVersion column.
			/// </summary>
			public long RowVersion
			{
				get
				{
					return ((long)(this[this.tableVolumeCategory.RowVersionColumn]));
				}
				set
				{
					this[this.tableVolumeCategory.RowVersionColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the VolumeCategoryCode column.
			/// </summary>
			public global::Teraque.VolumeCategoryCode VolumeCategoryCode
			{
				get
				{
					return ((global::Teraque.VolumeCategoryCode)(this[this.tableVolumeCategory.VolumeCategoryCodeColumn]));
				}
				set
				{
					this[this.tableVolumeCategory.VolumeCategoryCodeColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets the children rows in the Security table.
			/// </summary>
			public SecurityRow[] GetSecurityRows()
			{
				return ((SecurityRow[])(this.GetChildRows(this.tableVolumeCategory.VolumeCategorySecurityRelation)));
			}
			
			/// <summary>
			/// Gets the children rows in the TraderVolumeSetting table.
			/// </summary>
			public TraderVolumeSettingRow[] GetTraderVolumeSettingRows()
			{
				return ((TraderVolumeSettingRow[])(this.GetChildRows(this.tableVolumeCategory.VolumeCategoryTraderVolumeSettingRelation)));
			}
			
			/// <summary>
			/// Gets the Null property of the Description column.
			/// </summary>
			public bool IsDescriptionNull()
			{
				return (this[this.tableVolumeCategory.DescriptionColumn] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the ExternalId0 column.
			/// </summary>
			public bool IsExternalId0Null()
			{
				return (this[this.tableVolumeCategory.ExternalId0Column] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the HighVolumeRange column.
			/// </summary>
			public bool IsHighVolumeRangeNull()
			{
				return (this[this.tableVolumeCategory.HighVolumeRangeColumn] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the LowVolumeRange column.
			/// </summary>
			public bool IsLowVolumeRangeNull()
			{
				return (this[this.tableVolumeCategory.LowVolumeRangeColumn] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Sets the Null property of the Description column.
			/// </summary>
			public void SetDescriptionNull()
			{
				this[this.tableVolumeCategory.DescriptionColumn] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the ExternalId0 column.
			/// </summary>
			public void SetExternalId0Null()
			{
				this[this.tableVolumeCategory.ExternalId0Column] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the HighVolumeRange column.
			/// </summary>
			public void SetHighVolumeRangeNull()
			{
				this[this.tableVolumeCategory.HighVolumeRangeColumn] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the LowVolumeRange column.
			/// </summary>
			public void SetLowVolumeRangeNull()
			{
				this[this.tableVolumeCategory.LowVolumeRangeColumn] = global::System.DBNull.Value;
			}
		}
		
		/// <summary>
		/// Represents a row of data in the Weekend table.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		public partial class WeekendRow : global::System.Data.DataRow
		{
			
			private WeekendDataTable tableWeekend;
			
			/// <summary>
			/// Creates a row of data from the Weekend table schema.
			/// </summary>
			/// <param name="dataRowBuilder">An internal data structure used to build the row from the parent table schema.</param>
			internal WeekendRow(global::System.Data.DataRowBuilder dataRowBuilder) : 
					base(dataRowBuilder)
			{
				// This creates a strongly typed Weekend row using the generic construction methods.
				this.tableWeekend = ((WeekendDataTable)(this.Table));
			}
			
			/// <summary>
			/// Gets or sets the data in the ExternalId0 column.
			/// </summary>
			public string ExternalId0
			{
				get
				{
					try
					{
						return ((string)(this[this.tableWeekend.ExternalId0Column]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableWeekend.ExternalId0Column] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the ExternalId1 column.
			/// </summary>
			public string ExternalId1
			{
				get
				{
					try
					{
						return ((string)(this[this.tableWeekend.ExternalId1Column]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableWeekend.ExternalId1Column] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the RowVersion column.
			/// </summary>
			public long RowVersion
			{
				get
				{
					return ((long)(this[this.tableWeekend.RowVersionColumn]));
				}
				set
				{
					this[this.tableWeekend.RowVersionColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the UserCode0 column.
			/// </summary>
			public int UserCode0
			{
				get
				{
					try
					{
						return ((int)(this[this.tableWeekend.UserCode0Column]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableWeekend.UserCode0Column] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the UserCode1 column.
			/// </summary>
			public int UserCode1
			{
				get
				{
					try
					{
						return ((int)(this[this.tableWeekend.UserCode1Column]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableWeekend.UserCode1Column] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the WeekendCode column.
			/// </summary>
			public global::Teraque.WeekendCode WeekendCode
			{
				get
				{
					return ((global::Teraque.WeekendCode)(this[this.tableWeekend.WeekendCodeColumn]));
				}
				set
				{
					this[this.tableWeekend.WeekendCodeColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets the children rows in the Debt table.
			/// </summary>
			public DebtRow[] GetDebtRows()
			{
				return ((DebtRow[])(this.GetChildRows(this.tableWeekend.WeekendDebtRelation)));
			}
			
			/// <summary>
			/// Gets the Null property of the ExternalId0 column.
			/// </summary>
			public bool IsExternalId0Null()
			{
				return (this[this.tableWeekend.ExternalId0Column] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the ExternalId1 column.
			/// </summary>
			public bool IsExternalId1Null()
			{
				return (this[this.tableWeekend.ExternalId1Column] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the UserCode0 column.
			/// </summary>
			public bool IsUserCode0Null()
			{
				return (this[this.tableWeekend.UserCode0Column] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the UserCode1 column.
			/// </summary>
			public bool IsUserCode1Null()
			{
				return (this[this.tableWeekend.UserCode1Column] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Sets the Null property of the ExternalId0 column.
			/// </summary>
			public void SetExternalId0Null()
			{
				this[this.tableWeekend.ExternalId0Column] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the ExternalId1 column.
			/// </summary>
			public void SetExternalId1Null()
			{
				this[this.tableWeekend.ExternalId1Column] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the UserCode0 column.
			/// </summary>
			public void SetUserCode0Null()
			{
				this[this.tableWeekend.UserCode0Column] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the UserCode1 column.
			/// </summary>
			public void SetUserCode1Null()
			{
				this[this.tableWeekend.UserCode1Column] = global::System.DBNull.Value;
			}
		}
		
		/// <summary>
		/// Represents a row of data in the WorkingOrder table.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		public partial class WorkingOrderRow : global::System.Data.DataRow
		{
			
			private WorkingOrderDataTable tableWorkingOrder;
			
			/// <summary>
			/// Creates a row of data from the WorkingOrder table schema.
			/// </summary>
			/// <param name="dataRowBuilder">An internal data structure used to build the row from the parent table schema.</param>
			internal WorkingOrderRow(global::System.Data.DataRowBuilder dataRowBuilder) : 
					base(dataRowBuilder)
			{
				// This creates a strongly typed WorkingOrder row using the generic construction methods.
				this.tableWorkingOrder = ((WorkingOrderDataTable)(this.Table));
			}
			
			/// <summary>
			/// Gets or sets the data in the AutomaticQuantity column.
			/// </summary>
			public decimal AutomaticQuantity
			{
				get
				{
					try
					{
						return ((decimal)(this[this.tableWorkingOrder.AutomaticQuantityColumn]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableWorkingOrder.AutomaticQuantityColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the BlotterId column.
			/// </summary>
			public global::System.Guid BlotterId
			{
				get
				{
					return ((global::System.Guid)(this[this.tableWorkingOrder.BlotterIdColumn]));
				}
				set
				{
					this[this.tableWorkingOrder.BlotterIdColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets the parent row in the Blotter table.
			/// </summary>
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public BlotterRow BlotterRow
			{
				get
				{
					return ((BlotterRow)(this.GetParentRow(this.tableWorkingOrder.BlotterWorkingOrderRelation)));
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the CreatedTime column.
			/// </summary>
			public global::System.DateTime CreatedTime
			{
				get
				{
					return ((global::System.DateTime)(this[this.tableWorkingOrder.CreatedTimeColumn]));
				}
				set
				{
					this[this.tableWorkingOrder.CreatedTimeColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the CreatedUserId column.
			/// </summary>
			public global::System.Guid CreatedUserId
			{
				get
				{
					return ((global::System.Guid)(this[this.tableWorkingOrder.CreatedUserIdColumn]));
				}
				set
				{
					this[this.tableWorkingOrder.CreatedUserIdColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the CrossingCode column.
			/// </summary>
			public global::Teraque.CrossingCode CrossingCode
			{
				get
				{
					return ((global::Teraque.CrossingCode)(this[this.tableWorkingOrder.CrossingCodeColumn]));
				}
				set
				{
					this[this.tableWorkingOrder.CrossingCodeColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets the parent row in the Crossing table.
			/// </summary>
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public CrossingRow CrossingRow
			{
				get
				{
					return ((CrossingRow)(this.GetParentRow(this.tableWorkingOrder.CrossingWorkingOrderRelation)));
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the DestinationId column.
			/// </summary>
			public global::System.Guid DestinationId
			{
				get
				{
					try
					{
						return ((global::System.Guid)(this[this.tableWorkingOrder.DestinationIdColumn]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableWorkingOrder.DestinationIdColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets the parent row in the Destination table.
			/// </summary>
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public DestinationRow DestinationRow
			{
				get
				{
					return ((DestinationRow)(this.GetParentRow(this.tableWorkingOrder.DestinationWorkingOrderRelation)));
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the ExternalId0 column.
			/// </summary>
			public string ExternalId0
			{
				get
				{
					try
					{
						return ((string)(this[this.tableWorkingOrder.ExternalId0Column]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableWorkingOrder.ExternalId0Column] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the IsAutomatic column.
			/// </summary>
			public bool IsAutomatic
			{
				get
				{
					return ((bool)(this[this.tableWorkingOrder.IsAutomaticColumn]));
				}
				set
				{
					this[this.tableWorkingOrder.IsAutomaticColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the IsAwake column.
			/// </summary>
			public bool IsAwake
			{
				get
				{
					return ((bool)(this[this.tableWorkingOrder.IsAwakeColumn]));
				}
				set
				{
					this[this.tableWorkingOrder.IsAwakeColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the IsBrokerMatch column.
			/// </summary>
			public bool IsBrokerMatch
			{
				get
				{
					return ((bool)(this[this.tableWorkingOrder.IsBrokerMatchColumn]));
				}
				set
				{
					this[this.tableWorkingOrder.IsBrokerMatchColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the IsHedgeMatch column.
			/// </summary>
			public bool IsHedgeMatch
			{
				get
				{
					return ((bool)(this[this.tableWorkingOrder.IsHedgeMatchColumn]));
				}
				set
				{
					this[this.tableWorkingOrder.IsHedgeMatchColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the IsInstitutionMatch column.
			/// </summary>
			public bool IsInstitutionMatch
			{
				get
				{
					return ((bool)(this[this.tableWorkingOrder.IsInstitutionMatchColumn]));
				}
				set
				{
					this[this.tableWorkingOrder.IsInstitutionMatchColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the LimitPrice column.
			/// </summary>
			public decimal LimitPrice
			{
				get
				{
					try
					{
						return ((decimal)(this[this.tableWorkingOrder.LimitPriceColumn]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableWorkingOrder.LimitPriceColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the ModifiedTime column.
			/// </summary>
			public global::System.DateTime ModifiedTime
			{
				get
				{
					return ((global::System.DateTime)(this[this.tableWorkingOrder.ModifiedTimeColumn]));
				}
				set
				{
					this[this.tableWorkingOrder.ModifiedTimeColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the ModifiedUserId column.
			/// </summary>
			public global::System.Guid ModifiedUserId
			{
				get
				{
					return ((global::System.Guid)(this[this.tableWorkingOrder.ModifiedUserIdColumn]));
				}
				set
				{
					this[this.tableWorkingOrder.ModifiedUserIdColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the OrderTypeCode column.
			/// </summary>
			public global::Teraque.OrderTypeCode OrderTypeCode
			{
				get
				{
					return ((global::Teraque.OrderTypeCode)(this[this.tableWorkingOrder.OrderTypeCodeColumn]));
				}
				set
				{
					this[this.tableWorkingOrder.OrderTypeCodeColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets the parent row in the OrderType table.
			/// </summary>
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public OrderTypeRow OrderTypeRow
			{
				get
				{
					return ((OrderTypeRow)(this.GetParentRow(this.tableWorkingOrder.OrderTypeWorkingOrderRelation)));
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the RowVersion column.
			/// </summary>
			public long RowVersion
			{
				get
				{
					return ((long)(this[this.tableWorkingOrder.RowVersionColumn]));
				}
				set
				{
					this[this.tableWorkingOrder.RowVersionColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the SecurityId column.
			/// </summary>
			public global::System.Guid SecurityId
			{
				get
				{
					return ((global::System.Guid)(this[this.tableWorkingOrder.SecurityIdColumn]));
				}
				set
				{
					this[this.tableWorkingOrder.SecurityIdColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets the parent row in the Security table.
			/// </summary>
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public SecurityRow SecurityRowByFK_Security_WorkingOrder_SecurityId
			{
				get
				{
					return ((SecurityRow)(this.GetParentRow(this.tableWorkingOrder.SecurityWorkingOrderByFK_Security_WorkingOrder_SecurityIdRelation)));
				}
			}
			
			/// <summary>
			/// Gets the parent row in the Security table.
			/// </summary>
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public SecurityRow SecurityRowByFK_Security_WorkingOrder_SettlementId
			{
				get
				{
					return ((SecurityRow)(this.GetParentRow(this.tableWorkingOrder.SecurityWorkingOrderByFK_Security_WorkingOrder_SettlementIdRelation)));
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the SettlementDate column.
			/// </summary>
			public global::System.DateTime SettlementDate
			{
				get
				{
					return ((global::System.DateTime)(this[this.tableWorkingOrder.SettlementDateColumn]));
				}
				set
				{
					this[this.tableWorkingOrder.SettlementDateColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the SettlementId column.
			/// </summary>
			public global::System.Guid SettlementId
			{
				get
				{
					try
					{
						return ((global::System.Guid)(this[this.tableWorkingOrder.SettlementIdColumn]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableWorkingOrder.SettlementIdColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the SideCode column.
			/// </summary>
			public global::Teraque.SideCode SideCode
			{
				get
				{
					return ((global::Teraque.SideCode)(this[this.tableWorkingOrder.SideCodeColumn]));
				}
				set
				{
					this[this.tableWorkingOrder.SideCodeColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets the parent row in the Side table.
			/// </summary>
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public SideRow SideRow
			{
				get
				{
					return ((SideRow)(this.GetParentRow(this.tableWorkingOrder.SideWorkingOrderRelation)));
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the StartTime column.
			/// </summary>
			public global::System.DateTime StartTime
			{
				get
				{
					try
					{
						return ((global::System.DateTime)(this[this.tableWorkingOrder.StartTimeColumn]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableWorkingOrder.StartTimeColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the StatusCode column.
			/// </summary>
			public global::Teraque.StatusCode StatusCode
			{
				get
				{
					return ((global::Teraque.StatusCode)(this[this.tableWorkingOrder.StatusCodeColumn]));
				}
				set
				{
					this[this.tableWorkingOrder.StatusCodeColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets the parent row in the Status table.
			/// </summary>
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public StatusRow StatusRow
			{
				get
				{
					return ((StatusRow)(this.GetParentRow(this.tableWorkingOrder.StatusWorkingOrderRelation)));
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the StopPrice column.
			/// </summary>
			public decimal StopPrice
			{
				get
				{
					try
					{
						return ((decimal)(this[this.tableWorkingOrder.StopPriceColumn]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableWorkingOrder.StopPriceColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the StopTime column.
			/// </summary>
			public global::System.DateTime StopTime
			{
				get
				{
					try
					{
						return ((global::System.DateTime)(this[this.tableWorkingOrder.StopTimeColumn]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableWorkingOrder.StopTimeColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the SubmittedQuantity column.
			/// </summary>
			public decimal SubmittedQuantity
			{
				get
				{
					return ((decimal)(this[this.tableWorkingOrder.SubmittedQuantityColumn]));
				}
				set
				{
					this[this.tableWorkingOrder.SubmittedQuantityColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the SubmittedTime column.
			/// </summary>
			public global::System.DateTime SubmittedTime
			{
				get
				{
					try
					{
						return ((global::System.DateTime)(this[this.tableWorkingOrder.SubmittedTimeColumn]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableWorkingOrder.SubmittedTimeColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the TimeInForceCode column.
			/// </summary>
			public global::Teraque.TimeInForceCode TimeInForceCode
			{
				get
				{
					return ((global::Teraque.TimeInForceCode)(this[this.tableWorkingOrder.TimeInForceCodeColumn]));
				}
				set
				{
					this[this.tableWorkingOrder.TimeInForceCodeColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets the parent row in the TimeInForce table.
			/// </summary>
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public TimeInForceRow TimeInForceRow
			{
				get
				{
					return ((TimeInForceRow)(this.GetParentRow(this.tableWorkingOrder.TimeInForceWorkingOrderRelation)));
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the TradeDate column.
			/// </summary>
			public global::System.DateTime TradeDate
			{
				get
				{
					return ((global::System.DateTime)(this[this.tableWorkingOrder.TradeDateColumn]));
				}
				set
				{
					this[this.tableWorkingOrder.TradeDateColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the UploadedTime column.
			/// </summary>
			public global::System.DateTime UploadedTime
			{
				get
				{
					try
					{
						return ((global::System.DateTime)(this[this.tableWorkingOrder.UploadedTimeColumn]));
					}
					catch (global::System.InvalidCastException e)
					{
						throw new global::System.Data.StrongTypingException("Cannot get value because it is DBNull.", e);
					}
				}
				set
				{
					this[this.tableWorkingOrder.UploadedTimeColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets the parent row in the User table.
			/// </summary>
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public UserRow UserRowByFK_User_WorkingOrder_CreatedUserId
			{
				get
				{
					return ((UserRow)(this.GetParentRow(this.tableWorkingOrder.UserWorkingOrderByFK_User_WorkingOrder_CreatedUserIdRelation)));
				}
			}
			
			/// <summary>
			/// Gets the parent row in the User table.
			/// </summary>
			[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
			public UserRow UserRowByFK_User_WorkingOrder_ModifiedUserId
			{
				get
				{
					return ((UserRow)(this.GetParentRow(this.tableWorkingOrder.UserWorkingOrderByFK_User_WorkingOrder_ModifiedUserIdRelation)));
				}
			}
			
			/// <summary>
			/// Gets or sets the data in the WorkingOrderId column.
			/// </summary>
			public global::System.Guid WorkingOrderId
			{
				get
				{
					return ((global::System.Guid)(this[this.tableWorkingOrder.WorkingOrderIdColumn]));
				}
				set
				{
					this[this.tableWorkingOrder.WorkingOrderIdColumn] = value;
				}
			}
			
			/// <summary>
			/// Gets the children rows in the Allocation table.
			/// </summary>
			public AllocationRow[] GetAllocationRows()
			{
				return ((AllocationRow[])(this.GetChildRows(this.tableWorkingOrder.WorkingOrderAllocationRelation)));
			}
			
			/// <summary>
			/// Gets the children rows in the DestinationOrder table.
			/// </summary>
			public DestinationOrderRow[] GetDestinationOrderRows()
			{
				return ((DestinationOrderRow[])(this.GetChildRows(this.tableWorkingOrder.WorkingOrderDestinationOrderRelation)));
			}
			
			/// <summary>
			/// Gets the children rows in the Match table.
			/// </summary>
			public MatchRow[] GetMatchRows()
			{
				return ((MatchRow[])(this.GetChildRows(this.tableWorkingOrder.WorkingOrderMatchRelation)));
			}
			
			/// <summary>
			/// Gets the children rows in the SourceOrder table.
			/// </summary>
			public SourceOrderRow[] GetSourceOrderRows()
			{
				return ((SourceOrderRow[])(this.GetChildRows(this.tableWorkingOrder.WorkingOrderSourceOrderRelation)));
			}
			
			/// <summary>
			/// Gets the Null property of the AutomaticQuantity column.
			/// </summary>
			public bool IsAutomaticQuantityNull()
			{
				return (this[this.tableWorkingOrder.AutomaticQuantityColumn] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the DestinationId column.
			/// </summary>
			public bool IsDestinationIdNull()
			{
				return (this[this.tableWorkingOrder.DestinationIdColumn] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the ExternalId0 column.
			/// </summary>
			public bool IsExternalId0Null()
			{
				return (this[this.tableWorkingOrder.ExternalId0Column] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the LimitPrice column.
			/// </summary>
			public bool IsLimitPriceNull()
			{
				return (this[this.tableWorkingOrder.LimitPriceColumn] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the SettlementId column.
			/// </summary>
			public bool IsSettlementIdNull()
			{
				return (this[this.tableWorkingOrder.SettlementIdColumn] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the StartTime column.
			/// </summary>
			public bool IsStartTimeNull()
			{
				return (this[this.tableWorkingOrder.StartTimeColumn] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the StopPrice column.
			/// </summary>
			public bool IsStopPriceNull()
			{
				return (this[this.tableWorkingOrder.StopPriceColumn] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the StopTime column.
			/// </summary>
			public bool IsStopTimeNull()
			{
				return (this[this.tableWorkingOrder.StopTimeColumn] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the SubmittedTime column.
			/// </summary>
			public bool IsSubmittedTimeNull()
			{
				return (this[this.tableWorkingOrder.SubmittedTimeColumn] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Gets the Null property of the UploadedTime column.
			/// </summary>
			public bool IsUploadedTimeNull()
			{
				return (this[this.tableWorkingOrder.UploadedTimeColumn] == global::System.DBNull.Value);
			}
			
			/// <summary>
			/// Sets the Null property of the AutomaticQuantity column.
			/// </summary>
			public void SetAutomaticQuantityNull()
			{
				this[this.tableWorkingOrder.AutomaticQuantityColumn] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the DestinationId column.
			/// </summary>
			public void SetDestinationIdNull()
			{
				this[this.tableWorkingOrder.DestinationIdColumn] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the ExternalId0 column.
			/// </summary>
			public void SetExternalId0Null()
			{
				this[this.tableWorkingOrder.ExternalId0Column] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the LimitPrice column.
			/// </summary>
			public void SetLimitPriceNull()
			{
				this[this.tableWorkingOrder.LimitPriceColumn] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the SettlementId column.
			/// </summary>
			public void SetSettlementIdNull()
			{
				this[this.tableWorkingOrder.SettlementIdColumn] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the StartTime column.
			/// </summary>
			public void SetStartTimeNull()
			{
				this[this.tableWorkingOrder.StartTimeColumn] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the StopPrice column.
			/// </summary>
			public void SetStopPriceNull()
			{
				this[this.tableWorkingOrder.StopPriceColumn] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the StopTime column.
			/// </summary>
			public void SetStopTimeNull()
			{
				this[this.tableWorkingOrder.StopTimeColumn] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the SubmittedTime column.
			/// </summary>
			public void SetSubmittedTimeNull()
			{
				this[this.tableWorkingOrder.SubmittedTimeColumn] = global::System.DBNull.Value;
			}
			
			/// <summary>
			/// Sets the Null property of the UploadedTime column.
			/// </summary>
			public void SetUploadedTimeNull()
			{
				this[this.tableWorkingOrder.UploadedTimeColumn] = global::System.DBNull.Value;
			}
		}
		
		/// <summary>
		/// Arguments for the event that indicates a change in a Account table row.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		public class AccountRowChangeEventArgs : global::System.EventArgs
		{
			
			/// <summary>
			/// The Account row that has been changed.
			/// </summary>
			private AccountRow accountRow;
			
			/// <summary>
			/// The action that caused the change to the row.
			/// </summary>
			private global::System.Data.DataRowAction dataRowAction;
			
			/// <summary>
			/// Create the arguments for a changing Account row event.
			/// </summary>
			/// <param name="accountRow">The Account row that has changed.</param>
			/// <param name="dataRowAction">The action that caused the change.</param>
			public AccountRowChangeEventArgs(AccountRow accountRow, global::System.Data.DataRowAction dataRowAction)
			{
				this.accountRow = accountRow;
				this.dataRowAction = dataRowAction;
			}
			
			/// <summary>
			/// Gets the Account row that has been changed.
			/// </summary>
			public AccountRow Row
			{
				get
				{
					return this.accountRow;
				}
			}
			
			/// <summary>
			/// Gets the action that caused the change to the row.
			/// </summary>
			public global::System.Data.DataRowAction Action
			{
				get
				{
					return this.dataRowAction;
				}
			}
		}
		
		/// <summary>
		/// Arguments for the event that indicates a change in a AccountSeries table row.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		public class AccountSeriesRowChangeEventArgs : global::System.EventArgs
		{
			
			/// <summary>
			/// The AccountSeries row that has been changed.
			/// </summary>
			private AccountSeriesRow accountSeriesRow;
			
			/// <summary>
			/// The action that caused the change to the row.
			/// </summary>
			private global::System.Data.DataRowAction dataRowAction;
			
			/// <summary>
			/// Create the arguments for a changing AccountSeries row event.
			/// </summary>
			/// <param name="accountSeriesRow">The AccountSeries row that has changed.</param>
			/// <param name="dataRowAction">The action that caused the change.</param>
			public AccountSeriesRowChangeEventArgs(AccountSeriesRow accountSeriesRow, global::System.Data.DataRowAction dataRowAction)
			{
				this.accountSeriesRow = accountSeriesRow;
				this.dataRowAction = dataRowAction;
			}
			
			/// <summary>
			/// Gets the AccountSeries row that has been changed.
			/// </summary>
			public AccountSeriesRow Row
			{
				get
				{
					return this.accountSeriesRow;
				}
			}
			
			/// <summary>
			/// Gets the action that caused the change to the row.
			/// </summary>
			public global::System.Data.DataRowAction Action
			{
				get
				{
					return this.dataRowAction;
				}
			}
		}
		
		/// <summary>
		/// Arguments for the event that indicates a change in a Allocation table row.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		public class AllocationRowChangeEventArgs : global::System.EventArgs
		{
			
			/// <summary>
			/// The Allocation row that has been changed.
			/// </summary>
			private AllocationRow allocationRow;
			
			/// <summary>
			/// The action that caused the change to the row.
			/// </summary>
			private global::System.Data.DataRowAction dataRowAction;
			
			/// <summary>
			/// Create the arguments for a changing Allocation row event.
			/// </summary>
			/// <param name="allocationRow">The Allocation row that has changed.</param>
			/// <param name="dataRowAction">The action that caused the change.</param>
			public AllocationRowChangeEventArgs(AllocationRow allocationRow, global::System.Data.DataRowAction dataRowAction)
			{
				this.allocationRow = allocationRow;
				this.dataRowAction = dataRowAction;
			}
			
			/// <summary>
			/// Gets the Allocation row that has been changed.
			/// </summary>
			public AllocationRow Row
			{
				get
				{
					return this.allocationRow;
				}
			}
			
			/// <summary>
			/// Gets the action that caused the change to the row.
			/// </summary>
			public global::System.Data.DataRowAction Action
			{
				get
				{
					return this.dataRowAction;
				}
			}
		}
		
		/// <summary>
		/// Arguments for the event that indicates a change in a Blotter table row.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		public class BlotterRowChangeEventArgs : global::System.EventArgs
		{
			
			/// <summary>
			/// The Blotter row that has been changed.
			/// </summary>
			private BlotterRow blotterRow;
			
			/// <summary>
			/// The action that caused the change to the row.
			/// </summary>
			private global::System.Data.DataRowAction dataRowAction;
			
			/// <summary>
			/// Create the arguments for a changing Blotter row event.
			/// </summary>
			/// <param name="blotterRow">The Blotter row that has changed.</param>
			/// <param name="dataRowAction">The action that caused the change.</param>
			public BlotterRowChangeEventArgs(BlotterRow blotterRow, global::System.Data.DataRowAction dataRowAction)
			{
				this.blotterRow = blotterRow;
				this.dataRowAction = dataRowAction;
			}
			
			/// <summary>
			/// Gets the Blotter row that has been changed.
			/// </summary>
			public BlotterRow Row
			{
				get
				{
					return this.blotterRow;
				}
			}
			
			/// <summary>
			/// Gets the action that caused the change to the row.
			/// </summary>
			public global::System.Data.DataRowAction Action
			{
				get
				{
					return this.dataRowAction;
				}
			}
		}
		
		/// <summary>
		/// Arguments for the event that indicates a change in a BlotterDestinationMap table row.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		public class BlotterDestinationMapRowChangeEventArgs : global::System.EventArgs
		{
			
			/// <summary>
			/// The BlotterDestinationMap row that has been changed.
			/// </summary>
			private BlotterDestinationMapRow blotterDestinationMapRow;
			
			/// <summary>
			/// The action that caused the change to the row.
			/// </summary>
			private global::System.Data.DataRowAction dataRowAction;
			
			/// <summary>
			/// Create the arguments for a changing BlotterDestinationMap row event.
			/// </summary>
			/// <param name="blotterDestinationMapRow">The BlotterDestinationMap row that has changed.</param>
			/// <param name="dataRowAction">The action that caused the change.</param>
			public BlotterDestinationMapRowChangeEventArgs(BlotterDestinationMapRow blotterDestinationMapRow, global::System.Data.DataRowAction dataRowAction)
			{
				this.blotterDestinationMapRow = blotterDestinationMapRow;
				this.dataRowAction = dataRowAction;
			}
			
			/// <summary>
			/// Gets the BlotterDestinationMap row that has been changed.
			/// </summary>
			public BlotterDestinationMapRow Row
			{
				get
				{
					return this.blotterDestinationMapRow;
				}
			}
			
			/// <summary>
			/// Gets the action that caused the change to the row.
			/// </summary>
			public global::System.Data.DataRowAction Action
			{
				get
				{
					return this.dataRowAction;
				}
			}
		}
		
		/// <summary>
		/// Arguments for the event that indicates a change in a Branch table row.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		public class BranchRowChangeEventArgs : global::System.EventArgs
		{
			
			/// <summary>
			/// The Branch row that has been changed.
			/// </summary>
			private BranchRow branchRow;
			
			/// <summary>
			/// The action that caused the change to the row.
			/// </summary>
			private global::System.Data.DataRowAction dataRowAction;
			
			/// <summary>
			/// Create the arguments for a changing Branch row event.
			/// </summary>
			/// <param name="branchRow">The Branch row that has changed.</param>
			/// <param name="dataRowAction">The action that caused the change.</param>
			public BranchRowChangeEventArgs(BranchRow branchRow, global::System.Data.DataRowAction dataRowAction)
			{
				this.branchRow = branchRow;
				this.dataRowAction = dataRowAction;
			}
			
			/// <summary>
			/// Gets the Branch row that has been changed.
			/// </summary>
			public BranchRow Row
			{
				get
				{
					return this.branchRow;
				}
			}
			
			/// <summary>
			/// Gets the action that caused the change to the row.
			/// </summary>
			public global::System.Data.DataRowAction Action
			{
				get
				{
					return this.dataRowAction;
				}
			}
		}
		
		/// <summary>
		/// Arguments for the event that indicates a change in a Broker table row.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		public class BrokerRowChangeEventArgs : global::System.EventArgs
		{
			
			/// <summary>
			/// The Broker row that has been changed.
			/// </summary>
			private BrokerRow brokerRow;
			
			/// <summary>
			/// The action that caused the change to the row.
			/// </summary>
			private global::System.Data.DataRowAction dataRowAction;
			
			/// <summary>
			/// Create the arguments for a changing Broker row event.
			/// </summary>
			/// <param name="brokerRow">The Broker row that has changed.</param>
			/// <param name="dataRowAction">The action that caused the change.</param>
			public BrokerRowChangeEventArgs(BrokerRow brokerRow, global::System.Data.DataRowAction dataRowAction)
			{
				this.brokerRow = brokerRow;
				this.dataRowAction = dataRowAction;
			}
			
			/// <summary>
			/// Gets the Broker row that has been changed.
			/// </summary>
			public BrokerRow Row
			{
				get
				{
					return this.brokerRow;
				}
			}
			
			/// <summary>
			/// Gets the action that caused the change to the row.
			/// </summary>
			public global::System.Data.DataRowAction Action
			{
				get
				{
					return this.dataRowAction;
				}
			}
		}
		
		/// <summary>
		/// Arguments for the event that indicates a change in a BrokerAccount table row.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		public class BrokerAccountRowChangeEventArgs : global::System.EventArgs
		{
			
			/// <summary>
			/// The BrokerAccount row that has been changed.
			/// </summary>
			private BrokerAccountRow brokerAccountRow;
			
			/// <summary>
			/// The action that caused the change to the row.
			/// </summary>
			private global::System.Data.DataRowAction dataRowAction;
			
			/// <summary>
			/// Create the arguments for a changing BrokerAccount row event.
			/// </summary>
			/// <param name="brokerAccountRow">The BrokerAccount row that has changed.</param>
			/// <param name="dataRowAction">The action that caused the change.</param>
			public BrokerAccountRowChangeEventArgs(BrokerAccountRow brokerAccountRow, global::System.Data.DataRowAction dataRowAction)
			{
				this.brokerAccountRow = brokerAccountRow;
				this.dataRowAction = dataRowAction;
			}
			
			/// <summary>
			/// Gets the BrokerAccount row that has been changed.
			/// </summary>
			public BrokerAccountRow Row
			{
				get
				{
					return this.brokerAccountRow;
				}
			}
			
			/// <summary>
			/// Gets the action that caused the change to the row.
			/// </summary>
			public global::System.Data.DataRowAction Action
			{
				get
				{
					return this.dataRowAction;
				}
			}
		}
		
		/// <summary>
		/// Arguments for the event that indicates a change in a ClearingBroker table row.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		public class ClearingBrokerRowChangeEventArgs : global::System.EventArgs
		{
			
			/// <summary>
			/// The ClearingBroker row that has been changed.
			/// </summary>
			private ClearingBrokerRow clearingBrokerRow;
			
			/// <summary>
			/// The action that caused the change to the row.
			/// </summary>
			private global::System.Data.DataRowAction dataRowAction;
			
			/// <summary>
			/// Create the arguments for a changing ClearingBroker row event.
			/// </summary>
			/// <param name="clearingBrokerRow">The ClearingBroker row that has changed.</param>
			/// <param name="dataRowAction">The action that caused the change.</param>
			public ClearingBrokerRowChangeEventArgs(ClearingBrokerRow clearingBrokerRow, global::System.Data.DataRowAction dataRowAction)
			{
				this.clearingBrokerRow = clearingBrokerRow;
				this.dataRowAction = dataRowAction;
			}
			
			/// <summary>
			/// Gets the ClearingBroker row that has been changed.
			/// </summary>
			public ClearingBrokerRow Row
			{
				get
				{
					return this.clearingBrokerRow;
				}
			}
			
			/// <summary>
			/// Gets the action that caused the change to the row.
			/// </summary>
			public global::System.Data.DataRowAction Action
			{
				get
				{
					return this.dataRowAction;
				}
			}
		}
		
		/// <summary>
		/// Arguments for the event that indicates a change in a CommissionSchedule table row.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		public class CommissionScheduleRowChangeEventArgs : global::System.EventArgs
		{
			
			/// <summary>
			/// The CommissionSchedule row that has been changed.
			/// </summary>
			private CommissionScheduleRow commissionScheduleRow;
			
			/// <summary>
			/// The action that caused the change to the row.
			/// </summary>
			private global::System.Data.DataRowAction dataRowAction;
			
			/// <summary>
			/// Create the arguments for a changing CommissionSchedule row event.
			/// </summary>
			/// <param name="commissionScheduleRow">The CommissionSchedule row that has changed.</param>
			/// <param name="dataRowAction">The action that caused the change.</param>
			public CommissionScheduleRowChangeEventArgs(CommissionScheduleRow commissionScheduleRow, global::System.Data.DataRowAction dataRowAction)
			{
				this.commissionScheduleRow = commissionScheduleRow;
				this.dataRowAction = dataRowAction;
			}
			
			/// <summary>
			/// Gets the CommissionSchedule row that has been changed.
			/// </summary>
			public CommissionScheduleRow Row
			{
				get
				{
					return this.commissionScheduleRow;
				}
			}
			
			/// <summary>
			/// Gets the action that caused the change to the row.
			/// </summary>
			public global::System.Data.DataRowAction Action
			{
				get
				{
					return this.dataRowAction;
				}
			}
		}
		
		/// <summary>
		/// Arguments for the event that indicates a change in a CommissionTranche table row.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		public class CommissionTrancheRowChangeEventArgs : global::System.EventArgs
		{
			
			/// <summary>
			/// The CommissionTranche row that has been changed.
			/// </summary>
			private CommissionTrancheRow commissionTrancheRow;
			
			/// <summary>
			/// The action that caused the change to the row.
			/// </summary>
			private global::System.Data.DataRowAction dataRowAction;
			
			/// <summary>
			/// Create the arguments for a changing CommissionTranche row event.
			/// </summary>
			/// <param name="commissionTrancheRow">The CommissionTranche row that has changed.</param>
			/// <param name="dataRowAction">The action that caused the change.</param>
			public CommissionTrancheRowChangeEventArgs(CommissionTrancheRow commissionTrancheRow, global::System.Data.DataRowAction dataRowAction)
			{
				this.commissionTrancheRow = commissionTrancheRow;
				this.dataRowAction = dataRowAction;
			}
			
			/// <summary>
			/// Gets the CommissionTranche row that has been changed.
			/// </summary>
			public CommissionTrancheRow Row
			{
				get
				{
					return this.commissionTrancheRow;
				}
			}
			
			/// <summary>
			/// Gets the action that caused the change to the row.
			/// </summary>
			public global::System.Data.DataRowAction Action
			{
				get
				{
					return this.dataRowAction;
				}
			}
		}
		
		/// <summary>
		/// Arguments for the event that indicates a change in a CommissionType table row.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		public class CommissionTypeRowChangeEventArgs : global::System.EventArgs
		{
			
			/// <summary>
			/// The CommissionType row that has been changed.
			/// </summary>
			private CommissionTypeRow commissionTypeRow;
			
			/// <summary>
			/// The action that caused the change to the row.
			/// </summary>
			private global::System.Data.DataRowAction dataRowAction;
			
			/// <summary>
			/// Create the arguments for a changing CommissionType row event.
			/// </summary>
			/// <param name="commissionTypeRow">The CommissionType row that has changed.</param>
			/// <param name="dataRowAction">The action that caused the change.</param>
			public CommissionTypeRowChangeEventArgs(CommissionTypeRow commissionTypeRow, global::System.Data.DataRowAction dataRowAction)
			{
				this.commissionTypeRow = commissionTypeRow;
				this.dataRowAction = dataRowAction;
			}
			
			/// <summary>
			/// Gets the CommissionType row that has been changed.
			/// </summary>
			public CommissionTypeRow Row
			{
				get
				{
					return this.commissionTypeRow;
				}
			}
			
			/// <summary>
			/// Gets the action that caused the change to the row.
			/// </summary>
			public global::System.Data.DataRowAction Action
			{
				get
				{
					return this.dataRowAction;
				}
			}
		}
		
		/// <summary>
		/// Arguments for the event that indicates a change in a CommissionUnit table row.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		public class CommissionUnitRowChangeEventArgs : global::System.EventArgs
		{
			
			/// <summary>
			/// The CommissionUnit row that has been changed.
			/// </summary>
			private CommissionUnitRow commissionUnitRow;
			
			/// <summary>
			/// The action that caused the change to the row.
			/// </summary>
			private global::System.Data.DataRowAction dataRowAction;
			
			/// <summary>
			/// Create the arguments for a changing CommissionUnit row event.
			/// </summary>
			/// <param name="commissionUnitRow">The CommissionUnit row that has changed.</param>
			/// <param name="dataRowAction">The action that caused the change.</param>
			public CommissionUnitRowChangeEventArgs(CommissionUnitRow commissionUnitRow, global::System.Data.DataRowAction dataRowAction)
			{
				this.commissionUnitRow = commissionUnitRow;
				this.dataRowAction = dataRowAction;
			}
			
			/// <summary>
			/// Gets the CommissionUnit row that has been changed.
			/// </summary>
			public CommissionUnitRow Row
			{
				get
				{
					return this.commissionUnitRow;
				}
			}
			
			/// <summary>
			/// Gets the action that caused the change to the row.
			/// </summary>
			public global::System.Data.DataRowAction Action
			{
				get
				{
					return this.dataRowAction;
				}
			}
		}
		
		/// <summary>
		/// Arguments for the event that indicates a change in a ComplianceOfficer table row.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		public class ComplianceOfficerRowChangeEventArgs : global::System.EventArgs
		{
			
			/// <summary>
			/// The ComplianceOfficer row that has been changed.
			/// </summary>
			private ComplianceOfficerRow complianceOfficerRow;
			
			/// <summary>
			/// The action that caused the change to the row.
			/// </summary>
			private global::System.Data.DataRowAction dataRowAction;
			
			/// <summary>
			/// Create the arguments for a changing ComplianceOfficer row event.
			/// </summary>
			/// <param name="complianceOfficerRow">The ComplianceOfficer row that has changed.</param>
			/// <param name="dataRowAction">The action that caused the change.</param>
			public ComplianceOfficerRowChangeEventArgs(ComplianceOfficerRow complianceOfficerRow, global::System.Data.DataRowAction dataRowAction)
			{
				this.complianceOfficerRow = complianceOfficerRow;
				this.dataRowAction = dataRowAction;
			}
			
			/// <summary>
			/// Gets the ComplianceOfficer row that has been changed.
			/// </summary>
			public ComplianceOfficerRow Row
			{
				get
				{
					return this.complianceOfficerRow;
				}
			}
			
			/// <summary>
			/// Gets the action that caused the change to the row.
			/// </summary>
			public global::System.Data.DataRowAction Action
			{
				get
				{
					return this.dataRowAction;
				}
			}
		}
		
		/// <summary>
		/// Arguments for the event that indicates a change in a Condition table row.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		public class ConditionRowChangeEventArgs : global::System.EventArgs
		{
			
			/// <summary>
			/// The Condition row that has been changed.
			/// </summary>
			private ConditionRow conditionRow;
			
			/// <summary>
			/// The action that caused the change to the row.
			/// </summary>
			private global::System.Data.DataRowAction dataRowAction;
			
			/// <summary>
			/// Create the arguments for a changing Condition row event.
			/// </summary>
			/// <param name="conditionRow">The Condition row that has changed.</param>
			/// <param name="dataRowAction">The action that caused the change.</param>
			public ConditionRowChangeEventArgs(ConditionRow conditionRow, global::System.Data.DataRowAction dataRowAction)
			{
				this.conditionRow = conditionRow;
				this.dataRowAction = dataRowAction;
			}
			
			/// <summary>
			/// Gets the Condition row that has been changed.
			/// </summary>
			public ConditionRow Row
			{
				get
				{
					return this.conditionRow;
				}
			}
			
			/// <summary>
			/// Gets the action that caused the change to the row.
			/// </summary>
			public global::System.Data.DataRowAction Action
			{
				get
				{
					return this.dataRowAction;
				}
			}
		}
		
		/// <summary>
		/// Arguments for the event that indicates a change in a Configuration table row.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		public class ConfigurationRowChangeEventArgs : global::System.EventArgs
		{
			
			/// <summary>
			/// The Configuration row that has been changed.
			/// </summary>
			private ConfigurationRow configurationRow;
			
			/// <summary>
			/// The action that caused the change to the row.
			/// </summary>
			private global::System.Data.DataRowAction dataRowAction;
			
			/// <summary>
			/// Create the arguments for a changing Configuration row event.
			/// </summary>
			/// <param name="configurationRow">The Configuration row that has changed.</param>
			/// <param name="dataRowAction">The action that caused the change.</param>
			public ConfigurationRowChangeEventArgs(ConfigurationRow configurationRow, global::System.Data.DataRowAction dataRowAction)
			{
				this.configurationRow = configurationRow;
				this.dataRowAction = dataRowAction;
			}
			
			/// <summary>
			/// Gets the Configuration row that has been changed.
			/// </summary>
			public ConfigurationRow Row
			{
				get
				{
					return this.configurationRow;
				}
			}
			
			/// <summary>
			/// Gets the action that caused the change to the row.
			/// </summary>
			public global::System.Data.DataRowAction Action
			{
				get
				{
					return this.dataRowAction;
				}
			}
		}
		
		/// <summary>
		/// Arguments for the event that indicates a change in a Country table row.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		public class CountryRowChangeEventArgs : global::System.EventArgs
		{
			
			/// <summary>
			/// The Country row that has been changed.
			/// </summary>
			private CountryRow countryRow;
			
			/// <summary>
			/// The action that caused the change to the row.
			/// </summary>
			private global::System.Data.DataRowAction dataRowAction;
			
			/// <summary>
			/// Create the arguments for a changing Country row event.
			/// </summary>
			/// <param name="countryRow">The Country row that has changed.</param>
			/// <param name="dataRowAction">The action that caused the change.</param>
			public CountryRowChangeEventArgs(CountryRow countryRow, global::System.Data.DataRowAction dataRowAction)
			{
				this.countryRow = countryRow;
				this.dataRowAction = dataRowAction;
			}
			
			/// <summary>
			/// Gets the Country row that has been changed.
			/// </summary>
			public CountryRow Row
			{
				get
				{
					return this.countryRow;
				}
			}
			
			/// <summary>
			/// Gets the action that caused the change to the row.
			/// </summary>
			public global::System.Data.DataRowAction Action
			{
				get
				{
					return this.dataRowAction;
				}
			}
		}
		
		/// <summary>
		/// Arguments for the event that indicates a change in a CreditRating table row.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		public class CreditRatingRowChangeEventArgs : global::System.EventArgs
		{
			
			/// <summary>
			/// The CreditRating row that has been changed.
			/// </summary>
			private CreditRatingRow creditRatingRow;
			
			/// <summary>
			/// The action that caused the change to the row.
			/// </summary>
			private global::System.Data.DataRowAction dataRowAction;
			
			/// <summary>
			/// Create the arguments for a changing CreditRating row event.
			/// </summary>
			/// <param name="creditRatingRow">The CreditRating row that has changed.</param>
			/// <param name="dataRowAction">The action that caused the change.</param>
			public CreditRatingRowChangeEventArgs(CreditRatingRow creditRatingRow, global::System.Data.DataRowAction dataRowAction)
			{
				this.creditRatingRow = creditRatingRow;
				this.dataRowAction = dataRowAction;
			}
			
			/// <summary>
			/// Gets the CreditRating row that has been changed.
			/// </summary>
			public CreditRatingRow Row
			{
				get
				{
					return this.creditRatingRow;
				}
			}
			
			/// <summary>
			/// Gets the action that caused the change to the row.
			/// </summary>
			public global::System.Data.DataRowAction Action
			{
				get
				{
					return this.dataRowAction;
				}
			}
		}
		
		/// <summary>
		/// Arguments for the event that indicates a change in a CreditRatingService table row.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		public class CreditRatingServiceRowChangeEventArgs : global::System.EventArgs
		{
			
			/// <summary>
			/// The CreditRatingService row that has been changed.
			/// </summary>
			private CreditRatingServiceRow creditRatingServiceRow;
			
			/// <summary>
			/// The action that caused the change to the row.
			/// </summary>
			private global::System.Data.DataRowAction dataRowAction;
			
			/// <summary>
			/// Create the arguments for a changing CreditRatingService row event.
			/// </summary>
			/// <param name="creditRatingServiceRow">The CreditRatingService row that has changed.</param>
			/// <param name="dataRowAction">The action that caused the change.</param>
			public CreditRatingServiceRowChangeEventArgs(CreditRatingServiceRow creditRatingServiceRow, global::System.Data.DataRowAction dataRowAction)
			{
				this.creditRatingServiceRow = creditRatingServiceRow;
				this.dataRowAction = dataRowAction;
			}
			
			/// <summary>
			/// Gets the CreditRatingService row that has been changed.
			/// </summary>
			public CreditRatingServiceRow Row
			{
				get
				{
					return this.creditRatingServiceRow;
				}
			}
			
			/// <summary>
			/// Gets the action that caused the change to the row.
			/// </summary>
			public global::System.Data.DataRowAction Action
			{
				get
				{
					return this.dataRowAction;
				}
			}
		}
		
		/// <summary>
		/// Arguments for the event that indicates a change in a Crossing table row.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		public class CrossingRowChangeEventArgs : global::System.EventArgs
		{
			
			/// <summary>
			/// The Crossing row that has been changed.
			/// </summary>
			private CrossingRow crossingRow;
			
			/// <summary>
			/// The action that caused the change to the row.
			/// </summary>
			private global::System.Data.DataRowAction dataRowAction;
			
			/// <summary>
			/// Create the arguments for a changing Crossing row event.
			/// </summary>
			/// <param name="crossingRow">The Crossing row that has changed.</param>
			/// <param name="dataRowAction">The action that caused the change.</param>
			public CrossingRowChangeEventArgs(CrossingRow crossingRow, global::System.Data.DataRowAction dataRowAction)
			{
				this.crossingRow = crossingRow;
				this.dataRowAction = dataRowAction;
			}
			
			/// <summary>
			/// Gets the Crossing row that has been changed.
			/// </summary>
			public CrossingRow Row
			{
				get
				{
					return this.crossingRow;
				}
			}
			
			/// <summary>
			/// Gets the action that caused the change to the row.
			/// </summary>
			public global::System.Data.DataRowAction Action
			{
				get
				{
					return this.dataRowAction;
				}
			}
		}
		
		/// <summary>
		/// Arguments for the event that indicates a change in a Currency table row.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		public class CurrencyRowChangeEventArgs : global::System.EventArgs
		{
			
			/// <summary>
			/// The Currency row that has been changed.
			/// </summary>
			private CurrencyRow currencyRow;
			
			/// <summary>
			/// The action that caused the change to the row.
			/// </summary>
			private global::System.Data.DataRowAction dataRowAction;
			
			/// <summary>
			/// Create the arguments for a changing Currency row event.
			/// </summary>
			/// <param name="currencyRow">The Currency row that has changed.</param>
			/// <param name="dataRowAction">The action that caused the change.</param>
			public CurrencyRowChangeEventArgs(CurrencyRow currencyRow, global::System.Data.DataRowAction dataRowAction)
			{
				this.currencyRow = currencyRow;
				this.dataRowAction = dataRowAction;
			}
			
			/// <summary>
			/// Gets the Currency row that has been changed.
			/// </summary>
			public CurrencyRow Row
			{
				get
				{
					return this.currencyRow;
				}
			}
			
			/// <summary>
			/// Gets the action that caused the change to the row.
			/// </summary>
			public global::System.Data.DataRowAction Action
			{
				get
				{
					return this.dataRowAction;
				}
			}
		}
		
		/// <summary>
		/// Arguments for the event that indicates a change in a Debt table row.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		public class DebtRowChangeEventArgs : global::System.EventArgs
		{
			
			/// <summary>
			/// The Debt row that has been changed.
			/// </summary>
			private DebtRow debtRow;
			
			/// <summary>
			/// The action that caused the change to the row.
			/// </summary>
			private global::System.Data.DataRowAction dataRowAction;
			
			/// <summary>
			/// Create the arguments for a changing Debt row event.
			/// </summary>
			/// <param name="debtRow">The Debt row that has changed.</param>
			/// <param name="dataRowAction">The action that caused the change.</param>
			public DebtRowChangeEventArgs(DebtRow debtRow, global::System.Data.DataRowAction dataRowAction)
			{
				this.debtRow = debtRow;
				this.dataRowAction = dataRowAction;
			}
			
			/// <summary>
			/// Gets the Debt row that has been changed.
			/// </summary>
			public DebtRow Row
			{
				get
				{
					return this.debtRow;
				}
			}
			
			/// <summary>
			/// Gets the action that caused the change to the row.
			/// </summary>
			public global::System.Data.DataRowAction Action
			{
				get
				{
					return this.dataRowAction;
				}
			}
		}
		
		/// <summary>
		/// Arguments for the event that indicates a change in a Destination table row.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		public class DestinationRowChangeEventArgs : global::System.EventArgs
		{
			
			/// <summary>
			/// The Destination row that has been changed.
			/// </summary>
			private DestinationRow destinationRow;
			
			/// <summary>
			/// The action that caused the change to the row.
			/// </summary>
			private global::System.Data.DataRowAction dataRowAction;
			
			/// <summary>
			/// Create the arguments for a changing Destination row event.
			/// </summary>
			/// <param name="destinationRow">The Destination row that has changed.</param>
			/// <param name="dataRowAction">The action that caused the change.</param>
			public DestinationRowChangeEventArgs(DestinationRow destinationRow, global::System.Data.DataRowAction dataRowAction)
			{
				this.destinationRow = destinationRow;
				this.dataRowAction = dataRowAction;
			}
			
			/// <summary>
			/// Gets the Destination row that has been changed.
			/// </summary>
			public DestinationRow Row
			{
				get
				{
					return this.destinationRow;
				}
			}
			
			/// <summary>
			/// Gets the action that caused the change to the row.
			/// </summary>
			public global::System.Data.DataRowAction Action
			{
				get
				{
					return this.dataRowAction;
				}
			}
		}
		
		/// <summary>
		/// Arguments for the event that indicates a change in a DestinationExchangeMap table row.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		public class DestinationExchangeMapRowChangeEventArgs : global::System.EventArgs
		{
			
			/// <summary>
			/// The DestinationExchangeMap row that has been changed.
			/// </summary>
			private DestinationExchangeMapRow destinationExchangeMapRow;
			
			/// <summary>
			/// The action that caused the change to the row.
			/// </summary>
			private global::System.Data.DataRowAction dataRowAction;
			
			/// <summary>
			/// Create the arguments for a changing DestinationExchangeMap row event.
			/// </summary>
			/// <param name="destinationExchangeMapRow">The DestinationExchangeMap row that has changed.</param>
			/// <param name="dataRowAction">The action that caused the change.</param>
			public DestinationExchangeMapRowChangeEventArgs(DestinationExchangeMapRow destinationExchangeMapRow, global::System.Data.DataRowAction dataRowAction)
			{
				this.destinationExchangeMapRow = destinationExchangeMapRow;
				this.dataRowAction = dataRowAction;
			}
			
			/// <summary>
			/// Gets the DestinationExchangeMap row that has been changed.
			/// </summary>
			public DestinationExchangeMapRow Row
			{
				get
				{
					return this.destinationExchangeMapRow;
				}
			}
			
			/// <summary>
			/// Gets the action that caused the change to the row.
			/// </summary>
			public global::System.Data.DataRowAction Action
			{
				get
				{
					return this.dataRowAction;
				}
			}
		}
		
		/// <summary>
		/// Arguments for the event that indicates a change in a DestinationOrder table row.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		public class DestinationOrderRowChangeEventArgs : global::System.EventArgs
		{
			
			/// <summary>
			/// The DestinationOrder row that has been changed.
			/// </summary>
			private DestinationOrderRow destinationOrderRow;
			
			/// <summary>
			/// The action that caused the change to the row.
			/// </summary>
			private global::System.Data.DataRowAction dataRowAction;
			
			/// <summary>
			/// Create the arguments for a changing DestinationOrder row event.
			/// </summary>
			/// <param name="destinationOrderRow">The DestinationOrder row that has changed.</param>
			/// <param name="dataRowAction">The action that caused the change.</param>
			public DestinationOrderRowChangeEventArgs(DestinationOrderRow destinationOrderRow, global::System.Data.DataRowAction dataRowAction)
			{
				this.destinationOrderRow = destinationOrderRow;
				this.dataRowAction = dataRowAction;
			}
			
			/// <summary>
			/// Gets the DestinationOrder row that has been changed.
			/// </summary>
			public DestinationOrderRow Row
			{
				get
				{
					return this.destinationOrderRow;
				}
			}
			
			/// <summary>
			/// Gets the action that caused the change to the row.
			/// </summary>
			public global::System.Data.DataRowAction Action
			{
				get
				{
					return this.dataRowAction;
				}
			}
		}
		
		/// <summary>
		/// Arguments for the event that indicates a change in a Entity table row.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		public class EntityRowChangeEventArgs : global::System.EventArgs
		{
			
			/// <summary>
			/// The Entity row that has been changed.
			/// </summary>
			private EntityRow entityRow;
			
			/// <summary>
			/// The action that caused the change to the row.
			/// </summary>
			private global::System.Data.DataRowAction dataRowAction;
			
			/// <summary>
			/// Create the arguments for a changing Entity row event.
			/// </summary>
			/// <param name="entityRow">The Entity row that has changed.</param>
			/// <param name="dataRowAction">The action that caused the change.</param>
			public EntityRowChangeEventArgs(EntityRow entityRow, global::System.Data.DataRowAction dataRowAction)
			{
				this.entityRow = entityRow;
				this.dataRowAction = dataRowAction;
			}
			
			/// <summary>
			/// Gets the Entity row that has been changed.
			/// </summary>
			public EntityRow Row
			{
				get
				{
					return this.entityRow;
				}
			}
			
			/// <summary>
			/// Gets the action that caused the change to the row.
			/// </summary>
			public global::System.Data.DataRowAction Action
			{
				get
				{
					return this.dataRowAction;
				}
			}
		}
		
		/// <summary>
		/// Arguments for the event that indicates a change in a EntityTree table row.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		public class EntityTreeRowChangeEventArgs : global::System.EventArgs
		{
			
			/// <summary>
			/// The EntityTree row that has been changed.
			/// </summary>
			private EntityTreeRow entityTreeRow;
			
			/// <summary>
			/// The action that caused the change to the row.
			/// </summary>
			private global::System.Data.DataRowAction dataRowAction;
			
			/// <summary>
			/// Create the arguments for a changing EntityTree row event.
			/// </summary>
			/// <param name="entityTreeRow">The EntityTree row that has changed.</param>
			/// <param name="dataRowAction">The action that caused the change.</param>
			public EntityTreeRowChangeEventArgs(EntityTreeRow entityTreeRow, global::System.Data.DataRowAction dataRowAction)
			{
				this.entityTreeRow = entityTreeRow;
				this.dataRowAction = dataRowAction;
			}
			
			/// <summary>
			/// Gets the EntityTree row that has been changed.
			/// </summary>
			public EntityTreeRow Row
			{
				get
				{
					return this.entityTreeRow;
				}
			}
			
			/// <summary>
			/// Gets the action that caused the change to the row.
			/// </summary>
			public global::System.Data.DataRowAction Action
			{
				get
				{
					return this.dataRowAction;
				}
			}
		}
		
		/// <summary>
		/// Arguments for the event that indicates a change in a Equity table row.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		public class EquityRowChangeEventArgs : global::System.EventArgs
		{
			
			/// <summary>
			/// The Equity row that has been changed.
			/// </summary>
			private EquityRow equityRow;
			
			/// <summary>
			/// The action that caused the change to the row.
			/// </summary>
			private global::System.Data.DataRowAction dataRowAction;
			
			/// <summary>
			/// Create the arguments for a changing Equity row event.
			/// </summary>
			/// <param name="equityRow">The Equity row that has changed.</param>
			/// <param name="dataRowAction">The action that caused the change.</param>
			public EquityRowChangeEventArgs(EquityRow equityRow, global::System.Data.DataRowAction dataRowAction)
			{
				this.equityRow = equityRow;
				this.dataRowAction = dataRowAction;
			}
			
			/// <summary>
			/// Gets the Equity row that has been changed.
			/// </summary>
			public EquityRow Row
			{
				get
				{
					return this.equityRow;
				}
			}
			
			/// <summary>
			/// Gets the action that caused the change to the row.
			/// </summary>
			public global::System.Data.DataRowAction Action
			{
				get
				{
					return this.dataRowAction;
				}
			}
		}
		
		/// <summary>
		/// Arguments for the event that indicates a change in a Exchange table row.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		public class ExchangeRowChangeEventArgs : global::System.EventArgs
		{
			
			/// <summary>
			/// The Exchange row that has been changed.
			/// </summary>
			private ExchangeRow exchangeRow;
			
			/// <summary>
			/// The action that caused the change to the row.
			/// </summary>
			private global::System.Data.DataRowAction dataRowAction;
			
			/// <summary>
			/// Create the arguments for a changing Exchange row event.
			/// </summary>
			/// <param name="exchangeRow">The Exchange row that has changed.</param>
			/// <param name="dataRowAction">The action that caused the change.</param>
			public ExchangeRowChangeEventArgs(ExchangeRow exchangeRow, global::System.Data.DataRowAction dataRowAction)
			{
				this.exchangeRow = exchangeRow;
				this.dataRowAction = dataRowAction;
			}
			
			/// <summary>
			/// Gets the Exchange row that has been changed.
			/// </summary>
			public ExchangeRow Row
			{
				get
				{
					return this.exchangeRow;
				}
			}
			
			/// <summary>
			/// Gets the action that caused the change to the row.
			/// </summary>
			public global::System.Data.DataRowAction Action
			{
				get
				{
					return this.dataRowAction;
				}
			}
		}
		
		/// <summary>
		/// Arguments for the event that indicates a change in a Execution table row.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		public class ExecutionRowChangeEventArgs : global::System.EventArgs
		{
			
			/// <summary>
			/// The Execution row that has been changed.
			/// </summary>
			private ExecutionRow executionRow;
			
			/// <summary>
			/// The action that caused the change to the row.
			/// </summary>
			private global::System.Data.DataRowAction dataRowAction;
			
			/// <summary>
			/// Create the arguments for a changing Execution row event.
			/// </summary>
			/// <param name="executionRow">The Execution row that has changed.</param>
			/// <param name="dataRowAction">The action that caused the change.</param>
			public ExecutionRowChangeEventArgs(ExecutionRow executionRow, global::System.Data.DataRowAction dataRowAction)
			{
				this.executionRow = executionRow;
				this.dataRowAction = dataRowAction;
			}
			
			/// <summary>
			/// Gets the Execution row that has been changed.
			/// </summary>
			public ExecutionRow Row
			{
				get
				{
					return this.executionRow;
				}
			}
			
			/// <summary>
			/// Gets the action that caused the change to the row.
			/// </summary>
			public global::System.Data.DataRowAction Action
			{
				get
				{
					return this.dataRowAction;
				}
			}
		}
		
		/// <summary>
		/// Arguments for the event that indicates a change in a Folder table row.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		public class FolderRowChangeEventArgs : global::System.EventArgs
		{
			
			/// <summary>
			/// The Folder row that has been changed.
			/// </summary>
			private FolderRow folderRow;
			
			/// <summary>
			/// The action that caused the change to the row.
			/// </summary>
			private global::System.Data.DataRowAction dataRowAction;
			
			/// <summary>
			/// Create the arguments for a changing Folder row event.
			/// </summary>
			/// <param name="folderRow">The Folder row that has changed.</param>
			/// <param name="dataRowAction">The action that caused the change.</param>
			public FolderRowChangeEventArgs(FolderRow folderRow, global::System.Data.DataRowAction dataRowAction)
			{
				this.folderRow = folderRow;
				this.dataRowAction = dataRowAction;
			}
			
			/// <summary>
			/// Gets the Folder row that has been changed.
			/// </summary>
			public FolderRow Row
			{
				get
				{
					return this.folderRow;
				}
			}
			
			/// <summary>
			/// Gets the action that caused the change to the row.
			/// </summary>
			public global::System.Data.DataRowAction Action
			{
				get
				{
					return this.dataRowAction;
				}
			}
		}
		
		/// <summary>
		/// Arguments for the event that indicates a change in a GroupAccount table row.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		public class GroupAccountRowChangeEventArgs : global::System.EventArgs
		{
			
			/// <summary>
			/// The GroupAccount row that has been changed.
			/// </summary>
			private GroupAccountRow groupAccountRow;
			
			/// <summary>
			/// The action that caused the change to the row.
			/// </summary>
			private global::System.Data.DataRowAction dataRowAction;
			
			/// <summary>
			/// Create the arguments for a changing GroupAccount row event.
			/// </summary>
			/// <param name="groupAccountRow">The GroupAccount row that has changed.</param>
			/// <param name="dataRowAction">The action that caused the change.</param>
			public GroupAccountRowChangeEventArgs(GroupAccountRow groupAccountRow, global::System.Data.DataRowAction dataRowAction)
			{
				this.groupAccountRow = groupAccountRow;
				this.dataRowAction = dataRowAction;
			}
			
			/// <summary>
			/// Gets the GroupAccount row that has been changed.
			/// </summary>
			public GroupAccountRow Row
			{
				get
				{
					return this.groupAccountRow;
				}
			}
			
			/// <summary>
			/// Gets the action that caused the change to the row.
			/// </summary>
			public global::System.Data.DataRowAction Action
			{
				get
				{
					return this.dataRowAction;
				}
			}
		}
		
		/// <summary>
		/// Arguments for the event that indicates a change in a Holiday table row.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		public class HolidayRowChangeEventArgs : global::System.EventArgs
		{
			
			/// <summary>
			/// The Holiday row that has been changed.
			/// </summary>
			private HolidayRow holidayRow;
			
			/// <summary>
			/// The action that caused the change to the row.
			/// </summary>
			private global::System.Data.DataRowAction dataRowAction;
			
			/// <summary>
			/// Create the arguments for a changing Holiday row event.
			/// </summary>
			/// <param name="holidayRow">The Holiday row that has changed.</param>
			/// <param name="dataRowAction">The action that caused the change.</param>
			public HolidayRowChangeEventArgs(HolidayRow holidayRow, global::System.Data.DataRowAction dataRowAction)
			{
				this.holidayRow = holidayRow;
				this.dataRowAction = dataRowAction;
			}
			
			/// <summary>
			/// Gets the Holiday row that has been changed.
			/// </summary>
			public HolidayRow Row
			{
				get
				{
					return this.holidayRow;
				}
			}
			
			/// <summary>
			/// Gets the action that caused the change to the row.
			/// </summary>
			public global::System.Data.DataRowAction Action
			{
				get
				{
					return this.dataRowAction;
				}
			}
		}
		
		/// <summary>
		/// Arguments for the event that indicates a change in a HolidayType table row.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		public class HolidayTypeRowChangeEventArgs : global::System.EventArgs
		{
			
			/// <summary>
			/// The HolidayType row that has been changed.
			/// </summary>
			private HolidayTypeRow holidayTypeRow;
			
			/// <summary>
			/// The action that caused the change to the row.
			/// </summary>
			private global::System.Data.DataRowAction dataRowAction;
			
			/// <summary>
			/// Create the arguments for a changing HolidayType row event.
			/// </summary>
			/// <param name="holidayTypeRow">The HolidayType row that has changed.</param>
			/// <param name="dataRowAction">The action that caused the change.</param>
			public HolidayTypeRowChangeEventArgs(HolidayTypeRow holidayTypeRow, global::System.Data.DataRowAction dataRowAction)
			{
				this.holidayTypeRow = holidayTypeRow;
				this.dataRowAction = dataRowAction;
			}
			
			/// <summary>
			/// Gets the HolidayType row that has been changed.
			/// </summary>
			public HolidayTypeRow Row
			{
				get
				{
					return this.holidayTypeRow;
				}
			}
			
			/// <summary>
			/// Gets the action that caused the change to the row.
			/// </summary>
			public global::System.Data.DataRowAction Action
			{
				get
				{
					return this.dataRowAction;
				}
			}
		}
		
		/// <summary>
		/// Arguments for the event that indicates a change in a Image table row.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		public class ImageRowChangeEventArgs : global::System.EventArgs
		{
			
			/// <summary>
			/// The Image row that has been changed.
			/// </summary>
			private ImageRow imageRow;
			
			/// <summary>
			/// The action that caused the change to the row.
			/// </summary>
			private global::System.Data.DataRowAction dataRowAction;
			
			/// <summary>
			/// Create the arguments for a changing Image row event.
			/// </summary>
			/// <param name="imageRow">The Image row that has changed.</param>
			/// <param name="dataRowAction">The action that caused the change.</param>
			public ImageRowChangeEventArgs(ImageRow imageRow, global::System.Data.DataRowAction dataRowAction)
			{
				this.imageRow = imageRow;
				this.dataRowAction = dataRowAction;
			}
			
			/// <summary>
			/// Gets the Image row that has been changed.
			/// </summary>
			public ImageRow Row
			{
				get
				{
					return this.imageRow;
				}
			}
			
			/// <summary>
			/// Gets the action that caused the change to the row.
			/// </summary>
			public global::System.Data.DataRowAction Action
			{
				get
				{
					return this.dataRowAction;
				}
			}
		}
		
		/// <summary>
		/// Arguments for the event that indicates a change in a Industry table row.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		public class IndustryRowChangeEventArgs : global::System.EventArgs
		{
			
			/// <summary>
			/// The Industry row that has been changed.
			/// </summary>
			private IndustryRow industryRow;
			
			/// <summary>
			/// The action that caused the change to the row.
			/// </summary>
			private global::System.Data.DataRowAction dataRowAction;
			
			/// <summary>
			/// Create the arguments for a changing Industry row event.
			/// </summary>
			/// <param name="industryRow">The Industry row that has changed.</param>
			/// <param name="dataRowAction">The action that caused the change.</param>
			public IndustryRowChangeEventArgs(IndustryRow industryRow, global::System.Data.DataRowAction dataRowAction)
			{
				this.industryRow = industryRow;
				this.dataRowAction = dataRowAction;
			}
			
			/// <summary>
			/// Gets the Industry row that has been changed.
			/// </summary>
			public IndustryRow Row
			{
				get
				{
					return this.industryRow;
				}
			}
			
			/// <summary>
			/// Gets the action that caused the change to the row.
			/// </summary>
			public global::System.Data.DataRowAction Action
			{
				get
				{
					return this.dataRowAction;
				}
			}
		}
		
		/// <summary>
		/// Arguments for the event that indicates a change in a IndustryClassification table row.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		public class IndustryClassificationRowChangeEventArgs : global::System.EventArgs
		{
			
			/// <summary>
			/// The IndustryClassification row that has been changed.
			/// </summary>
			private IndustryClassificationRow industryClassificationRow;
			
			/// <summary>
			/// The action that caused the change to the row.
			/// </summary>
			private global::System.Data.DataRowAction dataRowAction;
			
			/// <summary>
			/// Create the arguments for a changing IndustryClassification row event.
			/// </summary>
			/// <param name="industryClassificationRow">The IndustryClassification row that has changed.</param>
			/// <param name="dataRowAction">The action that caused the change.</param>
			public IndustryClassificationRowChangeEventArgs(IndustryClassificationRow industryClassificationRow, global::System.Data.DataRowAction dataRowAction)
			{
				this.industryClassificationRow = industryClassificationRow;
				this.dataRowAction = dataRowAction;
			}
			
			/// <summary>
			/// Gets the IndustryClassification row that has been changed.
			/// </summary>
			public IndustryClassificationRow Row
			{
				get
				{
					return this.industryClassificationRow;
				}
			}
			
			/// <summary>
			/// Gets the action that caused the change to the row.
			/// </summary>
			public global::System.Data.DataRowAction Action
			{
				get
				{
					return this.dataRowAction;
				}
			}
		}
		
		/// <summary>
		/// Arguments for the event that indicates a change in a IndustryLeaf table row.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		public class IndustryLeafRowChangeEventArgs : global::System.EventArgs
		{
			
			/// <summary>
			/// The IndustryLeaf row that has been changed.
			/// </summary>
			private IndustryLeafRow industryLeafRow;
			
			/// <summary>
			/// The action that caused the change to the row.
			/// </summary>
			private global::System.Data.DataRowAction dataRowAction;
			
			/// <summary>
			/// Create the arguments for a changing IndustryLeaf row event.
			/// </summary>
			/// <param name="industryLeafRow">The IndustryLeaf row that has changed.</param>
			/// <param name="dataRowAction">The action that caused the change.</param>
			public IndustryLeafRowChangeEventArgs(IndustryLeafRow industryLeafRow, global::System.Data.DataRowAction dataRowAction)
			{
				this.industryLeafRow = industryLeafRow;
				this.dataRowAction = dataRowAction;
			}
			
			/// <summary>
			/// Gets the IndustryLeaf row that has been changed.
			/// </summary>
			public IndustryLeafRow Row
			{
				get
				{
					return this.industryLeafRow;
				}
			}
			
			/// <summary>
			/// Gets the action that caused the change to the row.
			/// </summary>
			public global::System.Data.DataRowAction Action
			{
				get
				{
					return this.dataRowAction;
				}
			}
		}
		
		/// <summary>
		/// Arguments for the event that indicates a change in a IndustryTree table row.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		public class IndustryTreeRowChangeEventArgs : global::System.EventArgs
		{
			
			/// <summary>
			/// The IndustryTree row that has been changed.
			/// </summary>
			private IndustryTreeRow industryTreeRow;
			
			/// <summary>
			/// The action that caused the change to the row.
			/// </summary>
			private global::System.Data.DataRowAction dataRowAction;
			
			/// <summary>
			/// Create the arguments for a changing IndustryTree row event.
			/// </summary>
			/// <param name="industryTreeRow">The IndustryTree row that has changed.</param>
			/// <param name="dataRowAction">The action that caused the change.</param>
			public IndustryTreeRowChangeEventArgs(IndustryTreeRow industryTreeRow, global::System.Data.DataRowAction dataRowAction)
			{
				this.industryTreeRow = industryTreeRow;
				this.dataRowAction = dataRowAction;
			}
			
			/// <summary>
			/// Gets the IndustryTree row that has been changed.
			/// </summary>
			public IndustryTreeRow Row
			{
				get
				{
					return this.industryTreeRow;
				}
			}
			
			/// <summary>
			/// Gets the action that caused the change to the row.
			/// </summary>
			public global::System.Data.DataRowAction Action
			{
				get
				{
					return this.dataRowAction;
				}
			}
		}
		
		/// <summary>
		/// Arguments for the event that indicates a change in a Institution table row.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		public class InstitutionRowChangeEventArgs : global::System.EventArgs
		{
			
			/// <summary>
			/// The Institution row that has been changed.
			/// </summary>
			private InstitutionRow institutionRow;
			
			/// <summary>
			/// The action that caused the change to the row.
			/// </summary>
			private global::System.Data.DataRowAction dataRowAction;
			
			/// <summary>
			/// Create the arguments for a changing Institution row event.
			/// </summary>
			/// <param name="institutionRow">The Institution row that has changed.</param>
			/// <param name="dataRowAction">The action that caused the change.</param>
			public InstitutionRowChangeEventArgs(InstitutionRow institutionRow, global::System.Data.DataRowAction dataRowAction)
			{
				this.institutionRow = institutionRow;
				this.dataRowAction = dataRowAction;
			}
			
			/// <summary>
			/// Gets the Institution row that has been changed.
			/// </summary>
			public InstitutionRow Row
			{
				get
				{
					return this.institutionRow;
				}
			}
			
			/// <summary>
			/// Gets the action that caused the change to the row.
			/// </summary>
			public global::System.Data.DataRowAction Action
			{
				get
				{
					return this.dataRowAction;
				}
			}
		}
		
		/// <summary>
		/// Arguments for the event that indicates a change in a Issuer table row.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		public class IssuerRowChangeEventArgs : global::System.EventArgs
		{
			
			/// <summary>
			/// The Issuer row that has been changed.
			/// </summary>
			private IssuerRow issuerRow;
			
			/// <summary>
			/// The action that caused the change to the row.
			/// </summary>
			private global::System.Data.DataRowAction dataRowAction;
			
			/// <summary>
			/// Create the arguments for a changing Issuer row event.
			/// </summary>
			/// <param name="issuerRow">The Issuer row that has changed.</param>
			/// <param name="dataRowAction">The action that caused the change.</param>
			public IssuerRowChangeEventArgs(IssuerRow issuerRow, global::System.Data.DataRowAction dataRowAction)
			{
				this.issuerRow = issuerRow;
				this.dataRowAction = dataRowAction;
			}
			
			/// <summary>
			/// Gets the Issuer row that has been changed.
			/// </summary>
			public IssuerRow Row
			{
				get
				{
					return this.issuerRow;
				}
			}
			
			/// <summary>
			/// Gets the action that caused the change to the row.
			/// </summary>
			public global::System.Data.DataRowAction Action
			{
				get
				{
					return this.dataRowAction;
				}
			}
		}
		
		/// <summary>
		/// Arguments for the event that indicates a change in a LotHandling table row.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		public class LotHandlingRowChangeEventArgs : global::System.EventArgs
		{
			
			/// <summary>
			/// The LotHandling row that has been changed.
			/// </summary>
			private LotHandlingRow lotHandlingRow;
			
			/// <summary>
			/// The action that caused the change to the row.
			/// </summary>
			private global::System.Data.DataRowAction dataRowAction;
			
			/// <summary>
			/// Create the arguments for a changing LotHandling row event.
			/// </summary>
			/// <param name="lotHandlingRow">The LotHandling row that has changed.</param>
			/// <param name="dataRowAction">The action that caused the change.</param>
			public LotHandlingRowChangeEventArgs(LotHandlingRow lotHandlingRow, global::System.Data.DataRowAction dataRowAction)
			{
				this.lotHandlingRow = lotHandlingRow;
				this.dataRowAction = dataRowAction;
			}
			
			/// <summary>
			/// Gets the LotHandling row that has been changed.
			/// </summary>
			public LotHandlingRow Row
			{
				get
				{
					return this.lotHandlingRow;
				}
			}
			
			/// <summary>
			/// Gets the action that caused the change to the row.
			/// </summary>
			public global::System.Data.DataRowAction Action
			{
				get
				{
					return this.dataRowAction;
				}
			}
		}
		
		/// <summary>
		/// Arguments for the event that indicates a change in a MajorInstrumentType table row.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		public class MajorInstrumentTypeRowChangeEventArgs : global::System.EventArgs
		{
			
			/// <summary>
			/// The MajorInstrumentType row that has been changed.
			/// </summary>
			private MajorInstrumentTypeRow majorInstrumentTypeRow;
			
			/// <summary>
			/// The action that caused the change to the row.
			/// </summary>
			private global::System.Data.DataRowAction dataRowAction;
			
			/// <summary>
			/// Create the arguments for a changing MajorInstrumentType row event.
			/// </summary>
			/// <param name="majorInstrumentTypeRow">The MajorInstrumentType row that has changed.</param>
			/// <param name="dataRowAction">The action that caused the change.</param>
			public MajorInstrumentTypeRowChangeEventArgs(MajorInstrumentTypeRow majorInstrumentTypeRow, global::System.Data.DataRowAction dataRowAction)
			{
				this.majorInstrumentTypeRow = majorInstrumentTypeRow;
				this.dataRowAction = dataRowAction;
			}
			
			/// <summary>
			/// Gets the MajorInstrumentType row that has been changed.
			/// </summary>
			public MajorInstrumentTypeRow Row
			{
				get
				{
					return this.majorInstrumentTypeRow;
				}
			}
			
			/// <summary>
			/// Gets the action that caused the change to the row.
			/// </summary>
			public global::System.Data.DataRowAction Action
			{
				get
				{
					return this.dataRowAction;
				}
			}
		}
		
		/// <summary>
		/// Arguments for the event that indicates a change in a Match table row.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		public class MatchRowChangeEventArgs : global::System.EventArgs
		{
			
			/// <summary>
			/// The Match row that has been changed.
			/// </summary>
			private MatchRow matchRow;
			
			/// <summary>
			/// The action that caused the change to the row.
			/// </summary>
			private global::System.Data.DataRowAction dataRowAction;
			
			/// <summary>
			/// Create the arguments for a changing Match row event.
			/// </summary>
			/// <param name="matchRow">The Match row that has changed.</param>
			/// <param name="dataRowAction">The action that caused the change.</param>
			public MatchRowChangeEventArgs(MatchRow matchRow, global::System.Data.DataRowAction dataRowAction)
			{
				this.matchRow = matchRow;
				this.dataRowAction = dataRowAction;
			}
			
			/// <summary>
			/// Gets the Match row that has been changed.
			/// </summary>
			public MatchRow Row
			{
				get
				{
					return this.matchRow;
				}
			}
			
			/// <summary>
			/// Gets the action that caused the change to the row.
			/// </summary>
			public global::System.Data.DataRowAction Action
			{
				get
				{
					return this.dataRowAction;
				}
			}
		}
		
		/// <summary>
		/// Arguments for the event that indicates a change in a MinorInstrumentType table row.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		public class MinorInstrumentTypeRowChangeEventArgs : global::System.EventArgs
		{
			
			/// <summary>
			/// The MinorInstrumentType row that has been changed.
			/// </summary>
			private MinorInstrumentTypeRow minorInstrumentTypeRow;
			
			/// <summary>
			/// The action that caused the change to the row.
			/// </summary>
			private global::System.Data.DataRowAction dataRowAction;
			
			/// <summary>
			/// Create the arguments for a changing MinorInstrumentType row event.
			/// </summary>
			/// <param name="minorInstrumentTypeRow">The MinorInstrumentType row that has changed.</param>
			/// <param name="dataRowAction">The action that caused the change.</param>
			public MinorInstrumentTypeRowChangeEventArgs(MinorInstrumentTypeRow minorInstrumentTypeRow, global::System.Data.DataRowAction dataRowAction)
			{
				this.minorInstrumentTypeRow = minorInstrumentTypeRow;
				this.dataRowAction = dataRowAction;
			}
			
			/// <summary>
			/// Gets the MinorInstrumentType row that has been changed.
			/// </summary>
			public MinorInstrumentTypeRow Row
			{
				get
				{
					return this.minorInstrumentTypeRow;
				}
			}
			
			/// <summary>
			/// Gets the action that caused the change to the row.
			/// </summary>
			public global::System.Data.DataRowAction Action
			{
				get
				{
					return this.dataRowAction;
				}
			}
		}
		
		/// <summary>
		/// Arguments for the event that indicates a change in a MssaBucket table row.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		public class MssaBucketRowChangeEventArgs : global::System.EventArgs
		{
			
			/// <summary>
			/// The MssaBucket row that has been changed.
			/// </summary>
			private MssaBucketRow mssaBucketRow;
			
			/// <summary>
			/// The action that caused the change to the row.
			/// </summary>
			private global::System.Data.DataRowAction dataRowAction;
			
			/// <summary>
			/// Create the arguments for a changing MssaBucket row event.
			/// </summary>
			/// <param name="mssaBucketRow">The MssaBucket row that has changed.</param>
			/// <param name="dataRowAction">The action that caused the change.</param>
			public MssaBucketRowChangeEventArgs(MssaBucketRow mssaBucketRow, global::System.Data.DataRowAction dataRowAction)
			{
				this.mssaBucketRow = mssaBucketRow;
				this.dataRowAction = dataRowAction;
			}
			
			/// <summary>
			/// Gets the MssaBucket row that has been changed.
			/// </summary>
			public MssaBucketRow Row
			{
				get
				{
					return this.mssaBucketRow;
				}
			}
			
			/// <summary>
			/// Gets the action that caused the change to the row.
			/// </summary>
			public global::System.Data.DataRowAction Action
			{
				get
				{
					return this.dataRowAction;
				}
			}
		}
		
		/// <summary>
		/// Arguments for the event that indicates a change in a Negotiation table row.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		public class NegotiationRowChangeEventArgs : global::System.EventArgs
		{
			
			/// <summary>
			/// The Negotiation row that has been changed.
			/// </summary>
			private NegotiationRow negotiationRow;
			
			/// <summary>
			/// The action that caused the change to the row.
			/// </summary>
			private global::System.Data.DataRowAction dataRowAction;
			
			/// <summary>
			/// Create the arguments for a changing Negotiation row event.
			/// </summary>
			/// <param name="negotiationRow">The Negotiation row that has changed.</param>
			/// <param name="dataRowAction">The action that caused the change.</param>
			public NegotiationRowChangeEventArgs(NegotiationRow negotiationRow, global::System.Data.DataRowAction dataRowAction)
			{
				this.negotiationRow = negotiationRow;
				this.dataRowAction = dataRowAction;
			}
			
			/// <summary>
			/// Gets the Negotiation row that has been changed.
			/// </summary>
			public NegotiationRow Row
			{
				get
				{
					return this.negotiationRow;
				}
			}
			
			/// <summary>
			/// Gets the action that caused the change to the row.
			/// </summary>
			public global::System.Data.DataRowAction Action
			{
				get
				{
					return this.dataRowAction;
				}
			}
		}
		
		/// <summary>
		/// Arguments for the event that indicates a change in a OrderType table row.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		public class OrderTypeRowChangeEventArgs : global::System.EventArgs
		{
			
			/// <summary>
			/// The OrderType row that has been changed.
			/// </summary>
			private OrderTypeRow orderTypeRow;
			
			/// <summary>
			/// The action that caused the change to the row.
			/// </summary>
			private global::System.Data.DataRowAction dataRowAction;
			
			/// <summary>
			/// Create the arguments for a changing OrderType row event.
			/// </summary>
			/// <param name="orderTypeRow">The OrderType row that has changed.</param>
			/// <param name="dataRowAction">The action that caused the change.</param>
			public OrderTypeRowChangeEventArgs(OrderTypeRow orderTypeRow, global::System.Data.DataRowAction dataRowAction)
			{
				this.orderTypeRow = orderTypeRow;
				this.dataRowAction = dataRowAction;
			}
			
			/// <summary>
			/// Gets the OrderType row that has been changed.
			/// </summary>
			public OrderTypeRow Row
			{
				get
				{
					return this.orderTypeRow;
				}
			}
			
			/// <summary>
			/// Gets the action that caused the change to the row.
			/// </summary>
			public global::System.Data.DataRowAction Action
			{
				get
				{
					return this.dataRowAction;
				}
			}
		}
		
		/// <summary>
		/// Arguments for the event that indicates a change in a PartyType table row.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		public class PartyTypeRowChangeEventArgs : global::System.EventArgs
		{
			
			/// <summary>
			/// The PartyType row that has been changed.
			/// </summary>
			private PartyTypeRow partyTypeRow;
			
			/// <summary>
			/// The action that caused the change to the row.
			/// </summary>
			private global::System.Data.DataRowAction dataRowAction;
			
			/// <summary>
			/// Create the arguments for a changing PartyType row event.
			/// </summary>
			/// <param name="partyTypeRow">The PartyType row that has changed.</param>
			/// <param name="dataRowAction">The action that caused the change.</param>
			public PartyTypeRowChangeEventArgs(PartyTypeRow partyTypeRow, global::System.Data.DataRowAction dataRowAction)
			{
				this.partyTypeRow = partyTypeRow;
				this.dataRowAction = dataRowAction;
			}
			
			/// <summary>
			/// Gets the PartyType row that has been changed.
			/// </summary>
			public PartyTypeRow Row
			{
				get
				{
					return this.partyTypeRow;
				}
			}
			
			/// <summary>
			/// Gets the action that caused the change to the row.
			/// </summary>
			public global::System.Data.DataRowAction Action
			{
				get
				{
					return this.dataRowAction;
				}
			}
		}
		
		/// <summary>
		/// Arguments for the event that indicates a change in a Position table row.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		public class PositionRowChangeEventArgs : global::System.EventArgs
		{
			
			/// <summary>
			/// The Position row that has been changed.
			/// </summary>
			private PositionRow positionRow;
			
			/// <summary>
			/// The action that caused the change to the row.
			/// </summary>
			private global::System.Data.DataRowAction dataRowAction;
			
			/// <summary>
			/// Create the arguments for a changing Position row event.
			/// </summary>
			/// <param name="positionRow">The Position row that has changed.</param>
			/// <param name="dataRowAction">The action that caused the change.</param>
			public PositionRowChangeEventArgs(PositionRow positionRow, global::System.Data.DataRowAction dataRowAction)
			{
				this.positionRow = positionRow;
				this.dataRowAction = dataRowAction;
			}
			
			/// <summary>
			/// Gets the Position row that has been changed.
			/// </summary>
			public PositionRow Row
			{
				get
				{
					return this.positionRow;
				}
			}
			
			/// <summary>
			/// Gets the action that caused the change to the row.
			/// </summary>
			public global::System.Data.DataRowAction Action
			{
				get
				{
					return this.dataRowAction;
				}
			}
		}
		
		/// <summary>
		/// Arguments for the event that indicates a change in a PositionSeries table row.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		public class PositionSeriesRowChangeEventArgs : global::System.EventArgs
		{
			
			/// <summary>
			/// The PositionSeries row that has been changed.
			/// </summary>
			private PositionSeriesRow positionSeriesRow;
			
			/// <summary>
			/// The action that caused the change to the row.
			/// </summary>
			private global::System.Data.DataRowAction dataRowAction;
			
			/// <summary>
			/// Create the arguments for a changing PositionSeries row event.
			/// </summary>
			/// <param name="positionSeriesRow">The PositionSeries row that has changed.</param>
			/// <param name="dataRowAction">The action that caused the change.</param>
			public PositionSeriesRowChangeEventArgs(PositionSeriesRow positionSeriesRow, global::System.Data.DataRowAction dataRowAction)
			{
				this.positionSeriesRow = positionSeriesRow;
				this.dataRowAction = dataRowAction;
			}
			
			/// <summary>
			/// Gets the PositionSeries row that has been changed.
			/// </summary>
			public PositionSeriesRow Row
			{
				get
				{
					return this.positionSeriesRow;
				}
			}
			
			/// <summary>
			/// Gets the action that caused the change to the row.
			/// </summary>
			public global::System.Data.DataRowAction Action
			{
				get
				{
					return this.dataRowAction;
				}
			}
		}
		
		/// <summary>
		/// Arguments for the event that indicates a change in a PositionType table row.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		public class PositionTypeRowChangeEventArgs : global::System.EventArgs
		{
			
			/// <summary>
			/// The PositionType row that has been changed.
			/// </summary>
			private PositionTypeRow positionTypeRow;
			
			/// <summary>
			/// The action that caused the change to the row.
			/// </summary>
			private global::System.Data.DataRowAction dataRowAction;
			
			/// <summary>
			/// Create the arguments for a changing PositionType row event.
			/// </summary>
			/// <param name="positionTypeRow">The PositionType row that has changed.</param>
			/// <param name="dataRowAction">The action that caused the change.</param>
			public PositionTypeRowChangeEventArgs(PositionTypeRow positionTypeRow, global::System.Data.DataRowAction dataRowAction)
			{
				this.positionTypeRow = positionTypeRow;
				this.dataRowAction = dataRowAction;
			}
			
			/// <summary>
			/// Gets the PositionType row that has been changed.
			/// </summary>
			public PositionTypeRow Row
			{
				get
				{
					return this.positionTypeRow;
				}
			}
			
			/// <summary>
			/// Gets the action that caused the change to the row.
			/// </summary>
			public global::System.Data.DataRowAction Action
			{
				get
				{
					return this.dataRowAction;
				}
			}
		}
		
		/// <summary>
		/// Arguments for the event that indicates a change in a Price table row.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		public class PriceRowChangeEventArgs : global::System.EventArgs
		{
			
			/// <summary>
			/// The Price row that has been changed.
			/// </summary>
			private PriceRow priceRow;
			
			/// <summary>
			/// The action that caused the change to the row.
			/// </summary>
			private global::System.Data.DataRowAction dataRowAction;
			
			/// <summary>
			/// Create the arguments for a changing Price row event.
			/// </summary>
			/// <param name="priceRow">The Price row that has changed.</param>
			/// <param name="dataRowAction">The action that caused the change.</param>
			public PriceRowChangeEventArgs(PriceRow priceRow, global::System.Data.DataRowAction dataRowAction)
			{
				this.priceRow = priceRow;
				this.dataRowAction = dataRowAction;
			}
			
			/// <summary>
			/// Gets the Price row that has been changed.
			/// </summary>
			public PriceRow Row
			{
				get
				{
					return this.priceRow;
				}
			}
			
			/// <summary>
			/// Gets the action that caused the change to the row.
			/// </summary>
			public global::System.Data.DataRowAction Action
			{
				get
				{
					return this.dataRowAction;
				}
			}
		}
		
		/// <summary>
		/// Arguments for the event that indicates a change in a Property table row.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		public class PropertyRowChangeEventArgs : global::System.EventArgs
		{
			
			/// <summary>
			/// The Property row that has been changed.
			/// </summary>
			private PropertyRow propertyRow;
			
			/// <summary>
			/// The action that caused the change to the row.
			/// </summary>
			private global::System.Data.DataRowAction dataRowAction;
			
			/// <summary>
			/// Create the arguments for a changing Property row event.
			/// </summary>
			/// <param name="propertyRow">The Property row that has changed.</param>
			/// <param name="dataRowAction">The action that caused the change.</param>
			public PropertyRowChangeEventArgs(PropertyRow propertyRow, global::System.Data.DataRowAction dataRowAction)
			{
				this.propertyRow = propertyRow;
				this.dataRowAction = dataRowAction;
			}
			
			/// <summary>
			/// Gets the Property row that has been changed.
			/// </summary>
			public PropertyRow Row
			{
				get
				{
					return this.propertyRow;
				}
			}
			
			/// <summary>
			/// Gets the action that caused the change to the row.
			/// </summary>
			public global::System.Data.DataRowAction Action
			{
				get
				{
					return this.dataRowAction;
				}
			}
		}
		
		/// <summary>
		/// Arguments for the event that indicates a change in a PropertyStore table row.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		public class PropertyStoreRowChangeEventArgs : global::System.EventArgs
		{
			
			/// <summary>
			/// The PropertyStore row that has been changed.
			/// </summary>
			private PropertyStoreRow propertyStoreRow;
			
			/// <summary>
			/// The action that caused the change to the row.
			/// </summary>
			private global::System.Data.DataRowAction dataRowAction;
			
			/// <summary>
			/// Create the arguments for a changing PropertyStore row event.
			/// </summary>
			/// <param name="propertyStoreRow">The PropertyStore row that has changed.</param>
			/// <param name="dataRowAction">The action that caused the change.</param>
			public PropertyStoreRowChangeEventArgs(PropertyStoreRow propertyStoreRow, global::System.Data.DataRowAction dataRowAction)
			{
				this.propertyStoreRow = propertyStoreRow;
				this.dataRowAction = dataRowAction;
			}
			
			/// <summary>
			/// Gets the PropertyStore row that has been changed.
			/// </summary>
			public PropertyStoreRow Row
			{
				get
				{
					return this.propertyStoreRow;
				}
			}
			
			/// <summary>
			/// Gets the action that caused the change to the row.
			/// </summary>
			public global::System.Data.DataRowAction Action
			{
				get
				{
					return this.dataRowAction;
				}
			}
		}
		
		/// <summary>
		/// Arguments for the event that indicates a change in a Province table row.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		public class ProvinceRowChangeEventArgs : global::System.EventArgs
		{
			
			/// <summary>
			/// The Province row that has been changed.
			/// </summary>
			private ProvinceRow provinceRow;
			
			/// <summary>
			/// The action that caused the change to the row.
			/// </summary>
			private global::System.Data.DataRowAction dataRowAction;
			
			/// <summary>
			/// Create the arguments for a changing Province row event.
			/// </summary>
			/// <param name="provinceRow">The Province row that has changed.</param>
			/// <param name="dataRowAction">The action that caused the change.</param>
			public ProvinceRowChangeEventArgs(ProvinceRow provinceRow, global::System.Data.DataRowAction dataRowAction)
			{
				this.provinceRow = provinceRow;
				this.dataRowAction = dataRowAction;
			}
			
			/// <summary>
			/// Gets the Province row that has been changed.
			/// </summary>
			public ProvinceRow Row
			{
				get
				{
					return this.provinceRow;
				}
			}
			
			/// <summary>
			/// Gets the action that caused the change to the row.
			/// </summary>
			public global::System.Data.DataRowAction Action
			{
				get
				{
					return this.dataRowAction;
				}
			}
		}
		
		/// <summary>
		/// Arguments for the event that indicates a change in a Security table row.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		public class SecurityRowChangeEventArgs : global::System.EventArgs
		{
			
			/// <summary>
			/// The Security row that has been changed.
			/// </summary>
			private SecurityRow securityRow;
			
			/// <summary>
			/// The action that caused the change to the row.
			/// </summary>
			private global::System.Data.DataRowAction dataRowAction;
			
			/// <summary>
			/// Create the arguments for a changing Security row event.
			/// </summary>
			/// <param name="securityRow">The Security row that has changed.</param>
			/// <param name="dataRowAction">The action that caused the change.</param>
			public SecurityRowChangeEventArgs(SecurityRow securityRow, global::System.Data.DataRowAction dataRowAction)
			{
				this.securityRow = securityRow;
				this.dataRowAction = dataRowAction;
			}
			
			/// <summary>
			/// Gets the Security row that has been changed.
			/// </summary>
			public SecurityRow Row
			{
				get
				{
					return this.securityRow;
				}
			}
			
			/// <summary>
			/// Gets the action that caused the change to the row.
			/// </summary>
			public global::System.Data.DataRowAction Action
			{
				get
				{
					return this.dataRowAction;
				}
			}
		}
		
		/// <summary>
		/// Arguments for the event that indicates a change in a SecuritySeries table row.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		public class SecuritySeriesRowChangeEventArgs : global::System.EventArgs
		{
			
			/// <summary>
			/// The SecuritySeries row that has been changed.
			/// </summary>
			private SecuritySeriesRow securitySeriesRow;
			
			/// <summary>
			/// The action that caused the change to the row.
			/// </summary>
			private global::System.Data.DataRowAction dataRowAction;
			
			/// <summary>
			/// Create the arguments for a changing SecuritySeries row event.
			/// </summary>
			/// <param name="securitySeriesRow">The SecuritySeries row that has changed.</param>
			/// <param name="dataRowAction">The action that caused the change.</param>
			public SecuritySeriesRowChangeEventArgs(SecuritySeriesRow securitySeriesRow, global::System.Data.DataRowAction dataRowAction)
			{
				this.securitySeriesRow = securitySeriesRow;
				this.dataRowAction = dataRowAction;
			}
			
			/// <summary>
			/// Gets the SecuritySeries row that has been changed.
			/// </summary>
			public SecuritySeriesRow Row
			{
				get
				{
					return this.securitySeriesRow;
				}
			}
			
			/// <summary>
			/// Gets the action that caused the change to the row.
			/// </summary>
			public global::System.Data.DataRowAction Action
			{
				get
				{
					return this.dataRowAction;
				}
			}
		}
		
		/// <summary>
		/// Arguments for the event that indicates a change in a SettlementUnit table row.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		public class SettlementUnitRowChangeEventArgs : global::System.EventArgs
		{
			
			/// <summary>
			/// The SettlementUnit row that has been changed.
			/// </summary>
			private SettlementUnitRow settlementUnitRow;
			
			/// <summary>
			/// The action that caused the change to the row.
			/// </summary>
			private global::System.Data.DataRowAction dataRowAction;
			
			/// <summary>
			/// Create the arguments for a changing SettlementUnit row event.
			/// </summary>
			/// <param name="settlementUnitRow">The SettlementUnit row that has changed.</param>
			/// <param name="dataRowAction">The action that caused the change.</param>
			public SettlementUnitRowChangeEventArgs(SettlementUnitRow settlementUnitRow, global::System.Data.DataRowAction dataRowAction)
			{
				this.settlementUnitRow = settlementUnitRow;
				this.dataRowAction = dataRowAction;
			}
			
			/// <summary>
			/// Gets the SettlementUnit row that has been changed.
			/// </summary>
			public SettlementUnitRow Row
			{
				get
				{
					return this.settlementUnitRow;
				}
			}
			
			/// <summary>
			/// Gets the action that caused the change to the row.
			/// </summary>
			public global::System.Data.DataRowAction Action
			{
				get
				{
					return this.dataRowAction;
				}
			}
		}
		
		/// <summary>
		/// Arguments for the event that indicates a change in a Side table row.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		public class SideRowChangeEventArgs : global::System.EventArgs
		{
			
			/// <summary>
			/// The Side row that has been changed.
			/// </summary>
			private SideRow sideRow;
			
			/// <summary>
			/// The action that caused the change to the row.
			/// </summary>
			private global::System.Data.DataRowAction dataRowAction;
			
			/// <summary>
			/// Create the arguments for a changing Side row event.
			/// </summary>
			/// <param name="sideRow">The Side row that has changed.</param>
			/// <param name="dataRowAction">The action that caused the change.</param>
			public SideRowChangeEventArgs(SideRow sideRow, global::System.Data.DataRowAction dataRowAction)
			{
				this.sideRow = sideRow;
				this.dataRowAction = dataRowAction;
			}
			
			/// <summary>
			/// Gets the Side row that has been changed.
			/// </summary>
			public SideRow Row
			{
				get
				{
					return this.sideRow;
				}
			}
			
			/// <summary>
			/// Gets the action that caused the change to the row.
			/// </summary>
			public global::System.Data.DataRowAction Action
			{
				get
				{
					return this.dataRowAction;
				}
			}
		}
		
		/// <summary>
		/// Arguments for the event that indicates a change in a SingleAccount table row.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		public class SingleAccountRowChangeEventArgs : global::System.EventArgs
		{
			
			/// <summary>
			/// The SingleAccount row that has been changed.
			/// </summary>
			private SingleAccountRow singleAccountRow;
			
			/// <summary>
			/// The action that caused the change to the row.
			/// </summary>
			private global::System.Data.DataRowAction dataRowAction;
			
			/// <summary>
			/// Create the arguments for a changing SingleAccount row event.
			/// </summary>
			/// <param name="singleAccountRow">The SingleAccount row that has changed.</param>
			/// <param name="dataRowAction">The action that caused the change.</param>
			public SingleAccountRowChangeEventArgs(SingleAccountRow singleAccountRow, global::System.Data.DataRowAction dataRowAction)
			{
				this.singleAccountRow = singleAccountRow;
				this.dataRowAction = dataRowAction;
			}
			
			/// <summary>
			/// Gets the SingleAccount row that has been changed.
			/// </summary>
			public SingleAccountRow Row
			{
				get
				{
					return this.singleAccountRow;
				}
			}
			
			/// <summary>
			/// Gets the action that caused the change to the row.
			/// </summary>
			public global::System.Data.DataRowAction Action
			{
				get
				{
					return this.dataRowAction;
				}
			}
		}
		
		/// <summary>
		/// Arguments for the event that indicates a change in a Source table row.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		public class SourceRowChangeEventArgs : global::System.EventArgs
		{
			
			/// <summary>
			/// The Source row that has been changed.
			/// </summary>
			private SourceRow sourceRow;
			
			/// <summary>
			/// The action that caused the change to the row.
			/// </summary>
			private global::System.Data.DataRowAction dataRowAction;
			
			/// <summary>
			/// Create the arguments for a changing Source row event.
			/// </summary>
			/// <param name="sourceRow">The Source row that has changed.</param>
			/// <param name="dataRowAction">The action that caused the change.</param>
			public SourceRowChangeEventArgs(SourceRow sourceRow, global::System.Data.DataRowAction dataRowAction)
			{
				this.sourceRow = sourceRow;
				this.dataRowAction = dataRowAction;
			}
			
			/// <summary>
			/// Gets the Source row that has been changed.
			/// </summary>
			public SourceRow Row
			{
				get
				{
					return this.sourceRow;
				}
			}
			
			/// <summary>
			/// Gets the action that caused the change to the row.
			/// </summary>
			public global::System.Data.DataRowAction Action
			{
				get
				{
					return this.dataRowAction;
				}
			}
		}
		
		/// <summary>
		/// Arguments for the event that indicates a change in a SourceOrder table row.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		public class SourceOrderRowChangeEventArgs : global::System.EventArgs
		{
			
			/// <summary>
			/// The SourceOrder row that has been changed.
			/// </summary>
			private SourceOrderRow sourceOrderRow;
			
			/// <summary>
			/// The action that caused the change to the row.
			/// </summary>
			private global::System.Data.DataRowAction dataRowAction;
			
			/// <summary>
			/// Create the arguments for a changing SourceOrder row event.
			/// </summary>
			/// <param name="sourceOrderRow">The SourceOrder row that has changed.</param>
			/// <param name="dataRowAction">The action that caused the change.</param>
			public SourceOrderRowChangeEventArgs(SourceOrderRow sourceOrderRow, global::System.Data.DataRowAction dataRowAction)
			{
				this.sourceOrderRow = sourceOrderRow;
				this.dataRowAction = dataRowAction;
			}
			
			/// <summary>
			/// Gets the SourceOrder row that has been changed.
			/// </summary>
			public SourceOrderRow Row
			{
				get
				{
					return this.sourceOrderRow;
				}
			}
			
			/// <summary>
			/// Gets the action that caused the change to the row.
			/// </summary>
			public global::System.Data.DataRowAction Action
			{
				get
				{
					return this.dataRowAction;
				}
			}
		}
		
		/// <summary>
		/// Arguments for the event that indicates a change in a State table row.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		public class StateRowChangeEventArgs : global::System.EventArgs
		{
			
			/// <summary>
			/// The State row that has been changed.
			/// </summary>
			private StateRow stateRow;
			
			/// <summary>
			/// The action that caused the change to the row.
			/// </summary>
			private global::System.Data.DataRowAction dataRowAction;
			
			/// <summary>
			/// Create the arguments for a changing State row event.
			/// </summary>
			/// <param name="stateRow">The State row that has changed.</param>
			/// <param name="dataRowAction">The action that caused the change.</param>
			public StateRowChangeEventArgs(StateRow stateRow, global::System.Data.DataRowAction dataRowAction)
			{
				this.stateRow = stateRow;
				this.dataRowAction = dataRowAction;
			}
			
			/// <summary>
			/// Gets the State row that has been changed.
			/// </summary>
			public StateRow Row
			{
				get
				{
					return this.stateRow;
				}
			}
			
			/// <summary>
			/// Gets the action that caused the change to the row.
			/// </summary>
			public global::System.Data.DataRowAction Action
			{
				get
				{
					return this.dataRowAction;
				}
			}
		}
		
		/// <summary>
		/// Arguments for the event that indicates a change in a Status table row.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		public class StatusRowChangeEventArgs : global::System.EventArgs
		{
			
			/// <summary>
			/// The Status row that has been changed.
			/// </summary>
			private StatusRow statusRow;
			
			/// <summary>
			/// The action that caused the change to the row.
			/// </summary>
			private global::System.Data.DataRowAction dataRowAction;
			
			/// <summary>
			/// Create the arguments for a changing Status row event.
			/// </summary>
			/// <param name="statusRow">The Status row that has changed.</param>
			/// <param name="dataRowAction">The action that caused the change.</param>
			public StatusRowChangeEventArgs(StatusRow statusRow, global::System.Data.DataRowAction dataRowAction)
			{
				this.statusRow = statusRow;
				this.dataRowAction = dataRowAction;
			}
			
			/// <summary>
			/// Gets the Status row that has been changed.
			/// </summary>
			public StatusRow Row
			{
				get
				{
					return this.statusRow;
				}
			}
			
			/// <summary>
			/// Gets the action that caused the change to the row.
			/// </summary>
			public global::System.Data.DataRowAction Action
			{
				get
				{
					return this.dataRowAction;
				}
			}
		}
		
		/// <summary>
		/// Arguments for the event that indicates a change in a SubordinateType table row.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		public class SubordinateTypeRowChangeEventArgs : global::System.EventArgs
		{
			
			/// <summary>
			/// The SubordinateType row that has been changed.
			/// </summary>
			private SubordinateTypeRow subordinateTypeRow;
			
			/// <summary>
			/// The action that caused the change to the row.
			/// </summary>
			private global::System.Data.DataRowAction dataRowAction;
			
			/// <summary>
			/// Create the arguments for a changing SubordinateType row event.
			/// </summary>
			/// <param name="subordinateTypeRow">The SubordinateType row that has changed.</param>
			/// <param name="dataRowAction">The action that caused the change.</param>
			public SubordinateTypeRowChangeEventArgs(SubordinateTypeRow subordinateTypeRow, global::System.Data.DataRowAction dataRowAction)
			{
				this.subordinateTypeRow = subordinateTypeRow;
				this.dataRowAction = dataRowAction;
			}
			
			/// <summary>
			/// Gets the SubordinateType row that has been changed.
			/// </summary>
			public SubordinateTypeRow Row
			{
				get
				{
					return this.subordinateTypeRow;
				}
			}
			
			/// <summary>
			/// Gets the action that caused the change to the row.
			/// </summary>
			public global::System.Data.DataRowAction Action
			{
				get
				{
					return this.dataRowAction;
				}
			}
		}
		
		/// <summary>
		/// Arguments for the event that indicates a change in a TaxLot table row.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		public class TaxLotRowChangeEventArgs : global::System.EventArgs
		{
			
			/// <summary>
			/// The TaxLot row that has been changed.
			/// </summary>
			private TaxLotRow taxLotRow;
			
			/// <summary>
			/// The action that caused the change to the row.
			/// </summary>
			private global::System.Data.DataRowAction dataRowAction;
			
			/// <summary>
			/// Create the arguments for a changing TaxLot row event.
			/// </summary>
			/// <param name="taxLotRow">The TaxLot row that has changed.</param>
			/// <param name="dataRowAction">The action that caused the change.</param>
			public TaxLotRowChangeEventArgs(TaxLotRow taxLotRow, global::System.Data.DataRowAction dataRowAction)
			{
				this.taxLotRow = taxLotRow;
				this.dataRowAction = dataRowAction;
			}
			
			/// <summary>
			/// Gets the TaxLot row that has been changed.
			/// </summary>
			public TaxLotRow Row
			{
				get
				{
					return this.taxLotRow;
				}
			}
			
			/// <summary>
			/// Gets the action that caused the change to the row.
			/// </summary>
			public global::System.Data.DataRowAction Action
			{
				get
				{
					return this.dataRowAction;
				}
			}
		}
		
		/// <summary>
		/// Arguments for the event that indicates a change in a TaxLotSeries table row.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		public class TaxLotSeriesRowChangeEventArgs : global::System.EventArgs
		{
			
			/// <summary>
			/// The TaxLotSeries row that has been changed.
			/// </summary>
			private TaxLotSeriesRow taxLotSeriesRow;
			
			/// <summary>
			/// The action that caused the change to the row.
			/// </summary>
			private global::System.Data.DataRowAction dataRowAction;
			
			/// <summary>
			/// Create the arguments for a changing TaxLotSeries row event.
			/// </summary>
			/// <param name="taxLotSeriesRow">The TaxLotSeries row that has changed.</param>
			/// <param name="dataRowAction">The action that caused the change.</param>
			public TaxLotSeriesRowChangeEventArgs(TaxLotSeriesRow taxLotSeriesRow, global::System.Data.DataRowAction dataRowAction)
			{
				this.taxLotSeriesRow = taxLotSeriesRow;
				this.dataRowAction = dataRowAction;
			}
			
			/// <summary>
			/// Gets the TaxLotSeries row that has been changed.
			/// </summary>
			public TaxLotSeriesRow Row
			{
				get
				{
					return this.taxLotSeriesRow;
				}
			}
			
			/// <summary>
			/// Gets the action that caused the change to the row.
			/// </summary>
			public global::System.Data.DataRowAction Action
			{
				get
				{
					return this.dataRowAction;
				}
			}
		}
		
		/// <summary>
		/// Arguments for the event that indicates a change in a TimeInForce table row.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		public class TimeInForceRowChangeEventArgs : global::System.EventArgs
		{
			
			/// <summary>
			/// The TimeInForce row that has been changed.
			/// </summary>
			private TimeInForceRow timeInForceRow;
			
			/// <summary>
			/// The action that caused the change to the row.
			/// </summary>
			private global::System.Data.DataRowAction dataRowAction;
			
			/// <summary>
			/// Create the arguments for a changing TimeInForce row event.
			/// </summary>
			/// <param name="timeInForceRow">The TimeInForce row that has changed.</param>
			/// <param name="dataRowAction">The action that caused the change.</param>
			public TimeInForceRowChangeEventArgs(TimeInForceRow timeInForceRow, global::System.Data.DataRowAction dataRowAction)
			{
				this.timeInForceRow = timeInForceRow;
				this.dataRowAction = dataRowAction;
			}
			
			/// <summary>
			/// Gets the TimeInForce row that has been changed.
			/// </summary>
			public TimeInForceRow Row
			{
				get
				{
					return this.timeInForceRow;
				}
			}
			
			/// <summary>
			/// Gets the action that caused the change to the row.
			/// </summary>
			public global::System.Data.DataRowAction Action
			{
				get
				{
					return this.dataRowAction;
				}
			}
		}
		
		/// <summary>
		/// Arguments for the event that indicates a change in a TimeUnit table row.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		public class TimeUnitRowChangeEventArgs : global::System.EventArgs
		{
			
			/// <summary>
			/// The TimeUnit row that has been changed.
			/// </summary>
			private TimeUnitRow timeUnitRow;
			
			/// <summary>
			/// The action that caused the change to the row.
			/// </summary>
			private global::System.Data.DataRowAction dataRowAction;
			
			/// <summary>
			/// Create the arguments for a changing TimeUnit row event.
			/// </summary>
			/// <param name="timeUnitRow">The TimeUnit row that has changed.</param>
			/// <param name="dataRowAction">The action that caused the change.</param>
			public TimeUnitRowChangeEventArgs(TimeUnitRow timeUnitRow, global::System.Data.DataRowAction dataRowAction)
			{
				this.timeUnitRow = timeUnitRow;
				this.dataRowAction = dataRowAction;
			}
			
			/// <summary>
			/// Gets the TimeUnit row that has been changed.
			/// </summary>
			public TimeUnitRow Row
			{
				get
				{
					return this.timeUnitRow;
				}
			}
			
			/// <summary>
			/// Gets the action that caused the change to the row.
			/// </summary>
			public global::System.Data.DataRowAction Action
			{
				get
				{
					return this.dataRowAction;
				}
			}
		}
		
		/// <summary>
		/// Arguments for the event that indicates a change in a Trader table row.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		public class TraderRowChangeEventArgs : global::System.EventArgs
		{
			
			/// <summary>
			/// The Trader row that has been changed.
			/// </summary>
			private TraderRow traderRow;
			
			/// <summary>
			/// The action that caused the change to the row.
			/// </summary>
			private global::System.Data.DataRowAction dataRowAction;
			
			/// <summary>
			/// Create the arguments for a changing Trader row event.
			/// </summary>
			/// <param name="traderRow">The Trader row that has changed.</param>
			/// <param name="dataRowAction">The action that caused the change.</param>
			public TraderRowChangeEventArgs(TraderRow traderRow, global::System.Data.DataRowAction dataRowAction)
			{
				this.traderRow = traderRow;
				this.dataRowAction = dataRowAction;
			}
			
			/// <summary>
			/// Gets the Trader row that has been changed.
			/// </summary>
			public TraderRow Row
			{
				get
				{
					return this.traderRow;
				}
			}
			
			/// <summary>
			/// Gets the action that caused the change to the row.
			/// </summary>
			public global::System.Data.DataRowAction Action
			{
				get
				{
					return this.dataRowAction;
				}
			}
		}
		
		/// <summary>
		/// Arguments for the event that indicates a change in a TraderVolumeSetting table row.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		public class TraderVolumeSettingRowChangeEventArgs : global::System.EventArgs
		{
			
			/// <summary>
			/// The TraderVolumeSetting row that has been changed.
			/// </summary>
			private TraderVolumeSettingRow traderVolumeSettingRow;
			
			/// <summary>
			/// The action that caused the change to the row.
			/// </summary>
			private global::System.Data.DataRowAction dataRowAction;
			
			/// <summary>
			/// Create the arguments for a changing TraderVolumeSetting row event.
			/// </summary>
			/// <param name="traderVolumeSettingRow">The TraderVolumeSetting row that has changed.</param>
			/// <param name="dataRowAction">The action that caused the change.</param>
			public TraderVolumeSettingRowChangeEventArgs(TraderVolumeSettingRow traderVolumeSettingRow, global::System.Data.DataRowAction dataRowAction)
			{
				this.traderVolumeSettingRow = traderVolumeSettingRow;
				this.dataRowAction = dataRowAction;
			}
			
			/// <summary>
			/// Gets the TraderVolumeSetting row that has been changed.
			/// </summary>
			public TraderVolumeSettingRow Row
			{
				get
				{
					return this.traderVolumeSettingRow;
				}
			}
			
			/// <summary>
			/// Gets the action that caused the change to the row.
			/// </summary>
			public global::System.Data.DataRowAction Action
			{
				get
				{
					return this.dataRowAction;
				}
			}
		}
		
		/// <summary>
		/// Arguments for the event that indicates a change in a Type table row.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		public class TypeRowChangeEventArgs : global::System.EventArgs
		{
			
			/// <summary>
			/// The Type row that has been changed.
			/// </summary>
			private TypeRow typeRow;
			
			/// <summary>
			/// The action that caused the change to the row.
			/// </summary>
			private global::System.Data.DataRowAction dataRowAction;
			
			/// <summary>
			/// Create the arguments for a changing Type row event.
			/// </summary>
			/// <param name="typeRow">The Type row that has changed.</param>
			/// <param name="dataRowAction">The action that caused the change.</param>
			public TypeRowChangeEventArgs(TypeRow typeRow, global::System.Data.DataRowAction dataRowAction)
			{
				this.typeRow = typeRow;
				this.dataRowAction = dataRowAction;
			}
			
			/// <summary>
			/// Gets the Type row that has been changed.
			/// </summary>
			public TypeRow Row
			{
				get
				{
					return this.typeRow;
				}
			}
			
			/// <summary>
			/// Gets the action that caused the change to the row.
			/// </summary>
			public global::System.Data.DataRowAction Action
			{
				get
				{
					return this.dataRowAction;
				}
			}
		}
		
		/// <summary>
		/// Arguments for the event that indicates a change in a User table row.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		public class UserRowChangeEventArgs : global::System.EventArgs
		{
			
			/// <summary>
			/// The User row that has been changed.
			/// </summary>
			private UserRow userRow;
			
			/// <summary>
			/// The action that caused the change to the row.
			/// </summary>
			private global::System.Data.DataRowAction dataRowAction;
			
			/// <summary>
			/// Create the arguments for a changing User row event.
			/// </summary>
			/// <param name="userRow">The User row that has changed.</param>
			/// <param name="dataRowAction">The action that caused the change.</param>
			public UserRowChangeEventArgs(UserRow userRow, global::System.Data.DataRowAction dataRowAction)
			{
				this.userRow = userRow;
				this.dataRowAction = dataRowAction;
			}
			
			/// <summary>
			/// Gets the User row that has been changed.
			/// </summary>
			public UserRow Row
			{
				get
				{
					return this.userRow;
				}
			}
			
			/// <summary>
			/// Gets the action that caused the change to the row.
			/// </summary>
			public global::System.Data.DataRowAction Action
			{
				get
				{
					return this.dataRowAction;
				}
			}
		}
		
		/// <summary>
		/// Arguments for the event that indicates a change in a VolumeCategory table row.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		public class VolumeCategoryRowChangeEventArgs : global::System.EventArgs
		{
			
			/// <summary>
			/// The VolumeCategory row that has been changed.
			/// </summary>
			private VolumeCategoryRow volumeCategoryRow;
			
			/// <summary>
			/// The action that caused the change to the row.
			/// </summary>
			private global::System.Data.DataRowAction dataRowAction;
			
			/// <summary>
			/// Create the arguments for a changing VolumeCategory row event.
			/// </summary>
			/// <param name="volumeCategoryRow">The VolumeCategory row that has changed.</param>
			/// <param name="dataRowAction">The action that caused the change.</param>
			public VolumeCategoryRowChangeEventArgs(VolumeCategoryRow volumeCategoryRow, global::System.Data.DataRowAction dataRowAction)
			{
				this.volumeCategoryRow = volumeCategoryRow;
				this.dataRowAction = dataRowAction;
			}
			
			/// <summary>
			/// Gets the VolumeCategory row that has been changed.
			/// </summary>
			public VolumeCategoryRow Row
			{
				get
				{
					return this.volumeCategoryRow;
				}
			}
			
			/// <summary>
			/// Gets the action that caused the change to the row.
			/// </summary>
			public global::System.Data.DataRowAction Action
			{
				get
				{
					return this.dataRowAction;
				}
			}
		}
		
		/// <summary>
		/// Arguments for the event that indicates a change in a Weekend table row.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		public class WeekendRowChangeEventArgs : global::System.EventArgs
		{
			
			/// <summary>
			/// The Weekend row that has been changed.
			/// </summary>
			private WeekendRow weekendRow;
			
			/// <summary>
			/// The action that caused the change to the row.
			/// </summary>
			private global::System.Data.DataRowAction dataRowAction;
			
			/// <summary>
			/// Create the arguments for a changing Weekend row event.
			/// </summary>
			/// <param name="weekendRow">The Weekend row that has changed.</param>
			/// <param name="dataRowAction">The action that caused the change.</param>
			public WeekendRowChangeEventArgs(WeekendRow weekendRow, global::System.Data.DataRowAction dataRowAction)
			{
				this.weekendRow = weekendRow;
				this.dataRowAction = dataRowAction;
			}
			
			/// <summary>
			/// Gets the Weekend row that has been changed.
			/// </summary>
			public WeekendRow Row
			{
				get
				{
					return this.weekendRow;
				}
			}
			
			/// <summary>
			/// Gets the action that caused the change to the row.
			/// </summary>
			public global::System.Data.DataRowAction Action
			{
				get
				{
					return this.dataRowAction;
				}
			}
		}
		
		/// <summary>
		/// Arguments for the event that indicates a change in a WorkingOrder table row.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		public class WorkingOrderRowChangeEventArgs : global::System.EventArgs
		{
			
			/// <summary>
			/// The WorkingOrder row that has been changed.
			/// </summary>
			private WorkingOrderRow workingOrderRow;
			
			/// <summary>
			/// The action that caused the change to the row.
			/// </summary>
			private global::System.Data.DataRowAction dataRowAction;
			
			/// <summary>
			/// Create the arguments for a changing WorkingOrder row event.
			/// </summary>
			/// <param name="workingOrderRow">The WorkingOrder row that has changed.</param>
			/// <param name="dataRowAction">The action that caused the change.</param>
			public WorkingOrderRowChangeEventArgs(WorkingOrderRow workingOrderRow, global::System.Data.DataRowAction dataRowAction)
			{
				this.workingOrderRow = workingOrderRow;
				this.dataRowAction = dataRowAction;
			}
			
			/// <summary>
			/// Gets the WorkingOrder row that has been changed.
			/// </summary>
			public WorkingOrderRow Row
			{
				get
				{
					return this.workingOrderRow;
				}
			}
			
			/// <summary>
			/// Gets the action that caused the change to the row.
			/// </summary>
			public global::System.Data.DataRowAction Action
			{
				get
				{
					return this.dataRowAction;
				}
			}
		}
		
		/// <summary>
		/// Represents a means of identifying a Account row using a set of columns in which all values must be unique.
		/// </summary>
		public interface IAccountIndex
		{
			
			/// <summary>
			/// Finds a row in the Account table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A DepartmentRow that contains the key elements, or null if there is no match.</returns>
			AccountRow Find(object[] key);
		}
		
		/// <summary>
		/// Represents a means of identifying a Account row using a set of columns in which all values must be unique.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public class AccountKeyIndex : global::Teraque.ClusteredIndex, IAccountIndex
		{
			
			/// <summary>
			/// Create a primary, unique index on the Account table.
			/// </summary>
			/// <param name="indexName">The name of the index.</param>
			/// <param name="columns">The columns that describe a unique key.</param>
			public AccountKeyIndex(string indexName, System.Data.DataColumn[] columns) : 
					base(indexName, columns)
			{
			}
			
			/// <summary>
			/// Finds a row in the Account table containing the key elements.
			/// </summary>
			/// <param name="accountId">The AccountId element of the key.</param>
			/// <returns>The Account row that contains the key elements, or null if there is no match.</returns>
			public AccountRow Find(System.Guid accountId)
			{
				return ((AccountRow)(base.Find(new object[] {
							accountId})));
			}
			
			/// <summary>
			/// Finds a row in the Account table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A AccountKey row that contains the key elements, or null if there is no match.</returns>
			public new AccountRow Find(object[] key)
			{
				return ((AccountRow)(base.Find(key)));
			}
		}
		
		/// <summary>
		/// Represents a means of identifying a AccountSeries row using a set of columns in which all values must be unique.
		/// </summary>
		public interface IAccountSeriesIndex
		{
			
			/// <summary>
			/// Finds a row in the AccountSeries table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A DepartmentRow that contains the key elements, or null if there is no match.</returns>
			AccountSeriesRow Find(object[] key);
		}
		
		/// <summary>
		/// Represents a means of identifying a AccountSeries row using a set of columns in which all values must be unique.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public class AccountSeriesKeyIndex : global::Teraque.ClusteredIndex, IAccountSeriesIndex
		{
			
			/// <summary>
			/// Create a primary, unique index on the AccountSeries table.
			/// </summary>
			/// <param name="indexName">The name of the index.</param>
			/// <param name="columns">The columns that describe a unique key.</param>
			public AccountSeriesKeyIndex(string indexName, System.Data.DataColumn[] columns) : 
					base(indexName, columns)
			{
			}
			
			/// <summary>
			/// Finds a row in the AccountSeries table containing the key elements.
			/// </summary>
			/// <param name="accountSeriesId">The AccountSeriesId element of the key.</param>
			/// <param name="date">The Date element of the key.</param>
			/// <returns>The AccountSeries row that contains the key elements, or null if there is no match.</returns>
			public AccountSeriesRow Find(System.Guid accountSeriesId, System.DateTime date)
			{
				return ((AccountSeriesRow)(base.Find(new object[] {
							accountSeriesId,
							date})));
			}
			
			/// <summary>
			/// Finds a row in the AccountSeries table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A AccountSeriesKey row that contains the key elements, or null if there is no match.</returns>
			public new AccountSeriesRow Find(object[] key)
			{
				return ((AccountSeriesRow)(base.Find(key)));
			}
		}
		
		/// <summary>
		/// Represents a means of identifying a Allocation row using a set of columns in which all values must be unique.
		/// </summary>
		public interface IAllocationIndex
		{
			
			/// <summary>
			/// Finds a row in the Allocation table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A DepartmentRow that contains the key elements, or null if there is no match.</returns>
			AllocationRow Find(object[] key);
		}
		
		/// <summary>
		/// Represents a means of identifying a Allocation row using a set of columns in which all values must be unique.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public class AllocationKeyIndex : global::Teraque.ClusteredIndex, IAllocationIndex
		{
			
			/// <summary>
			/// Create a primary, unique index on the Allocation table.
			/// </summary>
			/// <param name="indexName">The name of the index.</param>
			/// <param name="columns">The columns that describe a unique key.</param>
			public AllocationKeyIndex(string indexName, System.Data.DataColumn[] columns) : 
					base(indexName, columns)
			{
			}
			
			/// <summary>
			/// Finds a row in the Allocation table containing the key elements.
			/// </summary>
			/// <param name="allocationId">The AllocationId element of the key.</param>
			/// <returns>The Allocation row that contains the key elements, or null if there is no match.</returns>
			public AllocationRow Find(System.Guid allocationId)
			{
				return ((AllocationRow)(base.Find(new object[] {
							allocationId})));
			}
			
			/// <summary>
			/// Finds a row in the Allocation table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A AllocationKey row that contains the key elements, or null if there is no match.</returns>
			public new AllocationRow Find(object[] key)
			{
				return ((AllocationRow)(base.Find(key)));
			}
		}
		
		/// <summary>
		/// Represents a means of identifying a Allocation row using a set of columns in which all values must be unique.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public class AllocationKeyAccountIdSecurityIdPositionTypeCodeIndex : global::Teraque.NonClusteredIndex, IAllocationIndex
		{
			
			/// <summary>
			/// Create a secondary, unique index on the Allocation table.
			/// </summary>
			/// <param name="indexName">The name of the index.</param>
			/// <param name="columns">The columns that describe a unique key.</param>
			public AllocationKeyAccountIdSecurityIdPositionTypeCodeIndex(string indexName, System.Data.DataColumn[] columns) : 
					base(indexName, columns)
			{
			}
			
			/// <summary>
			/// Finds a row in the Allocation table containing the key elements.
			/// </summary>
			/// <param name="accountId">The AccountId element of the key.</param>
			/// <param name="securityId">The SecurityId element of the key.</param>
			/// <param name="positionTypeCode">The PositionTypeCode element of the key.</param>
			/// <returns>The Allocation row that contains the key elements, or null if there is no match.</returns>
			public AllocationRow Find(System.Guid accountId, System.Guid securityId, Teraque.PositionTypeCode positionTypeCode)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((AllocationRow)(base.Find(new object[] {
							accountId,
							securityId,
							positionTypeCode})));
			}
			
			/// <summary>
			/// Finds a row in the Allocation table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A AllocationKeyAccountIdSecurityIdPositionTypeCode row that contains the key elements, or null if there is no match.</returns>
			public new AllocationRow Find(object[] key)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((AllocationRow)(base.Find(key)));
			}
		}
		
		/// <summary>
		/// Represents a means of identifying a Blotter row using a set of columns in which all values must be unique.
		/// </summary>
		public interface IBlotterIndex
		{
			
			/// <summary>
			/// Finds a row in the Blotter table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A DepartmentRow that contains the key elements, or null if there is no match.</returns>
			BlotterRow Find(object[] key);
		}
		
		/// <summary>
		/// Represents a means of identifying a Blotter row using a set of columns in which all values must be unique.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public class BlotterKeyIndex : global::Teraque.ClusteredIndex, IBlotterIndex
		{
			
			/// <summary>
			/// Create a primary, unique index on the Blotter table.
			/// </summary>
			/// <param name="indexName">The name of the index.</param>
			/// <param name="columns">The columns that describe a unique key.</param>
			public BlotterKeyIndex(string indexName, System.Data.DataColumn[] columns) : 
					base(indexName, columns)
			{
			}
			
			/// <summary>
			/// Finds a row in the Blotter table containing the key elements.
			/// </summary>
			/// <param name="blotterId">The BlotterId element of the key.</param>
			/// <returns>The Blotter row that contains the key elements, or null if there is no match.</returns>
			public BlotterRow Find(System.Guid blotterId)
			{
				return ((BlotterRow)(base.Find(new object[] {
							blotterId})));
			}
			
			/// <summary>
			/// Finds a row in the Blotter table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A BlotterKey row that contains the key elements, or null if there is no match.</returns>
			public new BlotterRow Find(object[] key)
			{
				return ((BlotterRow)(base.Find(key)));
			}
		}
		
		/// <summary>
		/// Represents a means of identifying a BlotterDestinationMap row using a set of columns in which all values must be unique.
		/// </summary>
		public interface IBlotterDestinationMapIndex
		{
			
			/// <summary>
			/// Finds a row in the BlotterDestinationMap table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A DepartmentRow that contains the key elements, or null if there is no match.</returns>
			BlotterDestinationMapRow Find(object[] key);
		}
		
		/// <summary>
		/// Represents a means of identifying a BlotterDestinationMap row using a set of columns in which all values must be unique.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public class BlotterDestinationMapKeyIndex : global::Teraque.ClusteredIndex, IBlotterDestinationMapIndex
		{
			
			/// <summary>
			/// Create a primary, unique index on the BlotterDestinationMap table.
			/// </summary>
			/// <param name="indexName">The name of the index.</param>
			/// <param name="columns">The columns that describe a unique key.</param>
			public BlotterDestinationMapKeyIndex(string indexName, System.Data.DataColumn[] columns) : 
					base(indexName, columns)
			{
			}
			
			/// <summary>
			/// Finds a row in the BlotterDestinationMap table containing the key elements.
			/// </summary>
			/// <param name="blotterDestinationMapId">The BlotterDestinationMapId element of the key.</param>
			/// <returns>The BlotterDestinationMap row that contains the key elements, or null if there is no match.</returns>
			public BlotterDestinationMapRow Find(System.Guid blotterDestinationMapId)
			{
				return ((BlotterDestinationMapRow)(base.Find(new object[] {
							blotterDestinationMapId})));
			}
			
			/// <summary>
			/// Finds a row in the BlotterDestinationMap table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A BlotterDestinationMapKey row that contains the key elements, or null if there is no match.</returns>
			public new BlotterDestinationMapRow Find(object[] key)
			{
				return ((BlotterDestinationMapRow)(base.Find(key)));
			}
		}
		
		/// <summary>
		/// Represents a means of identifying a BlotterDestinationMap row using a set of columns in which all values must be unique.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public class BlotterDestinationMapKeyBlotterIdDestinationIdIndex : global::Teraque.NonClusteredIndex, IBlotterDestinationMapIndex
		{
			
			/// <summary>
			/// Create a secondary, unique index on the BlotterDestinationMap table.
			/// </summary>
			/// <param name="indexName">The name of the index.</param>
			/// <param name="columns">The columns that describe a unique key.</param>
			public BlotterDestinationMapKeyBlotterIdDestinationIdIndex(string indexName, System.Data.DataColumn[] columns) : 
					base(indexName, columns)
			{
			}
			
			/// <summary>
			/// Finds a row in the BlotterDestinationMap table containing the key elements.
			/// </summary>
			/// <param name="blotterId">The BlotterId element of the key.</param>
			/// <param name="destinationId">The DestinationId element of the key.</param>
			/// <returns>The BlotterDestinationMap row that contains the key elements, or null if there is no match.</returns>
			public BlotterDestinationMapRow Find(System.Guid blotterId, System.Guid destinationId)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((BlotterDestinationMapRow)(base.Find(new object[] {
							blotterId,
							destinationId})));
			}
			
			/// <summary>
			/// Finds a row in the BlotterDestinationMap table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A BlotterDestinationMapKeyBlotterIdDestinationId row that contains the key elements, or null if there is no match.</returns>
			public new BlotterDestinationMapRow Find(object[] key)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((BlotterDestinationMapRow)(base.Find(key)));
			}
		}
		
		/// <summary>
		/// Represents a means of identifying a Branch row using a set of columns in which all values must be unique.
		/// </summary>
		public interface IBranchIndex
		{
			
			/// <summary>
			/// Finds a row in the Branch table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A DepartmentRow that contains the key elements, or null if there is no match.</returns>
			BranchRow Find(object[] key);
		}
		
		/// <summary>
		/// Represents a means of identifying a Branch row using a set of columns in which all values must be unique.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public class BranchKeyIndex : global::Teraque.ClusteredIndex, IBranchIndex
		{
			
			/// <summary>
			/// Create a primary, unique index on the Branch table.
			/// </summary>
			/// <param name="indexName">The name of the index.</param>
			/// <param name="columns">The columns that describe a unique key.</param>
			public BranchKeyIndex(string indexName, System.Data.DataColumn[] columns) : 
					base(indexName, columns)
			{
			}
			
			/// <summary>
			/// Finds a row in the Branch table containing the key elements.
			/// </summary>
			/// <param name="branchId">The BranchId element of the key.</param>
			/// <returns>The Branch row that contains the key elements, or null if there is no match.</returns>
			public BranchRow Find(System.Guid branchId)
			{
				return ((BranchRow)(base.Find(new object[] {
							branchId})));
			}
			
			/// <summary>
			/// Finds a row in the Branch table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A BranchKey row that contains the key elements, or null if there is no match.</returns>
			public new BranchRow Find(object[] key)
			{
				return ((BranchRow)(base.Find(key)));
			}
		}
		
		/// <summary>
		/// Represents a means of identifying a Broker row using a set of columns in which all values must be unique.
		/// </summary>
		public interface IBrokerIndex
		{
			
			/// <summary>
			/// Finds a row in the Broker table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A DepartmentRow that contains the key elements, or null if there is no match.</returns>
			BrokerRow Find(object[] key);
		}
		
		/// <summary>
		/// Represents a means of identifying a Broker row using a set of columns in which all values must be unique.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public class BrokerKeyIndex : global::Teraque.ClusteredIndex, IBrokerIndex
		{
			
			/// <summary>
			/// Create a primary, unique index on the Broker table.
			/// </summary>
			/// <param name="indexName">The name of the index.</param>
			/// <param name="columns">The columns that describe a unique key.</param>
			public BrokerKeyIndex(string indexName, System.Data.DataColumn[] columns) : 
					base(indexName, columns)
			{
			}
			
			/// <summary>
			/// Finds a row in the Broker table containing the key elements.
			/// </summary>
			/// <param name="brokerId">The BrokerId element of the key.</param>
			/// <returns>The Broker row that contains the key elements, or null if there is no match.</returns>
			public BrokerRow Find(System.Guid brokerId)
			{
				return ((BrokerRow)(base.Find(new object[] {
							brokerId})));
			}
			
			/// <summary>
			/// Finds a row in the Broker table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A BrokerKey row that contains the key elements, or null if there is no match.</returns>
			public new BrokerRow Find(object[] key)
			{
				return ((BrokerRow)(base.Find(key)));
			}
		}
		
		/// <summary>
		/// Represents a means of identifying a BrokerAccount row using a set of columns in which all values must be unique.
		/// </summary>
		public interface IBrokerAccountIndex
		{
			
			/// <summary>
			/// Finds a row in the BrokerAccount table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A DepartmentRow that contains the key elements, or null if there is no match.</returns>
			BrokerAccountRow Find(object[] key);
		}
		
		/// <summary>
		/// Represents a means of identifying a BrokerAccount row using a set of columns in which all values must be unique.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public class BrokerAccountKeyIndex : global::Teraque.ClusteredIndex, IBrokerAccountIndex
		{
			
			/// <summary>
			/// Create a primary, unique index on the BrokerAccount table.
			/// </summary>
			/// <param name="indexName">The name of the index.</param>
			/// <param name="columns">The columns that describe a unique key.</param>
			public BrokerAccountKeyIndex(string indexName, System.Data.DataColumn[] columns) : 
					base(indexName, columns)
			{
			}
			
			/// <summary>
			/// Finds a row in the BrokerAccount table containing the key elements.
			/// </summary>
			/// <param name="brokerAccountId">The BrokerAccountId element of the key.</param>
			/// <returns>The BrokerAccount row that contains the key elements, or null if there is no match.</returns>
			public BrokerAccountRow Find(System.Guid brokerAccountId)
			{
				return ((BrokerAccountRow)(base.Find(new object[] {
							brokerAccountId})));
			}
			
			/// <summary>
			/// Finds a row in the BrokerAccount table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A BrokerAccountKey row that contains the key elements, or null if there is no match.</returns>
			public new BrokerAccountRow Find(object[] key)
			{
				return ((BrokerAccountRow)(base.Find(key)));
			}
		}
		
		/// <summary>
		/// Represents a means of identifying a BrokerAccount row using a set of columns in which all values must be unique.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public class BrokerAccountKeyExternalId0Index : global::Teraque.NonClusteredIndex, IBrokerAccountIndex
		{
			
			/// <summary>
			/// Create a secondary, unique index on the BrokerAccount table.
			/// </summary>
			/// <param name="indexName">The name of the index.</param>
			/// <param name="columns">The columns that describe a unique key.</param>
			public BrokerAccountKeyExternalId0Index(string indexName, System.Data.DataColumn[] columns) : 
					base(indexName, columns)
			{
			}
			
			/// <summary>
			/// Finds a row in the BrokerAccount table containing the key elements.
			/// </summary>
			/// <param name="externalId0">The ExternalId0 element of the key.</param>
			/// <returns>The BrokerAccount row that contains the key elements, or null if there is no match.</returns>
			public BrokerAccountRow Find(string externalId0)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((BrokerAccountRow)(base.Find(new object[] {
							externalId0})));
			}
			
			/// <summary>
			/// Finds a row in the BrokerAccount table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A BrokerAccountKeyExternalId0 row that contains the key elements, or null if there is no match.</returns>
			public new BrokerAccountRow Find(object[] key)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((BrokerAccountRow)(base.Find(key)));
			}
		}
		
		/// <summary>
		/// Represents a means of identifying a BrokerAccount row using a set of columns in which all values must be unique.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public class BrokerAccountKeyExternalId1Index : global::Teraque.NonClusteredIndex, IBrokerAccountIndex
		{
			
			/// <summary>
			/// Create a secondary, unique index on the BrokerAccount table.
			/// </summary>
			/// <param name="indexName">The name of the index.</param>
			/// <param name="columns">The columns that describe a unique key.</param>
			public BrokerAccountKeyExternalId1Index(string indexName, System.Data.DataColumn[] columns) : 
					base(indexName, columns)
			{
			}
			
			/// <summary>
			/// Finds a row in the BrokerAccount table containing the key elements.
			/// </summary>
			/// <param name="externalId1">The ExternalId1 element of the key.</param>
			/// <returns>The BrokerAccount row that contains the key elements, or null if there is no match.</returns>
			public BrokerAccountRow Find(string externalId1)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((BrokerAccountRow)(base.Find(new object[] {
							externalId1})));
			}
			
			/// <summary>
			/// Finds a row in the BrokerAccount table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A BrokerAccountKeyExternalId1 row that contains the key elements, or null if there is no match.</returns>
			public new BrokerAccountRow Find(object[] key)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((BrokerAccountRow)(base.Find(key)));
			}
		}
		
		/// <summary>
		/// Represents a means of identifying a BrokerAccount row using a set of columns in which all values must be unique.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public class BrokerAccountKeyExternalId2Index : global::Teraque.NonClusteredIndex, IBrokerAccountIndex
		{
			
			/// <summary>
			/// Create a secondary, unique index on the BrokerAccount table.
			/// </summary>
			/// <param name="indexName">The name of the index.</param>
			/// <param name="columns">The columns that describe a unique key.</param>
			public BrokerAccountKeyExternalId2Index(string indexName, System.Data.DataColumn[] columns) : 
					base(indexName, columns)
			{
			}
			
			/// <summary>
			/// Finds a row in the BrokerAccount table containing the key elements.
			/// </summary>
			/// <param name="externalId2">The ExternalId2 element of the key.</param>
			/// <returns>The BrokerAccount row that contains the key elements, or null if there is no match.</returns>
			public BrokerAccountRow Find(string externalId2)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((BrokerAccountRow)(base.Find(new object[] {
							externalId2})));
			}
			
			/// <summary>
			/// Finds a row in the BrokerAccount table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A BrokerAccountKeyExternalId2 row that contains the key elements, or null if there is no match.</returns>
			public new BrokerAccountRow Find(object[] key)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((BrokerAccountRow)(base.Find(key)));
			}
		}
		
		/// <summary>
		/// Represents a means of identifying a BrokerAccount row using a set of columns in which all values must be unique.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public class BrokerAccountKeyExternalId3Index : global::Teraque.NonClusteredIndex, IBrokerAccountIndex
		{
			
			/// <summary>
			/// Create a secondary, unique index on the BrokerAccount table.
			/// </summary>
			/// <param name="indexName">The name of the index.</param>
			/// <param name="columns">The columns that describe a unique key.</param>
			public BrokerAccountKeyExternalId3Index(string indexName, System.Data.DataColumn[] columns) : 
					base(indexName, columns)
			{
			}
			
			/// <summary>
			/// Finds a row in the BrokerAccount table containing the key elements.
			/// </summary>
			/// <param name="externalId3">The ExternalId3 element of the key.</param>
			/// <returns>The BrokerAccount row that contains the key elements, or null if there is no match.</returns>
			public BrokerAccountRow Find(string externalId3)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((BrokerAccountRow)(base.Find(new object[] {
							externalId3})));
			}
			
			/// <summary>
			/// Finds a row in the BrokerAccount table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A BrokerAccountKeyExternalId3 row that contains the key elements, or null if there is no match.</returns>
			public new BrokerAccountRow Find(object[] key)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((BrokerAccountRow)(base.Find(key)));
			}
		}
		
		/// <summary>
		/// Represents a means of identifying a ClearingBroker row using a set of columns in which all values must be unique.
		/// </summary>
		public interface IClearingBrokerIndex
		{
			
			/// <summary>
			/// Finds a row in the ClearingBroker table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A DepartmentRow that contains the key elements, or null if there is no match.</returns>
			ClearingBrokerRow Find(object[] key);
		}
		
		/// <summary>
		/// Represents a means of identifying a ClearingBroker row using a set of columns in which all values must be unique.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public class ClearingBrokerKeyIndex : global::Teraque.ClusteredIndex, IClearingBrokerIndex
		{
			
			/// <summary>
			/// Create a primary, unique index on the ClearingBroker table.
			/// </summary>
			/// <param name="indexName">The name of the index.</param>
			/// <param name="columns">The columns that describe a unique key.</param>
			public ClearingBrokerKeyIndex(string indexName, System.Data.DataColumn[] columns) : 
					base(indexName, columns)
			{
			}
			
			/// <summary>
			/// Finds a row in the ClearingBroker table containing the key elements.
			/// </summary>
			/// <param name="clearingBrokerId">The ClearingBrokerId element of the key.</param>
			/// <returns>The ClearingBroker row that contains the key elements, or null if there is no match.</returns>
			public ClearingBrokerRow Find(System.Guid clearingBrokerId)
			{
				return ((ClearingBrokerRow)(base.Find(new object[] {
							clearingBrokerId})));
			}
			
			/// <summary>
			/// Finds a row in the ClearingBroker table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A ClearingBrokerKey row that contains the key elements, or null if there is no match.</returns>
			public new ClearingBrokerRow Find(object[] key)
			{
				return ((ClearingBrokerRow)(base.Find(key)));
			}
		}
		
		/// <summary>
		/// Represents a means of identifying a CommissionSchedule row using a set of columns in which all values must be unique.
		/// </summary>
		public interface ICommissionScheduleIndex
		{
			
			/// <summary>
			/// Finds a row in the CommissionSchedule table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A DepartmentRow that contains the key elements, or null if there is no match.</returns>
			CommissionScheduleRow Find(object[] key);
		}
		
		/// <summary>
		/// Represents a means of identifying a CommissionSchedule row using a set of columns in which all values must be unique.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public class CommissionScheduleKeyIndex : global::Teraque.ClusteredIndex, ICommissionScheduleIndex
		{
			
			/// <summary>
			/// Create a primary, unique index on the CommissionSchedule table.
			/// </summary>
			/// <param name="indexName">The name of the index.</param>
			/// <param name="columns">The columns that describe a unique key.</param>
			public CommissionScheduleKeyIndex(string indexName, System.Data.DataColumn[] columns) : 
					base(indexName, columns)
			{
			}
			
			/// <summary>
			/// Finds a row in the CommissionSchedule table containing the key elements.
			/// </summary>
			/// <param name="commissionScheduleId">The CommissionScheduleId element of the key.</param>
			/// <returns>The CommissionSchedule row that contains the key elements, or null if there is no match.</returns>
			public CommissionScheduleRow Find(System.Guid commissionScheduleId)
			{
				return ((CommissionScheduleRow)(base.Find(new object[] {
							commissionScheduleId})));
			}
			
			/// <summary>
			/// Finds a row in the CommissionSchedule table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A CommissionScheduleKey row that contains the key elements, or null if there is no match.</returns>
			public new CommissionScheduleRow Find(object[] key)
			{
				return ((CommissionScheduleRow)(base.Find(key)));
			}
		}
		
		/// <summary>
		/// Represents a means of identifying a CommissionSchedule row using a set of columns in which all values must be unique.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public class CommissionScheduleKeyExternalId0Index : global::Teraque.NonClusteredIndex, ICommissionScheduleIndex
		{
			
			/// <summary>
			/// Create a secondary, unique index on the CommissionSchedule table.
			/// </summary>
			/// <param name="indexName">The name of the index.</param>
			/// <param name="columns">The columns that describe a unique key.</param>
			public CommissionScheduleKeyExternalId0Index(string indexName, System.Data.DataColumn[] columns) : 
					base(indexName, columns)
			{
			}
			
			/// <summary>
			/// Finds a row in the CommissionSchedule table containing the key elements.
			/// </summary>
			/// <param name="externalId0">The ExternalId0 element of the key.</param>
			/// <returns>The CommissionSchedule row that contains the key elements, or null if there is no match.</returns>
			public CommissionScheduleRow Find(string externalId0)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((CommissionScheduleRow)(base.Find(new object[] {
							externalId0})));
			}
			
			/// <summary>
			/// Finds a row in the CommissionSchedule table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A CommissionScheduleKeyExternalId0 row that contains the key elements, or null if there is no match.</returns>
			public new CommissionScheduleRow Find(object[] key)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((CommissionScheduleRow)(base.Find(key)));
			}
		}
		
		/// <summary>
		/// Represents a means of identifying a CommissionTranche row using a set of columns in which all values must be unique.
		/// </summary>
		public interface ICommissionTrancheIndex
		{
			
			/// <summary>
			/// Finds a row in the CommissionTranche table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A DepartmentRow that contains the key elements, or null if there is no match.</returns>
			CommissionTrancheRow Find(object[] key);
		}
		
		/// <summary>
		/// Represents a means of identifying a CommissionTranche row using a set of columns in which all values must be unique.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public class CommissionTrancheKeyIndex : global::Teraque.ClusteredIndex, ICommissionTrancheIndex
		{
			
			/// <summary>
			/// Create a primary, unique index on the CommissionTranche table.
			/// </summary>
			/// <param name="indexName">The name of the index.</param>
			/// <param name="columns">The columns that describe a unique key.</param>
			public CommissionTrancheKeyIndex(string indexName, System.Data.DataColumn[] columns) : 
					base(indexName, columns)
			{
			}
			
			/// <summary>
			/// Finds a row in the CommissionTranche table containing the key elements.
			/// </summary>
			/// <param name="commissionTrancheId">The CommissionTrancheId element of the key.</param>
			/// <returns>The CommissionTranche row that contains the key elements, or null if there is no match.</returns>
			public CommissionTrancheRow Find(System.Guid commissionTrancheId)
			{
				return ((CommissionTrancheRow)(base.Find(new object[] {
							commissionTrancheId})));
			}
			
			/// <summary>
			/// Finds a row in the CommissionTranche table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A CommissionTrancheKey row that contains the key elements, or null if there is no match.</returns>
			public new CommissionTrancheRow Find(object[] key)
			{
				return ((CommissionTrancheRow)(base.Find(key)));
			}
		}
		
		/// <summary>
		/// Represents a means of identifying a CommissionTranche row using a set of columns in which all values must be unique.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public class CommissionTrancheKeyExternalId0Index : global::Teraque.NonClusteredIndex, ICommissionTrancheIndex
		{
			
			/// <summary>
			/// Create a secondary, unique index on the CommissionTranche table.
			/// </summary>
			/// <param name="indexName">The name of the index.</param>
			/// <param name="columns">The columns that describe a unique key.</param>
			public CommissionTrancheKeyExternalId0Index(string indexName, System.Data.DataColumn[] columns) : 
					base(indexName, columns)
			{
			}
			
			/// <summary>
			/// Finds a row in the CommissionTranche table containing the key elements.
			/// </summary>
			/// <param name="externalId0">The ExternalId0 element of the key.</param>
			/// <returns>The CommissionTranche row that contains the key elements, or null if there is no match.</returns>
			public CommissionTrancheRow Find(string externalId0)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((CommissionTrancheRow)(base.Find(new object[] {
							externalId0})));
			}
			
			/// <summary>
			/// Finds a row in the CommissionTranche table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A CommissionTrancheKeyExternalId0 row that contains the key elements, or null if there is no match.</returns>
			public new CommissionTrancheRow Find(object[] key)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((CommissionTrancheRow)(base.Find(key)));
			}
		}
		
		/// <summary>
		/// Represents a means of identifying a CommissionType row using a set of columns in which all values must be unique.
		/// </summary>
		public interface ICommissionTypeIndex
		{
			
			/// <summary>
			/// Finds a row in the CommissionType table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A DepartmentRow that contains the key elements, or null if there is no match.</returns>
			CommissionTypeRow Find(object[] key);
		}
		
		/// <summary>
		/// Represents a means of identifying a CommissionType row using a set of columns in which all values must be unique.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public class CommissionTypeKeyIndex : global::Teraque.ClusteredIndex, ICommissionTypeIndex
		{
			
			/// <summary>
			/// Create a primary, unique index on the CommissionType table.
			/// </summary>
			/// <param name="indexName">The name of the index.</param>
			/// <param name="columns">The columns that describe a unique key.</param>
			public CommissionTypeKeyIndex(string indexName, System.Data.DataColumn[] columns) : 
					base(indexName, columns)
			{
			}
			
			/// <summary>
			/// Finds a row in the CommissionType table containing the key elements.
			/// </summary>
			/// <param name="commissionTypeCode">The CommissionTypeCode element of the key.</param>
			/// <returns>The CommissionType row that contains the key elements, or null if there is no match.</returns>
			public CommissionTypeRow Find(Teraque.CommissionTypeCode commissionTypeCode)
			{
				return ((CommissionTypeRow)(base.Find(new object[] {
							commissionTypeCode})));
			}
			
			/// <summary>
			/// Finds a row in the CommissionType table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A CommissionTypeKey row that contains the key elements, or null if there is no match.</returns>
			public new CommissionTypeRow Find(object[] key)
			{
				return ((CommissionTypeRow)(base.Find(key)));
			}
		}
		
		/// <summary>
		/// Represents a means of identifying a CommissionType row using a set of columns in which all values must be unique.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public class CommissionTypeKeyExternalId0Index : global::Teraque.NonClusteredIndex, ICommissionTypeIndex
		{
			
			/// <summary>
			/// Create a secondary, unique index on the CommissionType table.
			/// </summary>
			/// <param name="indexName">The name of the index.</param>
			/// <param name="columns">The columns that describe a unique key.</param>
			public CommissionTypeKeyExternalId0Index(string indexName, System.Data.DataColumn[] columns) : 
					base(indexName, columns)
			{
			}
			
			/// <summary>
			/// Finds a row in the CommissionType table containing the key elements.
			/// </summary>
			/// <param name="externalId0">The ExternalId0 element of the key.</param>
			/// <returns>The CommissionType row that contains the key elements, or null if there is no match.</returns>
			public CommissionTypeRow Find(string externalId0)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((CommissionTypeRow)(base.Find(new object[] {
							externalId0})));
			}
			
			/// <summary>
			/// Finds a row in the CommissionType table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A CommissionTypeKeyExternalId0 row that contains the key elements, or null if there is no match.</returns>
			public new CommissionTypeRow Find(object[] key)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((CommissionTypeRow)(base.Find(key)));
			}
		}
		
		/// <summary>
		/// Represents a means of identifying a CommissionUnit row using a set of columns in which all values must be unique.
		/// </summary>
		public interface ICommissionUnitIndex
		{
			
			/// <summary>
			/// Finds a row in the CommissionUnit table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A DepartmentRow that contains the key elements, or null if there is no match.</returns>
			CommissionUnitRow Find(object[] key);
		}
		
		/// <summary>
		/// Represents a means of identifying a CommissionUnit row using a set of columns in which all values must be unique.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public class CommissionUnitKeyIndex : global::Teraque.ClusteredIndex, ICommissionUnitIndex
		{
			
			/// <summary>
			/// Create a primary, unique index on the CommissionUnit table.
			/// </summary>
			/// <param name="indexName">The name of the index.</param>
			/// <param name="columns">The columns that describe a unique key.</param>
			public CommissionUnitKeyIndex(string indexName, System.Data.DataColumn[] columns) : 
					base(indexName, columns)
			{
			}
			
			/// <summary>
			/// Finds a row in the CommissionUnit table containing the key elements.
			/// </summary>
			/// <param name="commissionUnitCode">The CommissionUnitCode element of the key.</param>
			/// <returns>The CommissionUnit row that contains the key elements, or null if there is no match.</returns>
			public CommissionUnitRow Find(Teraque.CommissionUnitCode commissionUnitCode)
			{
				return ((CommissionUnitRow)(base.Find(new object[] {
							commissionUnitCode})));
			}
			
			/// <summary>
			/// Finds a row in the CommissionUnit table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A CommissionUnitKey row that contains the key elements, or null if there is no match.</returns>
			public new CommissionUnitRow Find(object[] key)
			{
				return ((CommissionUnitRow)(base.Find(key)));
			}
		}
		
		/// <summary>
		/// Represents a means of identifying a CommissionUnit row using a set of columns in which all values must be unique.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public class CommissionUnitKeyExternalId0Index : global::Teraque.NonClusteredIndex, ICommissionUnitIndex
		{
			
			/// <summary>
			/// Create a secondary, unique index on the CommissionUnit table.
			/// </summary>
			/// <param name="indexName">The name of the index.</param>
			/// <param name="columns">The columns that describe a unique key.</param>
			public CommissionUnitKeyExternalId0Index(string indexName, System.Data.DataColumn[] columns) : 
					base(indexName, columns)
			{
			}
			
			/// <summary>
			/// Finds a row in the CommissionUnit table containing the key elements.
			/// </summary>
			/// <param name="externalId0">The ExternalId0 element of the key.</param>
			/// <returns>The CommissionUnit row that contains the key elements, or null if there is no match.</returns>
			public CommissionUnitRow Find(string externalId0)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((CommissionUnitRow)(base.Find(new object[] {
							externalId0})));
			}
			
			/// <summary>
			/// Finds a row in the CommissionUnit table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A CommissionUnitKeyExternalId0 row that contains the key elements, or null if there is no match.</returns>
			public new CommissionUnitRow Find(object[] key)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((CommissionUnitRow)(base.Find(key)));
			}
		}
		
		/// <summary>
		/// Represents a means of identifying a ComplianceOfficer row using a set of columns in which all values must be unique.
		/// </summary>
		public interface IComplianceOfficerIndex
		{
			
			/// <summary>
			/// Finds a row in the ComplianceOfficer table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A DepartmentRow that contains the key elements, or null if there is no match.</returns>
			ComplianceOfficerRow Find(object[] key);
		}
		
		/// <summary>
		/// Represents a means of identifying a ComplianceOfficer row using a set of columns in which all values must be unique.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public class ComplianceOfficerKeyIndex : global::Teraque.ClusteredIndex, IComplianceOfficerIndex
		{
			
			/// <summary>
			/// Create a primary, unique index on the ComplianceOfficer table.
			/// </summary>
			/// <param name="indexName">The name of the index.</param>
			/// <param name="columns">The columns that describe a unique key.</param>
			public ComplianceOfficerKeyIndex(string indexName, System.Data.DataColumn[] columns) : 
					base(indexName, columns)
			{
			}
			
			/// <summary>
			/// Finds a row in the ComplianceOfficer table containing the key elements.
			/// </summary>
			/// <param name="complianceOfficerId">The ComplianceOfficerId element of the key.</param>
			/// <returns>The ComplianceOfficer row that contains the key elements, or null if there is no match.</returns>
			public ComplianceOfficerRow Find(System.Guid complianceOfficerId)
			{
				return ((ComplianceOfficerRow)(base.Find(new object[] {
							complianceOfficerId})));
			}
			
			/// <summary>
			/// Finds a row in the ComplianceOfficer table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A ComplianceOfficerKey row that contains the key elements, or null if there is no match.</returns>
			public new ComplianceOfficerRow Find(object[] key)
			{
				return ((ComplianceOfficerRow)(base.Find(key)));
			}
		}
		
		/// <summary>
		/// Represents a means of identifying a Condition row using a set of columns in which all values must be unique.
		/// </summary>
		public interface IConditionIndex
		{
			
			/// <summary>
			/// Finds a row in the Condition table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A DepartmentRow that contains the key elements, or null if there is no match.</returns>
			ConditionRow Find(object[] key);
		}
		
		/// <summary>
		/// Represents a means of identifying a Condition row using a set of columns in which all values must be unique.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public class ConditionKeyIndex : global::Teraque.ClusteredIndex, IConditionIndex
		{
			
			/// <summary>
			/// Create a primary, unique index on the Condition table.
			/// </summary>
			/// <param name="indexName">The name of the index.</param>
			/// <param name="columns">The columns that describe a unique key.</param>
			public ConditionKeyIndex(string indexName, System.Data.DataColumn[] columns) : 
					base(indexName, columns)
			{
			}
			
			/// <summary>
			/// Finds a row in the Condition table containing the key elements.
			/// </summary>
			/// <param name="conditionCode">The ConditionCode element of the key.</param>
			/// <returns>The Condition row that contains the key elements, or null if there is no match.</returns>
			public ConditionRow Find(Teraque.ConditionCode conditionCode)
			{
				return ((ConditionRow)(base.Find(new object[] {
							conditionCode})));
			}
			
			/// <summary>
			/// Finds a row in the Condition table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A ConditionKey row that contains the key elements, or null if there is no match.</returns>
			public new ConditionRow Find(object[] key)
			{
				return ((ConditionRow)(base.Find(key)));
			}
		}
		
		/// <summary>
		/// Represents a means of identifying a Condition row using a set of columns in which all values must be unique.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public class ConditionKeyExternalId0Index : global::Teraque.NonClusteredIndex, IConditionIndex
		{
			
			/// <summary>
			/// Create a secondary, unique index on the Condition table.
			/// </summary>
			/// <param name="indexName">The name of the index.</param>
			/// <param name="columns">The columns that describe a unique key.</param>
			public ConditionKeyExternalId0Index(string indexName, System.Data.DataColumn[] columns) : 
					base(indexName, columns)
			{
			}
			
			/// <summary>
			/// Finds a row in the Condition table containing the key elements.
			/// </summary>
			/// <param name="externalId0">The ExternalId0 element of the key.</param>
			/// <returns>The Condition row that contains the key elements, or null if there is no match.</returns>
			public ConditionRow Find(string externalId0)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((ConditionRow)(base.Find(new object[] {
							externalId0})));
			}
			
			/// <summary>
			/// Finds a row in the Condition table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A ConditionKeyExternalId0 row that contains the key elements, or null if there is no match.</returns>
			public new ConditionRow Find(object[] key)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((ConditionRow)(base.Find(key)));
			}
		}
		
		/// <summary>
		/// Represents a means of identifying a Condition row using a set of columns in which all values must be unique.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public class ConditionKeyExternalId1Index : global::Teraque.NonClusteredIndex, IConditionIndex
		{
			
			/// <summary>
			/// Create a secondary, unique index on the Condition table.
			/// </summary>
			/// <param name="indexName">The name of the index.</param>
			/// <param name="columns">The columns that describe a unique key.</param>
			public ConditionKeyExternalId1Index(string indexName, System.Data.DataColumn[] columns) : 
					base(indexName, columns)
			{
			}
			
			/// <summary>
			/// Finds a row in the Condition table containing the key elements.
			/// </summary>
			/// <param name="externalId1">The ExternalId1 element of the key.</param>
			/// <returns>The Condition row that contains the key elements, or null if there is no match.</returns>
			public ConditionRow Find(string externalId1)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((ConditionRow)(base.Find(new object[] {
							externalId1})));
			}
			
			/// <summary>
			/// Finds a row in the Condition table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A ConditionKeyExternalId1 row that contains the key elements, or null if there is no match.</returns>
			public new ConditionRow Find(object[] key)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((ConditionRow)(base.Find(key)));
			}
		}
		
		/// <summary>
		/// Represents a means of identifying a Condition row using a set of columns in which all values must be unique.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public class ConditionKeyExternalId2Index : global::Teraque.NonClusteredIndex, IConditionIndex
		{
			
			/// <summary>
			/// Create a secondary, unique index on the Condition table.
			/// </summary>
			/// <param name="indexName">The name of the index.</param>
			/// <param name="columns">The columns that describe a unique key.</param>
			public ConditionKeyExternalId2Index(string indexName, System.Data.DataColumn[] columns) : 
					base(indexName, columns)
			{
			}
			
			/// <summary>
			/// Finds a row in the Condition table containing the key elements.
			/// </summary>
			/// <param name="externalId2">The ExternalId2 element of the key.</param>
			/// <returns>The Condition row that contains the key elements, or null if there is no match.</returns>
			public ConditionRow Find(string externalId2)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((ConditionRow)(base.Find(new object[] {
							externalId2})));
			}
			
			/// <summary>
			/// Finds a row in the Condition table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A ConditionKeyExternalId2 row that contains the key elements, or null if there is no match.</returns>
			public new ConditionRow Find(object[] key)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((ConditionRow)(base.Find(key)));
			}
		}
		
		/// <summary>
		/// Represents a means of identifying a Condition row using a set of columns in which all values must be unique.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public class ConditionKeyExternalId3Index : global::Teraque.NonClusteredIndex, IConditionIndex
		{
			
			/// <summary>
			/// Create a secondary, unique index on the Condition table.
			/// </summary>
			/// <param name="indexName">The name of the index.</param>
			/// <param name="columns">The columns that describe a unique key.</param>
			public ConditionKeyExternalId3Index(string indexName, System.Data.DataColumn[] columns) : 
					base(indexName, columns)
			{
			}
			
			/// <summary>
			/// Finds a row in the Condition table containing the key elements.
			/// </summary>
			/// <param name="externalId3">The ExternalId3 element of the key.</param>
			/// <returns>The Condition row that contains the key elements, or null if there is no match.</returns>
			public ConditionRow Find(string externalId3)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((ConditionRow)(base.Find(new object[] {
							externalId3})));
			}
			
			/// <summary>
			/// Finds a row in the Condition table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A ConditionKeyExternalId3 row that contains the key elements, or null if there is no match.</returns>
			public new ConditionRow Find(object[] key)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((ConditionRow)(base.Find(key)));
			}
		}
		
		/// <summary>
		/// Represents a means of identifying a Configuration row using a set of columns in which all values must be unique.
		/// </summary>
		public interface IConfigurationIndex
		{
			
			/// <summary>
			/// Finds a row in the Configuration table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A DepartmentRow that contains the key elements, or null if there is no match.</returns>
			ConfigurationRow Find(object[] key);
		}
		
		/// <summary>
		/// Represents a means of identifying a Configuration row using a set of columns in which all values must be unique.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public class ConfigurationKeyIndex : global::Teraque.ClusteredIndex, IConfigurationIndex
		{
			
			/// <summary>
			/// Create a primary, unique index on the Configuration table.
			/// </summary>
			/// <param name="indexName">The name of the index.</param>
			/// <param name="columns">The columns that describe a unique key.</param>
			public ConfigurationKeyIndex(string indexName, System.Data.DataColumn[] columns) : 
					base(indexName, columns)
			{
			}
			
			/// <summary>
			/// Finds a row in the Configuration table containing the key elements.
			/// </summary>
			/// <param name="configurationId">The ConfigurationId element of the key.</param>
			/// <param name="relationName">The RelationName element of the key.</param>
			/// <returns>The Configuration row that contains the key elements, or null if there is no match.</returns>
			public ConfigurationRow Find(string configurationId, string relationName)
			{
				return ((ConfigurationRow)(base.Find(new object[] {
							configurationId,
							relationName})));
			}
			
			/// <summary>
			/// Finds a row in the Configuration table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A ConfigurationKey row that contains the key elements, or null if there is no match.</returns>
			public new ConfigurationRow Find(object[] key)
			{
				return ((ConfigurationRow)(base.Find(key)));
			}
		}
		
		/// <summary>
		/// Represents a means of identifying a Country row using a set of columns in which all values must be unique.
		/// </summary>
		public interface ICountryIndex
		{
			
			/// <summary>
			/// Finds a row in the Country table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A DepartmentRow that contains the key elements, or null if there is no match.</returns>
			CountryRow Find(object[] key);
		}
		
		/// <summary>
		/// Represents a means of identifying a Country row using a set of columns in which all values must be unique.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public class CountryKeyIndex : global::Teraque.ClusteredIndex, ICountryIndex
		{
			
			/// <summary>
			/// Create a primary, unique index on the Country table.
			/// </summary>
			/// <param name="indexName">The name of the index.</param>
			/// <param name="columns">The columns that describe a unique key.</param>
			public CountryKeyIndex(string indexName, System.Data.DataColumn[] columns) : 
					base(indexName, columns)
			{
			}
			
			/// <summary>
			/// Finds a row in the Country table containing the key elements.
			/// </summary>
			/// <param name="countryId">The CountryId element of the key.</param>
			/// <returns>The Country row that contains the key elements, or null if there is no match.</returns>
			public CountryRow Find(System.Guid countryId)
			{
				return ((CountryRow)(base.Find(new object[] {
							countryId})));
			}
			
			/// <summary>
			/// Finds a row in the Country table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A CountryKey row that contains the key elements, or null if there is no match.</returns>
			public new CountryRow Find(object[] key)
			{
				return ((CountryRow)(base.Find(key)));
			}
		}
		
		/// <summary>
		/// Represents a means of identifying a Country row using a set of columns in which all values must be unique.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public class CountryKeyExternalId0Index : global::Teraque.NonClusteredIndex, ICountryIndex
		{
			
			/// <summary>
			/// Create a secondary, unique index on the Country table.
			/// </summary>
			/// <param name="indexName">The name of the index.</param>
			/// <param name="columns">The columns that describe a unique key.</param>
			public CountryKeyExternalId0Index(string indexName, System.Data.DataColumn[] columns) : 
					base(indexName, columns)
			{
			}
			
			/// <summary>
			/// Finds a row in the Country table containing the key elements.
			/// </summary>
			/// <param name="externalId0">The ExternalId0 element of the key.</param>
			/// <returns>The Country row that contains the key elements, or null if there is no match.</returns>
			public CountryRow Find(string externalId0)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((CountryRow)(base.Find(new object[] {
							externalId0})));
			}
			
			/// <summary>
			/// Finds a row in the Country table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A CountryKeyExternalId0 row that contains the key elements, or null if there is no match.</returns>
			public new CountryRow Find(object[] key)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((CountryRow)(base.Find(key)));
			}
		}
		
		/// <summary>
		/// Represents a means of identifying a Country row using a set of columns in which all values must be unique.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public class CountryKeyExternalId1Index : global::Teraque.NonClusteredIndex, ICountryIndex
		{
			
			/// <summary>
			/// Create a secondary, unique index on the Country table.
			/// </summary>
			/// <param name="indexName">The name of the index.</param>
			/// <param name="columns">The columns that describe a unique key.</param>
			public CountryKeyExternalId1Index(string indexName, System.Data.DataColumn[] columns) : 
					base(indexName, columns)
			{
			}
			
			/// <summary>
			/// Finds a row in the Country table containing the key elements.
			/// </summary>
			/// <param name="externalId1">The ExternalId1 element of the key.</param>
			/// <returns>The Country row that contains the key elements, or null if there is no match.</returns>
			public CountryRow Find(string externalId1)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((CountryRow)(base.Find(new object[] {
							externalId1})));
			}
			
			/// <summary>
			/// Finds a row in the Country table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A CountryKeyExternalId1 row that contains the key elements, or null if there is no match.</returns>
			public new CountryRow Find(object[] key)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((CountryRow)(base.Find(key)));
			}
		}
		
		/// <summary>
		/// Represents a means of identifying a CreditRating row using a set of columns in which all values must be unique.
		/// </summary>
		public interface ICreditRatingIndex
		{
			
			/// <summary>
			/// Finds a row in the CreditRating table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A DepartmentRow that contains the key elements, or null if there is no match.</returns>
			CreditRatingRow Find(object[] key);
		}
		
		/// <summary>
		/// Represents a means of identifying a CreditRating row using a set of columns in which all values must be unique.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public class CreditRatingKeyIndex : global::Teraque.ClusteredIndex, ICreditRatingIndex
		{
			
			/// <summary>
			/// Create a primary, unique index on the CreditRating table.
			/// </summary>
			/// <param name="indexName">The name of the index.</param>
			/// <param name="columns">The columns that describe a unique key.</param>
			public CreditRatingKeyIndex(string indexName, System.Data.DataColumn[] columns) : 
					base(indexName, columns)
			{
			}
			
			/// <summary>
			/// Finds a row in the CreditRating table containing the key elements.
			/// </summary>
			/// <param name="creditRatingId">The CreditRatingId element of the key.</param>
			/// <returns>The CreditRating row that contains the key elements, or null if there is no match.</returns>
			public CreditRatingRow Find(System.Guid creditRatingId)
			{
				return ((CreditRatingRow)(base.Find(new object[] {
							creditRatingId})));
			}
			
			/// <summary>
			/// Finds a row in the CreditRating table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A CreditRatingKey row that contains the key elements, or null if there is no match.</returns>
			public new CreditRatingRow Find(object[] key)
			{
				return ((CreditRatingRow)(base.Find(key)));
			}
		}
		
		/// <summary>
		/// Represents a means of identifying a CreditRating row using a set of columns in which all values must be unique.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public class CreditRatingKeyExternalId0Index : global::Teraque.NonClusteredIndex, ICreditRatingIndex
		{
			
			/// <summary>
			/// Create a secondary, unique index on the CreditRating table.
			/// </summary>
			/// <param name="indexName">The name of the index.</param>
			/// <param name="columns">The columns that describe a unique key.</param>
			public CreditRatingKeyExternalId0Index(string indexName, System.Data.DataColumn[] columns) : 
					base(indexName, columns)
			{
			}
			
			/// <summary>
			/// Finds a row in the CreditRating table containing the key elements.
			/// </summary>
			/// <param name="externalId0">The ExternalId0 element of the key.</param>
			/// <returns>The CreditRating row that contains the key elements, or null if there is no match.</returns>
			public CreditRatingRow Find(string externalId0)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((CreditRatingRow)(base.Find(new object[] {
							externalId0})));
			}
			
			/// <summary>
			/// Finds a row in the CreditRating table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A CreditRatingKeyExternalId0 row that contains the key elements, or null if there is no match.</returns>
			public new CreditRatingRow Find(object[] key)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((CreditRatingRow)(base.Find(key)));
			}
		}
		
		/// <summary>
		/// Represents a means of identifying a CreditRating row using a set of columns in which all values must be unique.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public class CreditRatingKeyExternalId1Index : global::Teraque.NonClusteredIndex, ICreditRatingIndex
		{
			
			/// <summary>
			/// Create a secondary, unique index on the CreditRating table.
			/// </summary>
			/// <param name="indexName">The name of the index.</param>
			/// <param name="columns">The columns that describe a unique key.</param>
			public CreditRatingKeyExternalId1Index(string indexName, System.Data.DataColumn[] columns) : 
					base(indexName, columns)
			{
			}
			
			/// <summary>
			/// Finds a row in the CreditRating table containing the key elements.
			/// </summary>
			/// <param name="externalId1">The ExternalId1 element of the key.</param>
			/// <returns>The CreditRating row that contains the key elements, or null if there is no match.</returns>
			public CreditRatingRow Find(string externalId1)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((CreditRatingRow)(base.Find(new object[] {
							externalId1})));
			}
			
			/// <summary>
			/// Finds a row in the CreditRating table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A CreditRatingKeyExternalId1 row that contains the key elements, or null if there is no match.</returns>
			public new CreditRatingRow Find(object[] key)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((CreditRatingRow)(base.Find(key)));
			}
		}
		
		/// <summary>
		/// Represents a means of identifying a CreditRatingService row using a set of columns in which all values must be unique.
		/// </summary>
		public interface ICreditRatingServiceIndex
		{
			
			/// <summary>
			/// Finds a row in the CreditRatingService table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A DepartmentRow that contains the key elements, or null if there is no match.</returns>
			CreditRatingServiceRow Find(object[] key);
		}
		
		/// <summary>
		/// Represents a means of identifying a CreditRatingService row using a set of columns in which all values must be unique.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public class CreditRatingServiceKeyIndex : global::Teraque.ClusteredIndex, ICreditRatingServiceIndex
		{
			
			/// <summary>
			/// Create a primary, unique index on the CreditRatingService table.
			/// </summary>
			/// <param name="indexName">The name of the index.</param>
			/// <param name="columns">The columns that describe a unique key.</param>
			public CreditRatingServiceKeyIndex(string indexName, System.Data.DataColumn[] columns) : 
					base(indexName, columns)
			{
			}
			
			/// <summary>
			/// Finds a row in the CreditRatingService table containing the key elements.
			/// </summary>
			/// <param name="creditRatingServiceId">The CreditRatingServiceId element of the key.</param>
			/// <returns>The CreditRatingService row that contains the key elements, or null if there is no match.</returns>
			public CreditRatingServiceRow Find(System.Guid creditRatingServiceId)
			{
				return ((CreditRatingServiceRow)(base.Find(new object[] {
							creditRatingServiceId})));
			}
			
			/// <summary>
			/// Finds a row in the CreditRatingService table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A CreditRatingServiceKey row that contains the key elements, or null if there is no match.</returns>
			public new CreditRatingServiceRow Find(object[] key)
			{
				return ((CreditRatingServiceRow)(base.Find(key)));
			}
		}
		
		/// <summary>
		/// Represents a means of identifying a CreditRatingService row using a set of columns in which all values must be unique.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public class CreditRatingServiceKeyExternalId0Index : global::Teraque.NonClusteredIndex, ICreditRatingServiceIndex
		{
			
			/// <summary>
			/// Create a secondary, unique index on the CreditRatingService table.
			/// </summary>
			/// <param name="indexName">The name of the index.</param>
			/// <param name="columns">The columns that describe a unique key.</param>
			public CreditRatingServiceKeyExternalId0Index(string indexName, System.Data.DataColumn[] columns) : 
					base(indexName, columns)
			{
			}
			
			/// <summary>
			/// Finds a row in the CreditRatingService table containing the key elements.
			/// </summary>
			/// <param name="externalId0">The ExternalId0 element of the key.</param>
			/// <returns>The CreditRatingService row that contains the key elements, or null if there is no match.</returns>
			public CreditRatingServiceRow Find(string externalId0)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((CreditRatingServiceRow)(base.Find(new object[] {
							externalId0})));
			}
			
			/// <summary>
			/// Finds a row in the CreditRatingService table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A CreditRatingServiceKeyExternalId0 row that contains the key elements, or null if there is no match.</returns>
			public new CreditRatingServiceRow Find(object[] key)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((CreditRatingServiceRow)(base.Find(key)));
			}
		}
		
		/// <summary>
		/// Represents a means of identifying a CreditRatingService row using a set of columns in which all values must be unique.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public class CreditRatingServiceKeyExternalId1Index : global::Teraque.NonClusteredIndex, ICreditRatingServiceIndex
		{
			
			/// <summary>
			/// Create a secondary, unique index on the CreditRatingService table.
			/// </summary>
			/// <param name="indexName">The name of the index.</param>
			/// <param name="columns">The columns that describe a unique key.</param>
			public CreditRatingServiceKeyExternalId1Index(string indexName, System.Data.DataColumn[] columns) : 
					base(indexName, columns)
			{
			}
			
			/// <summary>
			/// Finds a row in the CreditRatingService table containing the key elements.
			/// </summary>
			/// <param name="externalId1">The ExternalId1 element of the key.</param>
			/// <returns>The CreditRatingService row that contains the key elements, or null if there is no match.</returns>
			public CreditRatingServiceRow Find(string externalId1)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((CreditRatingServiceRow)(base.Find(new object[] {
							externalId1})));
			}
			
			/// <summary>
			/// Finds a row in the CreditRatingService table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A CreditRatingServiceKeyExternalId1 row that contains the key elements, or null if there is no match.</returns>
			public new CreditRatingServiceRow Find(object[] key)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((CreditRatingServiceRow)(base.Find(key)));
			}
		}
		
		/// <summary>
		/// Represents a means of identifying a Crossing row using a set of columns in which all values must be unique.
		/// </summary>
		public interface ICrossingIndex
		{
			
			/// <summary>
			/// Finds a row in the Crossing table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A DepartmentRow that contains the key elements, or null if there is no match.</returns>
			CrossingRow Find(object[] key);
		}
		
		/// <summary>
		/// Represents a means of identifying a Crossing row using a set of columns in which all values must be unique.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public class CrossingKeyIndex : global::Teraque.ClusteredIndex, ICrossingIndex
		{
			
			/// <summary>
			/// Create a primary, unique index on the Crossing table.
			/// </summary>
			/// <param name="indexName">The name of the index.</param>
			/// <param name="columns">The columns that describe a unique key.</param>
			public CrossingKeyIndex(string indexName, System.Data.DataColumn[] columns) : 
					base(indexName, columns)
			{
			}
			
			/// <summary>
			/// Finds a row in the Crossing table containing the key elements.
			/// </summary>
			/// <param name="crossingCode">The CrossingCode element of the key.</param>
			/// <returns>The Crossing row that contains the key elements, or null if there is no match.</returns>
			public CrossingRow Find(Teraque.CrossingCode crossingCode)
			{
				return ((CrossingRow)(base.Find(new object[] {
							crossingCode})));
			}
			
			/// <summary>
			/// Finds a row in the Crossing table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A CrossingKey row that contains the key elements, or null if there is no match.</returns>
			public new CrossingRow Find(object[] key)
			{
				return ((CrossingRow)(base.Find(key)));
			}
		}
		
		/// <summary>
		/// Represents a means of identifying a Crossing row using a set of columns in which all values must be unique.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public class CrossingKeyExternalId0Index : global::Teraque.NonClusteredIndex, ICrossingIndex
		{
			
			/// <summary>
			/// Create a secondary, unique index on the Crossing table.
			/// </summary>
			/// <param name="indexName">The name of the index.</param>
			/// <param name="columns">The columns that describe a unique key.</param>
			public CrossingKeyExternalId0Index(string indexName, System.Data.DataColumn[] columns) : 
					base(indexName, columns)
			{
			}
			
			/// <summary>
			/// Finds a row in the Crossing table containing the key elements.
			/// </summary>
			/// <param name="externalId0">The ExternalId0 element of the key.</param>
			/// <returns>The Crossing row that contains the key elements, or null if there is no match.</returns>
			public CrossingRow Find(string externalId0)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((CrossingRow)(base.Find(new object[] {
							externalId0})));
			}
			
			/// <summary>
			/// Finds a row in the Crossing table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A CrossingKeyExternalId0 row that contains the key elements, or null if there is no match.</returns>
			public new CrossingRow Find(object[] key)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((CrossingRow)(base.Find(key)));
			}
		}
		
		/// <summary>
		/// Represents a means of identifying a Crossing row using a set of columns in which all values must be unique.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public class CrossingKeyExternalId1Index : global::Teraque.NonClusteredIndex, ICrossingIndex
		{
			
			/// <summary>
			/// Create a secondary, unique index on the Crossing table.
			/// </summary>
			/// <param name="indexName">The name of the index.</param>
			/// <param name="columns">The columns that describe a unique key.</param>
			public CrossingKeyExternalId1Index(string indexName, System.Data.DataColumn[] columns) : 
					base(indexName, columns)
			{
			}
			
			/// <summary>
			/// Finds a row in the Crossing table containing the key elements.
			/// </summary>
			/// <param name="externalId1">The ExternalId1 element of the key.</param>
			/// <returns>The Crossing row that contains the key elements, or null if there is no match.</returns>
			public CrossingRow Find(string externalId1)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((CrossingRow)(base.Find(new object[] {
							externalId1})));
			}
			
			/// <summary>
			/// Finds a row in the Crossing table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A CrossingKeyExternalId1 row that contains the key elements, or null if there is no match.</returns>
			public new CrossingRow Find(object[] key)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((CrossingRow)(base.Find(key)));
			}
		}
		
		/// <summary>
		/// Represents a means of identifying a Currency row using a set of columns in which all values must be unique.
		/// </summary>
		public interface ICurrencyIndex
		{
			
			/// <summary>
			/// Finds a row in the Currency table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A DepartmentRow that contains the key elements, or null if there is no match.</returns>
			CurrencyRow Find(object[] key);
		}
		
		/// <summary>
		/// Represents a means of identifying a Currency row using a set of columns in which all values must be unique.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public class CurrencyKeyIndex : global::Teraque.ClusteredIndex, ICurrencyIndex
		{
			
			/// <summary>
			/// Create a primary, unique index on the Currency table.
			/// </summary>
			/// <param name="indexName">The name of the index.</param>
			/// <param name="columns">The columns that describe a unique key.</param>
			public CurrencyKeyIndex(string indexName, System.Data.DataColumn[] columns) : 
					base(indexName, columns)
			{
			}
			
			/// <summary>
			/// Finds a row in the Currency table containing the key elements.
			/// </summary>
			/// <param name="currencyId">The CurrencyId element of the key.</param>
			/// <returns>The Currency row that contains the key elements, or null if there is no match.</returns>
			public CurrencyRow Find(System.Guid currencyId)
			{
				return ((CurrencyRow)(base.Find(new object[] {
							currencyId})));
			}
			
			/// <summary>
			/// Finds a row in the Currency table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A CurrencyKey row that contains the key elements, or null if there is no match.</returns>
			public new CurrencyRow Find(object[] key)
			{
				return ((CurrencyRow)(base.Find(key)));
			}
		}
		
		/// <summary>
		/// Represents a means of identifying a Debt row using a set of columns in which all values must be unique.
		/// </summary>
		public interface IDebtIndex
		{
			
			/// <summary>
			/// Finds a row in the Debt table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A DepartmentRow that contains the key elements, or null if there is no match.</returns>
			DebtRow Find(object[] key);
		}
		
		/// <summary>
		/// Represents a means of identifying a Debt row using a set of columns in which all values must be unique.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public class DebtKeyIndex : global::Teraque.ClusteredIndex, IDebtIndex
		{
			
			/// <summary>
			/// Create a primary, unique index on the Debt table.
			/// </summary>
			/// <param name="indexName">The name of the index.</param>
			/// <param name="columns">The columns that describe a unique key.</param>
			public DebtKeyIndex(string indexName, System.Data.DataColumn[] columns) : 
					base(indexName, columns)
			{
			}
			
			/// <summary>
			/// Finds a row in the Debt table containing the key elements.
			/// </summary>
			/// <param name="debtId">The DebtId element of the key.</param>
			/// <returns>The Debt row that contains the key elements, or null if there is no match.</returns>
			public DebtRow Find(System.Guid debtId)
			{
				return ((DebtRow)(base.Find(new object[] {
							debtId})));
			}
			
			/// <summary>
			/// Finds a row in the Debt table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A DebtKey row that contains the key elements, or null if there is no match.</returns>
			public new DebtRow Find(object[] key)
			{
				return ((DebtRow)(base.Find(key)));
			}
		}
		
		/// <summary>
		/// Represents a means of identifying a Destination row using a set of columns in which all values must be unique.
		/// </summary>
		public interface IDestinationIndex
		{
			
			/// <summary>
			/// Finds a row in the Destination table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A DepartmentRow that contains the key elements, or null if there is no match.</returns>
			DestinationRow Find(object[] key);
		}
		
		/// <summary>
		/// Represents a means of identifying a Destination row using a set of columns in which all values must be unique.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public class DestinationKeyIndex : global::Teraque.ClusteredIndex, IDestinationIndex
		{
			
			/// <summary>
			/// Create a primary, unique index on the Destination table.
			/// </summary>
			/// <param name="indexName">The name of the index.</param>
			/// <param name="columns">The columns that describe a unique key.</param>
			public DestinationKeyIndex(string indexName, System.Data.DataColumn[] columns) : 
					base(indexName, columns)
			{
			}
			
			/// <summary>
			/// Finds a row in the Destination table containing the key elements.
			/// </summary>
			/// <param name="destinationId">The DestinationId element of the key.</param>
			/// <returns>The Destination row that contains the key elements, or null if there is no match.</returns>
			public DestinationRow Find(System.Guid destinationId)
			{
				return ((DestinationRow)(base.Find(new object[] {
							destinationId})));
			}
			
			/// <summary>
			/// Finds a row in the Destination table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A DestinationKey row that contains the key elements, or null if there is no match.</returns>
			public new DestinationRow Find(object[] key)
			{
				return ((DestinationRow)(base.Find(key)));
			}
		}
		
		/// <summary>
		/// Represents a means of identifying a Destination row using a set of columns in which all values must be unique.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public class DestinationKeyExternalId0Index : global::Teraque.NonClusteredIndex, IDestinationIndex
		{
			
			/// <summary>
			/// Create a secondary, unique index on the Destination table.
			/// </summary>
			/// <param name="indexName">The name of the index.</param>
			/// <param name="columns">The columns that describe a unique key.</param>
			public DestinationKeyExternalId0Index(string indexName, System.Data.DataColumn[] columns) : 
					base(indexName, columns)
			{
			}
			
			/// <summary>
			/// Finds a row in the Destination table containing the key elements.
			/// </summary>
			/// <param name="externalId0">The ExternalId0 element of the key.</param>
			/// <returns>The Destination row that contains the key elements, or null if there is no match.</returns>
			public DestinationRow Find(string externalId0)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((DestinationRow)(base.Find(new object[] {
							externalId0})));
			}
			
			/// <summary>
			/// Finds a row in the Destination table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A DestinationKeyExternalId0 row that contains the key elements, or null if there is no match.</returns>
			public new DestinationRow Find(object[] key)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((DestinationRow)(base.Find(key)));
			}
		}
		
		/// <summary>
		/// Represents a means of identifying a Destination row using a set of columns in which all values must be unique.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public class DestinationKeyExternalId1Index : global::Teraque.NonClusteredIndex, IDestinationIndex
		{
			
			/// <summary>
			/// Create a secondary, unique index on the Destination table.
			/// </summary>
			/// <param name="indexName">The name of the index.</param>
			/// <param name="columns">The columns that describe a unique key.</param>
			public DestinationKeyExternalId1Index(string indexName, System.Data.DataColumn[] columns) : 
					base(indexName, columns)
			{
			}
			
			/// <summary>
			/// Finds a row in the Destination table containing the key elements.
			/// </summary>
			/// <param name="externalId1">The ExternalId1 element of the key.</param>
			/// <returns>The Destination row that contains the key elements, or null if there is no match.</returns>
			public DestinationRow Find(string externalId1)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((DestinationRow)(base.Find(new object[] {
							externalId1})));
			}
			
			/// <summary>
			/// Finds a row in the Destination table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A DestinationKeyExternalId1 row that contains the key elements, or null if there is no match.</returns>
			public new DestinationRow Find(object[] key)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((DestinationRow)(base.Find(key)));
			}
		}
		
		/// <summary>
		/// Represents a means of identifying a DestinationExchangeMap row using a set of columns in which all values must be unique.
		/// </summary>
		public interface IDestinationExchangeMapIndex
		{
			
			/// <summary>
			/// Finds a row in the DestinationExchangeMap table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A DepartmentRow that contains the key elements, or null if there is no match.</returns>
			DestinationExchangeMapRow Find(object[] key);
		}
		
		/// <summary>
		/// Represents a means of identifying a DestinationExchangeMap row using a set of columns in which all values must be unique.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public class DestinationExchangeMapKeyIndex : global::Teraque.ClusteredIndex, IDestinationExchangeMapIndex
		{
			
			/// <summary>
			/// Create a primary, unique index on the DestinationExchangeMap table.
			/// </summary>
			/// <param name="indexName">The name of the index.</param>
			/// <param name="columns">The columns that describe a unique key.</param>
			public DestinationExchangeMapKeyIndex(string indexName, System.Data.DataColumn[] columns) : 
					base(indexName, columns)
			{
			}
			
			/// <summary>
			/// Finds a row in the DestinationExchangeMap table containing the key elements.
			/// </summary>
			/// <param name="destinationExchangeMapId">The DestinationExchangeMapId element of the key.</param>
			/// <returns>The DestinationExchangeMap row that contains the key elements, or null if there is no match.</returns>
			public DestinationExchangeMapRow Find(System.Guid destinationExchangeMapId)
			{
				return ((DestinationExchangeMapRow)(base.Find(new object[] {
							destinationExchangeMapId})));
			}
			
			/// <summary>
			/// Finds a row in the DestinationExchangeMap table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A DestinationExchangeMapKey row that contains the key elements, or null if there is no match.</returns>
			public new DestinationExchangeMapRow Find(object[] key)
			{
				return ((DestinationExchangeMapRow)(base.Find(key)));
			}
		}
		
		/// <summary>
		/// Represents a means of identifying a DestinationExchangeMap row using a set of columns in which all values must be unique.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public class DestinationExchangeMapKeyDestinationIdExchangeIdIndex : global::Teraque.NonClusteredIndex, IDestinationExchangeMapIndex
		{
			
			/// <summary>
			/// Create a secondary, unique index on the DestinationExchangeMap table.
			/// </summary>
			/// <param name="indexName">The name of the index.</param>
			/// <param name="columns">The columns that describe a unique key.</param>
			public DestinationExchangeMapKeyDestinationIdExchangeIdIndex(string indexName, System.Data.DataColumn[] columns) : 
					base(indexName, columns)
			{
			}
			
			/// <summary>
			/// Finds a row in the DestinationExchangeMap table containing the key elements.
			/// </summary>
			/// <param name="destinationId">The DestinationId element of the key.</param>
			/// <param name="exchangeId">The ExchangeId element of the key.</param>
			/// <returns>The DestinationExchangeMap row that contains the key elements, or null if there is no match.</returns>
			public DestinationExchangeMapRow Find(System.Guid destinationId, System.Guid exchangeId)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((DestinationExchangeMapRow)(base.Find(new object[] {
							destinationId,
							exchangeId})));
			}
			
			/// <summary>
			/// Finds a row in the DestinationExchangeMap table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A DestinationExchangeMapKeyDestinationIdExchangeId row that contains the key elements, or null if there is no match.</returns>
			public new DestinationExchangeMapRow Find(object[] key)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((DestinationExchangeMapRow)(base.Find(key)));
			}
		}
		
		/// <summary>
		/// Represents a means of identifying a DestinationOrder row using a set of columns in which all values must be unique.
		/// </summary>
		public interface IDestinationOrderIndex
		{
			
			/// <summary>
			/// Finds a row in the DestinationOrder table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A DepartmentRow that contains the key elements, or null if there is no match.</returns>
			DestinationOrderRow Find(object[] key);
		}
		
		/// <summary>
		/// Represents a means of identifying a DestinationOrder row using a set of columns in which all values must be unique.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public class DestinationOrderKeyIndex : global::Teraque.ClusteredIndex, IDestinationOrderIndex
		{
			
			/// <summary>
			/// Create a primary, unique index on the DestinationOrder table.
			/// </summary>
			/// <param name="indexName">The name of the index.</param>
			/// <param name="columns">The columns that describe a unique key.</param>
			public DestinationOrderKeyIndex(string indexName, System.Data.DataColumn[] columns) : 
					base(indexName, columns)
			{
			}
			
			/// <summary>
			/// Finds a row in the DestinationOrder table containing the key elements.
			/// </summary>
			/// <param name="destinationOrderId">The DestinationOrderId element of the key.</param>
			/// <returns>The DestinationOrder row that contains the key elements, or null if there is no match.</returns>
			public DestinationOrderRow Find(System.Guid destinationOrderId)
			{
				return ((DestinationOrderRow)(base.Find(new object[] {
							destinationOrderId})));
			}
			
			/// <summary>
			/// Finds a row in the DestinationOrder table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A DestinationOrderKey row that contains the key elements, or null if there is no match.</returns>
			public new DestinationOrderRow Find(object[] key)
			{
				return ((DestinationOrderRow)(base.Find(key)));
			}
		}
		
		/// <summary>
		/// Represents a means of identifying a DestinationOrder row using a set of columns in which all values must be unique.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public class DestinationOrderKeyExternalId0Index : global::Teraque.NonClusteredIndex, IDestinationOrderIndex
		{
			
			/// <summary>
			/// Create a secondary, unique index on the DestinationOrder table.
			/// </summary>
			/// <param name="indexName">The name of the index.</param>
			/// <param name="columns">The columns that describe a unique key.</param>
			public DestinationOrderKeyExternalId0Index(string indexName, System.Data.DataColumn[] columns) : 
					base(indexName, columns)
			{
			}
			
			/// <summary>
			/// Finds a row in the DestinationOrder table containing the key elements.
			/// </summary>
			/// <param name="externalId0">The ExternalId0 element of the key.</param>
			/// <returns>The DestinationOrder row that contains the key elements, or null if there is no match.</returns>
			public DestinationOrderRow Find(string externalId0)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((DestinationOrderRow)(base.Find(new object[] {
							externalId0})));
			}
			
			/// <summary>
			/// Finds a row in the DestinationOrder table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A DestinationOrderKeyExternalId0 row that contains the key elements, or null if there is no match.</returns>
			public new DestinationOrderRow Find(object[] key)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((DestinationOrderRow)(base.Find(key)));
			}
		}
		
		/// <summary>
		/// Represents a means of identifying a Entity row using a set of columns in which all values must be unique.
		/// </summary>
		public interface IEntityIndex
		{
			
			/// <summary>
			/// Finds a row in the Entity table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A DepartmentRow that contains the key elements, or null if there is no match.</returns>
			EntityRow Find(object[] key);
		}
		
		/// <summary>
		/// Represents a means of identifying a Entity row using a set of columns in which all values must be unique.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public class EntityKeyIndex : global::Teraque.ClusteredIndex, IEntityIndex
		{
			
			/// <summary>
			/// Create a primary, unique index on the Entity table.
			/// </summary>
			/// <param name="indexName">The name of the index.</param>
			/// <param name="columns">The columns that describe a unique key.</param>
			public EntityKeyIndex(string indexName, System.Data.DataColumn[] columns) : 
					base(indexName, columns)
			{
			}
			
			/// <summary>
			/// Finds a row in the Entity table containing the key elements.
			/// </summary>
			/// <param name="entityId">The EntityId element of the key.</param>
			/// <returns>The Entity row that contains the key elements, or null if there is no match.</returns>
			public EntityRow Find(System.Guid entityId)
			{
				return ((EntityRow)(base.Find(new object[] {
							entityId})));
			}
			
			/// <summary>
			/// Finds a row in the Entity table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A EntityKey row that contains the key elements, or null if there is no match.</returns>
			public new EntityRow Find(object[] key)
			{
				return ((EntityRow)(base.Find(key)));
			}
		}
		
		/// <summary>
		/// Represents a means of identifying a Entity row using a set of columns in which all values must be unique.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public class EntityKeyExternalId0Index : global::Teraque.NonClusteredIndex, IEntityIndex
		{
			
			/// <summary>
			/// Create a secondary, unique index on the Entity table.
			/// </summary>
			/// <param name="indexName">The name of the index.</param>
			/// <param name="columns">The columns that describe a unique key.</param>
			public EntityKeyExternalId0Index(string indexName, System.Data.DataColumn[] columns) : 
					base(indexName, columns)
			{
			}
			
			/// <summary>
			/// Finds a row in the Entity table containing the key elements.
			/// </summary>
			/// <param name="externalId0">The ExternalId0 element of the key.</param>
			/// <returns>The Entity row that contains the key elements, or null if there is no match.</returns>
			public EntityRow Find(string externalId0)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((EntityRow)(base.Find(new object[] {
							externalId0})));
			}
			
			/// <summary>
			/// Finds a row in the Entity table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A EntityKeyExternalId0 row that contains the key elements, or null if there is no match.</returns>
			public new EntityRow Find(object[] key)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((EntityRow)(base.Find(key)));
			}
		}
		
		/// <summary>
		/// Represents a means of identifying a Entity row using a set of columns in which all values must be unique.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public class EntityKeyExternalId1Index : global::Teraque.NonClusteredIndex, IEntityIndex
		{
			
			/// <summary>
			/// Create a secondary, unique index on the Entity table.
			/// </summary>
			/// <param name="indexName">The name of the index.</param>
			/// <param name="columns">The columns that describe a unique key.</param>
			public EntityKeyExternalId1Index(string indexName, System.Data.DataColumn[] columns) : 
					base(indexName, columns)
			{
			}
			
			/// <summary>
			/// Finds a row in the Entity table containing the key elements.
			/// </summary>
			/// <param name="externalId1">The ExternalId1 element of the key.</param>
			/// <returns>The Entity row that contains the key elements, or null if there is no match.</returns>
			public EntityRow Find(string externalId1)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((EntityRow)(base.Find(new object[] {
							externalId1})));
			}
			
			/// <summary>
			/// Finds a row in the Entity table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A EntityKeyExternalId1 row that contains the key elements, or null if there is no match.</returns>
			public new EntityRow Find(object[] key)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((EntityRow)(base.Find(key)));
			}
		}
		
		/// <summary>
		/// Represents a means of identifying a Entity row using a set of columns in which all values must be unique.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public class EntityKeyExternalId2Index : global::Teraque.NonClusteredIndex, IEntityIndex
		{
			
			/// <summary>
			/// Create a secondary, unique index on the Entity table.
			/// </summary>
			/// <param name="indexName">The name of the index.</param>
			/// <param name="columns">The columns that describe a unique key.</param>
			public EntityKeyExternalId2Index(string indexName, System.Data.DataColumn[] columns) : 
					base(indexName, columns)
			{
			}
			
			/// <summary>
			/// Finds a row in the Entity table containing the key elements.
			/// </summary>
			/// <param name="externalId2">The ExternalId2 element of the key.</param>
			/// <returns>The Entity row that contains the key elements, or null if there is no match.</returns>
			public EntityRow Find(string externalId2)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((EntityRow)(base.Find(new object[] {
							externalId2})));
			}
			
			/// <summary>
			/// Finds a row in the Entity table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A EntityKeyExternalId2 row that contains the key elements, or null if there is no match.</returns>
			public new EntityRow Find(object[] key)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((EntityRow)(base.Find(key)));
			}
		}
		
		/// <summary>
		/// Represents a means of identifying a Entity row using a set of columns in which all values must be unique.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public class EntityKeyExternalId3Index : global::Teraque.NonClusteredIndex, IEntityIndex
		{
			
			/// <summary>
			/// Create a secondary, unique index on the Entity table.
			/// </summary>
			/// <param name="indexName">The name of the index.</param>
			/// <param name="columns">The columns that describe a unique key.</param>
			public EntityKeyExternalId3Index(string indexName, System.Data.DataColumn[] columns) : 
					base(indexName, columns)
			{
			}
			
			/// <summary>
			/// Finds a row in the Entity table containing the key elements.
			/// </summary>
			/// <param name="externalId3">The ExternalId3 element of the key.</param>
			/// <returns>The Entity row that contains the key elements, or null if there is no match.</returns>
			public EntityRow Find(string externalId3)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((EntityRow)(base.Find(new object[] {
							externalId3})));
			}
			
			/// <summary>
			/// Finds a row in the Entity table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A EntityKeyExternalId3 row that contains the key elements, or null if there is no match.</returns>
			public new EntityRow Find(object[] key)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((EntityRow)(base.Find(key)));
			}
		}
		
		/// <summary>
		/// Represents a means of identifying a Entity row using a set of columns in which all values must be unique.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public class EntityKeyExternalId4Index : global::Teraque.NonClusteredIndex, IEntityIndex
		{
			
			/// <summary>
			/// Create a secondary, unique index on the Entity table.
			/// </summary>
			/// <param name="indexName">The name of the index.</param>
			/// <param name="columns">The columns that describe a unique key.</param>
			public EntityKeyExternalId4Index(string indexName, System.Data.DataColumn[] columns) : 
					base(indexName, columns)
			{
			}
			
			/// <summary>
			/// Finds a row in the Entity table containing the key elements.
			/// </summary>
			/// <param name="externalId4">The ExternalId4 element of the key.</param>
			/// <returns>The Entity row that contains the key elements, or null if there is no match.</returns>
			public EntityRow Find(string externalId4)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((EntityRow)(base.Find(new object[] {
							externalId4})));
			}
			
			/// <summary>
			/// Finds a row in the Entity table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A EntityKeyExternalId4 row that contains the key elements, or null if there is no match.</returns>
			public new EntityRow Find(object[] key)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((EntityRow)(base.Find(key)));
			}
		}
		
		/// <summary>
		/// Represents a means of identifying a Entity row using a set of columns in which all values must be unique.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public class EntityKeyExternalId5Index : global::Teraque.NonClusteredIndex, IEntityIndex
		{
			
			/// <summary>
			/// Create a secondary, unique index on the Entity table.
			/// </summary>
			/// <param name="indexName">The name of the index.</param>
			/// <param name="columns">The columns that describe a unique key.</param>
			public EntityKeyExternalId5Index(string indexName, System.Data.DataColumn[] columns) : 
					base(indexName, columns)
			{
			}
			
			/// <summary>
			/// Finds a row in the Entity table containing the key elements.
			/// </summary>
			/// <param name="externalId5">The ExternalId5 element of the key.</param>
			/// <returns>The Entity row that contains the key elements, or null if there is no match.</returns>
			public EntityRow Find(string externalId5)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((EntityRow)(base.Find(new object[] {
							externalId5})));
			}
			
			/// <summary>
			/// Finds a row in the Entity table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A EntityKeyExternalId5 row that contains the key elements, or null if there is no match.</returns>
			public new EntityRow Find(object[] key)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((EntityRow)(base.Find(key)));
			}
		}
		
		/// <summary>
		/// Represents a means of identifying a Entity row using a set of columns in which all values must be unique.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public class EntityKeyExternalId6Index : global::Teraque.NonClusteredIndex, IEntityIndex
		{
			
			/// <summary>
			/// Create a secondary, unique index on the Entity table.
			/// </summary>
			/// <param name="indexName">The name of the index.</param>
			/// <param name="columns">The columns that describe a unique key.</param>
			public EntityKeyExternalId6Index(string indexName, System.Data.DataColumn[] columns) : 
					base(indexName, columns)
			{
			}
			
			/// <summary>
			/// Finds a row in the Entity table containing the key elements.
			/// </summary>
			/// <param name="externalId6">The ExternalId6 element of the key.</param>
			/// <returns>The Entity row that contains the key elements, or null if there is no match.</returns>
			public EntityRow Find(string externalId6)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((EntityRow)(base.Find(new object[] {
							externalId6})));
			}
			
			/// <summary>
			/// Finds a row in the Entity table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A EntityKeyExternalId6 row that contains the key elements, or null if there is no match.</returns>
			public new EntityRow Find(object[] key)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((EntityRow)(base.Find(key)));
			}
		}
		
		/// <summary>
		/// Represents a means of identifying a Entity row using a set of columns in which all values must be unique.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public class EntityKeyExternalId7Index : global::Teraque.NonClusteredIndex, IEntityIndex
		{
			
			/// <summary>
			/// Create a secondary, unique index on the Entity table.
			/// </summary>
			/// <param name="indexName">The name of the index.</param>
			/// <param name="columns">The columns that describe a unique key.</param>
			public EntityKeyExternalId7Index(string indexName, System.Data.DataColumn[] columns) : 
					base(indexName, columns)
			{
			}
			
			/// <summary>
			/// Finds a row in the Entity table containing the key elements.
			/// </summary>
			/// <param name="externalId7">The ExternalId7 element of the key.</param>
			/// <returns>The Entity row that contains the key elements, or null if there is no match.</returns>
			public EntityRow Find(string externalId7)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((EntityRow)(base.Find(new object[] {
							externalId7})));
			}
			
			/// <summary>
			/// Finds a row in the Entity table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A EntityKeyExternalId7 row that contains the key elements, or null if there is no match.</returns>
			public new EntityRow Find(object[] key)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((EntityRow)(base.Find(key)));
			}
		}
		
		/// <summary>
		/// Represents a means of identifying a EntityTree row using a set of columns in which all values must be unique.
		/// </summary>
		public interface IEntityTreeIndex
		{
			
			/// <summary>
			/// Finds a row in the EntityTree table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A DepartmentRow that contains the key elements, or null if there is no match.</returns>
			EntityTreeRow Find(object[] key);
		}
		
		/// <summary>
		/// Represents a means of identifying a EntityTree row using a set of columns in which all values must be unique.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public class EntityTreeKeyIndex : global::Teraque.ClusteredIndex, IEntityTreeIndex
		{
			
			/// <summary>
			/// Create a primary, unique index on the EntityTree table.
			/// </summary>
			/// <param name="indexName">The name of the index.</param>
			/// <param name="columns">The columns that describe a unique key.</param>
			public EntityTreeKeyIndex(string indexName, System.Data.DataColumn[] columns) : 
					base(indexName, columns)
			{
			}
			
			/// <summary>
			/// Finds a row in the EntityTree table containing the key elements.
			/// </summary>
			/// <param name="entityTreeId">The EntityTreeId element of the key.</param>
			/// <returns>The EntityTree row that contains the key elements, or null if there is no match.</returns>
			public EntityTreeRow Find(System.Guid entityTreeId)
			{
				return ((EntityTreeRow)(base.Find(new object[] {
							entityTreeId})));
			}
			
			/// <summary>
			/// Finds a row in the EntityTree table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A EntityTreeKey row that contains the key elements, or null if there is no match.</returns>
			public new EntityTreeRow Find(object[] key)
			{
				return ((EntityTreeRow)(base.Find(key)));
			}
		}
		
		/// <summary>
		/// Represents a means of identifying a EntityTree row using a set of columns in which all values must be unique.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public class EntityTreeKeyChildIdParentIdIndex : global::Teraque.NonClusteredIndex, IEntityTreeIndex
		{
			
			/// <summary>
			/// Create a secondary, unique index on the EntityTree table.
			/// </summary>
			/// <param name="indexName">The name of the index.</param>
			/// <param name="columns">The columns that describe a unique key.</param>
			public EntityTreeKeyChildIdParentIdIndex(string indexName, System.Data.DataColumn[] columns) : 
					base(indexName, columns)
			{
			}
			
			/// <summary>
			/// Finds a row in the EntityTree table containing the key elements.
			/// </summary>
			/// <param name="childId">The ChildId element of the key.</param>
			/// <param name="parentId">The ParentId element of the key.</param>
			/// <returns>The EntityTree row that contains the key elements, or null if there is no match.</returns>
			public EntityTreeRow Find(System.Guid childId, System.Guid parentId)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((EntityTreeRow)(base.Find(new object[] {
							childId,
							parentId})));
			}
			
			/// <summary>
			/// Finds a row in the EntityTree table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A EntityTreeKeyChildIdParentId row that contains the key elements, or null if there is no match.</returns>
			public new EntityTreeRow Find(object[] key)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((EntityTreeRow)(base.Find(key)));
			}
		}
		
		/// <summary>
		/// Represents a means of identifying a EntityTree row using a set of columns in which all values must be unique.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public class EntityTreeKeyExternalId0Index : global::Teraque.NonClusteredIndex, IEntityTreeIndex
		{
			
			/// <summary>
			/// Create a secondary, unique index on the EntityTree table.
			/// </summary>
			/// <param name="indexName">The name of the index.</param>
			/// <param name="columns">The columns that describe a unique key.</param>
			public EntityTreeKeyExternalId0Index(string indexName, System.Data.DataColumn[] columns) : 
					base(indexName, columns)
			{
			}
			
			/// <summary>
			/// Finds a row in the EntityTree table containing the key elements.
			/// </summary>
			/// <param name="externalId0">The ExternalId0 element of the key.</param>
			/// <returns>The EntityTree row that contains the key elements, or null if there is no match.</returns>
			public EntityTreeRow Find(string externalId0)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((EntityTreeRow)(base.Find(new object[] {
							externalId0})));
			}
			
			/// <summary>
			/// Finds a row in the EntityTree table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A EntityTreeKeyExternalId0 row that contains the key elements, or null if there is no match.</returns>
			public new EntityTreeRow Find(object[] key)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((EntityTreeRow)(base.Find(key)));
			}
		}
		
		/// <summary>
		/// Represents a means of identifying a Equity row using a set of columns in which all values must be unique.
		/// </summary>
		public interface IEquityIndex
		{
			
			/// <summary>
			/// Finds a row in the Equity table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A DepartmentRow that contains the key elements, or null if there is no match.</returns>
			EquityRow Find(object[] key);
		}
		
		/// <summary>
		/// Represents a means of identifying a Equity row using a set of columns in which all values must be unique.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public class EquityKeyIndex : global::Teraque.ClusteredIndex, IEquityIndex
		{
			
			/// <summary>
			/// Create a primary, unique index on the Equity table.
			/// </summary>
			/// <param name="indexName">The name of the index.</param>
			/// <param name="columns">The columns that describe a unique key.</param>
			public EquityKeyIndex(string indexName, System.Data.DataColumn[] columns) : 
					base(indexName, columns)
			{
			}
			
			/// <summary>
			/// Finds a row in the Equity table containing the key elements.
			/// </summary>
			/// <param name="equityId">The EquityId element of the key.</param>
			/// <returns>The Equity row that contains the key elements, or null if there is no match.</returns>
			public EquityRow Find(System.Guid equityId)
			{
				return ((EquityRow)(base.Find(new object[] {
							equityId})));
			}
			
			/// <summary>
			/// Finds a row in the Equity table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A EquityKey row that contains the key elements, or null if there is no match.</returns>
			public new EquityRow Find(object[] key)
			{
				return ((EquityRow)(base.Find(key)));
			}
		}
		
		/// <summary>
		/// Represents a means of identifying a Exchange row using a set of columns in which all values must be unique.
		/// </summary>
		public interface IExchangeIndex
		{
			
			/// <summary>
			/// Finds a row in the Exchange table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A DepartmentRow that contains the key elements, or null if there is no match.</returns>
			ExchangeRow Find(object[] key);
		}
		
		/// <summary>
		/// Represents a means of identifying a Exchange row using a set of columns in which all values must be unique.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public class ExchangeKeyIndex : global::Teraque.ClusteredIndex, IExchangeIndex
		{
			
			/// <summary>
			/// Create a primary, unique index on the Exchange table.
			/// </summary>
			/// <param name="indexName">The name of the index.</param>
			/// <param name="columns">The columns that describe a unique key.</param>
			public ExchangeKeyIndex(string indexName, System.Data.DataColumn[] columns) : 
					base(indexName, columns)
			{
			}
			
			/// <summary>
			/// Finds a row in the Exchange table containing the key elements.
			/// </summary>
			/// <param name="exchangeId">The ExchangeId element of the key.</param>
			/// <returns>The Exchange row that contains the key elements, or null if there is no match.</returns>
			public ExchangeRow Find(System.Guid exchangeId)
			{
				return ((ExchangeRow)(base.Find(new object[] {
							exchangeId})));
			}
			
			/// <summary>
			/// Finds a row in the Exchange table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A ExchangeKey row that contains the key elements, or null if there is no match.</returns>
			public new ExchangeRow Find(object[] key)
			{
				return ((ExchangeRow)(base.Find(key)));
			}
		}
		
		/// <summary>
		/// Represents a means of identifying a Exchange row using a set of columns in which all values must be unique.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public class ExchangeKeyExternalId0Index : global::Teraque.NonClusteredIndex, IExchangeIndex
		{
			
			/// <summary>
			/// Create a secondary, unique index on the Exchange table.
			/// </summary>
			/// <param name="indexName">The name of the index.</param>
			/// <param name="columns">The columns that describe a unique key.</param>
			public ExchangeKeyExternalId0Index(string indexName, System.Data.DataColumn[] columns) : 
					base(indexName, columns)
			{
			}
			
			/// <summary>
			/// Finds a row in the Exchange table containing the key elements.
			/// </summary>
			/// <param name="externalId0">The ExternalId0 element of the key.</param>
			/// <returns>The Exchange row that contains the key elements, or null if there is no match.</returns>
			public ExchangeRow Find(string externalId0)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((ExchangeRow)(base.Find(new object[] {
							externalId0})));
			}
			
			/// <summary>
			/// Finds a row in the Exchange table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A ExchangeKeyExternalId0 row that contains the key elements, or null if there is no match.</returns>
			public new ExchangeRow Find(object[] key)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((ExchangeRow)(base.Find(key)));
			}
		}
		
		/// <summary>
		/// Represents a means of identifying a Exchange row using a set of columns in which all values must be unique.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public class ExchangeKeyExternalId1Index : global::Teraque.NonClusteredIndex, IExchangeIndex
		{
			
			/// <summary>
			/// Create a secondary, unique index on the Exchange table.
			/// </summary>
			/// <param name="indexName">The name of the index.</param>
			/// <param name="columns">The columns that describe a unique key.</param>
			public ExchangeKeyExternalId1Index(string indexName, System.Data.DataColumn[] columns) : 
					base(indexName, columns)
			{
			}
			
			/// <summary>
			/// Finds a row in the Exchange table containing the key elements.
			/// </summary>
			/// <param name="externalId1">The ExternalId1 element of the key.</param>
			/// <returns>The Exchange row that contains the key elements, or null if there is no match.</returns>
			public ExchangeRow Find(string externalId1)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((ExchangeRow)(base.Find(new object[] {
							externalId1})));
			}
			
			/// <summary>
			/// Finds a row in the Exchange table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A ExchangeKeyExternalId1 row that contains the key elements, or null if there is no match.</returns>
			public new ExchangeRow Find(object[] key)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((ExchangeRow)(base.Find(key)));
			}
		}
		
		/// <summary>
		/// Represents a means of identifying a Exchange row using a set of columns in which all values must be unique.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public class ExchangeKeyExternalId2Index : global::Teraque.NonClusteredIndex, IExchangeIndex
		{
			
			/// <summary>
			/// Create a secondary, unique index on the Exchange table.
			/// </summary>
			/// <param name="indexName">The name of the index.</param>
			/// <param name="columns">The columns that describe a unique key.</param>
			public ExchangeKeyExternalId2Index(string indexName, System.Data.DataColumn[] columns) : 
					base(indexName, columns)
			{
			}
			
			/// <summary>
			/// Finds a row in the Exchange table containing the key elements.
			/// </summary>
			/// <param name="externalId2">The ExternalId2 element of the key.</param>
			/// <returns>The Exchange row that contains the key elements, or null if there is no match.</returns>
			public ExchangeRow Find(string externalId2)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((ExchangeRow)(base.Find(new object[] {
							externalId2})));
			}
			
			/// <summary>
			/// Finds a row in the Exchange table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A ExchangeKeyExternalId2 row that contains the key elements, or null if there is no match.</returns>
			public new ExchangeRow Find(object[] key)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((ExchangeRow)(base.Find(key)));
			}
		}
		
		/// <summary>
		/// Represents a means of identifying a Exchange row using a set of columns in which all values must be unique.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public class ExchangeKeyExternalId3Index : global::Teraque.NonClusteredIndex, IExchangeIndex
		{
			
			/// <summary>
			/// Create a secondary, unique index on the Exchange table.
			/// </summary>
			/// <param name="indexName">The name of the index.</param>
			/// <param name="columns">The columns that describe a unique key.</param>
			public ExchangeKeyExternalId3Index(string indexName, System.Data.DataColumn[] columns) : 
					base(indexName, columns)
			{
			}
			
			/// <summary>
			/// Finds a row in the Exchange table containing the key elements.
			/// </summary>
			/// <param name="externalId3">The ExternalId3 element of the key.</param>
			/// <returns>The Exchange row that contains the key elements, or null if there is no match.</returns>
			public ExchangeRow Find(string externalId3)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((ExchangeRow)(base.Find(new object[] {
							externalId3})));
			}
			
			/// <summary>
			/// Finds a row in the Exchange table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A ExchangeKeyExternalId3 row that contains the key elements, or null if there is no match.</returns>
			public new ExchangeRow Find(object[] key)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((ExchangeRow)(base.Find(key)));
			}
		}
		
		/// <summary>
		/// Represents a means of identifying a Execution row using a set of columns in which all values must be unique.
		/// </summary>
		public interface IExecutionIndex
		{
			
			/// <summary>
			/// Finds a row in the Execution table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A DepartmentRow that contains the key elements, or null if there is no match.</returns>
			ExecutionRow Find(object[] key);
		}
		
		/// <summary>
		/// Represents a means of identifying a Execution row using a set of columns in which all values must be unique.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public class ExecutionKeyIndex : global::Teraque.ClusteredIndex, IExecutionIndex
		{
			
			/// <summary>
			/// Create a primary, unique index on the Execution table.
			/// </summary>
			/// <param name="indexName">The name of the index.</param>
			/// <param name="columns">The columns that describe a unique key.</param>
			public ExecutionKeyIndex(string indexName, System.Data.DataColumn[] columns) : 
					base(indexName, columns)
			{
			}
			
			/// <summary>
			/// Finds a row in the Execution table containing the key elements.
			/// </summary>
			/// <param name="executionId">The ExecutionId element of the key.</param>
			/// <returns>The Execution row that contains the key elements, or null if there is no match.</returns>
			public ExecutionRow Find(System.Guid executionId)
			{
				return ((ExecutionRow)(base.Find(new object[] {
							executionId})));
			}
			
			/// <summary>
			/// Finds a row in the Execution table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A ExecutionKey row that contains the key elements, or null if there is no match.</returns>
			public new ExecutionRow Find(object[] key)
			{
				return ((ExecutionRow)(base.Find(key)));
			}
		}
		
		/// <summary>
		/// Represents a means of identifying a Execution row using a set of columns in which all values must be unique.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public class ExecutionKeyExternalId0Index : global::Teraque.NonClusteredIndex, IExecutionIndex
		{
			
			/// <summary>
			/// Create a secondary, unique index on the Execution table.
			/// </summary>
			/// <param name="indexName">The name of the index.</param>
			/// <param name="columns">The columns that describe a unique key.</param>
			public ExecutionKeyExternalId0Index(string indexName, System.Data.DataColumn[] columns) : 
					base(indexName, columns)
			{
			}
			
			/// <summary>
			/// Finds a row in the Execution table containing the key elements.
			/// </summary>
			/// <param name="externalId0">The ExternalId0 element of the key.</param>
			/// <returns>The Execution row that contains the key elements, or null if there is no match.</returns>
			public ExecutionRow Find(string externalId0)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((ExecutionRow)(base.Find(new object[] {
							externalId0})));
			}
			
			/// <summary>
			/// Finds a row in the Execution table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A ExecutionKeyExternalId0 row that contains the key elements, or null if there is no match.</returns>
			public new ExecutionRow Find(object[] key)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((ExecutionRow)(base.Find(key)));
			}
		}
		
		/// <summary>
		/// Represents a means of identifying a Folder row using a set of columns in which all values must be unique.
		/// </summary>
		public interface IFolderIndex
		{
			
			/// <summary>
			/// Finds a row in the Folder table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A DepartmentRow that contains the key elements, or null if there is no match.</returns>
			FolderRow Find(object[] key);
		}
		
		/// <summary>
		/// Represents a means of identifying a Folder row using a set of columns in which all values must be unique.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public class FolderKeyIndex : global::Teraque.ClusteredIndex, IFolderIndex
		{
			
			/// <summary>
			/// Create a primary, unique index on the Folder table.
			/// </summary>
			/// <param name="indexName">The name of the index.</param>
			/// <param name="columns">The columns that describe a unique key.</param>
			public FolderKeyIndex(string indexName, System.Data.DataColumn[] columns) : 
					base(indexName, columns)
			{
			}
			
			/// <summary>
			/// Finds a row in the Folder table containing the key elements.
			/// </summary>
			/// <param name="folderId">The FolderId element of the key.</param>
			/// <returns>The Folder row that contains the key elements, or null if there is no match.</returns>
			public FolderRow Find(System.Guid folderId)
			{
				return ((FolderRow)(base.Find(new object[] {
							folderId})));
			}
			
			/// <summary>
			/// Finds a row in the Folder table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A FolderKey row that contains the key elements, or null if there is no match.</returns>
			public new FolderRow Find(object[] key)
			{
				return ((FolderRow)(base.Find(key)));
			}
		}
		
		/// <summary>
		/// Represents a means of identifying a GroupAccount row using a set of columns in which all values must be unique.
		/// </summary>
		public interface IGroupAccountIndex
		{
			
			/// <summary>
			/// Finds a row in the GroupAccount table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A DepartmentRow that contains the key elements, or null if there is no match.</returns>
			GroupAccountRow Find(object[] key);
		}
		
		/// <summary>
		/// Represents a means of identifying a GroupAccount row using a set of columns in which all values must be unique.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public class GroupAccountKeyIndex : global::Teraque.ClusteredIndex, IGroupAccountIndex
		{
			
			/// <summary>
			/// Create a primary, unique index on the GroupAccount table.
			/// </summary>
			/// <param name="indexName">The name of the index.</param>
			/// <param name="columns">The columns that describe a unique key.</param>
			public GroupAccountKeyIndex(string indexName, System.Data.DataColumn[] columns) : 
					base(indexName, columns)
			{
			}
			
			/// <summary>
			/// Finds a row in the GroupAccount table containing the key elements.
			/// </summary>
			/// <param name="groupAccountId">The GroupAccountId element of the key.</param>
			/// <returns>The GroupAccount row that contains the key elements, or null if there is no match.</returns>
			public GroupAccountRow Find(System.Guid groupAccountId)
			{
				return ((GroupAccountRow)(base.Find(new object[] {
							groupAccountId})));
			}
			
			/// <summary>
			/// Finds a row in the GroupAccount table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A GroupAccountKey row that contains the key elements, or null if there is no match.</returns>
			public new GroupAccountRow Find(object[] key)
			{
				return ((GroupAccountRow)(base.Find(key)));
			}
		}
		
		/// <summary>
		/// Represents a means of identifying a Holiday row using a set of columns in which all values must be unique.
		/// </summary>
		public interface IHolidayIndex
		{
			
			/// <summary>
			/// Finds a row in the Holiday table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A DepartmentRow that contains the key elements, or null if there is no match.</returns>
			HolidayRow Find(object[] key);
		}
		
		/// <summary>
		/// Represents a means of identifying a Holiday row using a set of columns in which all values must be unique.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public class HolidayKeyIndex : global::Teraque.ClusteredIndex, IHolidayIndex
		{
			
			/// <summary>
			/// Create a primary, unique index on the Holiday table.
			/// </summary>
			/// <param name="indexName">The name of the index.</param>
			/// <param name="columns">The columns that describe a unique key.</param>
			public HolidayKeyIndex(string indexName, System.Data.DataColumn[] columns) : 
					base(indexName, columns)
			{
			}
			
			/// <summary>
			/// Finds a row in the Holiday table containing the key elements.
			/// </summary>
			/// <param name="holidayId">The HolidayId element of the key.</param>
			/// <returns>The Holiday row that contains the key elements, or null if there is no match.</returns>
			public HolidayRow Find(System.Guid holidayId)
			{
				return ((HolidayRow)(base.Find(new object[] {
							holidayId})));
			}
			
			/// <summary>
			/// Finds a row in the Holiday table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A HolidayKey row that contains the key elements, or null if there is no match.</returns>
			public new HolidayRow Find(object[] key)
			{
				return ((HolidayRow)(base.Find(key)));
			}
		}
		
		/// <summary>
		/// Represents a means of identifying a Holiday row using a set of columns in which all values must be unique.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public class HolidayKeyExternalId0Index : global::Teraque.NonClusteredIndex, IHolidayIndex
		{
			
			/// <summary>
			/// Create a secondary, unique index on the Holiday table.
			/// </summary>
			/// <param name="indexName">The name of the index.</param>
			/// <param name="columns">The columns that describe a unique key.</param>
			public HolidayKeyExternalId0Index(string indexName, System.Data.DataColumn[] columns) : 
					base(indexName, columns)
			{
			}
			
			/// <summary>
			/// Finds a row in the Holiday table containing the key elements.
			/// </summary>
			/// <param name="externalId0">The ExternalId0 element of the key.</param>
			/// <returns>The Holiday row that contains the key elements, or null if there is no match.</returns>
			public HolidayRow Find(string externalId0)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((HolidayRow)(base.Find(new object[] {
							externalId0})));
			}
			
			/// <summary>
			/// Finds a row in the Holiday table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A HolidayKeyExternalId0 row that contains the key elements, or null if there is no match.</returns>
			public new HolidayRow Find(object[] key)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((HolidayRow)(base.Find(key)));
			}
		}
		
		/// <summary>
		/// Represents a means of identifying a Holiday row using a set of columns in which all values must be unique.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public class HolidayKeyExternalId1Index : global::Teraque.NonClusteredIndex, IHolidayIndex
		{
			
			/// <summary>
			/// Create a secondary, unique index on the Holiday table.
			/// </summary>
			/// <param name="indexName">The name of the index.</param>
			/// <param name="columns">The columns that describe a unique key.</param>
			public HolidayKeyExternalId1Index(string indexName, System.Data.DataColumn[] columns) : 
					base(indexName, columns)
			{
			}
			
			/// <summary>
			/// Finds a row in the Holiday table containing the key elements.
			/// </summary>
			/// <param name="externalId1">The ExternalId1 element of the key.</param>
			/// <returns>The Holiday row that contains the key elements, or null if there is no match.</returns>
			public HolidayRow Find(string externalId1)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((HolidayRow)(base.Find(new object[] {
							externalId1})));
			}
			
			/// <summary>
			/// Finds a row in the Holiday table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A HolidayKeyExternalId1 row that contains the key elements, or null if there is no match.</returns>
			public new HolidayRow Find(object[] key)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((HolidayRow)(base.Find(key)));
			}
		}
		
		/// <summary>
		/// Represents a means of identifying a HolidayType row using a set of columns in which all values must be unique.
		/// </summary>
		public interface IHolidayTypeIndex
		{
			
			/// <summary>
			/// Finds a row in the HolidayType table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A DepartmentRow that contains the key elements, or null if there is no match.</returns>
			HolidayTypeRow Find(object[] key);
		}
		
		/// <summary>
		/// Represents a means of identifying a HolidayType row using a set of columns in which all values must be unique.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public class HolidayTypeKeyIndex : global::Teraque.ClusteredIndex, IHolidayTypeIndex
		{
			
			/// <summary>
			/// Create a primary, unique index on the HolidayType table.
			/// </summary>
			/// <param name="indexName">The name of the index.</param>
			/// <param name="columns">The columns that describe a unique key.</param>
			public HolidayTypeKeyIndex(string indexName, System.Data.DataColumn[] columns) : 
					base(indexName, columns)
			{
			}
			
			/// <summary>
			/// Finds a row in the HolidayType table containing the key elements.
			/// </summary>
			/// <param name="holidayTypeCode">The HolidayTypeCode element of the key.</param>
			/// <returns>The HolidayType row that contains the key elements, or null if there is no match.</returns>
			public HolidayTypeRow Find(Teraque.HolidayTypeCode holidayTypeCode)
			{
				return ((HolidayTypeRow)(base.Find(new object[] {
							holidayTypeCode})));
			}
			
			/// <summary>
			/// Finds a row in the HolidayType table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A HolidayTypeKey row that contains the key elements, or null if there is no match.</returns>
			public new HolidayTypeRow Find(object[] key)
			{
				return ((HolidayTypeRow)(base.Find(key)));
			}
		}
		
		/// <summary>
		/// Represents a means of identifying a HolidayType row using a set of columns in which all values must be unique.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public class HolidayTypeKeyExternalId0Index : global::Teraque.NonClusteredIndex, IHolidayTypeIndex
		{
			
			/// <summary>
			/// Create a secondary, unique index on the HolidayType table.
			/// </summary>
			/// <param name="indexName">The name of the index.</param>
			/// <param name="columns">The columns that describe a unique key.</param>
			public HolidayTypeKeyExternalId0Index(string indexName, System.Data.DataColumn[] columns) : 
					base(indexName, columns)
			{
			}
			
			/// <summary>
			/// Finds a row in the HolidayType table containing the key elements.
			/// </summary>
			/// <param name="externalId0">The ExternalId0 element of the key.</param>
			/// <returns>The HolidayType row that contains the key elements, or null if there is no match.</returns>
			public HolidayTypeRow Find(string externalId0)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((HolidayTypeRow)(base.Find(new object[] {
							externalId0})));
			}
			
			/// <summary>
			/// Finds a row in the HolidayType table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A HolidayTypeKeyExternalId0 row that contains the key elements, or null if there is no match.</returns>
			public new HolidayTypeRow Find(object[] key)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((HolidayTypeRow)(base.Find(key)));
			}
		}
		
		/// <summary>
		/// Represents a means of identifying a Image row using a set of columns in which all values must be unique.
		/// </summary>
		public interface IImageIndex
		{
			
			/// <summary>
			/// Finds a row in the Image table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A DepartmentRow that contains the key elements, or null if there is no match.</returns>
			ImageRow Find(object[] key);
		}
		
		/// <summary>
		/// Represents a means of identifying a Image row using a set of columns in which all values must be unique.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public class ImageKeyIndex : global::Teraque.ClusteredIndex, IImageIndex
		{
			
			/// <summary>
			/// Create a primary, unique index on the Image table.
			/// </summary>
			/// <param name="indexName">The name of the index.</param>
			/// <param name="columns">The columns that describe a unique key.</param>
			public ImageKeyIndex(string indexName, System.Data.DataColumn[] columns) : 
					base(indexName, columns)
			{
			}
			
			/// <summary>
			/// Finds a row in the Image table containing the key elements.
			/// </summary>
			/// <param name="imageId">The ImageId element of the key.</param>
			/// <returns>The Image row that contains the key elements, or null if there is no match.</returns>
			public ImageRow Find(System.Guid imageId)
			{
				return ((ImageRow)(base.Find(new object[] {
							imageId})));
			}
			
			/// <summary>
			/// Finds a row in the Image table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A ImageKey row that contains the key elements, or null if there is no match.</returns>
			public new ImageRow Find(object[] key)
			{
				return ((ImageRow)(base.Find(key)));
			}
		}
		
		/// <summary>
		/// Represents a means of identifying a Image row using a set of columns in which all values must be unique.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public class ImageKeyExternalId0Index : global::Teraque.NonClusteredIndex, IImageIndex
		{
			
			/// <summary>
			/// Create a secondary, unique index on the Image table.
			/// </summary>
			/// <param name="indexName">The name of the index.</param>
			/// <param name="columns">The columns that describe a unique key.</param>
			public ImageKeyExternalId0Index(string indexName, System.Data.DataColumn[] columns) : 
					base(indexName, columns)
			{
			}
			
			/// <summary>
			/// Finds a row in the Image table containing the key elements.
			/// </summary>
			/// <param name="externalId0">The ExternalId0 element of the key.</param>
			/// <returns>The Image row that contains the key elements, or null if there is no match.</returns>
			public ImageRow Find(string externalId0)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((ImageRow)(base.Find(new object[] {
							externalId0})));
			}
			
			/// <summary>
			/// Finds a row in the Image table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A ImageKeyExternalId0 row that contains the key elements, or null if there is no match.</returns>
			public new ImageRow Find(object[] key)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((ImageRow)(base.Find(key)));
			}
		}
		
		/// <summary>
		/// Represents a means of identifying a Industry row using a set of columns in which all values must be unique.
		/// </summary>
		public interface IIndustryIndex
		{
			
			/// <summary>
			/// Finds a row in the Industry table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A DepartmentRow that contains the key elements, or null if there is no match.</returns>
			IndustryRow Find(object[] key);
		}
		
		/// <summary>
		/// Represents a means of identifying a Industry row using a set of columns in which all values must be unique.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public class IndustryKeyIndex : global::Teraque.ClusteredIndex, IIndustryIndex
		{
			
			/// <summary>
			/// Create a primary, unique index on the Industry table.
			/// </summary>
			/// <param name="indexName">The name of the index.</param>
			/// <param name="columns">The columns that describe a unique key.</param>
			public IndustryKeyIndex(string indexName, System.Data.DataColumn[] columns) : 
					base(indexName, columns)
			{
			}
			
			/// <summary>
			/// Finds a row in the Industry table containing the key elements.
			/// </summary>
			/// <param name="industryId">The IndustryId element of the key.</param>
			/// <returns>The Industry row that contains the key elements, or null if there is no match.</returns>
			public IndustryRow Find(System.Guid industryId)
			{
				return ((IndustryRow)(base.Find(new object[] {
							industryId})));
			}
			
			/// <summary>
			/// Finds a row in the Industry table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A IndustryKey row that contains the key elements, or null if there is no match.</returns>
			public new IndustryRow Find(object[] key)
			{
				return ((IndustryRow)(base.Find(key)));
			}
		}
		
		/// <summary>
		/// Represents a means of identifying a Industry row using a set of columns in which all values must be unique.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public class IndustryKeyExternalId0Index : global::Teraque.NonClusteredIndex, IIndustryIndex
		{
			
			/// <summary>
			/// Create a secondary, unique index on the Industry table.
			/// </summary>
			/// <param name="indexName">The name of the index.</param>
			/// <param name="columns">The columns that describe a unique key.</param>
			public IndustryKeyExternalId0Index(string indexName, System.Data.DataColumn[] columns) : 
					base(indexName, columns)
			{
			}
			
			/// <summary>
			/// Finds a row in the Industry table containing the key elements.
			/// </summary>
			/// <param name="externalId0">The ExternalId0 element of the key.</param>
			/// <returns>The Industry row that contains the key elements, or null if there is no match.</returns>
			public IndustryRow Find(string externalId0)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((IndustryRow)(base.Find(new object[] {
							externalId0})));
			}
			
			/// <summary>
			/// Finds a row in the Industry table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A IndustryKeyExternalId0 row that contains the key elements, or null if there is no match.</returns>
			public new IndustryRow Find(object[] key)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((IndustryRow)(base.Find(key)));
			}
		}
		
		/// <summary>
		/// Represents a means of identifying a Industry row using a set of columns in which all values must be unique.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public class IndustryKeyExternalId1Index : global::Teraque.NonClusteredIndex, IIndustryIndex
		{
			
			/// <summary>
			/// Create a secondary, unique index on the Industry table.
			/// </summary>
			/// <param name="indexName">The name of the index.</param>
			/// <param name="columns">The columns that describe a unique key.</param>
			public IndustryKeyExternalId1Index(string indexName, System.Data.DataColumn[] columns) : 
					base(indexName, columns)
			{
			}
			
			/// <summary>
			/// Finds a row in the Industry table containing the key elements.
			/// </summary>
			/// <param name="externalId1">The ExternalId1 element of the key.</param>
			/// <returns>The Industry row that contains the key elements, or null if there is no match.</returns>
			public IndustryRow Find(string externalId1)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((IndustryRow)(base.Find(new object[] {
							externalId1})));
			}
			
			/// <summary>
			/// Finds a row in the Industry table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A IndustryKeyExternalId1 row that contains the key elements, or null if there is no match.</returns>
			public new IndustryRow Find(object[] key)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((IndustryRow)(base.Find(key)));
			}
		}
		
		/// <summary>
		/// Represents a means of identifying a IndustryClassification row using a set of columns in which all values must be unique.
		/// </summary>
		public interface IIndustryClassificationIndex
		{
			
			/// <summary>
			/// Finds a row in the IndustryClassification table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A DepartmentRow that contains the key elements, or null if there is no match.</returns>
			IndustryClassificationRow Find(object[] key);
		}
		
		/// <summary>
		/// Represents a means of identifying a IndustryClassification row using a set of columns in which all values must be unique.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public class IndustryClassificationKeyIndex : global::Teraque.ClusteredIndex, IIndustryClassificationIndex
		{
			
			/// <summary>
			/// Create a primary, unique index on the IndustryClassification table.
			/// </summary>
			/// <param name="indexName">The name of the index.</param>
			/// <param name="columns">The columns that describe a unique key.</param>
			public IndustryClassificationKeyIndex(string indexName, System.Data.DataColumn[] columns) : 
					base(indexName, columns)
			{
			}
			
			/// <summary>
			/// Finds a row in the IndustryClassification table containing the key elements.
			/// </summary>
			/// <param name="industryClassificationId">The IndustryClassificationId element of the key.</param>
			/// <returns>The IndustryClassification row that contains the key elements, or null if there is no match.</returns>
			public IndustryClassificationRow Find(System.Guid industryClassificationId)
			{
				return ((IndustryClassificationRow)(base.Find(new object[] {
							industryClassificationId})));
			}
			
			/// <summary>
			/// Finds a row in the IndustryClassification table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A IndustryClassificationKey row that contains the key elements, or null if there is no match.</returns>
			public new IndustryClassificationRow Find(object[] key)
			{
				return ((IndustryClassificationRow)(base.Find(key)));
			}
		}
		
		/// <summary>
		/// Represents a means of identifying a IndustryClassification row using a set of columns in which all values must be unique.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public class IndustryClassificationKeyExternalId0Index : global::Teraque.NonClusteredIndex, IIndustryClassificationIndex
		{
			
			/// <summary>
			/// Create a secondary, unique index on the IndustryClassification table.
			/// </summary>
			/// <param name="indexName">The name of the index.</param>
			/// <param name="columns">The columns that describe a unique key.</param>
			public IndustryClassificationKeyExternalId0Index(string indexName, System.Data.DataColumn[] columns) : 
					base(indexName, columns)
			{
			}
			
			/// <summary>
			/// Finds a row in the IndustryClassification table containing the key elements.
			/// </summary>
			/// <param name="externalId0">The ExternalId0 element of the key.</param>
			/// <returns>The IndustryClassification row that contains the key elements, or null if there is no match.</returns>
			public IndustryClassificationRow Find(string externalId0)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((IndustryClassificationRow)(base.Find(new object[] {
							externalId0})));
			}
			
			/// <summary>
			/// Finds a row in the IndustryClassification table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A IndustryClassificationKeyExternalId0 row that contains the key elements, or null if there is no match.</returns>
			public new IndustryClassificationRow Find(object[] key)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((IndustryClassificationRow)(base.Find(key)));
			}
		}
		
		/// <summary>
		/// Represents a means of identifying a IndustryClassification row using a set of columns in which all values must be unique.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public class IndustryClassificationKeyExternalId1Index : global::Teraque.NonClusteredIndex, IIndustryClassificationIndex
		{
			
			/// <summary>
			/// Create a secondary, unique index on the IndustryClassification table.
			/// </summary>
			/// <param name="indexName">The name of the index.</param>
			/// <param name="columns">The columns that describe a unique key.</param>
			public IndustryClassificationKeyExternalId1Index(string indexName, System.Data.DataColumn[] columns) : 
					base(indexName, columns)
			{
			}
			
			/// <summary>
			/// Finds a row in the IndustryClassification table containing the key elements.
			/// </summary>
			/// <param name="externalId1">The ExternalId1 element of the key.</param>
			/// <returns>The IndustryClassification row that contains the key elements, or null if there is no match.</returns>
			public IndustryClassificationRow Find(string externalId1)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((IndustryClassificationRow)(base.Find(new object[] {
							externalId1})));
			}
			
			/// <summary>
			/// Finds a row in the IndustryClassification table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A IndustryClassificationKeyExternalId1 row that contains the key elements, or null if there is no match.</returns>
			public new IndustryClassificationRow Find(object[] key)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((IndustryClassificationRow)(base.Find(key)));
			}
		}
		
		/// <summary>
		/// Represents a means of identifying a IndustryLeaf row using a set of columns in which all values must be unique.
		/// </summary>
		public interface IIndustryLeafIndex
		{
			
			/// <summary>
			/// Finds a row in the IndustryLeaf table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A DepartmentRow that contains the key elements, or null if there is no match.</returns>
			IndustryLeafRow Find(object[] key);
		}
		
		/// <summary>
		/// Represents a means of identifying a IndustryLeaf row using a set of columns in which all values must be unique.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public class IndustryLeafKeyIndex : global::Teraque.ClusteredIndex, IIndustryLeafIndex
		{
			
			/// <summary>
			/// Create a primary, unique index on the IndustryLeaf table.
			/// </summary>
			/// <param name="indexName">The name of the index.</param>
			/// <param name="columns">The columns that describe a unique key.</param>
			public IndustryLeafKeyIndex(string indexName, System.Data.DataColumn[] columns) : 
					base(indexName, columns)
			{
			}
			
			/// <summary>
			/// Finds a row in the IndustryLeaf table containing the key elements.
			/// </summary>
			/// <param name="industryLeafId">The IndustryLeafId element of the key.</param>
			/// <returns>The IndustryLeaf row that contains the key elements, or null if there is no match.</returns>
			public IndustryLeafRow Find(System.Guid industryLeafId)
			{
				return ((IndustryLeafRow)(base.Find(new object[] {
							industryLeafId})));
			}
			
			/// <summary>
			/// Finds a row in the IndustryLeaf table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A IndustryLeafKey row that contains the key elements, or null if there is no match.</returns>
			public new IndustryLeafRow Find(object[] key)
			{
				return ((IndustryLeafRow)(base.Find(key)));
			}
		}
		
		/// <summary>
		/// Represents a means of identifying a IndustryLeaf row using a set of columns in which all values must be unique.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public class IndustryLeafKeyExternalId0Index : global::Teraque.NonClusteredIndex, IIndustryLeafIndex
		{
			
			/// <summary>
			/// Create a secondary, unique index on the IndustryLeaf table.
			/// </summary>
			/// <param name="indexName">The name of the index.</param>
			/// <param name="columns">The columns that describe a unique key.</param>
			public IndustryLeafKeyExternalId0Index(string indexName, System.Data.DataColumn[] columns) : 
					base(indexName, columns)
			{
			}
			
			/// <summary>
			/// Finds a row in the IndustryLeaf table containing the key elements.
			/// </summary>
			/// <param name="externalId0">The ExternalId0 element of the key.</param>
			/// <returns>The IndustryLeaf row that contains the key elements, or null if there is no match.</returns>
			public IndustryLeafRow Find(string externalId0)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((IndustryLeafRow)(base.Find(new object[] {
							externalId0})));
			}
			
			/// <summary>
			/// Finds a row in the IndustryLeaf table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A IndustryLeafKeyExternalId0 row that contains the key elements, or null if there is no match.</returns>
			public new IndustryLeafRow Find(object[] key)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((IndustryLeafRow)(base.Find(key)));
			}
		}
		
		/// <summary>
		/// Represents a means of identifying a IndustryLeaf row using a set of columns in which all values must be unique.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public class IndustryLeafKeyExternalId1Index : global::Teraque.NonClusteredIndex, IIndustryLeafIndex
		{
			
			/// <summary>
			/// Create a secondary, unique index on the IndustryLeaf table.
			/// </summary>
			/// <param name="indexName">The name of the index.</param>
			/// <param name="columns">The columns that describe a unique key.</param>
			public IndustryLeafKeyExternalId1Index(string indexName, System.Data.DataColumn[] columns) : 
					base(indexName, columns)
			{
			}
			
			/// <summary>
			/// Finds a row in the IndustryLeaf table containing the key elements.
			/// </summary>
			/// <param name="externalId1">The ExternalId1 element of the key.</param>
			/// <returns>The IndustryLeaf row that contains the key elements, or null if there is no match.</returns>
			public IndustryLeafRow Find(string externalId1)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((IndustryLeafRow)(base.Find(new object[] {
							externalId1})));
			}
			
			/// <summary>
			/// Finds a row in the IndustryLeaf table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A IndustryLeafKeyExternalId1 row that contains the key elements, or null if there is no match.</returns>
			public new IndustryLeafRow Find(object[] key)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((IndustryLeafRow)(base.Find(key)));
			}
		}
		
		/// <summary>
		/// Represents a means of identifying a IndustryTree row using a set of columns in which all values must be unique.
		/// </summary>
		public interface IIndustryTreeIndex
		{
			
			/// <summary>
			/// Finds a row in the IndustryTree table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A DepartmentRow that contains the key elements, or null if there is no match.</returns>
			IndustryTreeRow Find(object[] key);
		}
		
		/// <summary>
		/// Represents a means of identifying a IndustryTree row using a set of columns in which all values must be unique.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public class IndustryTreeKeyIndex : global::Teraque.ClusteredIndex, IIndustryTreeIndex
		{
			
			/// <summary>
			/// Create a primary, unique index on the IndustryTree table.
			/// </summary>
			/// <param name="indexName">The name of the index.</param>
			/// <param name="columns">The columns that describe a unique key.</param>
			public IndustryTreeKeyIndex(string indexName, System.Data.DataColumn[] columns) : 
					base(indexName, columns)
			{
			}
			
			/// <summary>
			/// Finds a row in the IndustryTree table containing the key elements.
			/// </summary>
			/// <param name="industryTreeId">The IndustryTreeId element of the key.</param>
			/// <returns>The IndustryTree row that contains the key elements, or null if there is no match.</returns>
			public IndustryTreeRow Find(System.Guid industryTreeId)
			{
				return ((IndustryTreeRow)(base.Find(new object[] {
							industryTreeId})));
			}
			
			/// <summary>
			/// Finds a row in the IndustryTree table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A IndustryTreeKey row that contains the key elements, or null if there is no match.</returns>
			public new IndustryTreeRow Find(object[] key)
			{
				return ((IndustryTreeRow)(base.Find(key)));
			}
		}
		
		/// <summary>
		/// Represents a means of identifying a IndustryTree row using a set of columns in which all values must be unique.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public class IndustryTreeKeyExternalId0Index : global::Teraque.NonClusteredIndex, IIndustryTreeIndex
		{
			
			/// <summary>
			/// Create a secondary, unique index on the IndustryTree table.
			/// </summary>
			/// <param name="indexName">The name of the index.</param>
			/// <param name="columns">The columns that describe a unique key.</param>
			public IndustryTreeKeyExternalId0Index(string indexName, System.Data.DataColumn[] columns) : 
					base(indexName, columns)
			{
			}
			
			/// <summary>
			/// Finds a row in the IndustryTree table containing the key elements.
			/// </summary>
			/// <param name="externalId0">The ExternalId0 element of the key.</param>
			/// <returns>The IndustryTree row that contains the key elements, or null if there is no match.</returns>
			public IndustryTreeRow Find(string externalId0)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((IndustryTreeRow)(base.Find(new object[] {
							externalId0})));
			}
			
			/// <summary>
			/// Finds a row in the IndustryTree table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A IndustryTreeKeyExternalId0 row that contains the key elements, or null if there is no match.</returns>
			public new IndustryTreeRow Find(object[] key)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((IndustryTreeRow)(base.Find(key)));
			}
		}
		
		/// <summary>
		/// Represents a means of identifying a IndustryTree row using a set of columns in which all values must be unique.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public class IndustryTreeKeyExternalId1Index : global::Teraque.NonClusteredIndex, IIndustryTreeIndex
		{
			
			/// <summary>
			/// Create a secondary, unique index on the IndustryTree table.
			/// </summary>
			/// <param name="indexName">The name of the index.</param>
			/// <param name="columns">The columns that describe a unique key.</param>
			public IndustryTreeKeyExternalId1Index(string indexName, System.Data.DataColumn[] columns) : 
					base(indexName, columns)
			{
			}
			
			/// <summary>
			/// Finds a row in the IndustryTree table containing the key elements.
			/// </summary>
			/// <param name="externalId1">The ExternalId1 element of the key.</param>
			/// <returns>The IndustryTree row that contains the key elements, or null if there is no match.</returns>
			public IndustryTreeRow Find(string externalId1)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((IndustryTreeRow)(base.Find(new object[] {
							externalId1})));
			}
			
			/// <summary>
			/// Finds a row in the IndustryTree table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A IndustryTreeKeyExternalId1 row that contains the key elements, or null if there is no match.</returns>
			public new IndustryTreeRow Find(object[] key)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((IndustryTreeRow)(base.Find(key)));
			}
		}
		
		/// <summary>
		/// Represents a means of identifying a Institution row using a set of columns in which all values must be unique.
		/// </summary>
		public interface IInstitutionIndex
		{
			
			/// <summary>
			/// Finds a row in the Institution table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A DepartmentRow that contains the key elements, or null if there is no match.</returns>
			InstitutionRow Find(object[] key);
		}
		
		/// <summary>
		/// Represents a means of identifying a Institution row using a set of columns in which all values must be unique.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public class InstitutionKeyIndex : global::Teraque.ClusteredIndex, IInstitutionIndex
		{
			
			/// <summary>
			/// Create a primary, unique index on the Institution table.
			/// </summary>
			/// <param name="indexName">The name of the index.</param>
			/// <param name="columns">The columns that describe a unique key.</param>
			public InstitutionKeyIndex(string indexName, System.Data.DataColumn[] columns) : 
					base(indexName, columns)
			{
			}
			
			/// <summary>
			/// Finds a row in the Institution table containing the key elements.
			/// </summary>
			/// <param name="institutionId">The InstitutionId element of the key.</param>
			/// <returns>The Institution row that contains the key elements, or null if there is no match.</returns>
			public InstitutionRow Find(System.Guid institutionId)
			{
				return ((InstitutionRow)(base.Find(new object[] {
							institutionId})));
			}
			
			/// <summary>
			/// Finds a row in the Institution table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A InstitutionKey row that contains the key elements, or null if there is no match.</returns>
			public new InstitutionRow Find(object[] key)
			{
				return ((InstitutionRow)(base.Find(key)));
			}
		}
		
		/// <summary>
		/// Represents a means of identifying a Issuer row using a set of columns in which all values must be unique.
		/// </summary>
		public interface IIssuerIndex
		{
			
			/// <summary>
			/// Finds a row in the Issuer table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A DepartmentRow that contains the key elements, or null if there is no match.</returns>
			IssuerRow Find(object[] key);
		}
		
		/// <summary>
		/// Represents a means of identifying a Issuer row using a set of columns in which all values must be unique.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public class IssuerKeyIndex : global::Teraque.ClusteredIndex, IIssuerIndex
		{
			
			/// <summary>
			/// Create a primary, unique index on the Issuer table.
			/// </summary>
			/// <param name="indexName">The name of the index.</param>
			/// <param name="columns">The columns that describe a unique key.</param>
			public IssuerKeyIndex(string indexName, System.Data.DataColumn[] columns) : 
					base(indexName, columns)
			{
			}
			
			/// <summary>
			/// Finds a row in the Issuer table containing the key elements.
			/// </summary>
			/// <param name="issuerId">The IssuerId element of the key.</param>
			/// <returns>The Issuer row that contains the key elements, or null if there is no match.</returns>
			public IssuerRow Find(System.Guid issuerId)
			{
				return ((IssuerRow)(base.Find(new object[] {
							issuerId})));
			}
			
			/// <summary>
			/// Finds a row in the Issuer table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A IssuerKey row that contains the key elements, or null if there is no match.</returns>
			public new IssuerRow Find(object[] key)
			{
				return ((IssuerRow)(base.Find(key)));
			}
		}
		
		/// <summary>
		/// Represents a means of identifying a LotHandling row using a set of columns in which all values must be unique.
		/// </summary>
		public interface ILotHandlingIndex
		{
			
			/// <summary>
			/// Finds a row in the LotHandling table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A DepartmentRow that contains the key elements, or null if there is no match.</returns>
			LotHandlingRow Find(object[] key);
		}
		
		/// <summary>
		/// Represents a means of identifying a LotHandling row using a set of columns in which all values must be unique.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public class LotHandlingKeyIndex : global::Teraque.ClusteredIndex, ILotHandlingIndex
		{
			
			/// <summary>
			/// Create a primary, unique index on the LotHandling table.
			/// </summary>
			/// <param name="indexName">The name of the index.</param>
			/// <param name="columns">The columns that describe a unique key.</param>
			public LotHandlingKeyIndex(string indexName, System.Data.DataColumn[] columns) : 
					base(indexName, columns)
			{
			}
			
			/// <summary>
			/// Finds a row in the LotHandling table containing the key elements.
			/// </summary>
			/// <param name="lotHandlingCode">The LotHandlingCode element of the key.</param>
			/// <returns>The LotHandling row that contains the key elements, or null if there is no match.</returns>
			public LotHandlingRow Find(Teraque.LotHandlingCode lotHandlingCode)
			{
				return ((LotHandlingRow)(base.Find(new object[] {
							lotHandlingCode})));
			}
			
			/// <summary>
			/// Finds a row in the LotHandling table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A LotHandlingKey row that contains the key elements, or null if there is no match.</returns>
			public new LotHandlingRow Find(object[] key)
			{
				return ((LotHandlingRow)(base.Find(key)));
			}
		}
		
		/// <summary>
		/// Represents a means of identifying a LotHandling row using a set of columns in which all values must be unique.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public class LotHandlingKeyExternalId0Index : global::Teraque.NonClusteredIndex, ILotHandlingIndex
		{
			
			/// <summary>
			/// Create a secondary, unique index on the LotHandling table.
			/// </summary>
			/// <param name="indexName">The name of the index.</param>
			/// <param name="columns">The columns that describe a unique key.</param>
			public LotHandlingKeyExternalId0Index(string indexName, System.Data.DataColumn[] columns) : 
					base(indexName, columns)
			{
			}
			
			/// <summary>
			/// Finds a row in the LotHandling table containing the key elements.
			/// </summary>
			/// <param name="externalId0">The ExternalId0 element of the key.</param>
			/// <returns>The LotHandling row that contains the key elements, or null if there is no match.</returns>
			public LotHandlingRow Find(string externalId0)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((LotHandlingRow)(base.Find(new object[] {
							externalId0})));
			}
			
			/// <summary>
			/// Finds a row in the LotHandling table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A LotHandlingKeyExternalId0 row that contains the key elements, or null if there is no match.</returns>
			public new LotHandlingRow Find(object[] key)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((LotHandlingRow)(base.Find(key)));
			}
		}
		
		/// <summary>
		/// Represents a means of identifying a LotHandling row using a set of columns in which all values must be unique.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public class LotHandlingKeyExternalId1Index : global::Teraque.NonClusteredIndex, ILotHandlingIndex
		{
			
			/// <summary>
			/// Create a secondary, unique index on the LotHandling table.
			/// </summary>
			/// <param name="indexName">The name of the index.</param>
			/// <param name="columns">The columns that describe a unique key.</param>
			public LotHandlingKeyExternalId1Index(string indexName, System.Data.DataColumn[] columns) : 
					base(indexName, columns)
			{
			}
			
			/// <summary>
			/// Finds a row in the LotHandling table containing the key elements.
			/// </summary>
			/// <param name="externalId1">The ExternalId1 element of the key.</param>
			/// <returns>The LotHandling row that contains the key elements, or null if there is no match.</returns>
			public LotHandlingRow Find(string externalId1)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((LotHandlingRow)(base.Find(new object[] {
							externalId1})));
			}
			
			/// <summary>
			/// Finds a row in the LotHandling table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A LotHandlingKeyExternalId1 row that contains the key elements, or null if there is no match.</returns>
			public new LotHandlingRow Find(object[] key)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((LotHandlingRow)(base.Find(key)));
			}
		}
		
		/// <summary>
		/// Represents a means of identifying a LotHandling row using a set of columns in which all values must be unique.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public class LotHandlingKeyExternalId2Index : global::Teraque.NonClusteredIndex, ILotHandlingIndex
		{
			
			/// <summary>
			/// Create a secondary, unique index on the LotHandling table.
			/// </summary>
			/// <param name="indexName">The name of the index.</param>
			/// <param name="columns">The columns that describe a unique key.</param>
			public LotHandlingKeyExternalId2Index(string indexName, System.Data.DataColumn[] columns) : 
					base(indexName, columns)
			{
			}
			
			/// <summary>
			/// Finds a row in the LotHandling table containing the key elements.
			/// </summary>
			/// <param name="externalId2">The ExternalId2 element of the key.</param>
			/// <returns>The LotHandling row that contains the key elements, or null if there is no match.</returns>
			public LotHandlingRow Find(string externalId2)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((LotHandlingRow)(base.Find(new object[] {
							externalId2})));
			}
			
			/// <summary>
			/// Finds a row in the LotHandling table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A LotHandlingKeyExternalId2 row that contains the key elements, or null if there is no match.</returns>
			public new LotHandlingRow Find(object[] key)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((LotHandlingRow)(base.Find(key)));
			}
		}
		
		/// <summary>
		/// Represents a means of identifying a LotHandling row using a set of columns in which all values must be unique.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public class LotHandlingKeyExternalId3Index : global::Teraque.NonClusteredIndex, ILotHandlingIndex
		{
			
			/// <summary>
			/// Create a secondary, unique index on the LotHandling table.
			/// </summary>
			/// <param name="indexName">The name of the index.</param>
			/// <param name="columns">The columns that describe a unique key.</param>
			public LotHandlingKeyExternalId3Index(string indexName, System.Data.DataColumn[] columns) : 
					base(indexName, columns)
			{
			}
			
			/// <summary>
			/// Finds a row in the LotHandling table containing the key elements.
			/// </summary>
			/// <param name="externalId3">The ExternalId3 element of the key.</param>
			/// <returns>The LotHandling row that contains the key elements, or null if there is no match.</returns>
			public LotHandlingRow Find(string externalId3)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((LotHandlingRow)(base.Find(new object[] {
							externalId3})));
			}
			
			/// <summary>
			/// Finds a row in the LotHandling table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A LotHandlingKeyExternalId3 row that contains the key elements, or null if there is no match.</returns>
			public new LotHandlingRow Find(object[] key)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((LotHandlingRow)(base.Find(key)));
			}
		}
		
		/// <summary>
		/// Represents a means of identifying a MajorInstrumentType row using a set of columns in which all values must be unique.
		/// </summary>
		public interface IMajorInstrumentTypeIndex
		{
			
			/// <summary>
			/// Finds a row in the MajorInstrumentType table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A DepartmentRow that contains the key elements, or null if there is no match.</returns>
			MajorInstrumentTypeRow Find(object[] key);
		}
		
		/// <summary>
		/// Represents a means of identifying a MajorInstrumentType row using a set of columns in which all values must be unique.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public class MajorInstrumentTypeKeyIndex : global::Teraque.ClusteredIndex, IMajorInstrumentTypeIndex
		{
			
			/// <summary>
			/// Create a primary, unique index on the MajorInstrumentType table.
			/// </summary>
			/// <param name="indexName">The name of the index.</param>
			/// <param name="columns">The columns that describe a unique key.</param>
			public MajorInstrumentTypeKeyIndex(string indexName, System.Data.DataColumn[] columns) : 
					base(indexName, columns)
			{
			}
			
			/// <summary>
			/// Finds a row in the MajorInstrumentType table containing the key elements.
			/// </summary>
			/// <param name="majorInstrumentTypeId">The MajorInstrumentTypeId element of the key.</param>
			/// <returns>The MajorInstrumentType row that contains the key elements, or null if there is no match.</returns>
			public MajorInstrumentTypeRow Find(System.Guid majorInstrumentTypeId)
			{
				return ((MajorInstrumentTypeRow)(base.Find(new object[] {
							majorInstrumentTypeId})));
			}
			
			/// <summary>
			/// Finds a row in the MajorInstrumentType table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A MajorInstrumentTypeKey row that contains the key elements, or null if there is no match.</returns>
			public new MajorInstrumentTypeRow Find(object[] key)
			{
				return ((MajorInstrumentTypeRow)(base.Find(key)));
			}
		}
		
		/// <summary>
		/// Represents a means of identifying a MajorInstrumentType row using a set of columns in which all values must be unique.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public class MajorInstrumentTypeKeyExternalId0Index : global::Teraque.NonClusteredIndex, IMajorInstrumentTypeIndex
		{
			
			/// <summary>
			/// Create a secondary, unique index on the MajorInstrumentType table.
			/// </summary>
			/// <param name="indexName">The name of the index.</param>
			/// <param name="columns">The columns that describe a unique key.</param>
			public MajorInstrumentTypeKeyExternalId0Index(string indexName, System.Data.DataColumn[] columns) : 
					base(indexName, columns)
			{
			}
			
			/// <summary>
			/// Finds a row in the MajorInstrumentType table containing the key elements.
			/// </summary>
			/// <param name="externalId0">The ExternalId0 element of the key.</param>
			/// <returns>The MajorInstrumentType row that contains the key elements, or null if there is no match.</returns>
			public MajorInstrumentTypeRow Find(string externalId0)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((MajorInstrumentTypeRow)(base.Find(new object[] {
							externalId0})));
			}
			
			/// <summary>
			/// Finds a row in the MajorInstrumentType table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A MajorInstrumentTypeKeyExternalId0 row that contains the key elements, or null if there is no match.</returns>
			public new MajorInstrumentTypeRow Find(object[] key)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((MajorInstrumentTypeRow)(base.Find(key)));
			}
		}
		
		/// <summary>
		/// Represents a means of identifying a MajorInstrumentType row using a set of columns in which all values must be unique.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public class MajorInstrumentTypeKeyExternalId1Index : global::Teraque.NonClusteredIndex, IMajorInstrumentTypeIndex
		{
			
			/// <summary>
			/// Create a secondary, unique index on the MajorInstrumentType table.
			/// </summary>
			/// <param name="indexName">The name of the index.</param>
			/// <param name="columns">The columns that describe a unique key.</param>
			public MajorInstrumentTypeKeyExternalId1Index(string indexName, System.Data.DataColumn[] columns) : 
					base(indexName, columns)
			{
			}
			
			/// <summary>
			/// Finds a row in the MajorInstrumentType table containing the key elements.
			/// </summary>
			/// <param name="externalId1">The ExternalId1 element of the key.</param>
			/// <returns>The MajorInstrumentType row that contains the key elements, or null if there is no match.</returns>
			public MajorInstrumentTypeRow Find(string externalId1)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((MajorInstrumentTypeRow)(base.Find(new object[] {
							externalId1})));
			}
			
			/// <summary>
			/// Finds a row in the MajorInstrumentType table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A MajorInstrumentTypeKeyExternalId1 row that contains the key elements, or null if there is no match.</returns>
			public new MajorInstrumentTypeRow Find(object[] key)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((MajorInstrumentTypeRow)(base.Find(key)));
			}
		}
		
		/// <summary>
		/// Represents a means of identifying a Match row using a set of columns in which all values must be unique.
		/// </summary>
		public interface IMatchIndex
		{
			
			/// <summary>
			/// Finds a row in the Match table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A DepartmentRow that contains the key elements, or null if there is no match.</returns>
			MatchRow Find(object[] key);
		}
		
		/// <summary>
		/// Represents a means of identifying a Match row using a set of columns in which all values must be unique.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public class MatchKeyIndex : global::Teraque.ClusteredIndex, IMatchIndex
		{
			
			/// <summary>
			/// Create a primary, unique index on the Match table.
			/// </summary>
			/// <param name="indexName">The name of the index.</param>
			/// <param name="columns">The columns that describe a unique key.</param>
			public MatchKeyIndex(string indexName, System.Data.DataColumn[] columns) : 
					base(indexName, columns)
			{
			}
			
			/// <summary>
			/// Finds a row in the Match table containing the key elements.
			/// </summary>
			/// <param name="matchId">The MatchId element of the key.</param>
			/// <returns>The Match row that contains the key elements, or null if there is no match.</returns>
			public MatchRow Find(System.Guid matchId)
			{
				return ((MatchRow)(base.Find(new object[] {
							matchId})));
			}
			
			/// <summary>
			/// Finds a row in the Match table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A MatchKey row that contains the key elements, or null if there is no match.</returns>
			public new MatchRow Find(object[] key)
			{
				return ((MatchRow)(base.Find(key)));
			}
		}
		
		/// <summary>
		/// Represents a means of identifying a Match row using a set of columns in which all values must be unique.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public class MatchKeyWorkingOrderIdContraOrderIdIndex : global::Teraque.NonClusteredIndex, IMatchIndex
		{
			
			/// <summary>
			/// Create a secondary, unique index on the Match table.
			/// </summary>
			/// <param name="indexName">The name of the index.</param>
			/// <param name="columns">The columns that describe a unique key.</param>
			public MatchKeyWorkingOrderIdContraOrderIdIndex(string indexName, System.Data.DataColumn[] columns) : 
					base(indexName, columns)
			{
			}
			
			/// <summary>
			/// Finds a row in the Match table containing the key elements.
			/// </summary>
			/// <param name="workingOrderId">The WorkingOrderId element of the key.</param>
			/// <param name="contraOrderId">The ContraOrderId element of the key.</param>
			/// <returns>The Match row that contains the key elements, or null if there is no match.</returns>
			public MatchRow Find(System.Guid workingOrderId, System.Guid contraOrderId)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((MatchRow)(base.Find(new object[] {
							workingOrderId,
							contraOrderId})));
			}
			
			/// <summary>
			/// Finds a row in the Match table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A MatchKeyWorkingOrderIdContraOrderId row that contains the key elements, or null if there is no match.</returns>
			public new MatchRow Find(object[] key)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((MatchRow)(base.Find(key)));
			}
		}
		
		/// <summary>
		/// Represents a means of identifying a MinorInstrumentType row using a set of columns in which all values must be unique.
		/// </summary>
		public interface IMinorInstrumentTypeIndex
		{
			
			/// <summary>
			/// Finds a row in the MinorInstrumentType table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A DepartmentRow that contains the key elements, or null if there is no match.</returns>
			MinorInstrumentTypeRow Find(object[] key);
		}
		
		/// <summary>
		/// Represents a means of identifying a MinorInstrumentType row using a set of columns in which all values must be unique.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public class MinorInstrumentTypeKeyIndex : global::Teraque.ClusteredIndex, IMinorInstrumentTypeIndex
		{
			
			/// <summary>
			/// Create a primary, unique index on the MinorInstrumentType table.
			/// </summary>
			/// <param name="indexName">The name of the index.</param>
			/// <param name="columns">The columns that describe a unique key.</param>
			public MinorInstrumentTypeKeyIndex(string indexName, System.Data.DataColumn[] columns) : 
					base(indexName, columns)
			{
			}
			
			/// <summary>
			/// Finds a row in the MinorInstrumentType table containing the key elements.
			/// </summary>
			/// <param name="minorInstrumentTypeId">The MinorInstrumentTypeId element of the key.</param>
			/// <returns>The MinorInstrumentType row that contains the key elements, or null if there is no match.</returns>
			public MinorInstrumentTypeRow Find(System.Guid minorInstrumentTypeId)
			{
				return ((MinorInstrumentTypeRow)(base.Find(new object[] {
							minorInstrumentTypeId})));
			}
			
			/// <summary>
			/// Finds a row in the MinorInstrumentType table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A MinorInstrumentTypeKey row that contains the key elements, or null if there is no match.</returns>
			public new MinorInstrumentTypeRow Find(object[] key)
			{
				return ((MinorInstrumentTypeRow)(base.Find(key)));
			}
		}
		
		/// <summary>
		/// Represents a means of identifying a MinorInstrumentType row using a set of columns in which all values must be unique.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public class MinorInstrumentTypeKeyExternalId0Index : global::Teraque.NonClusteredIndex, IMinorInstrumentTypeIndex
		{
			
			/// <summary>
			/// Create a secondary, unique index on the MinorInstrumentType table.
			/// </summary>
			/// <param name="indexName">The name of the index.</param>
			/// <param name="columns">The columns that describe a unique key.</param>
			public MinorInstrumentTypeKeyExternalId0Index(string indexName, System.Data.DataColumn[] columns) : 
					base(indexName, columns)
			{
			}
			
			/// <summary>
			/// Finds a row in the MinorInstrumentType table containing the key elements.
			/// </summary>
			/// <param name="externalId0">The ExternalId0 element of the key.</param>
			/// <returns>The MinorInstrumentType row that contains the key elements, or null if there is no match.</returns>
			public MinorInstrumentTypeRow Find(string externalId0)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((MinorInstrumentTypeRow)(base.Find(new object[] {
							externalId0})));
			}
			
			/// <summary>
			/// Finds a row in the MinorInstrumentType table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A MinorInstrumentTypeKeyExternalId0 row that contains the key elements, or null if there is no match.</returns>
			public new MinorInstrumentTypeRow Find(object[] key)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((MinorInstrumentTypeRow)(base.Find(key)));
			}
		}
		
		/// <summary>
		/// Represents a means of identifying a MinorInstrumentType row using a set of columns in which all values must be unique.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public class MinorInstrumentTypeKeyExternalId1Index : global::Teraque.NonClusteredIndex, IMinorInstrumentTypeIndex
		{
			
			/// <summary>
			/// Create a secondary, unique index on the MinorInstrumentType table.
			/// </summary>
			/// <param name="indexName">The name of the index.</param>
			/// <param name="columns">The columns that describe a unique key.</param>
			public MinorInstrumentTypeKeyExternalId1Index(string indexName, System.Data.DataColumn[] columns) : 
					base(indexName, columns)
			{
			}
			
			/// <summary>
			/// Finds a row in the MinorInstrumentType table containing the key elements.
			/// </summary>
			/// <param name="externalId1">The ExternalId1 element of the key.</param>
			/// <returns>The MinorInstrumentType row that contains the key elements, or null if there is no match.</returns>
			public MinorInstrumentTypeRow Find(string externalId1)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((MinorInstrumentTypeRow)(base.Find(new object[] {
							externalId1})));
			}
			
			/// <summary>
			/// Finds a row in the MinorInstrumentType table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A MinorInstrumentTypeKeyExternalId1 row that contains the key elements, or null if there is no match.</returns>
			public new MinorInstrumentTypeRow Find(object[] key)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((MinorInstrumentTypeRow)(base.Find(key)));
			}
		}
		
		/// <summary>
		/// Represents a means of identifying a MssaBucket row using a set of columns in which all values must be unique.
		/// </summary>
		public interface IMssaBucketIndex
		{
			
			/// <summary>
			/// Finds a row in the MssaBucket table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A DepartmentRow that contains the key elements, or null if there is no match.</returns>
			MssaBucketRow Find(object[] key);
		}
		
		/// <summary>
		/// Represents a means of identifying a MssaBucket row using a set of columns in which all values must be unique.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public class MssaBucketKeyIndex : global::Teraque.ClusteredIndex, IMssaBucketIndex
		{
			
			/// <summary>
			/// Create a primary, unique index on the MssaBucket table.
			/// </summary>
			/// <param name="indexName">The name of the index.</param>
			/// <param name="columns">The columns that describe a unique key.</param>
			public MssaBucketKeyIndex(string indexName, System.Data.DataColumn[] columns) : 
					base(indexName, columns)
			{
			}
			
			/// <summary>
			/// Finds a row in the MssaBucket table containing the key elements.
			/// </summary>
			/// <param name="mssaBucketId">The MssaBucketId element of the key.</param>
			/// <returns>The MssaBucket row that contains the key elements, or null if there is no match.</returns>
			public MssaBucketRow Find(System.Guid mssaBucketId)
			{
				return ((MssaBucketRow)(base.Find(new object[] {
							mssaBucketId})));
			}
			
			/// <summary>
			/// Finds a row in the MssaBucket table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A MssaBucketKey row that contains the key elements, or null if there is no match.</returns>
			public new MssaBucketRow Find(object[] key)
			{
				return ((MssaBucketRow)(base.Find(key)));
			}
		}
		
		/// <summary>
		/// Represents a means of identifying a MssaBucket row using a set of columns in which all values must be unique.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public class MssaBucketKeyExternalId0Index : global::Teraque.NonClusteredIndex, IMssaBucketIndex
		{
			
			/// <summary>
			/// Create a secondary, unique index on the MssaBucket table.
			/// </summary>
			/// <param name="indexName">The name of the index.</param>
			/// <param name="columns">The columns that describe a unique key.</param>
			public MssaBucketKeyExternalId0Index(string indexName, System.Data.DataColumn[] columns) : 
					base(indexName, columns)
			{
			}
			
			/// <summary>
			/// Finds a row in the MssaBucket table containing the key elements.
			/// </summary>
			/// <param name="externalId0">The ExternalId0 element of the key.</param>
			/// <returns>The MssaBucket row that contains the key elements, or null if there is no match.</returns>
			public MssaBucketRow Find(string externalId0)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((MssaBucketRow)(base.Find(new object[] {
							externalId0})));
			}
			
			/// <summary>
			/// Finds a row in the MssaBucket table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A MssaBucketKeyExternalId0 row that contains the key elements, or null if there is no match.</returns>
			public new MssaBucketRow Find(object[] key)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((MssaBucketRow)(base.Find(key)));
			}
		}
		
		/// <summary>
		/// Represents a means of identifying a MssaBucket row using a set of columns in which all values must be unique.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public class MssaBucketKeyExternalId1Index : global::Teraque.NonClusteredIndex, IMssaBucketIndex
		{
			
			/// <summary>
			/// Create a secondary, unique index on the MssaBucket table.
			/// </summary>
			/// <param name="indexName">The name of the index.</param>
			/// <param name="columns">The columns that describe a unique key.</param>
			public MssaBucketKeyExternalId1Index(string indexName, System.Data.DataColumn[] columns) : 
					base(indexName, columns)
			{
			}
			
			/// <summary>
			/// Finds a row in the MssaBucket table containing the key elements.
			/// </summary>
			/// <param name="externalId1">The ExternalId1 element of the key.</param>
			/// <returns>The MssaBucket row that contains the key elements, or null if there is no match.</returns>
			public MssaBucketRow Find(string externalId1)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((MssaBucketRow)(base.Find(new object[] {
							externalId1})));
			}
			
			/// <summary>
			/// Finds a row in the MssaBucket table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A MssaBucketKeyExternalId1 row that contains the key elements, or null if there is no match.</returns>
			public new MssaBucketRow Find(object[] key)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((MssaBucketRow)(base.Find(key)));
			}
		}
		
		/// <summary>
		/// Represents a means of identifying a Negotiation row using a set of columns in which all values must be unique.
		/// </summary>
		public interface INegotiationIndex
		{
			
			/// <summary>
			/// Finds a row in the Negotiation table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A DepartmentRow that contains the key elements, or null if there is no match.</returns>
			NegotiationRow Find(object[] key);
		}
		
		/// <summary>
		/// Represents a means of identifying a Negotiation row using a set of columns in which all values must be unique.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public class NegotiationKeyIndex : global::Teraque.ClusteredIndex, INegotiationIndex
		{
			
			/// <summary>
			/// Create a primary, unique index on the Negotiation table.
			/// </summary>
			/// <param name="indexName">The name of the index.</param>
			/// <param name="columns">The columns that describe a unique key.</param>
			public NegotiationKeyIndex(string indexName, System.Data.DataColumn[] columns) : 
					base(indexName, columns)
			{
			}
			
			/// <summary>
			/// Finds a row in the Negotiation table containing the key elements.
			/// </summary>
			/// <param name="negotiationId">The NegotiationId element of the key.</param>
			/// <returns>The Negotiation row that contains the key elements, or null if there is no match.</returns>
			public NegotiationRow Find(System.Guid negotiationId)
			{
				return ((NegotiationRow)(base.Find(new object[] {
							negotiationId})));
			}
			
			/// <summary>
			/// Finds a row in the Negotiation table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A NegotiationKey row that contains the key elements, or null if there is no match.</returns>
			public new NegotiationRow Find(object[] key)
			{
				return ((NegotiationRow)(base.Find(key)));
			}
		}
		
		/// <summary>
		/// Represents a means of identifying a OrderType row using a set of columns in which all values must be unique.
		/// </summary>
		public interface IOrderTypeIndex
		{
			
			/// <summary>
			/// Finds a row in the OrderType table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A DepartmentRow that contains the key elements, or null if there is no match.</returns>
			OrderTypeRow Find(object[] key);
		}
		
		/// <summary>
		/// Represents a means of identifying a OrderType row using a set of columns in which all values must be unique.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public class OrderTypeKeyIndex : global::Teraque.ClusteredIndex, IOrderTypeIndex
		{
			
			/// <summary>
			/// Create a primary, unique index on the OrderType table.
			/// </summary>
			/// <param name="indexName">The name of the index.</param>
			/// <param name="columns">The columns that describe a unique key.</param>
			public OrderTypeKeyIndex(string indexName, System.Data.DataColumn[] columns) : 
					base(indexName, columns)
			{
			}
			
			/// <summary>
			/// Finds a row in the OrderType table containing the key elements.
			/// </summary>
			/// <param name="orderTypeCode">The OrderTypeCode element of the key.</param>
			/// <returns>The OrderType row that contains the key elements, or null if there is no match.</returns>
			public OrderTypeRow Find(Teraque.OrderTypeCode orderTypeCode)
			{
				return ((OrderTypeRow)(base.Find(new object[] {
							orderTypeCode})));
			}
			
			/// <summary>
			/// Finds a row in the OrderType table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A OrderTypeKey row that contains the key elements, or null if there is no match.</returns>
			public new OrderTypeRow Find(object[] key)
			{
				return ((OrderTypeRow)(base.Find(key)));
			}
		}
		
		/// <summary>
		/// Represents a means of identifying a OrderType row using a set of columns in which all values must be unique.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public class OrderTypeKeyExternalId0Index : global::Teraque.NonClusteredIndex, IOrderTypeIndex
		{
			
			/// <summary>
			/// Create a secondary, unique index on the OrderType table.
			/// </summary>
			/// <param name="indexName">The name of the index.</param>
			/// <param name="columns">The columns that describe a unique key.</param>
			public OrderTypeKeyExternalId0Index(string indexName, System.Data.DataColumn[] columns) : 
					base(indexName, columns)
			{
			}
			
			/// <summary>
			/// Finds a row in the OrderType table containing the key elements.
			/// </summary>
			/// <param name="externalId0">The ExternalId0 element of the key.</param>
			/// <returns>The OrderType row that contains the key elements, or null if there is no match.</returns>
			public OrderTypeRow Find(string externalId0)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((OrderTypeRow)(base.Find(new object[] {
							externalId0})));
			}
			
			/// <summary>
			/// Finds a row in the OrderType table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A OrderTypeKeyExternalId0 row that contains the key elements, or null if there is no match.</returns>
			public new OrderTypeRow Find(object[] key)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((OrderTypeRow)(base.Find(key)));
			}
		}
		
		/// <summary>
		/// Represents a means of identifying a OrderType row using a set of columns in which all values must be unique.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public class OrderTypeKeyExternalId1Index : global::Teraque.NonClusteredIndex, IOrderTypeIndex
		{
			
			/// <summary>
			/// Create a secondary, unique index on the OrderType table.
			/// </summary>
			/// <param name="indexName">The name of the index.</param>
			/// <param name="columns">The columns that describe a unique key.</param>
			public OrderTypeKeyExternalId1Index(string indexName, System.Data.DataColumn[] columns) : 
					base(indexName, columns)
			{
			}
			
			/// <summary>
			/// Finds a row in the OrderType table containing the key elements.
			/// </summary>
			/// <param name="externalId1">The ExternalId1 element of the key.</param>
			/// <returns>The OrderType row that contains the key elements, or null if there is no match.</returns>
			public OrderTypeRow Find(string externalId1)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((OrderTypeRow)(base.Find(new object[] {
							externalId1})));
			}
			
			/// <summary>
			/// Finds a row in the OrderType table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A OrderTypeKeyExternalId1 row that contains the key elements, or null if there is no match.</returns>
			public new OrderTypeRow Find(object[] key)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((OrderTypeRow)(base.Find(key)));
			}
		}
		
		/// <summary>
		/// Represents a means of identifying a OrderType row using a set of columns in which all values must be unique.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public class OrderTypeKeyExternalId2Index : global::Teraque.NonClusteredIndex, IOrderTypeIndex
		{
			
			/// <summary>
			/// Create a secondary, unique index on the OrderType table.
			/// </summary>
			/// <param name="indexName">The name of the index.</param>
			/// <param name="columns">The columns that describe a unique key.</param>
			public OrderTypeKeyExternalId2Index(string indexName, System.Data.DataColumn[] columns) : 
					base(indexName, columns)
			{
			}
			
			/// <summary>
			/// Finds a row in the OrderType table containing the key elements.
			/// </summary>
			/// <param name="externalId2">The ExternalId2 element of the key.</param>
			/// <returns>The OrderType row that contains the key elements, or null if there is no match.</returns>
			public OrderTypeRow Find(string externalId2)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((OrderTypeRow)(base.Find(new object[] {
							externalId2})));
			}
			
			/// <summary>
			/// Finds a row in the OrderType table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A OrderTypeKeyExternalId2 row that contains the key elements, or null if there is no match.</returns>
			public new OrderTypeRow Find(object[] key)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((OrderTypeRow)(base.Find(key)));
			}
		}
		
		/// <summary>
		/// Represents a means of identifying a OrderType row using a set of columns in which all values must be unique.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public class OrderTypeKeyExternalId3Index : global::Teraque.NonClusteredIndex, IOrderTypeIndex
		{
			
			/// <summary>
			/// Create a secondary, unique index on the OrderType table.
			/// </summary>
			/// <param name="indexName">The name of the index.</param>
			/// <param name="columns">The columns that describe a unique key.</param>
			public OrderTypeKeyExternalId3Index(string indexName, System.Data.DataColumn[] columns) : 
					base(indexName, columns)
			{
			}
			
			/// <summary>
			/// Finds a row in the OrderType table containing the key elements.
			/// </summary>
			/// <param name="externalId3">The ExternalId3 element of the key.</param>
			/// <returns>The OrderType row that contains the key elements, or null if there is no match.</returns>
			public OrderTypeRow Find(string externalId3)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((OrderTypeRow)(base.Find(new object[] {
							externalId3})));
			}
			
			/// <summary>
			/// Finds a row in the OrderType table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A OrderTypeKeyExternalId3 row that contains the key elements, or null if there is no match.</returns>
			public new OrderTypeRow Find(object[] key)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((OrderTypeRow)(base.Find(key)));
			}
		}
		
		/// <summary>
		/// Represents a means of identifying a PartyType row using a set of columns in which all values must be unique.
		/// </summary>
		public interface IPartyTypeIndex
		{
			
			/// <summary>
			/// Finds a row in the PartyType table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A DepartmentRow that contains the key elements, or null if there is no match.</returns>
			PartyTypeRow Find(object[] key);
		}
		
		/// <summary>
		/// Represents a means of identifying a PartyType row using a set of columns in which all values must be unique.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public class PartyTypeKeyIndex : global::Teraque.ClusteredIndex, IPartyTypeIndex
		{
			
			/// <summary>
			/// Create a primary, unique index on the PartyType table.
			/// </summary>
			/// <param name="indexName">The name of the index.</param>
			/// <param name="columns">The columns that describe a unique key.</param>
			public PartyTypeKeyIndex(string indexName, System.Data.DataColumn[] columns) : 
					base(indexName, columns)
			{
			}
			
			/// <summary>
			/// Finds a row in the PartyType table containing the key elements.
			/// </summary>
			/// <param name="partyTypeCode">The PartyTypeCode element of the key.</param>
			/// <returns>The PartyType row that contains the key elements, or null if there is no match.</returns>
			public PartyTypeRow Find(Teraque.PartyTypeCode partyTypeCode)
			{
				return ((PartyTypeRow)(base.Find(new object[] {
							partyTypeCode})));
			}
			
			/// <summary>
			/// Finds a row in the PartyType table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A PartyTypeKey row that contains the key elements, or null if there is no match.</returns>
			public new PartyTypeRow Find(object[] key)
			{
				return ((PartyTypeRow)(base.Find(key)));
			}
		}
		
		/// <summary>
		/// Represents a means of identifying a PartyType row using a set of columns in which all values must be unique.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public class PartyTypeKeyExternalId0Index : global::Teraque.NonClusteredIndex, IPartyTypeIndex
		{
			
			/// <summary>
			/// Create a secondary, unique index on the PartyType table.
			/// </summary>
			/// <param name="indexName">The name of the index.</param>
			/// <param name="columns">The columns that describe a unique key.</param>
			public PartyTypeKeyExternalId0Index(string indexName, System.Data.DataColumn[] columns) : 
					base(indexName, columns)
			{
			}
			
			/// <summary>
			/// Finds a row in the PartyType table containing the key elements.
			/// </summary>
			/// <param name="externalId0">The ExternalId0 element of the key.</param>
			/// <returns>The PartyType row that contains the key elements, or null if there is no match.</returns>
			public PartyTypeRow Find(string externalId0)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((PartyTypeRow)(base.Find(new object[] {
							externalId0})));
			}
			
			/// <summary>
			/// Finds a row in the PartyType table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A PartyTypeKeyExternalId0 row that contains the key elements, or null if there is no match.</returns>
			public new PartyTypeRow Find(object[] key)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((PartyTypeRow)(base.Find(key)));
			}
		}
		
		/// <summary>
		/// Represents a means of identifying a PartyType row using a set of columns in which all values must be unique.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public class PartyTypeKeyExternalId1Index : global::Teraque.NonClusteredIndex, IPartyTypeIndex
		{
			
			/// <summary>
			/// Create a secondary, unique index on the PartyType table.
			/// </summary>
			/// <param name="indexName">The name of the index.</param>
			/// <param name="columns">The columns that describe a unique key.</param>
			public PartyTypeKeyExternalId1Index(string indexName, System.Data.DataColumn[] columns) : 
					base(indexName, columns)
			{
			}
			
			/// <summary>
			/// Finds a row in the PartyType table containing the key elements.
			/// </summary>
			/// <param name="externalId1">The ExternalId1 element of the key.</param>
			/// <returns>The PartyType row that contains the key elements, or null if there is no match.</returns>
			public PartyTypeRow Find(string externalId1)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((PartyTypeRow)(base.Find(new object[] {
							externalId1})));
			}
			
			/// <summary>
			/// Finds a row in the PartyType table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A PartyTypeKeyExternalId1 row that contains the key elements, or null if there is no match.</returns>
			public new PartyTypeRow Find(object[] key)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((PartyTypeRow)(base.Find(key)));
			}
		}
		
		/// <summary>
		/// Represents a means of identifying a Position row using a set of columns in which all values must be unique.
		/// </summary>
		public interface IPositionIndex
		{
			
			/// <summary>
			/// Finds a row in the Position table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A DepartmentRow that contains the key elements, or null if there is no match.</returns>
			PositionRow Find(object[] key);
		}
		
		/// <summary>
		/// Represents a means of identifying a Position row using a set of columns in which all values must be unique.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public class PositionKeyIndex : global::Teraque.ClusteredIndex, IPositionIndex
		{
			
			/// <summary>
			/// Create a primary, unique index on the Position table.
			/// </summary>
			/// <param name="indexName">The name of the index.</param>
			/// <param name="columns">The columns that describe a unique key.</param>
			public PositionKeyIndex(string indexName, System.Data.DataColumn[] columns) : 
					base(indexName, columns)
			{
			}
			
			/// <summary>
			/// Finds a row in the Position table containing the key elements.
			/// </summary>
			/// <param name="positionId">The PositionId element of the key.</param>
			/// <returns>The Position row that contains the key elements, or null if there is no match.</returns>
			public PositionRow Find(System.Guid positionId)
			{
				return ((PositionRow)(base.Find(new object[] {
							positionId})));
			}
			
			/// <summary>
			/// Finds a row in the Position table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A PositionKey row that contains the key elements, or null if there is no match.</returns>
			public new PositionRow Find(object[] key)
			{
				return ((PositionRow)(base.Find(key)));
			}
		}
		
		/// <summary>
		/// Represents a means of identifying a Position row using a set of columns in which all values must be unique.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public class PositionKeyAccountPositionTypeCodeSecurityIdIndex : global::Teraque.NonClusteredIndex, IPositionIndex
		{
			
			/// <summary>
			/// Create a secondary, unique index on the Position table.
			/// </summary>
			/// <param name="indexName">The name of the index.</param>
			/// <param name="columns">The columns that describe a unique key.</param>
			public PositionKeyAccountPositionTypeCodeSecurityIdIndex(string indexName, System.Data.DataColumn[] columns) : 
					base(indexName, columns)
			{
			}
			
			/// <summary>
			/// Finds a row in the Position table containing the key elements.
			/// </summary>
			/// <param name="accountId">The AccountId element of the key.</param>
			/// <param name="positionTypeCode">The PositionTypeCode element of the key.</param>
			/// <param name="securityId">The SecurityId element of the key.</param>
			/// <returns>The Position row that contains the key elements, or null if there is no match.</returns>
			public PositionRow Find(System.Guid accountId, Teraque.PositionTypeCode positionTypeCode, System.Guid securityId)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((PositionRow)(base.Find(new object[] {
							accountId,
							positionTypeCode,
							securityId})));
			}
			
			/// <summary>
			/// Finds a row in the Position table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A PositionKeyAccountPositionTypeCodeSecurityId row that contains the key elements, or null if there is no match.</returns>
			public new PositionRow Find(object[] key)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((PositionRow)(base.Find(key)));
			}
		}
		
		/// <summary>
		/// Represents a means of identifying a Position row using a set of columns in which all values must be unique.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public class PositionKeyExternalId0Index : global::Teraque.NonClusteredIndex, IPositionIndex
		{
			
			/// <summary>
			/// Create a secondary, unique index on the Position table.
			/// </summary>
			/// <param name="indexName">The name of the index.</param>
			/// <param name="columns">The columns that describe a unique key.</param>
			public PositionKeyExternalId0Index(string indexName, System.Data.DataColumn[] columns) : 
					base(indexName, columns)
			{
			}
			
			/// <summary>
			/// Finds a row in the Position table containing the key elements.
			/// </summary>
			/// <param name="externalId0">The ExternalId0 element of the key.</param>
			/// <returns>The Position row that contains the key elements, or null if there is no match.</returns>
			public PositionRow Find(string externalId0)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((PositionRow)(base.Find(new object[] {
							externalId0})));
			}
			
			/// <summary>
			/// Finds a row in the Position table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A PositionKeyExternalId0 row that contains the key elements, or null if there is no match.</returns>
			public new PositionRow Find(object[] key)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((PositionRow)(base.Find(key)));
			}
		}
		
		/// <summary>
		/// Represents a means of identifying a Position row using a set of columns in which all values must be unique.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public class PositionKeyExternalId1Index : global::Teraque.NonClusteredIndex, IPositionIndex
		{
			
			/// <summary>
			/// Create a secondary, unique index on the Position table.
			/// </summary>
			/// <param name="indexName">The name of the index.</param>
			/// <param name="columns">The columns that describe a unique key.</param>
			public PositionKeyExternalId1Index(string indexName, System.Data.DataColumn[] columns) : 
					base(indexName, columns)
			{
			}
			
			/// <summary>
			/// Finds a row in the Position table containing the key elements.
			/// </summary>
			/// <param name="externalId1">The ExternalId1 element of the key.</param>
			/// <returns>The Position row that contains the key elements, or null if there is no match.</returns>
			public PositionRow Find(string externalId1)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((PositionRow)(base.Find(new object[] {
							externalId1})));
			}
			
			/// <summary>
			/// Finds a row in the Position table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A PositionKeyExternalId1 row that contains the key elements, or null if there is no match.</returns>
			public new PositionRow Find(object[] key)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((PositionRow)(base.Find(key)));
			}
		}
		
		/// <summary>
		/// Represents a means of identifying a Position row using a set of columns in which all values must be unique.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public class PositionKeyExternalId2Index : global::Teraque.NonClusteredIndex, IPositionIndex
		{
			
			/// <summary>
			/// Create a secondary, unique index on the Position table.
			/// </summary>
			/// <param name="indexName">The name of the index.</param>
			/// <param name="columns">The columns that describe a unique key.</param>
			public PositionKeyExternalId2Index(string indexName, System.Data.DataColumn[] columns) : 
					base(indexName, columns)
			{
			}
			
			/// <summary>
			/// Finds a row in the Position table containing the key elements.
			/// </summary>
			/// <param name="externalId2">The ExternalId2 element of the key.</param>
			/// <returns>The Position row that contains the key elements, or null if there is no match.</returns>
			public PositionRow Find(string externalId2)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((PositionRow)(base.Find(new object[] {
							externalId2})));
			}
			
			/// <summary>
			/// Finds a row in the Position table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A PositionKeyExternalId2 row that contains the key elements, or null if there is no match.</returns>
			public new PositionRow Find(object[] key)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((PositionRow)(base.Find(key)));
			}
		}
		
		/// <summary>
		/// Represents a means of identifying a Position row using a set of columns in which all values must be unique.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public class PositionKeyExternalId3Index : global::Teraque.NonClusteredIndex, IPositionIndex
		{
			
			/// <summary>
			/// Create a secondary, unique index on the Position table.
			/// </summary>
			/// <param name="indexName">The name of the index.</param>
			/// <param name="columns">The columns that describe a unique key.</param>
			public PositionKeyExternalId3Index(string indexName, System.Data.DataColumn[] columns) : 
					base(indexName, columns)
			{
			}
			
			/// <summary>
			/// Finds a row in the Position table containing the key elements.
			/// </summary>
			/// <param name="externalId3">The ExternalId3 element of the key.</param>
			/// <returns>The Position row that contains the key elements, or null if there is no match.</returns>
			public PositionRow Find(string externalId3)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((PositionRow)(base.Find(new object[] {
							externalId3})));
			}
			
			/// <summary>
			/// Finds a row in the Position table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A PositionKeyExternalId3 row that contains the key elements, or null if there is no match.</returns>
			public new PositionRow Find(object[] key)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((PositionRow)(base.Find(key)));
			}
		}
		
		/// <summary>
		/// Represents a means of identifying a PositionSeries row using a set of columns in which all values must be unique.
		/// </summary>
		public interface IPositionSeriesIndex
		{
			
			/// <summary>
			/// Finds a row in the PositionSeries table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A DepartmentRow that contains the key elements, or null if there is no match.</returns>
			PositionSeriesRow Find(object[] key);
		}
		
		/// <summary>
		/// Represents a means of identifying a PositionSeries row using a set of columns in which all values must be unique.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public class PositionSeriesKeyIndex : global::Teraque.ClusteredIndex, IPositionSeriesIndex
		{
			
			/// <summary>
			/// Create a primary, unique index on the PositionSeries table.
			/// </summary>
			/// <param name="indexName">The name of the index.</param>
			/// <param name="columns">The columns that describe a unique key.</param>
			public PositionSeriesKeyIndex(string indexName, System.Data.DataColumn[] columns) : 
					base(indexName, columns)
			{
			}
			
			/// <summary>
			/// Finds a row in the PositionSeries table containing the key elements.
			/// </summary>
			/// <param name="positionSeriesId">The PositionSeriesId element of the key.</param>
			/// <returns>The PositionSeries row that contains the key elements, or null if there is no match.</returns>
			public PositionSeriesRow Find(System.Guid positionSeriesId)
			{
				return ((PositionSeriesRow)(base.Find(new object[] {
							positionSeriesId})));
			}
			
			/// <summary>
			/// Finds a row in the PositionSeries table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A PositionSeriesKey row that contains the key elements, or null if there is no match.</returns>
			public new PositionSeriesRow Find(object[] key)
			{
				return ((PositionSeriesRow)(base.Find(key)));
			}
		}
		
		/// <summary>
		/// Represents a means of identifying a PositionSeries row using a set of columns in which all values must be unique.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public class PositionSeriesKeyDatePositionIdIndex : global::Teraque.NonClusteredIndex, IPositionSeriesIndex
		{
			
			/// <summary>
			/// Create a secondary, unique index on the PositionSeries table.
			/// </summary>
			/// <param name="indexName">The name of the index.</param>
			/// <param name="columns">The columns that describe a unique key.</param>
			public PositionSeriesKeyDatePositionIdIndex(string indexName, System.Data.DataColumn[] columns) : 
					base(indexName, columns)
			{
			}
			
			/// <summary>
			/// Finds a row in the PositionSeries table containing the key elements.
			/// </summary>
			/// <param name="date">The Date element of the key.</param>
			/// <param name="positionId">The PositionId element of the key.</param>
			/// <returns>The PositionSeries row that contains the key elements, or null if there is no match.</returns>
			public PositionSeriesRow Find(System.DateTime date, System.Guid positionId)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((PositionSeriesRow)(base.Find(new object[] {
							date,
							positionId})));
			}
			
			/// <summary>
			/// Finds a row in the PositionSeries table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A PositionSeriesKeyDatePositionId row that contains the key elements, or null if there is no match.</returns>
			public new PositionSeriesRow Find(object[] key)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((PositionSeriesRow)(base.Find(key)));
			}
		}
		
		/// <summary>
		/// Represents a means of identifying a PositionSeries row using a set of columns in which all values must be unique.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public class PositionSeriesKeyExternalId0Index : global::Teraque.NonClusteredIndex, IPositionSeriesIndex
		{
			
			/// <summary>
			/// Create a secondary, unique index on the PositionSeries table.
			/// </summary>
			/// <param name="indexName">The name of the index.</param>
			/// <param name="columns">The columns that describe a unique key.</param>
			public PositionSeriesKeyExternalId0Index(string indexName, System.Data.DataColumn[] columns) : 
					base(indexName, columns)
			{
			}
			
			/// <summary>
			/// Finds a row in the PositionSeries table containing the key elements.
			/// </summary>
			/// <param name="externalId0">The ExternalId0 element of the key.</param>
			/// <returns>The PositionSeries row that contains the key elements, or null if there is no match.</returns>
			public PositionSeriesRow Find(string externalId0)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((PositionSeriesRow)(base.Find(new object[] {
							externalId0})));
			}
			
			/// <summary>
			/// Finds a row in the PositionSeries table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A PositionSeriesKeyExternalId0 row that contains the key elements, or null if there is no match.</returns>
			public new PositionSeriesRow Find(object[] key)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((PositionSeriesRow)(base.Find(key)));
			}
		}
		
		/// <summary>
		/// Represents a means of identifying a PositionSeries row using a set of columns in which all values must be unique.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public class PositionSeriesKeyExternalId1Index : global::Teraque.NonClusteredIndex, IPositionSeriesIndex
		{
			
			/// <summary>
			/// Create a secondary, unique index on the PositionSeries table.
			/// </summary>
			/// <param name="indexName">The name of the index.</param>
			/// <param name="columns">The columns that describe a unique key.</param>
			public PositionSeriesKeyExternalId1Index(string indexName, System.Data.DataColumn[] columns) : 
					base(indexName, columns)
			{
			}
			
			/// <summary>
			/// Finds a row in the PositionSeries table containing the key elements.
			/// </summary>
			/// <param name="externalId1">The ExternalId1 element of the key.</param>
			/// <returns>The PositionSeries row that contains the key elements, or null if there is no match.</returns>
			public PositionSeriesRow Find(string externalId1)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((PositionSeriesRow)(base.Find(new object[] {
							externalId1})));
			}
			
			/// <summary>
			/// Finds a row in the PositionSeries table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A PositionSeriesKeyExternalId1 row that contains the key elements, or null if there is no match.</returns>
			public new PositionSeriesRow Find(object[] key)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((PositionSeriesRow)(base.Find(key)));
			}
		}
		
		/// <summary>
		/// Represents a means of identifying a PositionType row using a set of columns in which all values must be unique.
		/// </summary>
		public interface IPositionTypeIndex
		{
			
			/// <summary>
			/// Finds a row in the PositionType table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A DepartmentRow that contains the key elements, or null if there is no match.</returns>
			PositionTypeRow Find(object[] key);
		}
		
		/// <summary>
		/// Represents a means of identifying a PositionType row using a set of columns in which all values must be unique.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public class PositionTypeKeyIndex : global::Teraque.ClusteredIndex, IPositionTypeIndex
		{
			
			/// <summary>
			/// Create a primary, unique index on the PositionType table.
			/// </summary>
			/// <param name="indexName">The name of the index.</param>
			/// <param name="columns">The columns that describe a unique key.</param>
			public PositionTypeKeyIndex(string indexName, System.Data.DataColumn[] columns) : 
					base(indexName, columns)
			{
			}
			
			/// <summary>
			/// Finds a row in the PositionType table containing the key elements.
			/// </summary>
			/// <param name="positionTypeCode">The PositionTypeCode element of the key.</param>
			/// <returns>The PositionType row that contains the key elements, or null if there is no match.</returns>
			public PositionTypeRow Find(Teraque.PositionTypeCode positionTypeCode)
			{
				return ((PositionTypeRow)(base.Find(new object[] {
							positionTypeCode})));
			}
			
			/// <summary>
			/// Finds a row in the PositionType table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A PositionTypeKey row that contains the key elements, or null if there is no match.</returns>
			public new PositionTypeRow Find(object[] key)
			{
				return ((PositionTypeRow)(base.Find(key)));
			}
		}
		
		/// <summary>
		/// Represents a means of identifying a PositionType row using a set of columns in which all values must be unique.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public class PositionTypeKeyExternalId0Index : global::Teraque.NonClusteredIndex, IPositionTypeIndex
		{
			
			/// <summary>
			/// Create a secondary, unique index on the PositionType table.
			/// </summary>
			/// <param name="indexName">The name of the index.</param>
			/// <param name="columns">The columns that describe a unique key.</param>
			public PositionTypeKeyExternalId0Index(string indexName, System.Data.DataColumn[] columns) : 
					base(indexName, columns)
			{
			}
			
			/// <summary>
			/// Finds a row in the PositionType table containing the key elements.
			/// </summary>
			/// <param name="externalId0">The ExternalId0 element of the key.</param>
			/// <returns>The PositionType row that contains the key elements, or null if there is no match.</returns>
			public PositionTypeRow Find(string externalId0)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((PositionTypeRow)(base.Find(new object[] {
							externalId0})));
			}
			
			/// <summary>
			/// Finds a row in the PositionType table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A PositionTypeKeyExternalId0 row that contains the key elements, or null if there is no match.</returns>
			public new PositionTypeRow Find(object[] key)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((PositionTypeRow)(base.Find(key)));
			}
		}
		
		/// <summary>
		/// Represents a means of identifying a PositionType row using a set of columns in which all values must be unique.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public class PositionTypeKeyExternalId1Index : global::Teraque.NonClusteredIndex, IPositionTypeIndex
		{
			
			/// <summary>
			/// Create a secondary, unique index on the PositionType table.
			/// </summary>
			/// <param name="indexName">The name of the index.</param>
			/// <param name="columns">The columns that describe a unique key.</param>
			public PositionTypeKeyExternalId1Index(string indexName, System.Data.DataColumn[] columns) : 
					base(indexName, columns)
			{
			}
			
			/// <summary>
			/// Finds a row in the PositionType table containing the key elements.
			/// </summary>
			/// <param name="externalId1">The ExternalId1 element of the key.</param>
			/// <returns>The PositionType row that contains the key elements, or null if there is no match.</returns>
			public PositionTypeRow Find(string externalId1)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((PositionTypeRow)(base.Find(new object[] {
							externalId1})));
			}
			
			/// <summary>
			/// Finds a row in the PositionType table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A PositionTypeKeyExternalId1 row that contains the key elements, or null if there is no match.</returns>
			public new PositionTypeRow Find(object[] key)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((PositionTypeRow)(base.Find(key)));
			}
		}
		
		/// <summary>
		/// Represents a means of identifying a PositionType row using a set of columns in which all values must be unique.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public class PositionTypeKeyExternalId2Index : global::Teraque.NonClusteredIndex, IPositionTypeIndex
		{
			
			/// <summary>
			/// Create a secondary, unique index on the PositionType table.
			/// </summary>
			/// <param name="indexName">The name of the index.</param>
			/// <param name="columns">The columns that describe a unique key.</param>
			public PositionTypeKeyExternalId2Index(string indexName, System.Data.DataColumn[] columns) : 
					base(indexName, columns)
			{
			}
			
			/// <summary>
			/// Finds a row in the PositionType table containing the key elements.
			/// </summary>
			/// <param name="externalId2">The ExternalId2 element of the key.</param>
			/// <returns>The PositionType row that contains the key elements, or null if there is no match.</returns>
			public PositionTypeRow Find(string externalId2)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((PositionTypeRow)(base.Find(new object[] {
							externalId2})));
			}
			
			/// <summary>
			/// Finds a row in the PositionType table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A PositionTypeKeyExternalId2 row that contains the key elements, or null if there is no match.</returns>
			public new PositionTypeRow Find(object[] key)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((PositionTypeRow)(base.Find(key)));
			}
		}
		
		/// <summary>
		/// Represents a means of identifying a PositionType row using a set of columns in which all values must be unique.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public class PositionTypeKeyExternalId3Index : global::Teraque.NonClusteredIndex, IPositionTypeIndex
		{
			
			/// <summary>
			/// Create a secondary, unique index on the PositionType table.
			/// </summary>
			/// <param name="indexName">The name of the index.</param>
			/// <param name="columns">The columns that describe a unique key.</param>
			public PositionTypeKeyExternalId3Index(string indexName, System.Data.DataColumn[] columns) : 
					base(indexName, columns)
			{
			}
			
			/// <summary>
			/// Finds a row in the PositionType table containing the key elements.
			/// </summary>
			/// <param name="externalId3">The ExternalId3 element of the key.</param>
			/// <returns>The PositionType row that contains the key elements, or null if there is no match.</returns>
			public PositionTypeRow Find(string externalId3)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((PositionTypeRow)(base.Find(new object[] {
							externalId3})));
			}
			
			/// <summary>
			/// Finds a row in the PositionType table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A PositionTypeKeyExternalId3 row that contains the key elements, or null if there is no match.</returns>
			public new PositionTypeRow Find(object[] key)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((PositionTypeRow)(base.Find(key)));
			}
		}
		
		/// <summary>
		/// Represents a means of identifying a Price row using a set of columns in which all values must be unique.
		/// </summary>
		public interface IPriceIndex
		{
			
			/// <summary>
			/// Finds a row in the Price table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A DepartmentRow that contains the key elements, or null if there is no match.</returns>
			PriceRow Find(object[] key);
		}
		
		/// <summary>
		/// Represents a means of identifying a Price row using a set of columns in which all values must be unique.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public class PriceKeyIndex : global::Teraque.ClusteredIndex, IPriceIndex
		{
			
			/// <summary>
			/// Create a primary, unique index on the Price table.
			/// </summary>
			/// <param name="indexName">The name of the index.</param>
			/// <param name="columns">The columns that describe a unique key.</param>
			public PriceKeyIndex(string indexName, System.Data.DataColumn[] columns) : 
					base(indexName, columns)
			{
			}
			
			/// <summary>
			/// Finds a row in the Price table containing the key elements.
			/// </summary>
			/// <param name="securityId">The SecurityId element of the key.</param>
			/// <param name="currencyId">The CurrencyId element of the key.</param>
			/// <returns>The Price row that contains the key elements, or null if there is no match.</returns>
			public PriceRow Find(System.Guid securityId, System.Guid currencyId)
			{
				return ((PriceRow)(base.Find(new object[] {
							securityId,
							currencyId})));
			}
			
			/// <summary>
			/// Finds a row in the Price table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A PriceKey row that contains the key elements, or null if there is no match.</returns>
			public new PriceRow Find(object[] key)
			{
				return ((PriceRow)(base.Find(key)));
			}
		}
		
		/// <summary>
		/// Represents a means of identifying a Property row using a set of columns in which all values must be unique.
		/// </summary>
		public interface IPropertyIndex
		{
			
			/// <summary>
			/// Finds a row in the Property table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A DepartmentRow that contains the key elements, or null if there is no match.</returns>
			PropertyRow Find(object[] key);
		}
		
		/// <summary>
		/// Represents a means of identifying a Property row using a set of columns in which all values must be unique.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public class PropertyKeyIndex : global::Teraque.ClusteredIndex, IPropertyIndex
		{
			
			/// <summary>
			/// Create a primary, unique index on the Property table.
			/// </summary>
			/// <param name="indexName">The name of the index.</param>
			/// <param name="columns">The columns that describe a unique key.</param>
			public PropertyKeyIndex(string indexName, System.Data.DataColumn[] columns) : 
					base(indexName, columns)
			{
			}
			
			/// <summary>
			/// Finds a row in the Property table containing the key elements.
			/// </summary>
			/// <param name="propertyId">The PropertyId element of the key.</param>
			/// <returns>The Property row that contains the key elements, or null if there is no match.</returns>
			public PropertyRow Find(System.Guid propertyId)
			{
				return ((PropertyRow)(base.Find(new object[] {
							propertyId})));
			}
			
			/// <summary>
			/// Finds a row in the Property table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A PropertyKey row that contains the key elements, or null if there is no match.</returns>
			public new PropertyRow Find(object[] key)
			{
				return ((PropertyRow)(base.Find(key)));
			}
		}
		
		/// <summary>
		/// Represents a means of identifying a Property row using a set of columns in which all values must be unique.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public class PropertyKeyExternalId0Index : global::Teraque.NonClusteredIndex, IPropertyIndex
		{
			
			/// <summary>
			/// Create a secondary, unique index on the Property table.
			/// </summary>
			/// <param name="indexName">The name of the index.</param>
			/// <param name="columns">The columns that describe a unique key.</param>
			public PropertyKeyExternalId0Index(string indexName, System.Data.DataColumn[] columns) : 
					base(indexName, columns)
			{
			}
			
			/// <summary>
			/// Finds a row in the Property table containing the key elements.
			/// </summary>
			/// <param name="externalId0">The ExternalId0 element of the key.</param>
			/// <returns>The Property row that contains the key elements, or null if there is no match.</returns>
			public PropertyRow Find(string externalId0)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((PropertyRow)(base.Find(new object[] {
							externalId0})));
			}
			
			/// <summary>
			/// Finds a row in the Property table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A PropertyKeyExternalId0 row that contains the key elements, or null if there is no match.</returns>
			public new PropertyRow Find(object[] key)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((PropertyRow)(base.Find(key)));
			}
		}
		
		/// <summary>
		/// Represents a means of identifying a PropertyStore row using a set of columns in which all values must be unique.
		/// </summary>
		public interface IPropertyStoreIndex
		{
			
			/// <summary>
			/// Finds a row in the PropertyStore table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A DepartmentRow that contains the key elements, or null if there is no match.</returns>
			PropertyStoreRow Find(object[] key);
		}
		
		/// <summary>
		/// Represents a means of identifying a PropertyStore row using a set of columns in which all values must be unique.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public class PropertyStoreKeyIndex : global::Teraque.ClusteredIndex, IPropertyStoreIndex
		{
			
			/// <summary>
			/// Create a primary, unique index on the PropertyStore table.
			/// </summary>
			/// <param name="indexName">The name of the index.</param>
			/// <param name="columns">The columns that describe a unique key.</param>
			public PropertyStoreKeyIndex(string indexName, System.Data.DataColumn[] columns) : 
					base(indexName, columns)
			{
			}
			
			/// <summary>
			/// Finds a row in the PropertyStore table containing the key elements.
			/// </summary>
			/// <param name="propertyStoreId">The PropertyStoreId element of the key.</param>
			/// <returns>The PropertyStore row that contains the key elements, or null if there is no match.</returns>
			public PropertyStoreRow Find(System.Guid propertyStoreId)
			{
				return ((PropertyStoreRow)(base.Find(new object[] {
							propertyStoreId})));
			}
			
			/// <summary>
			/// Finds a row in the PropertyStore table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A PropertyStoreKey row that contains the key elements, or null if there is no match.</returns>
			public new PropertyStoreRow Find(object[] key)
			{
				return ((PropertyStoreRow)(base.Find(key)));
			}
		}
		
		/// <summary>
		/// Represents a means of identifying a PropertyStore row using a set of columns in which all values must be unique.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public class PropertyStoreKeyEntityIdPropertyIdIndex : global::Teraque.NonClusteredIndex, IPropertyStoreIndex
		{
			
			/// <summary>
			/// Create a secondary, unique index on the PropertyStore table.
			/// </summary>
			/// <param name="indexName">The name of the index.</param>
			/// <param name="columns">The columns that describe a unique key.</param>
			public PropertyStoreKeyEntityIdPropertyIdIndex(string indexName, System.Data.DataColumn[] columns) : 
					base(indexName, columns)
			{
			}
			
			/// <summary>
			/// Finds a row in the PropertyStore table containing the key elements.
			/// </summary>
			/// <param name="entityId">The EntityId element of the key.</param>
			/// <param name="propertyId">The PropertyId element of the key.</param>
			/// <returns>The PropertyStore row that contains the key elements, or null if there is no match.</returns>
			public PropertyStoreRow Find(System.Guid entityId, System.Guid propertyId)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((PropertyStoreRow)(base.Find(new object[] {
							entityId,
							propertyId})));
			}
			
			/// <summary>
			/// Finds a row in the PropertyStore table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A PropertyStoreKeyEntityIdPropertyId row that contains the key elements, or null if there is no match.</returns>
			public new PropertyStoreRow Find(object[] key)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((PropertyStoreRow)(base.Find(key)));
			}
		}
		
		/// <summary>
		/// Represents a means of identifying a PropertyStore row using a set of columns in which all values must be unique.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public class PropertyStoreKeyExternalId0Index : global::Teraque.NonClusteredIndex, IPropertyStoreIndex
		{
			
			/// <summary>
			/// Create a secondary, unique index on the PropertyStore table.
			/// </summary>
			/// <param name="indexName">The name of the index.</param>
			/// <param name="columns">The columns that describe a unique key.</param>
			public PropertyStoreKeyExternalId0Index(string indexName, System.Data.DataColumn[] columns) : 
					base(indexName, columns)
			{
			}
			
			/// <summary>
			/// Finds a row in the PropertyStore table containing the key elements.
			/// </summary>
			/// <param name="externalId0">The ExternalId0 element of the key.</param>
			/// <returns>The PropertyStore row that contains the key elements, or null if there is no match.</returns>
			public PropertyStoreRow Find(string externalId0)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((PropertyStoreRow)(base.Find(new object[] {
							externalId0})));
			}
			
			/// <summary>
			/// Finds a row in the PropertyStore table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A PropertyStoreKeyExternalId0 row that contains the key elements, or null if there is no match.</returns>
			public new PropertyStoreRow Find(object[] key)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((PropertyStoreRow)(base.Find(key)));
			}
		}
		
		/// <summary>
		/// Represents a means of identifying a Province row using a set of columns in which all values must be unique.
		/// </summary>
		public interface IProvinceIndex
		{
			
			/// <summary>
			/// Finds a row in the Province table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A DepartmentRow that contains the key elements, or null if there is no match.</returns>
			ProvinceRow Find(object[] key);
		}
		
		/// <summary>
		/// Represents a means of identifying a Province row using a set of columns in which all values must be unique.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public class ProvinceKeyIndex : global::Teraque.ClusteredIndex, IProvinceIndex
		{
			
			/// <summary>
			/// Create a primary, unique index on the Province table.
			/// </summary>
			/// <param name="indexName">The name of the index.</param>
			/// <param name="columns">The columns that describe a unique key.</param>
			public ProvinceKeyIndex(string indexName, System.Data.DataColumn[] columns) : 
					base(indexName, columns)
			{
			}
			
			/// <summary>
			/// Finds a row in the Province table containing the key elements.
			/// </summary>
			/// <param name="provinceId">The ProvinceId element of the key.</param>
			/// <returns>The Province row that contains the key elements, or null if there is no match.</returns>
			public ProvinceRow Find(System.Guid provinceId)
			{
				return ((ProvinceRow)(base.Find(new object[] {
							provinceId})));
			}
			
			/// <summary>
			/// Finds a row in the Province table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A ProvinceKey row that contains the key elements, or null if there is no match.</returns>
			public new ProvinceRow Find(object[] key)
			{
				return ((ProvinceRow)(base.Find(key)));
			}
		}
		
		/// <summary>
		/// Represents a means of identifying a Province row using a set of columns in which all values must be unique.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public class ProvinceKeyExternalId0Index : global::Teraque.NonClusteredIndex, IProvinceIndex
		{
			
			/// <summary>
			/// Create a secondary, unique index on the Province table.
			/// </summary>
			/// <param name="indexName">The name of the index.</param>
			/// <param name="columns">The columns that describe a unique key.</param>
			public ProvinceKeyExternalId0Index(string indexName, System.Data.DataColumn[] columns) : 
					base(indexName, columns)
			{
			}
			
			/// <summary>
			/// Finds a row in the Province table containing the key elements.
			/// </summary>
			/// <param name="externalId0">The ExternalId0 element of the key.</param>
			/// <returns>The Province row that contains the key elements, or null if there is no match.</returns>
			public ProvinceRow Find(string externalId0)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((ProvinceRow)(base.Find(new object[] {
							externalId0})));
			}
			
			/// <summary>
			/// Finds a row in the Province table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A ProvinceKeyExternalId0 row that contains the key elements, or null if there is no match.</returns>
			public new ProvinceRow Find(object[] key)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((ProvinceRow)(base.Find(key)));
			}
		}
		
		/// <summary>
		/// Represents a means of identifying a Province row using a set of columns in which all values must be unique.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public class ProvinceKeyExternalId1Index : global::Teraque.NonClusteredIndex, IProvinceIndex
		{
			
			/// <summary>
			/// Create a secondary, unique index on the Province table.
			/// </summary>
			/// <param name="indexName">The name of the index.</param>
			/// <param name="columns">The columns that describe a unique key.</param>
			public ProvinceKeyExternalId1Index(string indexName, System.Data.DataColumn[] columns) : 
					base(indexName, columns)
			{
			}
			
			/// <summary>
			/// Finds a row in the Province table containing the key elements.
			/// </summary>
			/// <param name="externalId1">The ExternalId1 element of the key.</param>
			/// <returns>The Province row that contains the key elements, or null if there is no match.</returns>
			public ProvinceRow Find(string externalId1)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((ProvinceRow)(base.Find(new object[] {
							externalId1})));
			}
			
			/// <summary>
			/// Finds a row in the Province table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A ProvinceKeyExternalId1 row that contains the key elements, or null if there is no match.</returns>
			public new ProvinceRow Find(object[] key)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((ProvinceRow)(base.Find(key)));
			}
		}
		
		/// <summary>
		/// Represents a means of identifying a Security row using a set of columns in which all values must be unique.
		/// </summary>
		public interface ISecurityIndex
		{
			
			/// <summary>
			/// Finds a row in the Security table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A DepartmentRow that contains the key elements, or null if there is no match.</returns>
			SecurityRow Find(object[] key);
		}
		
		/// <summary>
		/// Represents a means of identifying a Security row using a set of columns in which all values must be unique.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public class SecurityKeyIndex : global::Teraque.ClusteredIndex, ISecurityIndex
		{
			
			/// <summary>
			/// Create a primary, unique index on the Security table.
			/// </summary>
			/// <param name="indexName">The name of the index.</param>
			/// <param name="columns">The columns that describe a unique key.</param>
			public SecurityKeyIndex(string indexName, System.Data.DataColumn[] columns) : 
					base(indexName, columns)
			{
			}
			
			/// <summary>
			/// Finds a row in the Security table containing the key elements.
			/// </summary>
			/// <param name="securityId">The SecurityId element of the key.</param>
			/// <returns>The Security row that contains the key elements, or null if there is no match.</returns>
			public SecurityRow Find(System.Guid securityId)
			{
				return ((SecurityRow)(base.Find(new object[] {
							securityId})));
			}
			
			/// <summary>
			/// Finds a row in the Security table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A SecurityKey row that contains the key elements, or null if there is no match.</returns>
			public new SecurityRow Find(object[] key)
			{
				return ((SecurityRow)(base.Find(key)));
			}
		}
		
		/// <summary>
		/// Represents a means of identifying a SecuritySeries row using a set of columns in which all values must be unique.
		/// </summary>
		public interface ISecuritySeriesIndex
		{
			
			/// <summary>
			/// Finds a row in the SecuritySeries table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A DepartmentRow that contains the key elements, or null if there is no match.</returns>
			SecuritySeriesRow Find(object[] key);
		}
		
		/// <summary>
		/// Represents a means of identifying a SecuritySeries row using a set of columns in which all values must be unique.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public class SecuritySeriesKeyIndex : global::Teraque.ClusteredIndex, ISecuritySeriesIndex
		{
			
			/// <summary>
			/// Create a primary, unique index on the SecuritySeries table.
			/// </summary>
			/// <param name="indexName">The name of the index.</param>
			/// <param name="columns">The columns that describe a unique key.</param>
			public SecuritySeriesKeyIndex(string indexName, System.Data.DataColumn[] columns) : 
					base(indexName, columns)
			{
			}
			
			/// <summary>
			/// Finds a row in the SecuritySeries table containing the key elements.
			/// </summary>
			/// <param name="securitySeriesId">The SecuritySeriesId element of the key.</param>
			/// <returns>The SecuritySeries row that contains the key elements, or null if there is no match.</returns>
			public SecuritySeriesRow Find(System.Guid securitySeriesId)
			{
				return ((SecuritySeriesRow)(base.Find(new object[] {
							securitySeriesId})));
			}
			
			/// <summary>
			/// Finds a row in the SecuritySeries table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A SecuritySeriesKey row that contains the key elements, or null if there is no match.</returns>
			public new SecuritySeriesRow Find(object[] key)
			{
				return ((SecuritySeriesRow)(base.Find(key)));
			}
		}
		
		/// <summary>
		/// Represents a means of identifying a SecuritySeries row using a set of columns in which all values must be unique.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public class SecuritySeriesKeyExternalId0Index : global::Teraque.NonClusteredIndex, ISecuritySeriesIndex
		{
			
			/// <summary>
			/// Create a secondary, unique index on the SecuritySeries table.
			/// </summary>
			/// <param name="indexName">The name of the index.</param>
			/// <param name="columns">The columns that describe a unique key.</param>
			public SecuritySeriesKeyExternalId0Index(string indexName, System.Data.DataColumn[] columns) : 
					base(indexName, columns)
			{
			}
			
			/// <summary>
			/// Finds a row in the SecuritySeries table containing the key elements.
			/// </summary>
			/// <param name="externalId0">The ExternalId0 element of the key.</param>
			/// <returns>The SecuritySeries row that contains the key elements, or null if there is no match.</returns>
			public SecuritySeriesRow Find(string externalId0)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((SecuritySeriesRow)(base.Find(new object[] {
							externalId0})));
			}
			
			/// <summary>
			/// Finds a row in the SecuritySeries table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A SecuritySeriesKeyExternalId0 row that contains the key elements, or null if there is no match.</returns>
			public new SecuritySeriesRow Find(object[] key)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((SecuritySeriesRow)(base.Find(key)));
			}
		}
		
		/// <summary>
		/// Represents a means of identifying a SecuritySeries row using a set of columns in which all values must be unique.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public class SecuritySeriesKeyExternalId1Index : global::Teraque.NonClusteredIndex, ISecuritySeriesIndex
		{
			
			/// <summary>
			/// Create a secondary, unique index on the SecuritySeries table.
			/// </summary>
			/// <param name="indexName">The name of the index.</param>
			/// <param name="columns">The columns that describe a unique key.</param>
			public SecuritySeriesKeyExternalId1Index(string indexName, System.Data.DataColumn[] columns) : 
					base(indexName, columns)
			{
			}
			
			/// <summary>
			/// Finds a row in the SecuritySeries table containing the key elements.
			/// </summary>
			/// <param name="externalId1">The ExternalId1 element of the key.</param>
			/// <returns>The SecuritySeries row that contains the key elements, or null if there is no match.</returns>
			public SecuritySeriesRow Find(string externalId1)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((SecuritySeriesRow)(base.Find(new object[] {
							externalId1})));
			}
			
			/// <summary>
			/// Finds a row in the SecuritySeries table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A SecuritySeriesKeyExternalId1 row that contains the key elements, or null if there is no match.</returns>
			public new SecuritySeriesRow Find(object[] key)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((SecuritySeriesRow)(base.Find(key)));
			}
		}
		
		/// <summary>
		/// Represents a means of identifying a SecuritySeries row using a set of columns in which all values must be unique.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public class SecuritySeriesKeySecurityIdDateIndex : global::Teraque.NonClusteredIndex, ISecuritySeriesIndex
		{
			
			/// <summary>
			/// Create a secondary, unique index on the SecuritySeries table.
			/// </summary>
			/// <param name="indexName">The name of the index.</param>
			/// <param name="columns">The columns that describe a unique key.</param>
			public SecuritySeriesKeySecurityIdDateIndex(string indexName, System.Data.DataColumn[] columns) : 
					base(indexName, columns)
			{
			}
			
			/// <summary>
			/// Finds a row in the SecuritySeries table containing the key elements.
			/// </summary>
			/// <param name="securityId">The SecurityId element of the key.</param>
			/// <param name="date">The Date element of the key.</param>
			/// <returns>The SecuritySeries row that contains the key elements, or null if there is no match.</returns>
			public SecuritySeriesRow Find(System.Guid securityId, System.DateTime date)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((SecuritySeriesRow)(base.Find(new object[] {
							securityId,
							date})));
			}
			
			/// <summary>
			/// Finds a row in the SecuritySeries table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A SecuritySeriesKeySecurityIdDate row that contains the key elements, or null if there is no match.</returns>
			public new SecuritySeriesRow Find(object[] key)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((SecuritySeriesRow)(base.Find(key)));
			}
		}
		
		/// <summary>
		/// Represents a means of identifying a SettlementUnit row using a set of columns in which all values must be unique.
		/// </summary>
		public interface ISettlementUnitIndex
		{
			
			/// <summary>
			/// Finds a row in the SettlementUnit table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A DepartmentRow that contains the key elements, or null if there is no match.</returns>
			SettlementUnitRow Find(object[] key);
		}
		
		/// <summary>
		/// Represents a means of identifying a SettlementUnit row using a set of columns in which all values must be unique.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public class SettlementUnitKeyIndex : global::Teraque.ClusteredIndex, ISettlementUnitIndex
		{
			
			/// <summary>
			/// Create a primary, unique index on the SettlementUnit table.
			/// </summary>
			/// <param name="indexName">The name of the index.</param>
			/// <param name="columns">The columns that describe a unique key.</param>
			public SettlementUnitKeyIndex(string indexName, System.Data.DataColumn[] columns) : 
					base(indexName, columns)
			{
			}
			
			/// <summary>
			/// Finds a row in the SettlementUnit table containing the key elements.
			/// </summary>
			/// <param name="settlementUnitCode">The SettlementUnitCode element of the key.</param>
			/// <returns>The SettlementUnit row that contains the key elements, or null if there is no match.</returns>
			public SettlementUnitRow Find(Teraque.SettlementUnitCode settlementUnitCode)
			{
				return ((SettlementUnitRow)(base.Find(new object[] {
							settlementUnitCode})));
			}
			
			/// <summary>
			/// Finds a row in the SettlementUnit table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A SettlementUnitKey row that contains the key elements, or null if there is no match.</returns>
			public new SettlementUnitRow Find(object[] key)
			{
				return ((SettlementUnitRow)(base.Find(key)));
			}
		}
		
		/// <summary>
		/// Represents a means of identifying a SettlementUnit row using a set of columns in which all values must be unique.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public class SettlementUnitKeyExternalId0Index : global::Teraque.NonClusteredIndex, ISettlementUnitIndex
		{
			
			/// <summary>
			/// Create a secondary, unique index on the SettlementUnit table.
			/// </summary>
			/// <param name="indexName">The name of the index.</param>
			/// <param name="columns">The columns that describe a unique key.</param>
			public SettlementUnitKeyExternalId0Index(string indexName, System.Data.DataColumn[] columns) : 
					base(indexName, columns)
			{
			}
			
			/// <summary>
			/// Finds a row in the SettlementUnit table containing the key elements.
			/// </summary>
			/// <param name="externalId0">The ExternalId0 element of the key.</param>
			/// <returns>The SettlementUnit row that contains the key elements, or null if there is no match.</returns>
			public SettlementUnitRow Find(string externalId0)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((SettlementUnitRow)(base.Find(new object[] {
							externalId0})));
			}
			
			/// <summary>
			/// Finds a row in the SettlementUnit table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A SettlementUnitKeyExternalId0 row that contains the key elements, or null if there is no match.</returns>
			public new SettlementUnitRow Find(object[] key)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((SettlementUnitRow)(base.Find(key)));
			}
		}
		
		/// <summary>
		/// Represents a means of identifying a Side row using a set of columns in which all values must be unique.
		/// </summary>
		public interface ISideIndex
		{
			
			/// <summary>
			/// Finds a row in the Side table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A DepartmentRow that contains the key elements, or null if there is no match.</returns>
			SideRow Find(object[] key);
		}
		
		/// <summary>
		/// Represents a means of identifying a Side row using a set of columns in which all values must be unique.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public class SideKeyIndex : global::Teraque.ClusteredIndex, ISideIndex
		{
			
			/// <summary>
			/// Create a primary, unique index on the Side table.
			/// </summary>
			/// <param name="indexName">The name of the index.</param>
			/// <param name="columns">The columns that describe a unique key.</param>
			public SideKeyIndex(string indexName, System.Data.DataColumn[] columns) : 
					base(indexName, columns)
			{
			}
			
			/// <summary>
			/// Finds a row in the Side table containing the key elements.
			/// </summary>
			/// <param name="sideCode">The SideCode element of the key.</param>
			/// <returns>The Side row that contains the key elements, or null if there is no match.</returns>
			public SideRow Find(Teraque.SideCode sideCode)
			{
				return ((SideRow)(base.Find(new object[] {
							sideCode})));
			}
			
			/// <summary>
			/// Finds a row in the Side table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A SideKey row that contains the key elements, or null if there is no match.</returns>
			public new SideRow Find(object[] key)
			{
				return ((SideRow)(base.Find(key)));
			}
		}
		
		/// <summary>
		/// Represents a means of identifying a Side row using a set of columns in which all values must be unique.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public class SideKeyExternalId0Index : global::Teraque.NonClusteredIndex, ISideIndex
		{
			
			/// <summary>
			/// Create a secondary, unique index on the Side table.
			/// </summary>
			/// <param name="indexName">The name of the index.</param>
			/// <param name="columns">The columns that describe a unique key.</param>
			public SideKeyExternalId0Index(string indexName, System.Data.DataColumn[] columns) : 
					base(indexName, columns)
			{
			}
			
			/// <summary>
			/// Finds a row in the Side table containing the key elements.
			/// </summary>
			/// <param name="externalId0">The ExternalId0 element of the key.</param>
			/// <returns>The Side row that contains the key elements, or null if there is no match.</returns>
			public SideRow Find(string externalId0)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((SideRow)(base.Find(new object[] {
							externalId0})));
			}
			
			/// <summary>
			/// Finds a row in the Side table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A SideKeyExternalId0 row that contains the key elements, or null if there is no match.</returns>
			public new SideRow Find(object[] key)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((SideRow)(base.Find(key)));
			}
		}
		
		/// <summary>
		/// Represents a means of identifying a Side row using a set of columns in which all values must be unique.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public class SideKeyExternalId1Index : global::Teraque.NonClusteredIndex, ISideIndex
		{
			
			/// <summary>
			/// Create a secondary, unique index on the Side table.
			/// </summary>
			/// <param name="indexName">The name of the index.</param>
			/// <param name="columns">The columns that describe a unique key.</param>
			public SideKeyExternalId1Index(string indexName, System.Data.DataColumn[] columns) : 
					base(indexName, columns)
			{
			}
			
			/// <summary>
			/// Finds a row in the Side table containing the key elements.
			/// </summary>
			/// <param name="externalId1">The ExternalId1 element of the key.</param>
			/// <returns>The Side row that contains the key elements, or null if there is no match.</returns>
			public SideRow Find(string externalId1)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((SideRow)(base.Find(new object[] {
							externalId1})));
			}
			
			/// <summary>
			/// Finds a row in the Side table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A SideKeyExternalId1 row that contains the key elements, or null if there is no match.</returns>
			public new SideRow Find(object[] key)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((SideRow)(base.Find(key)));
			}
		}
		
		/// <summary>
		/// Represents a means of identifying a Side row using a set of columns in which all values must be unique.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public class SideKeyExternalId2Index : global::Teraque.NonClusteredIndex, ISideIndex
		{
			
			/// <summary>
			/// Create a secondary, unique index on the Side table.
			/// </summary>
			/// <param name="indexName">The name of the index.</param>
			/// <param name="columns">The columns that describe a unique key.</param>
			public SideKeyExternalId2Index(string indexName, System.Data.DataColumn[] columns) : 
					base(indexName, columns)
			{
			}
			
			/// <summary>
			/// Finds a row in the Side table containing the key elements.
			/// </summary>
			/// <param name="externalId2">The ExternalId2 element of the key.</param>
			/// <returns>The Side row that contains the key elements, or null if there is no match.</returns>
			public SideRow Find(string externalId2)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((SideRow)(base.Find(new object[] {
							externalId2})));
			}
			
			/// <summary>
			/// Finds a row in the Side table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A SideKeyExternalId2 row that contains the key elements, or null if there is no match.</returns>
			public new SideRow Find(object[] key)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((SideRow)(base.Find(key)));
			}
		}
		
		/// <summary>
		/// Represents a means of identifying a Side row using a set of columns in which all values must be unique.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public class SideKeyExternalId3Index : global::Teraque.NonClusteredIndex, ISideIndex
		{
			
			/// <summary>
			/// Create a secondary, unique index on the Side table.
			/// </summary>
			/// <param name="indexName">The name of the index.</param>
			/// <param name="columns">The columns that describe a unique key.</param>
			public SideKeyExternalId3Index(string indexName, System.Data.DataColumn[] columns) : 
					base(indexName, columns)
			{
			}
			
			/// <summary>
			/// Finds a row in the Side table containing the key elements.
			/// </summary>
			/// <param name="externalId3">The ExternalId3 element of the key.</param>
			/// <returns>The Side row that contains the key elements, or null if there is no match.</returns>
			public SideRow Find(string externalId3)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((SideRow)(base.Find(new object[] {
							externalId3})));
			}
			
			/// <summary>
			/// Finds a row in the Side table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A SideKeyExternalId3 row that contains the key elements, or null if there is no match.</returns>
			public new SideRow Find(object[] key)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((SideRow)(base.Find(key)));
			}
		}
		
		/// <summary>
		/// Represents a means of identifying a SingleAccount row using a set of columns in which all values must be unique.
		/// </summary>
		public interface ISingleAccountIndex
		{
			
			/// <summary>
			/// Finds a row in the SingleAccount table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A DepartmentRow that contains the key elements, or null if there is no match.</returns>
			SingleAccountRow Find(object[] key);
		}
		
		/// <summary>
		/// Represents a means of identifying a SingleAccount row using a set of columns in which all values must be unique.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public class SingleAccountKeyIndex : global::Teraque.ClusteredIndex, ISingleAccountIndex
		{
			
			/// <summary>
			/// Create a primary, unique index on the SingleAccount table.
			/// </summary>
			/// <param name="indexName">The name of the index.</param>
			/// <param name="columns">The columns that describe a unique key.</param>
			public SingleAccountKeyIndex(string indexName, System.Data.DataColumn[] columns) : 
					base(indexName, columns)
			{
			}
			
			/// <summary>
			/// Finds a row in the SingleAccount table containing the key elements.
			/// </summary>
			/// <param name="singleAccountId">The SingleAccountId element of the key.</param>
			/// <returns>The SingleAccount row that contains the key elements, or null if there is no match.</returns>
			public SingleAccountRow Find(System.Guid singleAccountId)
			{
				return ((SingleAccountRow)(base.Find(new object[] {
							singleAccountId})));
			}
			
			/// <summary>
			/// Finds a row in the SingleAccount table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A SingleAccountKey row that contains the key elements, or null if there is no match.</returns>
			public new SingleAccountRow Find(object[] key)
			{
				return ((SingleAccountRow)(base.Find(key)));
			}
		}
		
		/// <summary>
		/// Represents a means of identifying a Source row using a set of columns in which all values must be unique.
		/// </summary>
		public interface ISourceIndex
		{
			
			/// <summary>
			/// Finds a row in the Source table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A DepartmentRow that contains the key elements, or null if there is no match.</returns>
			SourceRow Find(object[] key);
		}
		
		/// <summary>
		/// Represents a means of identifying a Source row using a set of columns in which all values must be unique.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public class SourceKeyIndex : global::Teraque.ClusteredIndex, ISourceIndex
		{
			
			/// <summary>
			/// Create a primary, unique index on the Source table.
			/// </summary>
			/// <param name="indexName">The name of the index.</param>
			/// <param name="columns">The columns that describe a unique key.</param>
			public SourceKeyIndex(string indexName, System.Data.DataColumn[] columns) : 
					base(indexName, columns)
			{
			}
			
			/// <summary>
			/// Finds a row in the Source table containing the key elements.
			/// </summary>
			/// <param name="sourceId">The SourceId element of the key.</param>
			/// <returns>The Source row that contains the key elements, or null if there is no match.</returns>
			public SourceRow Find(System.Guid sourceId)
			{
				return ((SourceRow)(base.Find(new object[] {
							sourceId})));
			}
			
			/// <summary>
			/// Finds a row in the Source table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A SourceKey row that contains the key elements, or null if there is no match.</returns>
			public new SourceRow Find(object[] key)
			{
				return ((SourceRow)(base.Find(key)));
			}
		}
		
		/// <summary>
		/// Represents a means of identifying a SourceOrder row using a set of columns in which all values must be unique.
		/// </summary>
		public interface ISourceOrderIndex
		{
			
			/// <summary>
			/// Finds a row in the SourceOrder table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A DepartmentRow that contains the key elements, or null if there is no match.</returns>
			SourceOrderRow Find(object[] key);
		}
		
		/// <summary>
		/// Represents a means of identifying a SourceOrder row using a set of columns in which all values must be unique.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public class SourceOrderKeyIndex : global::Teraque.ClusteredIndex, ISourceOrderIndex
		{
			
			/// <summary>
			/// Create a primary, unique index on the SourceOrder table.
			/// </summary>
			/// <param name="indexName">The name of the index.</param>
			/// <param name="columns">The columns that describe a unique key.</param>
			public SourceOrderKeyIndex(string indexName, System.Data.DataColumn[] columns) : 
					base(indexName, columns)
			{
			}
			
			/// <summary>
			/// Finds a row in the SourceOrder table containing the key elements.
			/// </summary>
			/// <param name="sourceOrderId">The SourceOrderId element of the key.</param>
			/// <returns>The SourceOrder row that contains the key elements, or null if there is no match.</returns>
			public SourceOrderRow Find(System.Guid sourceOrderId)
			{
				return ((SourceOrderRow)(base.Find(new object[] {
							sourceOrderId})));
			}
			
			/// <summary>
			/// Finds a row in the SourceOrder table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A SourceOrderKey row that contains the key elements, or null if there is no match.</returns>
			public new SourceOrderRow Find(object[] key)
			{
				return ((SourceOrderRow)(base.Find(key)));
			}
		}
		
		/// <summary>
		/// Represents a means of identifying a SourceOrder row using a set of columns in which all values must be unique.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public class SourceOrderKeyExternalId0Index : global::Teraque.NonClusteredIndex, ISourceOrderIndex
		{
			
			/// <summary>
			/// Create a secondary, unique index on the SourceOrder table.
			/// </summary>
			/// <param name="indexName">The name of the index.</param>
			/// <param name="columns">The columns that describe a unique key.</param>
			public SourceOrderKeyExternalId0Index(string indexName, System.Data.DataColumn[] columns) : 
					base(indexName, columns)
			{
			}
			
			/// <summary>
			/// Finds a row in the SourceOrder table containing the key elements.
			/// </summary>
			/// <param name="externalId0">The ExternalId0 element of the key.</param>
			/// <returns>The SourceOrder row that contains the key elements, or null if there is no match.</returns>
			public SourceOrderRow Find(string externalId0)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((SourceOrderRow)(base.Find(new object[] {
							externalId0})));
			}
			
			/// <summary>
			/// Finds a row in the SourceOrder table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A SourceOrderKeyExternalId0 row that contains the key elements, or null if there is no match.</returns>
			public new SourceOrderRow Find(object[] key)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((SourceOrderRow)(base.Find(key)));
			}
		}
		
		/// <summary>
		/// Represents a means of identifying a State row using a set of columns in which all values must be unique.
		/// </summary>
		public interface IStateIndex
		{
			
			/// <summary>
			/// Finds a row in the State table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A DepartmentRow that contains the key elements, or null if there is no match.</returns>
			StateRow Find(object[] key);
		}
		
		/// <summary>
		/// Represents a means of identifying a State row using a set of columns in which all values must be unique.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public class StateKeyIndex : global::Teraque.ClusteredIndex, IStateIndex
		{
			
			/// <summary>
			/// Create a primary, unique index on the State table.
			/// </summary>
			/// <param name="indexName">The name of the index.</param>
			/// <param name="columns">The columns that describe a unique key.</param>
			public StateKeyIndex(string indexName, System.Data.DataColumn[] columns) : 
					base(indexName, columns)
			{
			}
			
			/// <summary>
			/// Finds a row in the State table containing the key elements.
			/// </summary>
			/// <param name="stateCode">The StateCode element of the key.</param>
			/// <returns>The State row that contains the key elements, or null if there is no match.</returns>
			public StateRow Find(Teraque.StateCode stateCode)
			{
				return ((StateRow)(base.Find(new object[] {
							stateCode})));
			}
			
			/// <summary>
			/// Finds a row in the State table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A StateKey row that contains the key elements, or null if there is no match.</returns>
			public new StateRow Find(object[] key)
			{
				return ((StateRow)(base.Find(key)));
			}
		}
		
		/// <summary>
		/// Represents a means of identifying a State row using a set of columns in which all values must be unique.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public class StateKeyExternalId0Index : global::Teraque.NonClusteredIndex, IStateIndex
		{
			
			/// <summary>
			/// Create a secondary, unique index on the State table.
			/// </summary>
			/// <param name="indexName">The name of the index.</param>
			/// <param name="columns">The columns that describe a unique key.</param>
			public StateKeyExternalId0Index(string indexName, System.Data.DataColumn[] columns) : 
					base(indexName, columns)
			{
			}
			
			/// <summary>
			/// Finds a row in the State table containing the key elements.
			/// </summary>
			/// <param name="externalId0">The ExternalId0 element of the key.</param>
			/// <returns>The State row that contains the key elements, or null if there is no match.</returns>
			public StateRow Find(string externalId0)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((StateRow)(base.Find(new object[] {
							externalId0})));
			}
			
			/// <summary>
			/// Finds a row in the State table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A StateKeyExternalId0 row that contains the key elements, or null if there is no match.</returns>
			public new StateRow Find(object[] key)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((StateRow)(base.Find(key)));
			}
		}
		
		/// <summary>
		/// Represents a means of identifying a State row using a set of columns in which all values must be unique.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public class StateKeyExternalId1Index : global::Teraque.NonClusteredIndex, IStateIndex
		{
			
			/// <summary>
			/// Create a secondary, unique index on the State table.
			/// </summary>
			/// <param name="indexName">The name of the index.</param>
			/// <param name="columns">The columns that describe a unique key.</param>
			public StateKeyExternalId1Index(string indexName, System.Data.DataColumn[] columns) : 
					base(indexName, columns)
			{
			}
			
			/// <summary>
			/// Finds a row in the State table containing the key elements.
			/// </summary>
			/// <param name="externalId1">The ExternalId1 element of the key.</param>
			/// <returns>The State row that contains the key elements, or null if there is no match.</returns>
			public StateRow Find(string externalId1)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((StateRow)(base.Find(new object[] {
							externalId1})));
			}
			
			/// <summary>
			/// Finds a row in the State table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A StateKeyExternalId1 row that contains the key elements, or null if there is no match.</returns>
			public new StateRow Find(object[] key)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((StateRow)(base.Find(key)));
			}
		}
		
		/// <summary>
		/// Represents a means of identifying a State row using a set of columns in which all values must be unique.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public class StateKeyExternalId2Index : global::Teraque.NonClusteredIndex, IStateIndex
		{
			
			/// <summary>
			/// Create a secondary, unique index on the State table.
			/// </summary>
			/// <param name="indexName">The name of the index.</param>
			/// <param name="columns">The columns that describe a unique key.</param>
			public StateKeyExternalId2Index(string indexName, System.Data.DataColumn[] columns) : 
					base(indexName, columns)
			{
			}
			
			/// <summary>
			/// Finds a row in the State table containing the key elements.
			/// </summary>
			/// <param name="externalId2">The ExternalId2 element of the key.</param>
			/// <returns>The State row that contains the key elements, or null if there is no match.</returns>
			public StateRow Find(string externalId2)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((StateRow)(base.Find(new object[] {
							externalId2})));
			}
			
			/// <summary>
			/// Finds a row in the State table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A StateKeyExternalId2 row that contains the key elements, or null if there is no match.</returns>
			public new StateRow Find(object[] key)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((StateRow)(base.Find(key)));
			}
		}
		
		/// <summary>
		/// Represents a means of identifying a State row using a set of columns in which all values must be unique.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public class StateKeyExternalId3Index : global::Teraque.NonClusteredIndex, IStateIndex
		{
			
			/// <summary>
			/// Create a secondary, unique index on the State table.
			/// </summary>
			/// <param name="indexName">The name of the index.</param>
			/// <param name="columns">The columns that describe a unique key.</param>
			public StateKeyExternalId3Index(string indexName, System.Data.DataColumn[] columns) : 
					base(indexName, columns)
			{
			}
			
			/// <summary>
			/// Finds a row in the State table containing the key elements.
			/// </summary>
			/// <param name="externalId3">The ExternalId3 element of the key.</param>
			/// <returns>The State row that contains the key elements, or null if there is no match.</returns>
			public StateRow Find(string externalId3)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((StateRow)(base.Find(new object[] {
							externalId3})));
			}
			
			/// <summary>
			/// Finds a row in the State table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A StateKeyExternalId3 row that contains the key elements, or null if there is no match.</returns>
			public new StateRow Find(object[] key)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((StateRow)(base.Find(key)));
			}
		}
		
		/// <summary>
		/// Represents a means of identifying a Status row using a set of columns in which all values must be unique.
		/// </summary>
		public interface IStatusIndex
		{
			
			/// <summary>
			/// Finds a row in the Status table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A DepartmentRow that contains the key elements, or null if there is no match.</returns>
			StatusRow Find(object[] key);
		}
		
		/// <summary>
		/// Represents a means of identifying a Status row using a set of columns in which all values must be unique.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public class StatusKeyIndex : global::Teraque.ClusteredIndex, IStatusIndex
		{
			
			/// <summary>
			/// Create a primary, unique index on the Status table.
			/// </summary>
			/// <param name="indexName">The name of the index.</param>
			/// <param name="columns">The columns that describe a unique key.</param>
			public StatusKeyIndex(string indexName, System.Data.DataColumn[] columns) : 
					base(indexName, columns)
			{
			}
			
			/// <summary>
			/// Finds a row in the Status table containing the key elements.
			/// </summary>
			/// <param name="statusCode">The StatusCode element of the key.</param>
			/// <returns>The Status row that contains the key elements, or null if there is no match.</returns>
			public StatusRow Find(Teraque.StatusCode statusCode)
			{
				return ((StatusRow)(base.Find(new object[] {
							statusCode})));
			}
			
			/// <summary>
			/// Finds a row in the Status table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A StatusKey row that contains the key elements, or null if there is no match.</returns>
			public new StatusRow Find(object[] key)
			{
				return ((StatusRow)(base.Find(key)));
			}
		}
		
		/// <summary>
		/// Represents a means of identifying a Status row using a set of columns in which all values must be unique.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public class StatusKeyExternalId0Index : global::Teraque.NonClusteredIndex, IStatusIndex
		{
			
			/// <summary>
			/// Create a secondary, unique index on the Status table.
			/// </summary>
			/// <param name="indexName">The name of the index.</param>
			/// <param name="columns">The columns that describe a unique key.</param>
			public StatusKeyExternalId0Index(string indexName, System.Data.DataColumn[] columns) : 
					base(indexName, columns)
			{
			}
			
			/// <summary>
			/// Finds a row in the Status table containing the key elements.
			/// </summary>
			/// <param name="externalId0">The ExternalId0 element of the key.</param>
			/// <returns>The Status row that contains the key elements, or null if there is no match.</returns>
			public StatusRow Find(string externalId0)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((StatusRow)(base.Find(new object[] {
							externalId0})));
			}
			
			/// <summary>
			/// Finds a row in the Status table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A StatusKeyExternalId0 row that contains the key elements, or null if there is no match.</returns>
			public new StatusRow Find(object[] key)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((StatusRow)(base.Find(key)));
			}
		}
		
		/// <summary>
		/// Represents a means of identifying a Status row using a set of columns in which all values must be unique.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public class StatusKeyExternalId1Index : global::Teraque.NonClusteredIndex, IStatusIndex
		{
			
			/// <summary>
			/// Create a secondary, unique index on the Status table.
			/// </summary>
			/// <param name="indexName">The name of the index.</param>
			/// <param name="columns">The columns that describe a unique key.</param>
			public StatusKeyExternalId1Index(string indexName, System.Data.DataColumn[] columns) : 
					base(indexName, columns)
			{
			}
			
			/// <summary>
			/// Finds a row in the Status table containing the key elements.
			/// </summary>
			/// <param name="externalId1">The ExternalId1 element of the key.</param>
			/// <returns>The Status row that contains the key elements, or null if there is no match.</returns>
			public StatusRow Find(string externalId1)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((StatusRow)(base.Find(new object[] {
							externalId1})));
			}
			
			/// <summary>
			/// Finds a row in the Status table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A StatusKeyExternalId1 row that contains the key elements, or null if there is no match.</returns>
			public new StatusRow Find(object[] key)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((StatusRow)(base.Find(key)));
			}
		}
		
		/// <summary>
		/// Represents a means of identifying a Status row using a set of columns in which all values must be unique.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public class StatusKeyExternalId2Index : global::Teraque.NonClusteredIndex, IStatusIndex
		{
			
			/// <summary>
			/// Create a secondary, unique index on the Status table.
			/// </summary>
			/// <param name="indexName">The name of the index.</param>
			/// <param name="columns">The columns that describe a unique key.</param>
			public StatusKeyExternalId2Index(string indexName, System.Data.DataColumn[] columns) : 
					base(indexName, columns)
			{
			}
			
			/// <summary>
			/// Finds a row in the Status table containing the key elements.
			/// </summary>
			/// <param name="externalId2">The ExternalId2 element of the key.</param>
			/// <returns>The Status row that contains the key elements, or null if there is no match.</returns>
			public StatusRow Find(string externalId2)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((StatusRow)(base.Find(new object[] {
							externalId2})));
			}
			
			/// <summary>
			/// Finds a row in the Status table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A StatusKeyExternalId2 row that contains the key elements, or null if there is no match.</returns>
			public new StatusRow Find(object[] key)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((StatusRow)(base.Find(key)));
			}
		}
		
		/// <summary>
		/// Represents a means of identifying a Status row using a set of columns in which all values must be unique.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public class StatusKeyExternalId3Index : global::Teraque.NonClusteredIndex, IStatusIndex
		{
			
			/// <summary>
			/// Create a secondary, unique index on the Status table.
			/// </summary>
			/// <param name="indexName">The name of the index.</param>
			/// <param name="columns">The columns that describe a unique key.</param>
			public StatusKeyExternalId3Index(string indexName, System.Data.DataColumn[] columns) : 
					base(indexName, columns)
			{
			}
			
			/// <summary>
			/// Finds a row in the Status table containing the key elements.
			/// </summary>
			/// <param name="externalId3">The ExternalId3 element of the key.</param>
			/// <returns>The Status row that contains the key elements, or null if there is no match.</returns>
			public StatusRow Find(string externalId3)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((StatusRow)(base.Find(new object[] {
							externalId3})));
			}
			
			/// <summary>
			/// Finds a row in the Status table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A StatusKeyExternalId3 row that contains the key elements, or null if there is no match.</returns>
			public new StatusRow Find(object[] key)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((StatusRow)(base.Find(key)));
			}
		}
		
		/// <summary>
		/// Represents a means of identifying a SubordinateType row using a set of columns in which all values must be unique.
		/// </summary>
		public interface ISubordinateTypeIndex
		{
			
			/// <summary>
			/// Finds a row in the SubordinateType table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A DepartmentRow that contains the key elements, or null if there is no match.</returns>
			SubordinateTypeRow Find(object[] key);
		}
		
		/// <summary>
		/// Represents a means of identifying a SubordinateType row using a set of columns in which all values must be unique.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public class SubordinateTypeKeyIndex : global::Teraque.ClusteredIndex, ISubordinateTypeIndex
		{
			
			/// <summary>
			/// Create a primary, unique index on the SubordinateType table.
			/// </summary>
			/// <param name="indexName">The name of the index.</param>
			/// <param name="columns">The columns that describe a unique key.</param>
			public SubordinateTypeKeyIndex(string indexName, System.Data.DataColumn[] columns) : 
					base(indexName, columns)
			{
			}
			
			/// <summary>
			/// Finds a row in the SubordinateType table containing the key elements.
			/// </summary>
			/// <param name="subordinateTypeCode">The SubordinateTypeCode element of the key.</param>
			/// <returns>The SubordinateType row that contains the key elements, or null if there is no match.</returns>
			public SubordinateTypeRow Find(Teraque.SubordinateTypeCode subordinateTypeCode)
			{
				return ((SubordinateTypeRow)(base.Find(new object[] {
							subordinateTypeCode})));
			}
			
			/// <summary>
			/// Finds a row in the SubordinateType table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A SubordinateTypeKey row that contains the key elements, or null if there is no match.</returns>
			public new SubordinateTypeRow Find(object[] key)
			{
				return ((SubordinateTypeRow)(base.Find(key)));
			}
		}
		
		/// <summary>
		/// Represents a means of identifying a SubordinateType row using a set of columns in which all values must be unique.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public class SubordinateTypeKeyExternalId0Index : global::Teraque.NonClusteredIndex, ISubordinateTypeIndex
		{
			
			/// <summary>
			/// Create a secondary, unique index on the SubordinateType table.
			/// </summary>
			/// <param name="indexName">The name of the index.</param>
			/// <param name="columns">The columns that describe a unique key.</param>
			public SubordinateTypeKeyExternalId0Index(string indexName, System.Data.DataColumn[] columns) : 
					base(indexName, columns)
			{
			}
			
			/// <summary>
			/// Finds a row in the SubordinateType table containing the key elements.
			/// </summary>
			/// <param name="externalId0">The ExternalId0 element of the key.</param>
			/// <returns>The SubordinateType row that contains the key elements, or null if there is no match.</returns>
			public SubordinateTypeRow Find(string externalId0)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((SubordinateTypeRow)(base.Find(new object[] {
							externalId0})));
			}
			
			/// <summary>
			/// Finds a row in the SubordinateType table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A SubordinateTypeKeyExternalId0 row that contains the key elements, or null if there is no match.</returns>
			public new SubordinateTypeRow Find(object[] key)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((SubordinateTypeRow)(base.Find(key)));
			}
		}
		
		/// <summary>
		/// Represents a means of identifying a SubordinateType row using a set of columns in which all values must be unique.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public class SubordinateTypeKeyExternalId1Index : global::Teraque.NonClusteredIndex, ISubordinateTypeIndex
		{
			
			/// <summary>
			/// Create a secondary, unique index on the SubordinateType table.
			/// </summary>
			/// <param name="indexName">The name of the index.</param>
			/// <param name="columns">The columns that describe a unique key.</param>
			public SubordinateTypeKeyExternalId1Index(string indexName, System.Data.DataColumn[] columns) : 
					base(indexName, columns)
			{
			}
			
			/// <summary>
			/// Finds a row in the SubordinateType table containing the key elements.
			/// </summary>
			/// <param name="externalId1">The ExternalId1 element of the key.</param>
			/// <returns>The SubordinateType row that contains the key elements, or null if there is no match.</returns>
			public SubordinateTypeRow Find(string externalId1)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((SubordinateTypeRow)(base.Find(new object[] {
							externalId1})));
			}
			
			/// <summary>
			/// Finds a row in the SubordinateType table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A SubordinateTypeKeyExternalId1 row that contains the key elements, or null if there is no match.</returns>
			public new SubordinateTypeRow Find(object[] key)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((SubordinateTypeRow)(base.Find(key)));
			}
		}
		
		/// <summary>
		/// Represents a means of identifying a TaxLot row using a set of columns in which all values must be unique.
		/// </summary>
		public interface ITaxLotIndex
		{
			
			/// <summary>
			/// Finds a row in the TaxLot table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A DepartmentRow that contains the key elements, or null if there is no match.</returns>
			TaxLotRow Find(object[] key);
		}
		
		/// <summary>
		/// Represents a means of identifying a TaxLot row using a set of columns in which all values must be unique.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public class TaxLotKeyIndex : global::Teraque.ClusteredIndex, ITaxLotIndex
		{
			
			/// <summary>
			/// Create a primary, unique index on the TaxLot table.
			/// </summary>
			/// <param name="indexName">The name of the index.</param>
			/// <param name="columns">The columns that describe a unique key.</param>
			public TaxLotKeyIndex(string indexName, System.Data.DataColumn[] columns) : 
					base(indexName, columns)
			{
			}
			
			/// <summary>
			/// Finds a row in the TaxLot table containing the key elements.
			/// </summary>
			/// <param name="taxLotId">The TaxLotId element of the key.</param>
			/// <returns>The TaxLot row that contains the key elements, or null if there is no match.</returns>
			public TaxLotRow Find(System.Guid taxLotId)
			{
				return ((TaxLotRow)(base.Find(new object[] {
							taxLotId})));
			}
			
			/// <summary>
			/// Finds a row in the TaxLot table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A TaxLotKey row that contains the key elements, or null if there is no match.</returns>
			public new TaxLotRow Find(object[] key)
			{
				return ((TaxLotRow)(base.Find(key)));
			}
		}
		
		/// <summary>
		/// Represents a means of identifying a TaxLot row using a set of columns in which all values must be unique.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public class TaxLotKeyExternalId0Index : global::Teraque.NonClusteredIndex, ITaxLotIndex
		{
			
			/// <summary>
			/// Create a secondary, unique index on the TaxLot table.
			/// </summary>
			/// <param name="indexName">The name of the index.</param>
			/// <param name="columns">The columns that describe a unique key.</param>
			public TaxLotKeyExternalId0Index(string indexName, System.Data.DataColumn[] columns) : 
					base(indexName, columns)
			{
			}
			
			/// <summary>
			/// Finds a row in the TaxLot table containing the key elements.
			/// </summary>
			/// <param name="externalId0">The ExternalId0 element of the key.</param>
			/// <returns>The TaxLot row that contains the key elements, or null if there is no match.</returns>
			public TaxLotRow Find(string externalId0)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((TaxLotRow)(base.Find(new object[] {
							externalId0})));
			}
			
			/// <summary>
			/// Finds a row in the TaxLot table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A TaxLotKeyExternalId0 row that contains the key elements, or null if there is no match.</returns>
			public new TaxLotRow Find(object[] key)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((TaxLotRow)(base.Find(key)));
			}
		}
		
		/// <summary>
		/// Represents a means of identifying a TaxLot row using a set of columns in which all values must be unique.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public class TaxLotKeyExternalId1Index : global::Teraque.NonClusteredIndex, ITaxLotIndex
		{
			
			/// <summary>
			/// Create a secondary, unique index on the TaxLot table.
			/// </summary>
			/// <param name="indexName">The name of the index.</param>
			/// <param name="columns">The columns that describe a unique key.</param>
			public TaxLotKeyExternalId1Index(string indexName, System.Data.DataColumn[] columns) : 
					base(indexName, columns)
			{
			}
			
			/// <summary>
			/// Finds a row in the TaxLot table containing the key elements.
			/// </summary>
			/// <param name="externalId1">The ExternalId1 element of the key.</param>
			/// <returns>The TaxLot row that contains the key elements, or null if there is no match.</returns>
			public TaxLotRow Find(string externalId1)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((TaxLotRow)(base.Find(new object[] {
							externalId1})));
			}
			
			/// <summary>
			/// Finds a row in the TaxLot table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A TaxLotKeyExternalId1 row that contains the key elements, or null if there is no match.</returns>
			public new TaxLotRow Find(object[] key)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((TaxLotRow)(base.Find(key)));
			}
		}
		
		/// <summary>
		/// Represents a means of identifying a TaxLotSeries row using a set of columns in which all values must be unique.
		/// </summary>
		public interface ITaxLotSeriesIndex
		{
			
			/// <summary>
			/// Finds a row in the TaxLotSeries table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A DepartmentRow that contains the key elements, or null if there is no match.</returns>
			TaxLotSeriesRow Find(object[] key);
		}
		
		/// <summary>
		/// Represents a means of identifying a TaxLotSeries row using a set of columns in which all values must be unique.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public class TaxLotSeriesKeyIndex : global::Teraque.ClusteredIndex, ITaxLotSeriesIndex
		{
			
			/// <summary>
			/// Create a primary, unique index on the TaxLotSeries table.
			/// </summary>
			/// <param name="indexName">The name of the index.</param>
			/// <param name="columns">The columns that describe a unique key.</param>
			public TaxLotSeriesKeyIndex(string indexName, System.Data.DataColumn[] columns) : 
					base(indexName, columns)
			{
			}
			
			/// <summary>
			/// Finds a row in the TaxLotSeries table containing the key elements.
			/// </summary>
			/// <param name="taxLotSeriesId">The TaxLotSeriesId element of the key.</param>
			/// <returns>The TaxLotSeries row that contains the key elements, or null if there is no match.</returns>
			public TaxLotSeriesRow Find(System.Guid taxLotSeriesId)
			{
				return ((TaxLotSeriesRow)(base.Find(new object[] {
							taxLotSeriesId})));
			}
			
			/// <summary>
			/// Finds a row in the TaxLotSeries table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A TaxLotSeriesKey row that contains the key elements, or null if there is no match.</returns>
			public new TaxLotSeriesRow Find(object[] key)
			{
				return ((TaxLotSeriesRow)(base.Find(key)));
			}
		}
		
		/// <summary>
		/// Represents a means of identifying a TaxLotSeries row using a set of columns in which all values must be unique.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public class TaxLotSeriesKeyDateTaxLotIdIndex : global::Teraque.NonClusteredIndex, ITaxLotSeriesIndex
		{
			
			/// <summary>
			/// Create a secondary, unique index on the TaxLotSeries table.
			/// </summary>
			/// <param name="indexName">The name of the index.</param>
			/// <param name="columns">The columns that describe a unique key.</param>
			public TaxLotSeriesKeyDateTaxLotIdIndex(string indexName, System.Data.DataColumn[] columns) : 
					base(indexName, columns)
			{
			}
			
			/// <summary>
			/// Finds a row in the TaxLotSeries table containing the key elements.
			/// </summary>
			/// <param name="date">The Date element of the key.</param>
			/// <param name="taxLotId">The TaxLotId element of the key.</param>
			/// <returns>The TaxLotSeries row that contains the key elements, or null if there is no match.</returns>
			public TaxLotSeriesRow Find(System.DateTime date, System.Guid taxLotId)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((TaxLotSeriesRow)(base.Find(new object[] {
							date,
							taxLotId})));
			}
			
			/// <summary>
			/// Finds a row in the TaxLotSeries table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A TaxLotSeriesKeyDateTaxLotId row that contains the key elements, or null if there is no match.</returns>
			public new TaxLotSeriesRow Find(object[] key)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((TaxLotSeriesRow)(base.Find(key)));
			}
		}
		
		/// <summary>
		/// Represents a means of identifying a TaxLotSeries row using a set of columns in which all values must be unique.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public class TaxLotSeriesKeyExternalId0Index : global::Teraque.NonClusteredIndex, ITaxLotSeriesIndex
		{
			
			/// <summary>
			/// Create a secondary, unique index on the TaxLotSeries table.
			/// </summary>
			/// <param name="indexName">The name of the index.</param>
			/// <param name="columns">The columns that describe a unique key.</param>
			public TaxLotSeriesKeyExternalId0Index(string indexName, System.Data.DataColumn[] columns) : 
					base(indexName, columns)
			{
			}
			
			/// <summary>
			/// Finds a row in the TaxLotSeries table containing the key elements.
			/// </summary>
			/// <param name="externalId0">The ExternalId0 element of the key.</param>
			/// <returns>The TaxLotSeries row that contains the key elements, or null if there is no match.</returns>
			public TaxLotSeriesRow Find(string externalId0)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((TaxLotSeriesRow)(base.Find(new object[] {
							externalId0})));
			}
			
			/// <summary>
			/// Finds a row in the TaxLotSeries table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A TaxLotSeriesKeyExternalId0 row that contains the key elements, or null if there is no match.</returns>
			public new TaxLotSeriesRow Find(object[] key)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((TaxLotSeriesRow)(base.Find(key)));
			}
		}
		
		/// <summary>
		/// Represents a means of identifying a TaxLotSeries row using a set of columns in which all values must be unique.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public class TaxLotSeriesKeyExternalId1Index : global::Teraque.NonClusteredIndex, ITaxLotSeriesIndex
		{
			
			/// <summary>
			/// Create a secondary, unique index on the TaxLotSeries table.
			/// </summary>
			/// <param name="indexName">The name of the index.</param>
			/// <param name="columns">The columns that describe a unique key.</param>
			public TaxLotSeriesKeyExternalId1Index(string indexName, System.Data.DataColumn[] columns) : 
					base(indexName, columns)
			{
			}
			
			/// <summary>
			/// Finds a row in the TaxLotSeries table containing the key elements.
			/// </summary>
			/// <param name="externalId1">The ExternalId1 element of the key.</param>
			/// <returns>The TaxLotSeries row that contains the key elements, or null if there is no match.</returns>
			public TaxLotSeriesRow Find(string externalId1)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((TaxLotSeriesRow)(base.Find(new object[] {
							externalId1})));
			}
			
			/// <summary>
			/// Finds a row in the TaxLotSeries table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A TaxLotSeriesKeyExternalId1 row that contains the key elements, or null if there is no match.</returns>
			public new TaxLotSeriesRow Find(object[] key)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((TaxLotSeriesRow)(base.Find(key)));
			}
		}
		
		/// <summary>
		/// Represents a means of identifying a TimeInForce row using a set of columns in which all values must be unique.
		/// </summary>
		public interface ITimeInForceIndex
		{
			
			/// <summary>
			/// Finds a row in the TimeInForce table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A DepartmentRow that contains the key elements, or null if there is no match.</returns>
			TimeInForceRow Find(object[] key);
		}
		
		/// <summary>
		/// Represents a means of identifying a TimeInForce row using a set of columns in which all values must be unique.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public class TimeInForceKeyIndex : global::Teraque.ClusteredIndex, ITimeInForceIndex
		{
			
			/// <summary>
			/// Create a primary, unique index on the TimeInForce table.
			/// </summary>
			/// <param name="indexName">The name of the index.</param>
			/// <param name="columns">The columns that describe a unique key.</param>
			public TimeInForceKeyIndex(string indexName, System.Data.DataColumn[] columns) : 
					base(indexName, columns)
			{
			}
			
			/// <summary>
			/// Finds a row in the TimeInForce table containing the key elements.
			/// </summary>
			/// <param name="timeInForceCode">The TimeInForceCode element of the key.</param>
			/// <returns>The TimeInForce row that contains the key elements, or null if there is no match.</returns>
			public TimeInForceRow Find(Teraque.TimeInForceCode timeInForceCode)
			{
				return ((TimeInForceRow)(base.Find(new object[] {
							timeInForceCode})));
			}
			
			/// <summary>
			/// Finds a row in the TimeInForce table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A TimeInForceKey row that contains the key elements, or null if there is no match.</returns>
			public new TimeInForceRow Find(object[] key)
			{
				return ((TimeInForceRow)(base.Find(key)));
			}
		}
		
		/// <summary>
		/// Represents a means of identifying a TimeInForce row using a set of columns in which all values must be unique.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public class TimeInForceKeyExternalId0Index : global::Teraque.NonClusteredIndex, ITimeInForceIndex
		{
			
			/// <summary>
			/// Create a secondary, unique index on the TimeInForce table.
			/// </summary>
			/// <param name="indexName">The name of the index.</param>
			/// <param name="columns">The columns that describe a unique key.</param>
			public TimeInForceKeyExternalId0Index(string indexName, System.Data.DataColumn[] columns) : 
					base(indexName, columns)
			{
			}
			
			/// <summary>
			/// Finds a row in the TimeInForce table containing the key elements.
			/// </summary>
			/// <param name="externalId0">The ExternalId0 element of the key.</param>
			/// <returns>The TimeInForce row that contains the key elements, or null if there is no match.</returns>
			public TimeInForceRow Find(string externalId0)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((TimeInForceRow)(base.Find(new object[] {
							externalId0})));
			}
			
			/// <summary>
			/// Finds a row in the TimeInForce table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A TimeInForceKeyExternalId0 row that contains the key elements, or null if there is no match.</returns>
			public new TimeInForceRow Find(object[] key)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((TimeInForceRow)(base.Find(key)));
			}
		}
		
		/// <summary>
		/// Represents a means of identifying a TimeInForce row using a set of columns in which all values must be unique.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public class TimeInForceKeyExternalId1Index : global::Teraque.NonClusteredIndex, ITimeInForceIndex
		{
			
			/// <summary>
			/// Create a secondary, unique index on the TimeInForce table.
			/// </summary>
			/// <param name="indexName">The name of the index.</param>
			/// <param name="columns">The columns that describe a unique key.</param>
			public TimeInForceKeyExternalId1Index(string indexName, System.Data.DataColumn[] columns) : 
					base(indexName, columns)
			{
			}
			
			/// <summary>
			/// Finds a row in the TimeInForce table containing the key elements.
			/// </summary>
			/// <param name="externalId1">The ExternalId1 element of the key.</param>
			/// <returns>The TimeInForce row that contains the key elements, or null if there is no match.</returns>
			public TimeInForceRow Find(string externalId1)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((TimeInForceRow)(base.Find(new object[] {
							externalId1})));
			}
			
			/// <summary>
			/// Finds a row in the TimeInForce table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A TimeInForceKeyExternalId1 row that contains the key elements, or null if there is no match.</returns>
			public new TimeInForceRow Find(object[] key)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((TimeInForceRow)(base.Find(key)));
			}
		}
		
		/// <summary>
		/// Represents a means of identifying a TimeInForce row using a set of columns in which all values must be unique.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public class TimeInForceKeyExternalId2Index : global::Teraque.NonClusteredIndex, ITimeInForceIndex
		{
			
			/// <summary>
			/// Create a secondary, unique index on the TimeInForce table.
			/// </summary>
			/// <param name="indexName">The name of the index.</param>
			/// <param name="columns">The columns that describe a unique key.</param>
			public TimeInForceKeyExternalId2Index(string indexName, System.Data.DataColumn[] columns) : 
					base(indexName, columns)
			{
			}
			
			/// <summary>
			/// Finds a row in the TimeInForce table containing the key elements.
			/// </summary>
			/// <param name="externalId2">The ExternalId2 element of the key.</param>
			/// <returns>The TimeInForce row that contains the key elements, or null if there is no match.</returns>
			public TimeInForceRow Find(string externalId2)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((TimeInForceRow)(base.Find(new object[] {
							externalId2})));
			}
			
			/// <summary>
			/// Finds a row in the TimeInForce table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A TimeInForceKeyExternalId2 row that contains the key elements, or null if there is no match.</returns>
			public new TimeInForceRow Find(object[] key)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((TimeInForceRow)(base.Find(key)));
			}
		}
		
		/// <summary>
		/// Represents a means of identifying a TimeInForce row using a set of columns in which all values must be unique.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public class TimeInForceKeyExternalId3Index : global::Teraque.NonClusteredIndex, ITimeInForceIndex
		{
			
			/// <summary>
			/// Create a secondary, unique index on the TimeInForce table.
			/// </summary>
			/// <param name="indexName">The name of the index.</param>
			/// <param name="columns">The columns that describe a unique key.</param>
			public TimeInForceKeyExternalId3Index(string indexName, System.Data.DataColumn[] columns) : 
					base(indexName, columns)
			{
			}
			
			/// <summary>
			/// Finds a row in the TimeInForce table containing the key elements.
			/// </summary>
			/// <param name="externalId3">The ExternalId3 element of the key.</param>
			/// <returns>The TimeInForce row that contains the key elements, or null if there is no match.</returns>
			public TimeInForceRow Find(string externalId3)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((TimeInForceRow)(base.Find(new object[] {
							externalId3})));
			}
			
			/// <summary>
			/// Finds a row in the TimeInForce table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A TimeInForceKeyExternalId3 row that contains the key elements, or null if there is no match.</returns>
			public new TimeInForceRow Find(object[] key)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((TimeInForceRow)(base.Find(key)));
			}
		}
		
		/// <summary>
		/// Represents a means of identifying a TimeUnit row using a set of columns in which all values must be unique.
		/// </summary>
		public interface ITimeUnitIndex
		{
			
			/// <summary>
			/// Finds a row in the TimeUnit table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A DepartmentRow that contains the key elements, or null if there is no match.</returns>
			TimeUnitRow Find(object[] key);
		}
		
		/// <summary>
		/// Represents a means of identifying a TimeUnit row using a set of columns in which all values must be unique.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public class TimeUnitKeyIndex : global::Teraque.ClusteredIndex, ITimeUnitIndex
		{
			
			/// <summary>
			/// Create a primary, unique index on the TimeUnit table.
			/// </summary>
			/// <param name="indexName">The name of the index.</param>
			/// <param name="columns">The columns that describe a unique key.</param>
			public TimeUnitKeyIndex(string indexName, System.Data.DataColumn[] columns) : 
					base(indexName, columns)
			{
			}
			
			/// <summary>
			/// Finds a row in the TimeUnit table containing the key elements.
			/// </summary>
			/// <param name="timeUnitCode">The TimeUnitCode element of the key.</param>
			/// <returns>The TimeUnit row that contains the key elements, or null if there is no match.</returns>
			public TimeUnitRow Find(Teraque.TimeUnitCode timeUnitCode)
			{
				return ((TimeUnitRow)(base.Find(new object[] {
							timeUnitCode})));
			}
			
			/// <summary>
			/// Finds a row in the TimeUnit table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A TimeUnitKey row that contains the key elements, or null if there is no match.</returns>
			public new TimeUnitRow Find(object[] key)
			{
				return ((TimeUnitRow)(base.Find(key)));
			}
		}
		
		/// <summary>
		/// Represents a means of identifying a TimeUnit row using a set of columns in which all values must be unique.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public class TimeUnitKeyExternalId0Index : global::Teraque.NonClusteredIndex, ITimeUnitIndex
		{
			
			/// <summary>
			/// Create a secondary, unique index on the TimeUnit table.
			/// </summary>
			/// <param name="indexName">The name of the index.</param>
			/// <param name="columns">The columns that describe a unique key.</param>
			public TimeUnitKeyExternalId0Index(string indexName, System.Data.DataColumn[] columns) : 
					base(indexName, columns)
			{
			}
			
			/// <summary>
			/// Finds a row in the TimeUnit table containing the key elements.
			/// </summary>
			/// <param name="externalId0">The ExternalId0 element of the key.</param>
			/// <returns>The TimeUnit row that contains the key elements, or null if there is no match.</returns>
			public TimeUnitRow Find(string externalId0)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((TimeUnitRow)(base.Find(new object[] {
							externalId0})));
			}
			
			/// <summary>
			/// Finds a row in the TimeUnit table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A TimeUnitKeyExternalId0 row that contains the key elements, or null if there is no match.</returns>
			public new TimeUnitRow Find(object[] key)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((TimeUnitRow)(base.Find(key)));
			}
		}
		
		/// <summary>
		/// Represents a means of identifying a Trader row using a set of columns in which all values must be unique.
		/// </summary>
		public interface ITraderIndex
		{
			
			/// <summary>
			/// Finds a row in the Trader table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A DepartmentRow that contains the key elements, or null if there is no match.</returns>
			TraderRow Find(object[] key);
		}
		
		/// <summary>
		/// Represents a means of identifying a Trader row using a set of columns in which all values must be unique.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public class TraderKeyIndex : global::Teraque.ClusteredIndex, ITraderIndex
		{
			
			/// <summary>
			/// Create a primary, unique index on the Trader table.
			/// </summary>
			/// <param name="indexName">The name of the index.</param>
			/// <param name="columns">The columns that describe a unique key.</param>
			public TraderKeyIndex(string indexName, System.Data.DataColumn[] columns) : 
					base(indexName, columns)
			{
			}
			
			/// <summary>
			/// Finds a row in the Trader table containing the key elements.
			/// </summary>
			/// <param name="traderId">The TraderId element of the key.</param>
			/// <returns>The Trader row that contains the key elements, or null if there is no match.</returns>
			public TraderRow Find(System.Guid traderId)
			{
				return ((TraderRow)(base.Find(new object[] {
							traderId})));
			}
			
			/// <summary>
			/// Finds a row in the Trader table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A TraderKey row that contains the key elements, or null if there is no match.</returns>
			public new TraderRow Find(object[] key)
			{
				return ((TraderRow)(base.Find(key)));
			}
		}
		
		/// <summary>
		/// Represents a means of identifying a TraderVolumeSetting row using a set of columns in which all values must be unique.
		/// </summary>
		public interface ITraderVolumeSettingIndex
		{
			
			/// <summary>
			/// Finds a row in the TraderVolumeSetting table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A DepartmentRow that contains the key elements, or null if there is no match.</returns>
			TraderVolumeSettingRow Find(object[] key);
		}
		
		/// <summary>
		/// Represents a means of identifying a TraderVolumeSetting row using a set of columns in which all values must be unique.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public class TraderVolumeSettingKeyIndex : global::Teraque.ClusteredIndex, ITraderVolumeSettingIndex
		{
			
			/// <summary>
			/// Create a primary, unique index on the TraderVolumeSetting table.
			/// </summary>
			/// <param name="indexName">The name of the index.</param>
			/// <param name="columns">The columns that describe a unique key.</param>
			public TraderVolumeSettingKeyIndex(string indexName, System.Data.DataColumn[] columns) : 
					base(indexName, columns)
			{
			}
			
			/// <summary>
			/// Finds a row in the TraderVolumeSetting table containing the key elements.
			/// </summary>
			/// <param name="traderVolumeSettingId">The TraderVolumeSettingId element of the key.</param>
			/// <returns>The TraderVolumeSetting row that contains the key elements, or null if there is no match.</returns>
			public TraderVolumeSettingRow Find(System.Guid traderVolumeSettingId)
			{
				return ((TraderVolumeSettingRow)(base.Find(new object[] {
							traderVolumeSettingId})));
			}
			
			/// <summary>
			/// Finds a row in the TraderVolumeSetting table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A TraderVolumeSettingKey row that contains the key elements, or null if there is no match.</returns>
			public new TraderVolumeSettingRow Find(object[] key)
			{
				return ((TraderVolumeSettingRow)(base.Find(key)));
			}
		}
		
		/// <summary>
		/// Represents a means of identifying a TraderVolumeSetting row using a set of columns in which all values must be unique.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public class TraderVolumeSettingKeyExternalId0Index : global::Teraque.NonClusteredIndex, ITraderVolumeSettingIndex
		{
			
			/// <summary>
			/// Create a secondary, unique index on the TraderVolumeSetting table.
			/// </summary>
			/// <param name="indexName">The name of the index.</param>
			/// <param name="columns">The columns that describe a unique key.</param>
			public TraderVolumeSettingKeyExternalId0Index(string indexName, System.Data.DataColumn[] columns) : 
					base(indexName, columns)
			{
			}
			
			/// <summary>
			/// Finds a row in the TraderVolumeSetting table containing the key elements.
			/// </summary>
			/// <param name="externalId0">The ExternalId0 element of the key.</param>
			/// <returns>The TraderVolumeSetting row that contains the key elements, or null if there is no match.</returns>
			public TraderVolumeSettingRow Find(string externalId0)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((TraderVolumeSettingRow)(base.Find(new object[] {
							externalId0})));
			}
			
			/// <summary>
			/// Finds a row in the TraderVolumeSetting table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A TraderVolumeSettingKeyExternalId0 row that contains the key elements, or null if there is no match.</returns>
			public new TraderVolumeSettingRow Find(object[] key)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((TraderVolumeSettingRow)(base.Find(key)));
			}
		}
		
		/// <summary>
		/// Represents a means of identifying a Type row using a set of columns in which all values must be unique.
		/// </summary>
		public interface ITypeIndex
		{
			
			/// <summary>
			/// Finds a row in the Type table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A DepartmentRow that contains the key elements, or null if there is no match.</returns>
			TypeRow Find(object[] key);
		}
		
		/// <summary>
		/// Represents a means of identifying a Type row using a set of columns in which all values must be unique.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public class TypeKeyIndex : global::Teraque.ClusteredIndex, ITypeIndex
		{
			
			/// <summary>
			/// Create a primary, unique index on the Type table.
			/// </summary>
			/// <param name="indexName">The name of the index.</param>
			/// <param name="columns">The columns that describe a unique key.</param>
			public TypeKeyIndex(string indexName, System.Data.DataColumn[] columns) : 
					base(indexName, columns)
			{
			}
			
			/// <summary>
			/// Finds a row in the Type table containing the key elements.
			/// </summary>
			/// <param name="typeId">The TypeId element of the key.</param>
			/// <returns>The Type row that contains the key elements, or null if there is no match.</returns>
			public TypeRow Find(System.Guid typeId)
			{
				return ((TypeRow)(base.Find(new object[] {
							typeId})));
			}
			
			/// <summary>
			/// Finds a row in the Type table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A TypeKey row that contains the key elements, or null if there is no match.</returns>
			public new TypeRow Find(object[] key)
			{
				return ((TypeRow)(base.Find(key)));
			}
		}
		
		/// <summary>
		/// Represents a means of identifying a Type row using a set of columns in which all values must be unique.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public class TypeKeyExternalId0Index : global::Teraque.NonClusteredIndex, ITypeIndex
		{
			
			/// <summary>
			/// Create a secondary, unique index on the Type table.
			/// </summary>
			/// <param name="indexName">The name of the index.</param>
			/// <param name="columns">The columns that describe a unique key.</param>
			public TypeKeyExternalId0Index(string indexName, System.Data.DataColumn[] columns) : 
					base(indexName, columns)
			{
			}
			
			/// <summary>
			/// Finds a row in the Type table containing the key elements.
			/// </summary>
			/// <param name="externalId0">The ExternalId0 element of the key.</param>
			/// <returns>The Type row that contains the key elements, or null if there is no match.</returns>
			public TypeRow Find(string externalId0)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((TypeRow)(base.Find(new object[] {
							externalId0})));
			}
			
			/// <summary>
			/// Finds a row in the Type table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A TypeKeyExternalId0 row that contains the key elements, or null if there is no match.</returns>
			public new TypeRow Find(object[] key)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((TypeRow)(base.Find(key)));
			}
		}
		
		/// <summary>
		/// Represents a means of identifying a User row using a set of columns in which all values must be unique.
		/// </summary>
		public interface IUserIndex
		{
			
			/// <summary>
			/// Finds a row in the User table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A DepartmentRow that contains the key elements, or null if there is no match.</returns>
			UserRow Find(object[] key);
		}
		
		/// <summary>
		/// Represents a means of identifying a User row using a set of columns in which all values must be unique.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public class UserKeyIndex : global::Teraque.ClusteredIndex, IUserIndex
		{
			
			/// <summary>
			/// Create a primary, unique index on the User table.
			/// </summary>
			/// <param name="indexName">The name of the index.</param>
			/// <param name="columns">The columns that describe a unique key.</param>
			public UserKeyIndex(string indexName, System.Data.DataColumn[] columns) : 
					base(indexName, columns)
			{
			}
			
			/// <summary>
			/// Finds a row in the User table containing the key elements.
			/// </summary>
			/// <param name="userId">The UserId element of the key.</param>
			/// <returns>The User row that contains the key elements, or null if there is no match.</returns>
			public UserRow Find(System.Guid userId)
			{
				return ((UserRow)(base.Find(new object[] {
							userId})));
			}
			
			/// <summary>
			/// Finds a row in the User table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A UserKey row that contains the key elements, or null if there is no match.</returns>
			public new UserRow Find(object[] key)
			{
				return ((UserRow)(base.Find(key)));
			}
		}
		
		/// <summary>
		/// Represents a means of identifying a User row using a set of columns in which all values must be unique.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public class UserKeyDistinguishedNameIndex : global::Teraque.NonClusteredIndex, IUserIndex
		{
			
			/// <summary>
			/// Create a secondary, unique index on the User table.
			/// </summary>
			/// <param name="indexName">The name of the index.</param>
			/// <param name="columns">The columns that describe a unique key.</param>
			public UserKeyDistinguishedNameIndex(string indexName, System.Data.DataColumn[] columns) : 
					base(indexName, columns)
			{
			}
			
			/// <summary>
			/// Finds a row in the User table containing the key elements.
			/// </summary>
			/// <param name="distinguishedName">The DistinguishedName element of the key.</param>
			/// <returns>The User row that contains the key elements, or null if there is no match.</returns>
			public UserRow Find(string distinguishedName)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((UserRow)(base.Find(new object[] {
							distinguishedName})));
			}
			
			/// <summary>
			/// Finds a row in the User table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A UserKeyDistinguishedName row that contains the key elements, or null if there is no match.</returns>
			public new UserRow Find(object[] key)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((UserRow)(base.Find(key)));
			}
		}
		
		/// <summary>
		/// Represents a means of identifying a VolumeCategory row using a set of columns in which all values must be unique.
		/// </summary>
		public interface IVolumeCategoryIndex
		{
			
			/// <summary>
			/// Finds a row in the VolumeCategory table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A DepartmentRow that contains the key elements, or null if there is no match.</returns>
			VolumeCategoryRow Find(object[] key);
		}
		
		/// <summary>
		/// Represents a means of identifying a VolumeCategory row using a set of columns in which all values must be unique.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public class VolumeCategoryKeyIndex : global::Teraque.ClusteredIndex, IVolumeCategoryIndex
		{
			
			/// <summary>
			/// Create a primary, unique index on the VolumeCategory table.
			/// </summary>
			/// <param name="indexName">The name of the index.</param>
			/// <param name="columns">The columns that describe a unique key.</param>
			public VolumeCategoryKeyIndex(string indexName, System.Data.DataColumn[] columns) : 
					base(indexName, columns)
			{
			}
			
			/// <summary>
			/// Finds a row in the VolumeCategory table containing the key elements.
			/// </summary>
			/// <param name="volumeCategoryCode">The VolumeCategoryCode element of the key.</param>
			/// <returns>The VolumeCategory row that contains the key elements, or null if there is no match.</returns>
			public VolumeCategoryRow Find(Teraque.VolumeCategoryCode volumeCategoryCode)
			{
				return ((VolumeCategoryRow)(base.Find(new object[] {
							volumeCategoryCode})));
			}
			
			/// <summary>
			/// Finds a row in the VolumeCategory table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A VolumeCategoryKey row that contains the key elements, or null if there is no match.</returns>
			public new VolumeCategoryRow Find(object[] key)
			{
				return ((VolumeCategoryRow)(base.Find(key)));
			}
		}
		
		/// <summary>
		/// Represents a means of identifying a VolumeCategory row using a set of columns in which all values must be unique.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public class VolumeCategoryKeyExternalId0Index : global::Teraque.NonClusteredIndex, IVolumeCategoryIndex
		{
			
			/// <summary>
			/// Create a secondary, unique index on the VolumeCategory table.
			/// </summary>
			/// <param name="indexName">The name of the index.</param>
			/// <param name="columns">The columns that describe a unique key.</param>
			public VolumeCategoryKeyExternalId0Index(string indexName, System.Data.DataColumn[] columns) : 
					base(indexName, columns)
			{
			}
			
			/// <summary>
			/// Finds a row in the VolumeCategory table containing the key elements.
			/// </summary>
			/// <param name="externalId0">The ExternalId0 element of the key.</param>
			/// <returns>The VolumeCategory row that contains the key elements, or null if there is no match.</returns>
			public VolumeCategoryRow Find(string externalId0)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((VolumeCategoryRow)(base.Find(new object[] {
							externalId0})));
			}
			
			/// <summary>
			/// Finds a row in the VolumeCategory table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A VolumeCategoryKeyExternalId0 row that contains the key elements, or null if there is no match.</returns>
			public new VolumeCategoryRow Find(object[] key)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((VolumeCategoryRow)(base.Find(key)));
			}
		}
		
		/// <summary>
		/// Represents a means of identifying a Weekend row using a set of columns in which all values must be unique.
		/// </summary>
		public interface IWeekendIndex
		{
			
			/// <summary>
			/// Finds a row in the Weekend table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A DepartmentRow that contains the key elements, or null if there is no match.</returns>
			WeekendRow Find(object[] key);
		}
		
		/// <summary>
		/// Represents a means of identifying a Weekend row using a set of columns in which all values must be unique.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public class WeekendKeyIndex : global::Teraque.ClusteredIndex, IWeekendIndex
		{
			
			/// <summary>
			/// Create a primary, unique index on the Weekend table.
			/// </summary>
			/// <param name="indexName">The name of the index.</param>
			/// <param name="columns">The columns that describe a unique key.</param>
			public WeekendKeyIndex(string indexName, System.Data.DataColumn[] columns) : 
					base(indexName, columns)
			{
			}
			
			/// <summary>
			/// Finds a row in the Weekend table containing the key elements.
			/// </summary>
			/// <param name="weekendCode">The WeekendCode element of the key.</param>
			/// <returns>The Weekend row that contains the key elements, or null if there is no match.</returns>
			public WeekendRow Find(Teraque.WeekendCode weekendCode)
			{
				return ((WeekendRow)(base.Find(new object[] {
							weekendCode})));
			}
			
			/// <summary>
			/// Finds a row in the Weekend table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A WeekendKey row that contains the key elements, or null if there is no match.</returns>
			public new WeekendRow Find(object[] key)
			{
				return ((WeekendRow)(base.Find(key)));
			}
		}
		
		/// <summary>
		/// Represents a means of identifying a Weekend row using a set of columns in which all values must be unique.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public class WeekendKeyExternalId0Index : global::Teraque.NonClusteredIndex, IWeekendIndex
		{
			
			/// <summary>
			/// Create a secondary, unique index on the Weekend table.
			/// </summary>
			/// <param name="indexName">The name of the index.</param>
			/// <param name="columns">The columns that describe a unique key.</param>
			public WeekendKeyExternalId0Index(string indexName, System.Data.DataColumn[] columns) : 
					base(indexName, columns)
			{
			}
			
			/// <summary>
			/// Finds a row in the Weekend table containing the key elements.
			/// </summary>
			/// <param name="externalId0">The ExternalId0 element of the key.</param>
			/// <returns>The Weekend row that contains the key elements, or null if there is no match.</returns>
			public WeekendRow Find(string externalId0)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((WeekendRow)(base.Find(new object[] {
							externalId0})));
			}
			
			/// <summary>
			/// Finds a row in the Weekend table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A WeekendKeyExternalId0 row that contains the key elements, or null if there is no match.</returns>
			public new WeekendRow Find(object[] key)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((WeekendRow)(base.Find(key)));
			}
		}
		
		/// <summary>
		/// Represents a means of identifying a Weekend row using a set of columns in which all values must be unique.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public class WeekendKeyExternalId1Index : global::Teraque.NonClusteredIndex, IWeekendIndex
		{
			
			/// <summary>
			/// Create a secondary, unique index on the Weekend table.
			/// </summary>
			/// <param name="indexName">The name of the index.</param>
			/// <param name="columns">The columns that describe a unique key.</param>
			public WeekendKeyExternalId1Index(string indexName, System.Data.DataColumn[] columns) : 
					base(indexName, columns)
			{
			}
			
			/// <summary>
			/// Finds a row in the Weekend table containing the key elements.
			/// </summary>
			/// <param name="externalId1">The ExternalId1 element of the key.</param>
			/// <returns>The Weekend row that contains the key elements, or null if there is no match.</returns>
			public WeekendRow Find(string externalId1)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((WeekendRow)(base.Find(new object[] {
							externalId1})));
			}
			
			/// <summary>
			/// Finds a row in the Weekend table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A WeekendKeyExternalId1 row that contains the key elements, or null if there is no match.</returns>
			public new WeekendRow Find(object[] key)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((WeekendRow)(base.Find(key)));
			}
		}
		
		/// <summary>
		/// Represents a means of identifying a WorkingOrder row using a set of columns in which all values must be unique.
		/// </summary>
		public interface IWorkingOrderIndex
		{
			
			/// <summary>
			/// Finds a row in the WorkingOrder table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A DepartmentRow that contains the key elements, or null if there is no match.</returns>
			WorkingOrderRow Find(object[] key);
		}
		
		/// <summary>
		/// Represents a means of identifying a WorkingOrder row using a set of columns in which all values must be unique.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public class WorkingOrderKeyIndex : global::Teraque.ClusteredIndex, IWorkingOrderIndex
		{
			
			/// <summary>
			/// Create a primary, unique index on the WorkingOrder table.
			/// </summary>
			/// <param name="indexName">The name of the index.</param>
			/// <param name="columns">The columns that describe a unique key.</param>
			public WorkingOrderKeyIndex(string indexName, System.Data.DataColumn[] columns) : 
					base(indexName, columns)
			{
			}
			
			/// <summary>
			/// Finds a row in the WorkingOrder table containing the key elements.
			/// </summary>
			/// <param name="workingOrderId">The WorkingOrderId element of the key.</param>
			/// <returns>The WorkingOrder row that contains the key elements, or null if there is no match.</returns>
			public WorkingOrderRow Find(System.Guid workingOrderId)
			{
				return ((WorkingOrderRow)(base.Find(new object[] {
							workingOrderId})));
			}
			
			/// <summary>
			/// Finds a row in the WorkingOrder table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A WorkingOrderKey row that contains the key elements, or null if there is no match.</returns>
			public new WorkingOrderRow Find(object[] key)
			{
				return ((WorkingOrderRow)(base.Find(key)));
			}
		}
		
		/// <summary>
		/// Represents a means of identifying a WorkingOrder row using a set of columns in which all values must be unique.
		/// </summary>
		[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Teraque.DataModelGenerator.ClientGenerator", "1.0.0.0")]
		[global::System.ComponentModel.DesignerCategoryAttribute("code")]
		[global::System.ComponentModel.ToolboxItemAttribute(true)]
		public class WorkingOrderKeyExternalId0Index : global::Teraque.NonClusteredIndex, IWorkingOrderIndex
		{
			
			/// <summary>
			/// Create a secondary, unique index on the WorkingOrder table.
			/// </summary>
			/// <param name="indexName">The name of the index.</param>
			/// <param name="columns">The columns that describe a unique key.</param>
			public WorkingOrderKeyExternalId0Index(string indexName, System.Data.DataColumn[] columns) : 
					base(indexName, columns)
			{
			}
			
			/// <summary>
			/// Finds a row in the WorkingOrder table containing the key elements.
			/// </summary>
			/// <param name="externalId0">The ExternalId0 element of the key.</param>
			/// <returns>The WorkingOrder row that contains the key elements, or null if there is no match.</returns>
			public WorkingOrderRow Find(string externalId0)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((WorkingOrderRow)(base.Find(new object[] {
							externalId0})));
			}
			
			/// <summary>
			/// Finds a row in the WorkingOrder table containing the key elements.
			/// </summary>
			/// <param name="key">An array of key elements.</param>
			/// <returns>A WorkingOrderKeyExternalId0 row that contains the key elements, or null if there is no match.</returns>
			public new WorkingOrderRow Find(object[] key)
			{
				// Return the strongly typed Object row that matches the key element(s).
				return ((WorkingOrderRow)(base.Find(key)));
			}
		}
	}
}


/// <summary>
/// Abstract interface to a thread-safe, multi-tiered DataModel.
/// </summary>
[global::System.ServiceModel.ServiceContractAttribute()]
public partial interface IDataModel
{
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/CreateAccount", ReplyAction="http://tempuri.org/IDataModel/CreateAccountResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void CreateAccount(string configurationId, object[] currencyKey, object[] entityKey, object mnemonic);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/CreateAccountSeries", ReplyAction="http://tempuri.org/IDataModel/CreateAccountSeriesResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void CreateAccountSeries(
				object[] accountKey, 
				string configurationId, 
				global::System.DateTime date, 
				object monthToDayLinkedReturn, 
				object monthToDayProfitAndLoss, 
				object quarterToDayLinkedReturn, 
				object quarterToDayProfitAndLoss, 
				object totalExposureBase, 
				object totalExposureLocal, 
				object totalMarketValueBase, 
				object totalMarketValueLocal, 
				object trailingOneDayLinkedReturn, 
				object trailingOneDayProfitAndLoss, 
				object trailingOneMonthLinkedReturn, 
				object trailingOneMonthProfitAndLoss, 
				object trailingOneYearLinkedReturn, 
				object trailingOneYearProfitAndLoss, 
				object trailingSixMonthLinkedReturn, 
				object trailingSixMonthProfitAndLoss, 
				object trailingThreeMonthLinkedReturn, 
				object trailingThreeMonthProfitAndLoss, 
				object yearToDayLinkedReturn, 
				object yearToDayProfitAndLoss);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/CreateAllocation", ReplyAction="http://tempuri.org/IDataModel/CreateAllocationResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(Teraque.PositionTypeCode))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(Teraque.SideCode))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void CreateAllocation(
				object[] accountKey, 
				object accruedInterest, 
				global::System.Guid allocationId, 
				object commission, 
				string configurationId, 
				global::System.DateTime createdTime, 
				object externalId0, 
				global::System.DateTime modifiedTime, 
				global::Teraque.PositionTypeCode positionTypeCode, 
				object price, 
				object quantity, 
				object[] securityKeyBySecurityId, 
				object[] securityKeyBySettlementId, 
				global::System.DateTime settlementDate, 
				object[] sideKey, 
				global::System.DateTime tradeDate, 
				object userFee0, 
				object userFee1, 
				object userFee2, 
				object userFee3, 
				object[] userKeyByCreatedUserId, 
				object[] userKeyByModifiedUserId, 
				object[] workingOrderKey);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/CreateBlotter", ReplyAction="http://tempuri.org/IDataModel/CreateBlotterResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(Teraque.PartyTypeCode))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void CreateBlotter(string configurationId, object[] entityKey, object[] partyTypeKey);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/CreateBlotterDestinationMap", ReplyAction="http://tempuri.org/IDataModel/CreateBlotterDestinationMapResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void CreateBlotterDestinationMap(global::System.Guid blotterDestinationMapId, object[] blotterKey, string configurationId, object[] destinationKey, object externalId0);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/CreateBranch", ReplyAction="http://tempuri.org/IDataModel/CreateBranchResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void CreateBranch(object[] blotterKey, string configurationId, object shortName);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/CreateBroker", ReplyAction="http://tempuri.org/IDataModel/CreateBrokerResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void CreateBroker(string configurationId, object connected, object phone, object[] sourceKey, object symbol);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/CreateBrokerAccount", ReplyAction="http://tempuri.org/IDataModel/CreateBrokerAccountResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void CreateBrokerAccount(global::System.Guid brokerAccountId, object[] brokerKey, string configurationId, object description, object externalId0, object externalId1, object externalId2, object externalId3, object mnemonic, object[] traderKey);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/CreateClearingBroker", ReplyAction="http://tempuri.org/IDataModel/CreateClearingBrokerResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void CreateClearingBroker(object[] brokerKey, string configurationId);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/CreateCommissionSchedule", ReplyAction="http://tempuri.org/IDataModel/CreateCommissionScheduleResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void CreateCommissionSchedule(global::System.Guid commissionScheduleId, string configurationId, object externalId0, object name);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/CreateCommissionTranche", ReplyAction="http://tempuri.org/IDataModel/CreateCommissionTrancheResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(Teraque.CommissionTypeCode))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(Teraque.CommissionUnitCode))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void CreateCommissionTranche(object[] commissionScheduleKey, global::System.Guid commissionTrancheId, object[] commissionTypeKey, object[] commissionUnitKey, string configurationId, object endRange, object externalId0, object startRange, object value);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/CreateCommissionType", ReplyAction="http://tempuri.org/IDataModel/CreateCommissionTypeResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(Teraque.CommissionTypeCode))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void CreateCommissionType(global::Teraque.CommissionTypeCode commissionTypeCode, string configurationId, object description, object externalId0, object name);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/CreateCommissionUnit", ReplyAction="http://tempuri.org/IDataModel/CreateCommissionUnitResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(Teraque.CommissionUnitCode))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void CreateCommissionUnit(global::Teraque.CommissionUnitCode commissionUnitCode, string configurationId, object description, object externalId0, object name);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/CreateComplianceOfficer", ReplyAction="http://tempuri.org/IDataModel/CreateComplianceOfficerResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void CreateComplianceOfficer(string configurationId, object[] userKey);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/CreateCondition", ReplyAction="http://tempuri.org/IDataModel/CreateConditionResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(Teraque.ConditionCode))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void CreateCondition(global::Teraque.ConditionCode conditionCode, string configurationId, object description, object externalId0, object externalId1, object externalId2, object externalId3, object mnemonic);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/CreateConfiguration", ReplyAction="http://tempuri.org/IDataModel/CreateConfigurationResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void CreateConfiguration(object configurationId, object indexName, object relationName);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/CreateCountry", ReplyAction="http://tempuri.org/IDataModel/CreateCountryResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void CreateCountry(object abbreviation, string configurationId, global::System.Guid countryId, object externalId0, object externalId1, object name);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/CreateCreditRating", ReplyAction="http://tempuri.org/IDataModel/CreateCreditRatingResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void CreateCreditRating(string configurationId, global::System.Guid creditRatingId, object[] creditRatingServiceKey, object externalId0, object externalId1, object scale, object value);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/CreateCreditRatingService", ReplyAction="http://tempuri.org/IDataModel/CreateCreditRatingServiceResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void CreateCreditRatingService(string configurationId, global::System.Guid creditRatingServiceId, object externalId0, object externalId1, object name);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/CreateCrossing", ReplyAction="http://tempuri.org/IDataModel/CreateCrossingResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(Teraque.CrossingCode))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void CreateCrossing(string configurationId, global::Teraque.CrossingCode crossingCode, object description, object externalId0, object externalId1, object name);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/CreateCurrency", ReplyAction="http://tempuri.org/IDataModel/CreateCurrencyResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void CreateCurrency(string configurationId, object[] securityKey);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/CreateDebt", ReplyAction="http://tempuri.org/IDataModel/CreateDebtResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(Teraque.WeekendCode))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void CreateDebt(string configurationId, object exdividendDays, object faceOutstanding, global::System.DateTime firstCoupon, object frequency, object issuePrice, global::System.DateTime maturityDate, object redemptionValue, object[] securityKeyByDebtId, object[] securityKeyBySettlementId, object[] weekendKey);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/CreateDestination", ReplyAction="http://tempuri.org/IDataModel/CreateDestinationResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void CreateDestination(
				object cancelCustomFixTag, 
				object clearingFirmId, 
				string configurationId, 
				global::System.Guid destinationId, 
				object externalId0, 
				object externalId1, 
				object fixAccount, 
				object fixAccountSuffixLength, 
				object fixExchangeMnemonic, 
				object fixExecBroker, 
				object fixExecDestinationListed, 
				object fixExecDestinationUnlisted, 
				object fixHandleInstListed, 
				object fixHandleInstUnlisted, 
				object fixIoiRoutingId, 
				object fixIoiRoutingType, 
				object fixNetCommissionType, 
				object fixNoteTagId, 
				object fixOnBehalfOf, 
				object fixOnBehalfOfSub, 
				object fixOrderIdFormat, 
				object fixPassiveTag, 
				object fixProactiveTag, 
				object fixSourceCompany, 
				object fixSourceId, 
				object fixSourceTrader, 
				object fixTargetCompany, 
				object fixTargetLocationId, 
				object fixTargetTrader, 
				object fixVersion, 
				object isBroker, 
				object isCancelAllowed, 
				object isCancelReplaceAllowed, 
				object isEcn, 
				object isExchange, 
				object isInternal, 
				object isIoiAllowed, 
				object isLimitPricingAllowed, 
				object isMarketOnClosePricingAllowed, 
				object isMarketPricingAllowed, 
				object isSystemUp, 
				object isTagEligible, 
				object isTradeAwayAllowed, 
				object isUnsolicitedTradeAllowed, 
				object lotSize, 
				object maximumQuantityListedLimit, 
				object maximumQuantityListedMarket, 
				object maximumQuantityUnlistedLimit, 
				object maximumQuantityUnlistedMarket, 
				global::System.DateTime modifiedTime, 
				object name, 
				object newOrderCustomFixTag, 
				object oatsDepartmentId, 
				object oatsDestinationCode, 
				object oatsReceivingMpi, 
				object oatsRouteMethod, 
				object oatsRoutingMpi, 
				object oatsSentMpi, 
				object oatsTerminalId, 
				object onCloseCancelTime, 
				object onCloseOrderTime, 
				object perShareUsageFee, 
				object postMarketLogic, 
				object primaryBackupDestinationId, 
				object secondaryBackupDestinationId, 
				object selectnetFlag, 
				object shortName, 
				object sourceId0, 
				object sourceId1, 
				object sourceId2, 
				object sourceId3, 
				object sourceId4, 
				object sourceId5, 
				object sourceId6, 
				object sourceId7, 
				object uniqueShortName);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/CreateDestinationExchangeMap", ReplyAction="http://tempuri.org/IDataModel/CreateDestinationExchangeMapResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void CreateDestinationExchangeMap(string configurationId, global::System.Guid destinationExchangeMapId, object[] destinationKey, object[] exchangeKey, object externalId0);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/CreateDestinationOrder", ReplyAction="http://tempuri.org/IDataModel/CreateDestinationOrderResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(Teraque.OrderTypeCode))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(Teraque.SideCode))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(Teraque.StateCode))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(Teraque.StatusCode))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(Teraque.TimeInForceCode))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void CreateDestinationOrder(
				object canceledQuantity, 
				object canceledTime, 
				string configurationId, 
				global::System.DateTime createdTime, 
				object[] destinationKey, 
				global::System.Guid destinationOrderId, 
				object externalId0, 
				object isCanceledByUser, 
				object isHidden, 
				object limitPrice, 
				global::System.DateTime modifiedTime, 
				object orderedQuantity, 
				object[] orderTypeKey, 
				object[] securityKeyBySecurityId, 
				object[] securityKeyBySettlementId, 
				global::System.DateTime settlementDate, 
				object[] sideKey, 
				object[] stateKey, 
				object[] statusKey, 
				object stopPrice, 
				object[] timeInForceKey, 
				global::System.DateTime tradeDate, 
				object[] traderKey, 
				object[] userKeyByCreatedUserId, 
				object[] userKeyByModifiedUserId, 
				object[] workingOrderKey);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/CreateEntity", ReplyAction="http://tempuri.org/IDataModel/CreateEntityResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void CreateEntity(
				string configurationId, 
				global::System.DateTime createdTime, 
				object description, 
				global::System.Guid entityId, 
				object externalId0, 
				object externalId1, 
				object externalId2, 
				object externalId3, 
				object externalId4, 
				object externalId5, 
				object externalId6, 
				object externalId7, 
				object[] imageKey, 
				object isContainer, 
				object isHidden, 
				object isReadOnly, 
				global::System.DateTime modifiedTime, 
				object name, 
				object[] typeKey);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/CreateEntityTree", ReplyAction="http://tempuri.org/IDataModel/CreateEntityTreeResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void CreateEntityTree(string configurationId, object[] entityKeyByChildId, object[] entityKeyByParentId, global::System.Guid entityTreeId, object externalId0);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/CreateEquity", ReplyAction="http://tempuri.org/IDataModel/CreateEquityResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void CreateEquity(string configurationId, object[] exchangeKey, object issuerId, object[] securityKeyByEquityId, object[] securityKeyBySettlementId, object sharesOutstanding);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/CreateExchange", ReplyAction="http://tempuri.org/IDataModel/CreateExchangeResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void CreateExchange(string configurationId, object[] countryKey, global::System.Guid exchangeId, object externalId0, object externalId1, object externalId2, object externalId3, object isListed, object mnemonic, object name);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/CreateExecution", ReplyAction="http://tempuri.org/IDataModel/CreateExecutionResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(Teraque.StateCode))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void CreateExecution(
				object accruedInterest, 
				object[] brokerAccountKey, 
				object[] brokerKey, 
				object commission, 
				string configurationId, 
				global::System.DateTime createdTime, 
				object[] destinationOrderKey, 
				global::System.Guid executionId, 
				object executionPrice, 
				object executionQuantity, 
				object externalId0, 
				object isHidden, 
				object modifiedTime, 
				object originalDestinationOrderId, 
				object originalPrice, 
				object originalQuantity, 
				object sourceExecutionId, 
				object[] stateKeyByDestinationStateCode, 
				object[] stateKeyBySourceStateCode, 
				object userFee0, 
				object userFee1, 
				object userFee2, 
				object userFee3, 
				object[] userKeyByCreatedUserId, 
				object[] userKeyByModifiedUserId);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/CreateFolder", ReplyAction="http://tempuri.org/IDataModel/CreateFolderResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void CreateFolder(string configurationId, object[] entityKey);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/CreateGroupAccount", ReplyAction="http://tempuri.org/IDataModel/CreateGroupAccountResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void CreateGroupAccount(object[] accountKey, string configurationId);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/CreateHoliday", ReplyAction="http://tempuri.org/IDataModel/CreateHolidayResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(Teraque.HolidayTypeCode))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void CreateHoliday(string configurationId, object[] countryKey, global::System.DateTime date, object externalId0, object externalId1, global::System.Guid holidayId, object[] holidayTypeKey);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/CreateHolidayType", ReplyAction="http://tempuri.org/IDataModel/CreateHolidayTypeResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(Teraque.HolidayTypeCode))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void CreateHolidayType(string configurationId, object description, object externalId0, object externalId1, object externalId2, object externalId3, global::Teraque.HolidayTypeCode holidayTypeCode);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/CreateImage", ReplyAction="http://tempuri.org/IDataModel/CreateImageResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void CreateImage(string configurationId, object externalId0, object image, global::System.Guid imageId);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/CreateIndustry", ReplyAction="http://tempuri.org/IDataModel/CreateIndustryResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void CreateIndustry(string configurationId, object externalId0, object externalId1, object[] industryClassificationKey, global::System.Guid industryId, object mnemonic, object name);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/CreateIndustryClassification", ReplyAction="http://tempuri.org/IDataModel/CreateIndustryClassificationResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void CreateIndustryClassification(string configurationId, object externalId0, object externalId1, global::System.Guid industryClassificationId, object mnemonic, object name);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/CreateIndustryLeaf", ReplyAction="http://tempuri.org/IDataModel/CreateIndustryLeafResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void CreateIndustryLeaf(string configurationId, object externalId0, object externalId1, object[] industryKey, global::System.Guid industryLeafId, object[] securityKey);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/CreateIndustryTree", ReplyAction="http://tempuri.org/IDataModel/CreateIndustryTreeResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void CreateIndustryTree(string configurationId, object externalId0, object externalId1, object[] industryKeyByChildId, object[] industryKeyByParentId, global::System.Guid industryTreeId);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/CreateInstitution", ReplyAction="http://tempuri.org/IDataModel/CreateInstitutionResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void CreateInstitution(string configurationId, object[] sourceKey);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/CreateIssuer", ReplyAction="http://tempuri.org/IDataModel/CreateIssuerResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void CreateIssuer(string configurationId, object[] entityKey);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/CreateLotHandling", ReplyAction="http://tempuri.org/IDataModel/CreateLotHandlingResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(Teraque.LotHandlingCode))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void CreateLotHandling(string configurationId, object description, object externalId0, object externalId1, object externalId2, object externalId3, global::Teraque.LotHandlingCode lotHandlingCode, object mnemonic);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/CreateMajorInstrumentType", ReplyAction="http://tempuri.org/IDataModel/CreateMajorInstrumentTypeResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void CreateMajorInstrumentType(string configurationId, object externalId0, object externalId1, global::System.Guid majorInstrumentTypeId, object mnemonic, object name);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/CreateMatch", ReplyAction="http://tempuri.org/IDataModel/CreateMatchResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(Teraque.StatusCode))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void CreateMatch(object[] blotterKey, string configurationId, global::System.Guid contraMatchId, global::System.Guid contraOrderId, object heatIndex, object heatIndexDetails, global::System.DateTime matchedTime, global::System.Guid matchId, object[] statusKey, object[] workingOrderKey);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/CreateMinorInstrumentType", ReplyAction="http://tempuri.org/IDataModel/CreateMinorInstrumentTypeResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void CreateMinorInstrumentType(string configurationId, object externalId0, object externalId1, global::System.Guid minorInstrumentTypeId, object mnemonic, object name);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/CreateMssaBucket", ReplyAction="http://tempuri.org/IDataModel/CreateMssaBucketResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void CreateMssaBucket(string configurationId, object externalId0, object externalId1, global::System.Guid mssaBucketId, object name);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/CreateNegotiation", ReplyAction="http://tempuri.org/IDataModel/CreateNegotiationResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(Teraque.StatusCode))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void CreateNegotiation(object[] blotterKey, string configurationId, object[] executionKey, object isRead, object[] matchKey, global::System.Guid negotiationId, object quantity, object[] statusKey);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/CreateOrderType", ReplyAction="http://tempuri.org/IDataModel/CreateOrderTypeResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(Teraque.OrderTypeCode))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void CreateOrderType(string configurationId, object description, object externalId0, object externalId1, object externalId2, object externalId3, object mnemonic, global::Teraque.OrderTypeCode orderTypeCode);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/CreatePartyType", ReplyAction="http://tempuri.org/IDataModel/CreatePartyTypeResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(Teraque.PartyTypeCode))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void CreatePartyType(string configurationId, object description, object externalId0, object externalId1, object mnemonic, global::Teraque.PartyTypeCode partyTypeCode);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/CreatePosition", ReplyAction="http://tempuri.org/IDataModel/CreatePositionResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(Teraque.PositionTypeCode))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void CreatePosition(object[] accountKey, string configurationId, object externalId0, object externalId1, object externalId2, object externalId3, global::System.Guid positionId, object[] positionTypeKey, object[] securityKey);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/CreatePositionSeries", ReplyAction="http://tempuri.org/IDataModel/CreatePositionSeriesResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(Teraque.PositionTypeCode))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void CreatePositionSeries(object[] accountKey, object baseCost, object basePrice, string configurationId, global::System.DateTime date, object externalId0, object externalId1, object localCost, object localPrice, object[] positionKey, global::System.Guid positionSeriesId, object[] positionTypeKey, object[] securityKey, object[] securitySeriesKey);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/CreatePositionType", ReplyAction="http://tempuri.org/IDataModel/CreatePositionTypeResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(Teraque.PositionTypeCode))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void CreatePositionType(string configurationId, object externalId0, object externalId1, object externalId2, object externalId3, object mnemonic, global::Teraque.PositionTypeCode positionTypeCode, object sign);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/CreatePrice", ReplyAction="http://tempuri.org/IDataModel/CreatePriceResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void CreatePrice(
				object askPrice, 
				object askSize, 
				object bidPrice, 
				object bidSize, 
				object closePrice, 
				string configurationId, 
				object highPrice, 
				object lastPrice, 
				object lastSize, 
				object lowPrice, 
				object openPrice, 
				object priceChange, 
				object[] securityKeyByCurrencyId, 
				object[] securityKeyBySecurityId, 
				object volume, 
				object volumeWeightedAveragePrice);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/CreateProperty", ReplyAction="http://tempuri.org/IDataModel/CreatePropertyResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void CreateProperty(string configurationId, object externalId0, object name, global::System.Guid propertyId);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/CreatePropertyStore", ReplyAction="http://tempuri.org/IDataModel/CreatePropertyStoreResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(byte[]))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void CreatePropertyStore(string configurationId, object[] entityKey, object externalId0, object[] propertyKey, global::System.Guid propertyStoreId, byte[] value);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/CreateProvince", ReplyAction="http://tempuri.org/IDataModel/CreateProvinceResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void CreateProvince(object abbreviation, string configurationId, object[] countryKey, object externalId0, object externalId1, object name, global::System.Guid provinceId);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/CreateSecurity", ReplyAction="http://tempuri.org/IDataModel/CreateSecurityResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(Teraque.VolumeCategoryCode))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void CreateSecurity(object averageDailyVolume, string configurationId, object[] countryKey, object[] entityKey, object isDerivative, object[] issuerKey, object logo, object[] majorInstrumentTypeKey, object marketCapitalization, object minimumQuantity, object[] minorInstrumentTypeKey, object priceFactor, object quantityFactor, object symbol, object[] volumeCategoryKey);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/CreateSecuritySeries", ReplyAction="http://tempuri.org/IDataModel/CreateSecuritySeriesResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(Teraque.SubordinateTypeCode))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void CreateSecuritySeries(
				object betaAdjustedKrd10Year, 
				object betaAdjustedKrd20Year, 
				object betaAdjustedKrd2Year, 
				object betaAdjustedKrd30Year, 
				object betaAdjustedKrd5Year, 
				object betaAdjustedKrd6Month, 
				string configurationId, 
				object coupon, 
				object[] creditRatingKeyByCreditRatingId0, 
				object[] creditRatingKeyByCreditRatingId1, 
				object[] creditRatingKeyByCreditRatingId2, 
				object[] creditRatingKeyByCreditRatingId3, 
				object[] creditRatingKeyByCreditRatingId4, 
				object[] creditRatingKeyByCreditRatingId5, 
				object currentYield, 
				global::System.DateTime date, 
				object effectiveConvexity, 
				object effectiveDuration, 
				object externalId0, 
				object externalId1, 
				object modifiedDurationToWorst, 
				object modifiedOptionAdjustedDuration, 
				object[] mssaBucketKey, 
				object optionAdjustedDuration, 
				object optionAdjustedSpread, 
				object optionAdjustedSpreadDuration, 
				object optionAdjustedYieldToWorst, 
				object[] securityKey, 
				global::System.Guid securitySeriesId, 
				object[] subordinateTypeKey, 
				object yearsToAverageLife, 
				object yearsToMaturity, 
				object yieldToEffectiveMaturity, 
				object yieldToMaturity, 
				object yieldToWorst);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/CreateSettlementUnit", ReplyAction="http://tempuri.org/IDataModel/CreateSettlementUnitResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(Teraque.SettlementUnitCode))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void CreateSettlementUnit(string configurationId, object description, object externalId0, object name, global::Teraque.SettlementUnitCode settlementUnitCode);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/CreateSide", ReplyAction="http://tempuri.org/IDataModel/CreateSideResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(Teraque.SideCode))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void CreateSide(object cashSign, string configurationId, object description, object externalId0, object externalId1, object externalId2, object externalId3, object image, object mnemonic, object quantitySign, global::Teraque.SideCode sideCode, object sortOrder);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/CreateSingleAccount", ReplyAction="http://tempuri.org/IDataModel/CreateSingleAccountResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(Teraque.LotHandlingCode))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void CreateSingleAccount(object[] accountKey, object address0, object address1, object city, string configurationId, object[] countryKey, object[] lotHandlingKey, object postalCode, object[] provinceKey);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/CreateSource", ReplyAction="http://tempuri.org/IDataModel/CreateSourceResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(Teraque.PartyTypeCode))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void CreateSource(object advertisementSchemaId, object[] blotterKey, object buyMarketValueThreshold, object buyQuantityThreshold, string configurationId, global::Teraque.PartyTypeCode partyTypeCode, object sellMarketValueThreshold, object sellQuantityThreshold, object shortName);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/CreateSourceOrder", ReplyAction="http://tempuri.org/IDataModel/CreateSourceOrderResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(Teraque.OrderTypeCode))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(Teraque.SideCode))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(Teraque.StatusCode))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(Teraque.TimeInForceCode))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void CreateSourceOrder(
				string configurationId, 
				global::System.DateTime createdTime, 
				object[] destinationKey, 
				object externalId0, 
				object isAdvertised, 
				object isAutoExecute, 
				object isCanceled, 
				object isHeld, 
				object isSteppedIn, 
				object isSubmitted, 
				object limitPrice, 
				object maximumVolatility, 
				global::System.DateTime modifiedTime, 
				object newsFreeTime, 
				object orderedQuantity, 
				object[] orderTypeKey, 
				object receivedTime, 
				object[] securityKeyBySecurityId, 
				object[] securityKeyBySettlementId, 
				object settlementDate, 
				object[] sideKey, 
				global::System.Guid sourceOrderId, 
				object startTime, 
				object[] statusKey, 
				object stopPrice, 
				object stopTime, 
				object submittedQuantity, 
				object submittedTime, 
				object targetPrice, 
				object[] timeInForceKey, 
				object tradeDate, 
				object[] userKeyByCreatedUserId, 
				object[] userKeyByModifiedUserId, 
				object[] workingOrderKey);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/CreateState", ReplyAction="http://tempuri.org/IDataModel/CreateStateResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(Teraque.StateCode))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void CreateState(string configurationId, object description, object externalId0, object externalId1, object externalId2, object externalId3, object mnemonic, global::Teraque.StateCode stateCode);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/CreateStatus", ReplyAction="http://tempuri.org/IDataModel/CreateStatusResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(Teraque.StatusCode))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void CreateStatus(string configurationId, object description, object externalId0, object externalId1, object externalId2, object externalId3, object image, object mnemonic, object sortOrder, global::Teraque.StatusCode statusCode);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/CreateSubordinateType", ReplyAction="http://tempuri.org/IDataModel/CreateSubordinateTypeResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(Teraque.SubordinateTypeCode))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void CreateSubordinateType(string configurationId, object description, object externalId0, object externalId1, global::Teraque.SubordinateTypeCode subordinateTypeCode);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/CreateTaxLot", ReplyAction="http://tempuri.org/IDataModel/CreateTaxLotResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(Teraque.PositionTypeCode))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void CreateTaxLot(object[] accountKey, object baseCost, string configurationId, object externalId0, object externalId1, object localCost, object[] positionKey, object[] positionTypeKey, object[] securityKey, object settlementDate, global::System.Guid taxLotId, object tradeDate);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/CreateTaxLotSeries", ReplyAction="http://tempuri.org/IDataModel/CreateTaxLotSeriesResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(Teraque.PositionTypeCode))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void CreateTaxLotSeries(
				object[] accountKey, 
				string configurationId, 
				global::System.DateTime date, 
				object dealSpread, 
				object duration, 
				object exposureWeight, 
				object externalId0, 
				object externalId1, 
				object lotExposureBase, 
				object lotExposureLocal, 
				object lotMarketValueBase, 
				object lotMarketValueLocal, 
				object lotQuantity, 
				object marketWeight, 
				object monthToDayLinkedReturn, 
				object monthToDayProfitAndLoss, 
				object netAssetValue, 
				object originalBuyTransaction, 
				object[] positionSeriesKey, 
				object[] positionTypeKey, 
				object qualityLabel, 
				object quantity, 
				object quarterToDayLinkedReturn, 
				object quarterToDayProfitAndLoss, 
				object ratingScore, 
				object sector, 
				object[] securityKey, 
				object[] securitySeriesKey, 
				object strategy, 
				object strategyDescription, 
				object sumExposure, 
				object sumMarketValue, 
				object[] taxLotKey, 
				global::System.Guid taxLotSeriesId, 
				object trade, 
				object weight, 
				object yearToDayLinkedReturn, 
				object yearToDayProfitAndLoss);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/CreateTimeInForce", ReplyAction="http://tempuri.org/IDataModel/CreateTimeInForceResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(Teraque.TimeInForceCode))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void CreateTimeInForce(string configurationId, object description, object externalId0, object externalId1, object externalId2, object externalId3, object mnemonic, object sortOrder, global::Teraque.TimeInForceCode timeInForceCode);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/CreateTimeUnit", ReplyAction="http://tempuri.org/IDataModel/CreateTimeUnitResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(Teraque.TimeUnitCode))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void CreateTimeUnit(string configurationId, object externalId0, object inDays, object name, global::Teraque.TimeUnitCode timeUnitCode);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/CreateTrader", ReplyAction="http://tempuri.org/IDataModel/CreateTraderResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(Teraque.CrossingCode))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void CreateTrader(
				object address1, 
				object address2, 
				object address3, 
				object[] blotterKey, 
				object commissionMaximum, 
				object commissionMinimum, 
				object commissionRate, 
				object commissionRateTypeCode, 
				string configurationId, 
				global::Teraque.CrossingCode crossingCode, 
				object defaultAccountId, 
				object emailAddress, 
				object fixAccountId, 
				object isAgencyMatch, 
				object isBrokerMatch, 
				object isCommissionChangeAllowed, 
				object isEditExecutionsAllowed, 
				object isHedgeMatch, 
				object isHeld, 
				object isInstitutionMatch, 
				object lastDeletedOrder, 
				object lastFilledOrder, 
				object lastFilledSourceOrder, 
				object lastTrade, 
				object lotSizeDefault, 
				object marketSleep, 
				object maximumVolatilityDefault, 
				object newsFreeTimeDefault, 
				object oatsAccountType, 
				object oatsOrigDeptId, 
				object orderMaximumLimitDelta, 
				object orderMaximumMarketValue, 
				object orderMaximumQuantity, 
				object orderWarningMarketValue, 
				object orderWarningQuantity, 
				object phone, 
				object reviewWindow, 
				object scraperConfigurationString, 
				object startTimeDefault, 
				object stopTimeDefault, 
				object tagId, 
				object[] userKey);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/CreateTraderVolumeSetting", ReplyAction="http://tempuri.org/IDataModel/CreateTraderVolumeSettingResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(Teraque.VolumeCategoryCode))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void CreateTraderVolumeSetting(object autoExecuteQuantity, string configurationId, object externalId0, object thresholdQuantity, object[] traderKey, global::System.Guid traderVolumeSettingId, object[] volumeCategoryKey);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/CreateType", ReplyAction="http://tempuri.org/IDataModel/CreateTypeResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void CreateType(string configurationId, object description, object externalId0, object[] imageKey, object type, global::System.Guid typeId);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/CreateUser", ReplyAction="http://tempuri.org/IDataModel/CreateUserResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(byte[]))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void CreateUser(string configurationId, object distinguishedName, object[] entityKey, object isRemoved, object preferences);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/CreateVolumeCategory", ReplyAction="http://tempuri.org/IDataModel/CreateVolumeCategoryResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(Teraque.VolumeCategoryCode))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void CreateVolumeCategory(string configurationId, object description, object externalId0, object highVolumeRange, object lowVolumeRange, object mnemonic, global::Teraque.VolumeCategoryCode volumeCategoryCode);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/CreateWeekend", ReplyAction="http://tempuri.org/IDataModel/CreateWeekendResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(Teraque.WeekendCode))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void CreateWeekend(string configurationId, object externalId0, object externalId1, object userCode0, object userCode1, global::Teraque.WeekendCode weekendCode);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/CreateWorkingOrder", ReplyAction="http://tempuri.org/IDataModel/CreateWorkingOrderResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(Teraque.CrossingCode))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(Teraque.OrderTypeCode))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(Teraque.SideCode))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(Teraque.StatusCode))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(Teraque.TimeInForceCode))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void CreateWorkingOrder(
				object automaticQuantity, 
				object[] blotterKey, 
				string configurationId, 
				global::System.DateTime createdTime, 
				object[] crossingKey, 
				object[] destinationKey, 
				object externalId0, 
				object isAutomatic, 
				object isAwake, 
				object isBrokerMatch, 
				object isHedgeMatch, 
				object isInstitutionMatch, 
				object limitPrice, 
				global::System.DateTime modifiedTime, 
				object[] orderTypeKey, 
				object[] securityKeyBySecurityId, 
				object[] securityKeyBySettlementId, 
				global::System.DateTime settlementDate, 
				object[] sideKey, 
				object startTime, 
				object[] statusKey, 
				object stopPrice, 
				object stopTime, 
				object submittedQuantity, 
				object submittedTime, 
				object[] timeInForceKey, 
				global::System.DateTime tradeDate, 
				object uploadedTime, 
				object[] userKeyByCreatedUserId, 
				object[] userKeyByModifiedUserId, 
				global::System.Guid workingOrderId);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/DestroyAccount", ReplyAction="http://tempuri.org/IDataModel/DestroyAccountResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void DestroyAccount(object[] accountKey, string configurationId);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/DestroyAccountSeries", ReplyAction="http://tempuri.org/IDataModel/DestroyAccountSeriesResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void DestroyAccountSeries(object[] accountSeriesKey, string configurationId);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/DestroyAllocation", ReplyAction="http://tempuri.org/IDataModel/DestroyAllocationResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(Teraque.PositionTypeCode))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(Teraque.SideCode))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void DestroyAllocation(object[] allocationKey, string configurationId);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/DestroyBlotter", ReplyAction="http://tempuri.org/IDataModel/DestroyBlotterResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(Teraque.PartyTypeCode))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void DestroyBlotter(object[] blotterKey, string configurationId);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/DestroyBlotterDestinationMap", ReplyAction="http://tempuri.org/IDataModel/DestroyBlotterDestinationMapResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void DestroyBlotterDestinationMap(object[] blotterDestinationMapKey, string configurationId);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/DestroyBranch", ReplyAction="http://tempuri.org/IDataModel/DestroyBranchResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void DestroyBranch(object[] branchKey, string configurationId);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/DestroyBroker", ReplyAction="http://tempuri.org/IDataModel/DestroyBrokerResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void DestroyBroker(object[] brokerKey, string configurationId);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/DestroyBrokerAccount", ReplyAction="http://tempuri.org/IDataModel/DestroyBrokerAccountResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void DestroyBrokerAccount(object[] brokerAccountKey, string configurationId);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/DestroyClearingBroker", ReplyAction="http://tempuri.org/IDataModel/DestroyClearingBrokerResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void DestroyClearingBroker(object[] clearingBrokerKey, string configurationId);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/DestroyCommissionSchedule", ReplyAction="http://tempuri.org/IDataModel/DestroyCommissionScheduleResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void DestroyCommissionSchedule(object[] commissionScheduleKey, string configurationId);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/DestroyCommissionTranche", ReplyAction="http://tempuri.org/IDataModel/DestroyCommissionTrancheResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(Teraque.CommissionTypeCode))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(Teraque.CommissionUnitCode))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void DestroyCommissionTranche(object[] commissionTrancheKey, string configurationId);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/DestroyCommissionType", ReplyAction="http://tempuri.org/IDataModel/DestroyCommissionTypeResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(Teraque.CommissionTypeCode))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void DestroyCommissionType(object[] commissionTypeKey, string configurationId);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/DestroyCommissionUnit", ReplyAction="http://tempuri.org/IDataModel/DestroyCommissionUnitResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(Teraque.CommissionUnitCode))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void DestroyCommissionUnit(object[] commissionUnitKey, string configurationId);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/DestroyComplianceOfficer", ReplyAction="http://tempuri.org/IDataModel/DestroyComplianceOfficerResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void DestroyComplianceOfficer(object[] complianceOfficerKey, string configurationId);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/DestroyCondition", ReplyAction="http://tempuri.org/IDataModel/DestroyConditionResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(Teraque.ConditionCode))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void DestroyCondition(object[] conditionKey, string configurationId);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/DestroyConfiguration", ReplyAction="http://tempuri.org/IDataModel/DestroyConfigurationResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void DestroyConfiguration(string configurationId, object[] configurationKey);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/DestroyCountry", ReplyAction="http://tempuri.org/IDataModel/DestroyCountryResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void DestroyCountry(string configurationId, object[] countryKey);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/DestroyCreditRating", ReplyAction="http://tempuri.org/IDataModel/DestroyCreditRatingResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void DestroyCreditRating(string configurationId, object[] creditRatingKey);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/DestroyCreditRatingService", ReplyAction="http://tempuri.org/IDataModel/DestroyCreditRatingServiceResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void DestroyCreditRatingService(string configurationId, object[] creditRatingServiceKey);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/DestroyCrossing", ReplyAction="http://tempuri.org/IDataModel/DestroyCrossingResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(Teraque.CrossingCode))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void DestroyCrossing(string configurationId, object[] crossingKey);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/DestroyCurrency", ReplyAction="http://tempuri.org/IDataModel/DestroyCurrencyResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void DestroyCurrency(string configurationId, object[] currencyKey);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/DestroyDebt", ReplyAction="http://tempuri.org/IDataModel/DestroyDebtResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(Teraque.WeekendCode))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void DestroyDebt(string configurationId, object[] debtKey);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/DestroyDestination", ReplyAction="http://tempuri.org/IDataModel/DestroyDestinationResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void DestroyDestination(string configurationId, object[] destinationKey);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/DestroyDestinationExchangeMap", ReplyAction="http://tempuri.org/IDataModel/DestroyDestinationExchangeMapResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void DestroyDestinationExchangeMap(string configurationId, object[] destinationExchangeMapKey);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/DestroyDestinationOrder", ReplyAction="http://tempuri.org/IDataModel/DestroyDestinationOrderResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(Teraque.OrderTypeCode))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(Teraque.SideCode))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(Teraque.StateCode))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(Teraque.StatusCode))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(Teraque.TimeInForceCode))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void DestroyDestinationOrder(string configurationId, object[] destinationOrderKey);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/DestroyEntity", ReplyAction="http://tempuri.org/IDataModel/DestroyEntityResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void DestroyEntity(string configurationId, object[] entityKey);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/DestroyEntityTree", ReplyAction="http://tempuri.org/IDataModel/DestroyEntityTreeResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void DestroyEntityTree(string configurationId, object[] entityTreeKey);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/DestroyEquity", ReplyAction="http://tempuri.org/IDataModel/DestroyEquityResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void DestroyEquity(string configurationId, object[] equityKey);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/DestroyExchange", ReplyAction="http://tempuri.org/IDataModel/DestroyExchangeResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void DestroyExchange(string configurationId, object[] exchangeKey);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/DestroyExecution", ReplyAction="http://tempuri.org/IDataModel/DestroyExecutionResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(Teraque.StateCode))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void DestroyExecution(string configurationId, object[] executionKey);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/DestroyFolder", ReplyAction="http://tempuri.org/IDataModel/DestroyFolderResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void DestroyFolder(string configurationId, object[] folderKey);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/DestroyGroupAccount", ReplyAction="http://tempuri.org/IDataModel/DestroyGroupAccountResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void DestroyGroupAccount(string configurationId, object[] groupAccountKey);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/DestroyHoliday", ReplyAction="http://tempuri.org/IDataModel/DestroyHolidayResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(Teraque.HolidayTypeCode))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void DestroyHoliday(string configurationId, object[] holidayKey);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/DestroyHolidayType", ReplyAction="http://tempuri.org/IDataModel/DestroyHolidayTypeResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(Teraque.HolidayTypeCode))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void DestroyHolidayType(string configurationId, object[] holidayTypeKey);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/DestroyImage", ReplyAction="http://tempuri.org/IDataModel/DestroyImageResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void DestroyImage(string configurationId, object[] imageKey);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/DestroyIndustry", ReplyAction="http://tempuri.org/IDataModel/DestroyIndustryResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void DestroyIndustry(string configurationId, object[] industryKey);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/DestroyIndustryClassification", ReplyAction="http://tempuri.org/IDataModel/DestroyIndustryClassificationResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void DestroyIndustryClassification(string configurationId, object[] industryClassificationKey);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/DestroyIndustryLeaf", ReplyAction="http://tempuri.org/IDataModel/DestroyIndustryLeafResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void DestroyIndustryLeaf(string configurationId, object[] industryLeafKey);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/DestroyIndustryTree", ReplyAction="http://tempuri.org/IDataModel/DestroyIndustryTreeResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void DestroyIndustryTree(string configurationId, object[] industryTreeKey);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/DestroyInstitution", ReplyAction="http://tempuri.org/IDataModel/DestroyInstitutionResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void DestroyInstitution(string configurationId, object[] institutionKey);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/DestroyIssuer", ReplyAction="http://tempuri.org/IDataModel/DestroyIssuerResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void DestroyIssuer(string configurationId, object[] issuerKey);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/DestroyLotHandling", ReplyAction="http://tempuri.org/IDataModel/DestroyLotHandlingResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(Teraque.LotHandlingCode))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void DestroyLotHandling(string configurationId, object[] lotHandlingKey);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/DestroyMajorInstrumentType", ReplyAction="http://tempuri.org/IDataModel/DestroyMajorInstrumentTypeResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void DestroyMajorInstrumentType(string configurationId, object[] majorInstrumentTypeKey);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/DestroyMatch", ReplyAction="http://tempuri.org/IDataModel/DestroyMatchResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(Teraque.StatusCode))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void DestroyMatch(string configurationId, object[] matchKey);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/DestroyMinorInstrumentType", ReplyAction="http://tempuri.org/IDataModel/DestroyMinorInstrumentTypeResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void DestroyMinorInstrumentType(string configurationId, object[] minorInstrumentTypeKey);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/DestroyMssaBucket", ReplyAction="http://tempuri.org/IDataModel/DestroyMssaBucketResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void DestroyMssaBucket(string configurationId, object[] mssaBucketKey);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/DestroyNegotiation", ReplyAction="http://tempuri.org/IDataModel/DestroyNegotiationResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(Teraque.StatusCode))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void DestroyNegotiation(string configurationId, object[] negotiationKey);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/DestroyOrderType", ReplyAction="http://tempuri.org/IDataModel/DestroyOrderTypeResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(Teraque.OrderTypeCode))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void DestroyOrderType(string configurationId, object[] orderTypeKey);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/DestroyPartyType", ReplyAction="http://tempuri.org/IDataModel/DestroyPartyTypeResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(Teraque.PartyTypeCode))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void DestroyPartyType(string configurationId, object[] partyTypeKey);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/DestroyPosition", ReplyAction="http://tempuri.org/IDataModel/DestroyPositionResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(Teraque.PositionTypeCode))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void DestroyPosition(string configurationId, object[] positionKey);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/DestroyPositionSeries", ReplyAction="http://tempuri.org/IDataModel/DestroyPositionSeriesResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(Teraque.PositionTypeCode))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void DestroyPositionSeries(string configurationId, object[] positionSeriesKey);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/DestroyPositionType", ReplyAction="http://tempuri.org/IDataModel/DestroyPositionTypeResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(Teraque.PositionTypeCode))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void DestroyPositionType(string configurationId, object[] positionTypeKey);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/DestroyPrice", ReplyAction="http://tempuri.org/IDataModel/DestroyPriceResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void DestroyPrice(string configurationId, object[] priceKey);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/DestroyProperty", ReplyAction="http://tempuri.org/IDataModel/DestroyPropertyResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void DestroyProperty(string configurationId, object[] propertyKey);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/DestroyPropertyStore", ReplyAction="http://tempuri.org/IDataModel/DestroyPropertyStoreResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(byte[]))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void DestroyPropertyStore(string configurationId, object[] propertyStoreKey);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/DestroyProvince", ReplyAction="http://tempuri.org/IDataModel/DestroyProvinceResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void DestroyProvince(string configurationId, object[] provinceKey);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/DestroySecurity", ReplyAction="http://tempuri.org/IDataModel/DestroySecurityResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(Teraque.VolumeCategoryCode))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void DestroySecurity(string configurationId, object[] securityKey);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/DestroySecuritySeries", ReplyAction="http://tempuri.org/IDataModel/DestroySecuritySeriesResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(Teraque.SubordinateTypeCode))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void DestroySecuritySeries(string configurationId, object[] securitySeriesKey);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/DestroySettlementUnit", ReplyAction="http://tempuri.org/IDataModel/DestroySettlementUnitResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(Teraque.SettlementUnitCode))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void DestroySettlementUnit(string configurationId, object[] settlementUnitKey);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/DestroySide", ReplyAction="http://tempuri.org/IDataModel/DestroySideResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(Teraque.SideCode))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void DestroySide(string configurationId, object[] sideKey);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/DestroySingleAccount", ReplyAction="http://tempuri.org/IDataModel/DestroySingleAccountResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(Teraque.LotHandlingCode))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void DestroySingleAccount(string configurationId, object[] singleAccountKey);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/DestroySource", ReplyAction="http://tempuri.org/IDataModel/DestroySourceResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(Teraque.PartyTypeCode))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void DestroySource(string configurationId, object[] sourceKey);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/DestroySourceOrder", ReplyAction="http://tempuri.org/IDataModel/DestroySourceOrderResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(Teraque.OrderTypeCode))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(Teraque.SideCode))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(Teraque.StatusCode))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(Teraque.TimeInForceCode))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void DestroySourceOrder(string configurationId, object[] sourceOrderKey);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/DestroyState", ReplyAction="http://tempuri.org/IDataModel/DestroyStateResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(Teraque.StateCode))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void DestroyState(string configurationId, object[] stateKey);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/DestroyStatus", ReplyAction="http://tempuri.org/IDataModel/DestroyStatusResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(Teraque.StatusCode))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void DestroyStatus(string configurationId, object[] statusKey);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/DestroySubordinateType", ReplyAction="http://tempuri.org/IDataModel/DestroySubordinateTypeResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(Teraque.SubordinateTypeCode))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void DestroySubordinateType(string configurationId, object[] subordinateTypeKey);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/DestroyTaxLot", ReplyAction="http://tempuri.org/IDataModel/DestroyTaxLotResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(Teraque.PositionTypeCode))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void DestroyTaxLot(string configurationId, object[] taxLotKey);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/DestroyTaxLotSeries", ReplyAction="http://tempuri.org/IDataModel/DestroyTaxLotSeriesResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(Teraque.PositionTypeCode))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void DestroyTaxLotSeries(string configurationId, object[] taxLotSeriesKey);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/DestroyTimeInForce", ReplyAction="http://tempuri.org/IDataModel/DestroyTimeInForceResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(Teraque.TimeInForceCode))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void DestroyTimeInForce(string configurationId, object[] timeInForceKey);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/DestroyTimeUnit", ReplyAction="http://tempuri.org/IDataModel/DestroyTimeUnitResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(Teraque.TimeUnitCode))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void DestroyTimeUnit(string configurationId, object[] timeUnitKey);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/DestroyTrader", ReplyAction="http://tempuri.org/IDataModel/DestroyTraderResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(Teraque.CrossingCode))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void DestroyTrader(string configurationId, object[] traderKey);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/DestroyTraderVolumeSetting", ReplyAction="http://tempuri.org/IDataModel/DestroyTraderVolumeSettingResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(Teraque.VolumeCategoryCode))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void DestroyTraderVolumeSetting(string configurationId, object[] traderVolumeSettingKey);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/DestroyType", ReplyAction="http://tempuri.org/IDataModel/DestroyTypeResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void DestroyType(string configurationId, object[] typeKey);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/DestroyUser", ReplyAction="http://tempuri.org/IDataModel/DestroyUserResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(byte[]))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void DestroyUser(string configurationId, object[] userKey);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/DestroyVolumeCategory", ReplyAction="http://tempuri.org/IDataModel/DestroyVolumeCategoryResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(Teraque.VolumeCategoryCode))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void DestroyVolumeCategory(string configurationId, object[] volumeCategoryKey);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/DestroyWeekend", ReplyAction="http://tempuri.org/IDataModel/DestroyWeekendResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(Teraque.WeekendCode))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void DestroyWeekend(string configurationId, object[] weekendKey);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/DestroyWorkingOrder", ReplyAction="http://tempuri.org/IDataModel/DestroyWorkingOrderResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(Teraque.CrossingCode))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(Teraque.OrderTypeCode))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(Teraque.SideCode))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(Teraque.StatusCode))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(Teraque.TimeInForceCode))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void DestroyWorkingOrder(string configurationId, object[] workingOrderKey);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/Read", ReplyAction="http://tempuri.org/IDataModel/ReadResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.NotAllowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Guid))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(object[]))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	object[] Read(global::System.Guid dataSetId, long sequence);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/StoreAccount", ReplyAction="http://tempuri.org/IDataModel/StoreAccountResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void StoreAccount(string configurationId, object[] currencyKey, object[] entityKey, object mnemonic);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/StoreAccountSeries", ReplyAction="http://tempuri.org/IDataModel/StoreAccountSeriesResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void StoreAccountSeries(
				object[] accountKey, 
				string configurationId, 
				global::System.DateTime date, 
				object monthToDayLinkedReturn, 
				object monthToDayProfitAndLoss, 
				object quarterToDayLinkedReturn, 
				object quarterToDayProfitAndLoss, 
				object totalExposureBase, 
				object totalExposureLocal, 
				object totalMarketValueBase, 
				object totalMarketValueLocal, 
				object trailingOneDayLinkedReturn, 
				object trailingOneDayProfitAndLoss, 
				object trailingOneMonthLinkedReturn, 
				object trailingOneMonthProfitAndLoss, 
				object trailingOneYearLinkedReturn, 
				object trailingOneYearProfitAndLoss, 
				object trailingSixMonthLinkedReturn, 
				object trailingSixMonthProfitAndLoss, 
				object trailingThreeMonthLinkedReturn, 
				object trailingThreeMonthProfitAndLoss, 
				object yearToDayLinkedReturn, 
				object yearToDayProfitAndLoss);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/StoreAllocation", ReplyAction="http://tempuri.org/IDataModel/StoreAllocationResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(Teraque.PositionTypeCode))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(Teraque.SideCode))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void StoreAllocation(
				object[] accountKey, 
				object accruedInterest, 
				global::System.Guid allocationId, 
				object commission, 
				string configurationId, 
				global::System.DateTime createdTime, 
				object externalId0, 
				global::System.DateTime modifiedTime, 
				global::Teraque.PositionTypeCode positionTypeCode, 
				object price, 
				object quantity, 
				object[] securityKeyBySecurityId, 
				object[] securityKeyBySettlementId, 
				global::System.DateTime settlementDate, 
				object[] sideKey, 
				global::System.DateTime tradeDate, 
				object userFee0, 
				object userFee1, 
				object userFee2, 
				object userFee3, 
				object[] userKeyByCreatedUserId, 
				object[] userKeyByModifiedUserId, 
				object[] workingOrderKey);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/StoreBlotter", ReplyAction="http://tempuri.org/IDataModel/StoreBlotterResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(Teraque.PartyTypeCode))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void StoreBlotter(string configurationId, object[] entityKey, object[] partyTypeKey);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/StoreBlotterDestinationMap", ReplyAction="http://tempuri.org/IDataModel/StoreBlotterDestinationMapResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void StoreBlotterDestinationMap(global::System.Guid blotterDestinationMapId, object[] blotterKey, string configurationId, object[] destinationKey, object externalId0);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/StoreBranch", ReplyAction="http://tempuri.org/IDataModel/StoreBranchResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void StoreBranch(object[] blotterKey, string configurationId, object shortName);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/StoreBroker", ReplyAction="http://tempuri.org/IDataModel/StoreBrokerResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void StoreBroker(string configurationId, object connected, object phone, object[] sourceKey, object symbol);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/StoreBrokerAccount", ReplyAction="http://tempuri.org/IDataModel/StoreBrokerAccountResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void StoreBrokerAccount(global::System.Guid brokerAccountId, object[] brokerKey, string configurationId, object description, object externalId0, object externalId1, object externalId2, object externalId3, object mnemonic, object[] traderKey);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/StoreClearingBroker", ReplyAction="http://tempuri.org/IDataModel/StoreClearingBrokerResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void StoreClearingBroker(object[] brokerKey, string configurationId);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/StoreCommissionSchedule", ReplyAction="http://tempuri.org/IDataModel/StoreCommissionScheduleResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void StoreCommissionSchedule(global::System.Guid commissionScheduleId, string configurationId, object externalId0, object name);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/StoreCommissionTranche", ReplyAction="http://tempuri.org/IDataModel/StoreCommissionTrancheResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(Teraque.CommissionTypeCode))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(Teraque.CommissionUnitCode))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void StoreCommissionTranche(object[] commissionScheduleKey, global::System.Guid commissionTrancheId, object[] commissionTypeKey, object[] commissionUnitKey, string configurationId, object endRange, object externalId0, object startRange, object value);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/StoreCommissionType", ReplyAction="http://tempuri.org/IDataModel/StoreCommissionTypeResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(Teraque.CommissionTypeCode))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void StoreCommissionType(global::Teraque.CommissionTypeCode commissionTypeCode, string configurationId, object description, object externalId0, object name);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/StoreCommissionUnit", ReplyAction="http://tempuri.org/IDataModel/StoreCommissionUnitResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(Teraque.CommissionUnitCode))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void StoreCommissionUnit(global::Teraque.CommissionUnitCode commissionUnitCode, string configurationId, object description, object externalId0, object name);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/StoreComplianceOfficer", ReplyAction="http://tempuri.org/IDataModel/StoreComplianceOfficerResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void StoreComplianceOfficer(string configurationId, object[] userKey);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/StoreCondition", ReplyAction="http://tempuri.org/IDataModel/StoreConditionResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(Teraque.ConditionCode))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void StoreCondition(global::Teraque.ConditionCode conditionCode, string configurationId, object description, object externalId0, object externalId1, object externalId2, object externalId3, object mnemonic);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/StoreConfiguration", ReplyAction="http://tempuri.org/IDataModel/StoreConfigurationResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void StoreConfiguration(object configurationId, object indexName, object relationName);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/StoreCountry", ReplyAction="http://tempuri.org/IDataModel/StoreCountryResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void StoreCountry(object abbreviation, string configurationId, global::System.Guid countryId, object externalId0, object externalId1, object name);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/StoreCreditRating", ReplyAction="http://tempuri.org/IDataModel/StoreCreditRatingResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void StoreCreditRating(string configurationId, global::System.Guid creditRatingId, object[] creditRatingServiceKey, object externalId0, object externalId1, object scale, object value);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/StoreCreditRatingService", ReplyAction="http://tempuri.org/IDataModel/StoreCreditRatingServiceResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void StoreCreditRatingService(string configurationId, global::System.Guid creditRatingServiceId, object externalId0, object externalId1, object name);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/StoreCrossing", ReplyAction="http://tempuri.org/IDataModel/StoreCrossingResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(Teraque.CrossingCode))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void StoreCrossing(string configurationId, global::Teraque.CrossingCode crossingCode, object description, object externalId0, object externalId1, object name);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/StoreCurrency", ReplyAction="http://tempuri.org/IDataModel/StoreCurrencyResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void StoreCurrency(string configurationId, object[] securityKey);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/StoreDebt", ReplyAction="http://tempuri.org/IDataModel/StoreDebtResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(Teraque.WeekendCode))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void StoreDebt(string configurationId, object exdividendDays, object faceOutstanding, global::System.DateTime firstCoupon, object frequency, object issuePrice, global::System.DateTime maturityDate, object redemptionValue, object[] securityKeyByDebtId, object[] securityKeyBySettlementId, object[] weekendKey);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/StoreDestination", ReplyAction="http://tempuri.org/IDataModel/StoreDestinationResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void StoreDestination(
				object cancelCustomFixTag, 
				object clearingFirmId, 
				string configurationId, 
				global::System.Guid destinationId, 
				object externalId0, 
				object externalId1, 
				object fixAccount, 
				object fixAccountSuffixLength, 
				object fixExchangeMnemonic, 
				object fixExecBroker, 
				object fixExecDestinationListed, 
				object fixExecDestinationUnlisted, 
				object fixHandleInstListed, 
				object fixHandleInstUnlisted, 
				object fixIoiRoutingId, 
				object fixIoiRoutingType, 
				object fixNetCommissionType, 
				object fixNoteTagId, 
				object fixOnBehalfOf, 
				object fixOnBehalfOfSub, 
				object fixOrderIdFormat, 
				object fixPassiveTag, 
				object fixProactiveTag, 
				object fixSourceCompany, 
				object fixSourceId, 
				object fixSourceTrader, 
				object fixTargetCompany, 
				object fixTargetLocationId, 
				object fixTargetTrader, 
				object fixVersion, 
				object isBroker, 
				object isCancelAllowed, 
				object isCancelReplaceAllowed, 
				object isEcn, 
				object isExchange, 
				object isInternal, 
				object isIoiAllowed, 
				object isLimitPricingAllowed, 
				object isMarketOnClosePricingAllowed, 
				object isMarketPricingAllowed, 
				object isSystemUp, 
				object isTagEligible, 
				object isTradeAwayAllowed, 
				object isUnsolicitedTradeAllowed, 
				object lotSize, 
				object maximumQuantityListedLimit, 
				object maximumQuantityListedMarket, 
				object maximumQuantityUnlistedLimit, 
				object maximumQuantityUnlistedMarket, 
				global::System.DateTime modifiedTime, 
				object name, 
				object newOrderCustomFixTag, 
				object oatsDepartmentId, 
				object oatsDestinationCode, 
				object oatsReceivingMpi, 
				object oatsRouteMethod, 
				object oatsRoutingMpi, 
				object oatsSentMpi, 
				object oatsTerminalId, 
				object onCloseCancelTime, 
				object onCloseOrderTime, 
				object perShareUsageFee, 
				object postMarketLogic, 
				object primaryBackupDestinationId, 
				object secondaryBackupDestinationId, 
				object selectnetFlag, 
				object shortName, 
				object sourceId0, 
				object sourceId1, 
				object sourceId2, 
				object sourceId3, 
				object sourceId4, 
				object sourceId5, 
				object sourceId6, 
				object sourceId7, 
				object uniqueShortName);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/StoreDestinationExchangeMap", ReplyAction="http://tempuri.org/IDataModel/StoreDestinationExchangeMapResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void StoreDestinationExchangeMap(string configurationId, global::System.Guid destinationExchangeMapId, object[] destinationKey, object[] exchangeKey, object externalId0);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/StoreDestinationOrder", ReplyAction="http://tempuri.org/IDataModel/StoreDestinationOrderResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(Teraque.OrderTypeCode))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(Teraque.SideCode))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(Teraque.StateCode))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(Teraque.StatusCode))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(Teraque.TimeInForceCode))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void StoreDestinationOrder(
				object canceledQuantity, 
				object canceledTime, 
				string configurationId, 
				global::System.DateTime createdTime, 
				object[] destinationKey, 
				global::System.Guid destinationOrderId, 
				object externalId0, 
				object isCanceledByUser, 
				object isHidden, 
				object limitPrice, 
				global::System.DateTime modifiedTime, 
				object orderedQuantity, 
				object[] orderTypeKey, 
				object[] securityKeyBySecurityId, 
				object[] securityKeyBySettlementId, 
				global::System.DateTime settlementDate, 
				object[] sideKey, 
				object[] stateKey, 
				object[] statusKey, 
				object stopPrice, 
				object[] timeInForceKey, 
				global::System.DateTime tradeDate, 
				object[] traderKey, 
				object[] userKeyByCreatedUserId, 
				object[] userKeyByModifiedUserId, 
				object[] workingOrderKey);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/StoreEntity", ReplyAction="http://tempuri.org/IDataModel/StoreEntityResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void StoreEntity(
				string configurationId, 
				global::System.DateTime createdTime, 
				object description, 
				global::System.Guid entityId, 
				object externalId0, 
				object externalId1, 
				object externalId2, 
				object externalId3, 
				object externalId4, 
				object externalId5, 
				object externalId6, 
				object externalId7, 
				object[] imageKey, 
				object isContainer, 
				object isHidden, 
				object isReadOnly, 
				global::System.DateTime modifiedTime, 
				object name, 
				object[] typeKey);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/StoreEntityTree", ReplyAction="http://tempuri.org/IDataModel/StoreEntityTreeResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void StoreEntityTree(string configurationId, object[] entityKeyByChildId, object[] entityKeyByParentId, global::System.Guid entityTreeId, object externalId0);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/StoreEquity", ReplyAction="http://tempuri.org/IDataModel/StoreEquityResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void StoreEquity(string configurationId, object[] exchangeKey, object issuerId, object[] securityKeyByEquityId, object[] securityKeyBySettlementId, object sharesOutstanding);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/StoreExchange", ReplyAction="http://tempuri.org/IDataModel/StoreExchangeResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void StoreExchange(string configurationId, object[] countryKey, global::System.Guid exchangeId, object externalId0, object externalId1, object externalId2, object externalId3, object isListed, object mnemonic, object name);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/StoreExecution", ReplyAction="http://tempuri.org/IDataModel/StoreExecutionResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(Teraque.StateCode))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void StoreExecution(
				object accruedInterest, 
				object[] brokerAccountKey, 
				object[] brokerKey, 
				object commission, 
				string configurationId, 
				global::System.DateTime createdTime, 
				object[] destinationOrderKey, 
				global::System.Guid executionId, 
				object executionPrice, 
				object executionQuantity, 
				object externalId0, 
				object isHidden, 
				object modifiedTime, 
				object originalDestinationOrderId, 
				object originalPrice, 
				object originalQuantity, 
				object sourceExecutionId, 
				object[] stateKeyByDestinationStateCode, 
				object[] stateKeyBySourceStateCode, 
				object userFee0, 
				object userFee1, 
				object userFee2, 
				object userFee3, 
				object[] userKeyByCreatedUserId, 
				object[] userKeyByModifiedUserId);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/StoreFolder", ReplyAction="http://tempuri.org/IDataModel/StoreFolderResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void StoreFolder(string configurationId, object[] entityKey);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/StoreGroupAccount", ReplyAction="http://tempuri.org/IDataModel/StoreGroupAccountResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void StoreGroupAccount(object[] accountKey, string configurationId);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/StoreHoliday", ReplyAction="http://tempuri.org/IDataModel/StoreHolidayResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(Teraque.HolidayTypeCode))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void StoreHoliday(string configurationId, object[] countryKey, global::System.DateTime date, object externalId0, object externalId1, global::System.Guid holidayId, object[] holidayTypeKey);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/StoreHolidayType", ReplyAction="http://tempuri.org/IDataModel/StoreHolidayTypeResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(Teraque.HolidayTypeCode))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void StoreHolidayType(string configurationId, object description, object externalId0, object externalId1, object externalId2, object externalId3, global::Teraque.HolidayTypeCode holidayTypeCode);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/StoreImage", ReplyAction="http://tempuri.org/IDataModel/StoreImageResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void StoreImage(string configurationId, object externalId0, object image, global::System.Guid imageId);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/StoreIndustry", ReplyAction="http://tempuri.org/IDataModel/StoreIndustryResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void StoreIndustry(string configurationId, object externalId0, object externalId1, object[] industryClassificationKey, global::System.Guid industryId, object mnemonic, object name);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/StoreIndustryClassification", ReplyAction="http://tempuri.org/IDataModel/StoreIndustryClassificationResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void StoreIndustryClassification(string configurationId, object externalId0, object externalId1, global::System.Guid industryClassificationId, object mnemonic, object name);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/StoreIndustryLeaf", ReplyAction="http://tempuri.org/IDataModel/StoreIndustryLeafResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void StoreIndustryLeaf(string configurationId, object externalId0, object externalId1, object[] industryKey, global::System.Guid industryLeafId, object[] securityKey);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/StoreIndustryTree", ReplyAction="http://tempuri.org/IDataModel/StoreIndustryTreeResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void StoreIndustryTree(string configurationId, object externalId0, object externalId1, object[] industryKeyByChildId, object[] industryKeyByParentId, global::System.Guid industryTreeId);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/StoreInstitution", ReplyAction="http://tempuri.org/IDataModel/StoreInstitutionResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void StoreInstitution(string configurationId, object[] sourceKey);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/StoreIssuer", ReplyAction="http://tempuri.org/IDataModel/StoreIssuerResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void StoreIssuer(string configurationId, object[] entityKey);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/StoreLotHandling", ReplyAction="http://tempuri.org/IDataModel/StoreLotHandlingResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(Teraque.LotHandlingCode))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void StoreLotHandling(string configurationId, object description, object externalId0, object externalId1, object externalId2, object externalId3, global::Teraque.LotHandlingCode lotHandlingCode, object mnemonic);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/StoreMajorInstrumentType", ReplyAction="http://tempuri.org/IDataModel/StoreMajorInstrumentTypeResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void StoreMajorInstrumentType(string configurationId, object externalId0, object externalId1, global::System.Guid majorInstrumentTypeId, object mnemonic, object name);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/StoreMatch", ReplyAction="http://tempuri.org/IDataModel/StoreMatchResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(Teraque.StatusCode))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void StoreMatch(object[] blotterKey, string configurationId, global::System.Guid contraMatchId, global::System.Guid contraOrderId, object heatIndex, object heatIndexDetails, global::System.DateTime matchedTime, global::System.Guid matchId, object[] statusKey, object[] workingOrderKey);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/StoreMinorInstrumentType", ReplyAction="http://tempuri.org/IDataModel/StoreMinorInstrumentTypeResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void StoreMinorInstrumentType(string configurationId, object externalId0, object externalId1, global::System.Guid minorInstrumentTypeId, object mnemonic, object name);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/StoreMssaBucket", ReplyAction="http://tempuri.org/IDataModel/StoreMssaBucketResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void StoreMssaBucket(string configurationId, object externalId0, object externalId1, global::System.Guid mssaBucketId, object name);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/StoreNegotiation", ReplyAction="http://tempuri.org/IDataModel/StoreNegotiationResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(Teraque.StatusCode))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void StoreNegotiation(object[] blotterKey, string configurationId, object[] executionKey, object isRead, object[] matchKey, global::System.Guid negotiationId, object quantity, object[] statusKey);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/StoreOrderType", ReplyAction="http://tempuri.org/IDataModel/StoreOrderTypeResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(Teraque.OrderTypeCode))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void StoreOrderType(string configurationId, object description, object externalId0, object externalId1, object externalId2, object externalId3, object mnemonic, global::Teraque.OrderTypeCode orderTypeCode);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/StorePartyType", ReplyAction="http://tempuri.org/IDataModel/StorePartyTypeResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(Teraque.PartyTypeCode))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void StorePartyType(string configurationId, object description, object externalId0, object externalId1, object mnemonic, global::Teraque.PartyTypeCode partyTypeCode);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/StorePosition", ReplyAction="http://tempuri.org/IDataModel/StorePositionResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(Teraque.PositionTypeCode))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void StorePosition(object[] accountKey, string configurationId, object externalId0, object externalId1, object externalId2, object externalId3, global::System.Guid positionId, object[] positionTypeKey, object[] securityKey);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/StorePositionSeries", ReplyAction="http://tempuri.org/IDataModel/StorePositionSeriesResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(Teraque.PositionTypeCode))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void StorePositionSeries(object[] accountKey, object baseCost, object basePrice, string configurationId, global::System.DateTime date, object externalId0, object externalId1, object localCost, object localPrice, object[] positionKey, global::System.Guid positionSeriesId, object[] positionTypeKey, object[] securityKey, object[] securitySeriesKey);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/StorePositionType", ReplyAction="http://tempuri.org/IDataModel/StorePositionTypeResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(Teraque.PositionTypeCode))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void StorePositionType(string configurationId, object externalId0, object externalId1, object externalId2, object externalId3, object mnemonic, global::Teraque.PositionTypeCode positionTypeCode, object sign);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/StorePrice", ReplyAction="http://tempuri.org/IDataModel/StorePriceResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void StorePrice(
				object askPrice, 
				object askSize, 
				object bidPrice, 
				object bidSize, 
				object closePrice, 
				string configurationId, 
				object highPrice, 
				object lastPrice, 
				object lastSize, 
				object lowPrice, 
				object openPrice, 
				object priceChange, 
				object[] securityKeyByCurrencyId, 
				object[] securityKeyBySecurityId, 
				object volume, 
				object volumeWeightedAveragePrice);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/StoreProperty", ReplyAction="http://tempuri.org/IDataModel/StorePropertyResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void StoreProperty(string configurationId, object externalId0, object name, global::System.Guid propertyId);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/StorePropertyStore", ReplyAction="http://tempuri.org/IDataModel/StorePropertyStoreResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(byte[]))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void StorePropertyStore(string configurationId, object[] entityKey, object externalId0, object[] propertyKey, global::System.Guid propertyStoreId, object value);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/StoreProvince", ReplyAction="http://tempuri.org/IDataModel/StoreProvinceResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void StoreProvince(object abbreviation, string configurationId, object[] countryKey, object externalId0, object externalId1, object name, global::System.Guid provinceId);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/StoreSecurity", ReplyAction="http://tempuri.org/IDataModel/StoreSecurityResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(Teraque.VolumeCategoryCode))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void StoreSecurity(object averageDailyVolume, string configurationId, object[] countryKey, object[] entityKey, object isDerivative, object[] issuerKey, object logo, object[] majorInstrumentTypeKey, object marketCapitalization, object minimumQuantity, object[] minorInstrumentTypeKey, object priceFactor, object quantityFactor, object symbol, object[] volumeCategoryKey);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/StoreSecuritySeries", ReplyAction="http://tempuri.org/IDataModel/StoreSecuritySeriesResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(Teraque.SubordinateTypeCode))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void StoreSecuritySeries(
				object betaAdjustedKrd10Year, 
				object betaAdjustedKrd20Year, 
				object betaAdjustedKrd2Year, 
				object betaAdjustedKrd30Year, 
				object betaAdjustedKrd5Year, 
				object betaAdjustedKrd6Month, 
				string configurationId, 
				object coupon, 
				object[] creditRatingKeyByCreditRatingId0, 
				object[] creditRatingKeyByCreditRatingId1, 
				object[] creditRatingKeyByCreditRatingId2, 
				object[] creditRatingKeyByCreditRatingId3, 
				object[] creditRatingKeyByCreditRatingId4, 
				object[] creditRatingKeyByCreditRatingId5, 
				object currentYield, 
				global::System.DateTime date, 
				object effectiveConvexity, 
				object effectiveDuration, 
				object externalId0, 
				object externalId1, 
				object modifiedDurationToWorst, 
				object modifiedOptionAdjustedDuration, 
				object[] mssaBucketKey, 
				object optionAdjustedDuration, 
				object optionAdjustedSpread, 
				object optionAdjustedSpreadDuration, 
				object optionAdjustedYieldToWorst, 
				object[] securityKey, 
				global::System.Guid securitySeriesId, 
				object[] subordinateTypeKey, 
				object yearsToAverageLife, 
				object yearsToMaturity, 
				object yieldToEffectiveMaturity, 
				object yieldToMaturity, 
				object yieldToWorst);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/StoreSettlementUnit", ReplyAction="http://tempuri.org/IDataModel/StoreSettlementUnitResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(Teraque.SettlementUnitCode))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void StoreSettlementUnit(string configurationId, object description, object externalId0, object name, global::Teraque.SettlementUnitCode settlementUnitCode);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/StoreSide", ReplyAction="http://tempuri.org/IDataModel/StoreSideResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(Teraque.SideCode))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void StoreSide(object cashSign, string configurationId, object description, object externalId0, object externalId1, object externalId2, object externalId3, object image, object mnemonic, object quantitySign, global::Teraque.SideCode sideCode, object sortOrder);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/StoreSingleAccount", ReplyAction="http://tempuri.org/IDataModel/StoreSingleAccountResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(Teraque.LotHandlingCode))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void StoreSingleAccount(object[] accountKey, object address0, object address1, object city, string configurationId, object[] countryKey, object[] lotHandlingKey, object postalCode, object[] provinceKey);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/StoreSource", ReplyAction="http://tempuri.org/IDataModel/StoreSourceResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(Teraque.PartyTypeCode))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void StoreSource(object advertisementSchemaId, object[] blotterKey, object buyMarketValueThreshold, object buyQuantityThreshold, string configurationId, global::Teraque.PartyTypeCode partyTypeCode, object sellMarketValueThreshold, object sellQuantityThreshold, object shortName);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/StoreSourceOrder", ReplyAction="http://tempuri.org/IDataModel/StoreSourceOrderResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(Teraque.OrderTypeCode))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(Teraque.SideCode))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(Teraque.StatusCode))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(Teraque.TimeInForceCode))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void StoreSourceOrder(
				string configurationId, 
				global::System.DateTime createdTime, 
				object[] destinationKey, 
				object externalId0, 
				object isAdvertised, 
				object isAutoExecute, 
				object isCanceled, 
				object isHeld, 
				object isSteppedIn, 
				object isSubmitted, 
				object limitPrice, 
				object maximumVolatility, 
				global::System.DateTime modifiedTime, 
				object newsFreeTime, 
				object orderedQuantity, 
				object[] orderTypeKey, 
				object receivedTime, 
				object[] securityKeyBySecurityId, 
				object[] securityKeyBySettlementId, 
				object settlementDate, 
				object[] sideKey, 
				global::System.Guid sourceOrderId, 
				object startTime, 
				object[] statusKey, 
				object stopPrice, 
				object stopTime, 
				object submittedQuantity, 
				object submittedTime, 
				object targetPrice, 
				object[] timeInForceKey, 
				object tradeDate, 
				object[] userKeyByCreatedUserId, 
				object[] userKeyByModifiedUserId, 
				object[] workingOrderKey);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/StoreState", ReplyAction="http://tempuri.org/IDataModel/StoreStateResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(Teraque.StateCode))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void StoreState(string configurationId, object description, object externalId0, object externalId1, object externalId2, object externalId3, object mnemonic, global::Teraque.StateCode stateCode);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/StoreStatus", ReplyAction="http://tempuri.org/IDataModel/StoreStatusResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(Teraque.StatusCode))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void StoreStatus(string configurationId, object description, object externalId0, object externalId1, object externalId2, object externalId3, object image, object mnemonic, object sortOrder, global::Teraque.StatusCode statusCode);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/StoreSubordinateType", ReplyAction="http://tempuri.org/IDataModel/StoreSubordinateTypeResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(Teraque.SubordinateTypeCode))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void StoreSubordinateType(string configurationId, object description, object externalId0, object externalId1, global::Teraque.SubordinateTypeCode subordinateTypeCode);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/StoreTaxLot", ReplyAction="http://tempuri.org/IDataModel/StoreTaxLotResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(Teraque.PositionTypeCode))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void StoreTaxLot(object[] accountKey, object baseCost, string configurationId, object externalId0, object externalId1, object localCost, object[] positionKey, object[] positionTypeKey, object[] securityKey, object settlementDate, global::System.Guid taxLotId, object tradeDate);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/StoreTaxLotSeries", ReplyAction="http://tempuri.org/IDataModel/StoreTaxLotSeriesResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(Teraque.PositionTypeCode))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void StoreTaxLotSeries(
				object[] accountKey, 
				string configurationId, 
				global::System.DateTime date, 
				object dealSpread, 
				object duration, 
				object exposureWeight, 
				object externalId0, 
				object externalId1, 
				object lotExposureBase, 
				object lotExposureLocal, 
				object lotMarketValueBase, 
				object lotMarketValueLocal, 
				object lotQuantity, 
				object marketWeight, 
				object monthToDayLinkedReturn, 
				object monthToDayProfitAndLoss, 
				object netAssetValue, 
				object originalBuyTransaction, 
				object[] positionSeriesKey, 
				object[] positionTypeKey, 
				object qualityLabel, 
				object quantity, 
				object quarterToDayLinkedReturn, 
				object quarterToDayProfitAndLoss, 
				object ratingScore, 
				object sector, 
				object[] securityKey, 
				object[] securitySeriesKey, 
				object strategy, 
				object strategyDescription, 
				object sumExposure, 
				object sumMarketValue, 
				object[] taxLotKey, 
				global::System.Guid taxLotSeriesId, 
				object trade, 
				object weight, 
				object yearToDayLinkedReturn, 
				object yearToDayProfitAndLoss);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/StoreTimeInForce", ReplyAction="http://tempuri.org/IDataModel/StoreTimeInForceResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(Teraque.TimeInForceCode))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void StoreTimeInForce(string configurationId, object description, object externalId0, object externalId1, object externalId2, object externalId3, object mnemonic, object sortOrder, global::Teraque.TimeInForceCode timeInForceCode);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/StoreTimeUnit", ReplyAction="http://tempuri.org/IDataModel/StoreTimeUnitResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(Teraque.TimeUnitCode))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void StoreTimeUnit(string configurationId, object externalId0, object inDays, object name, global::Teraque.TimeUnitCode timeUnitCode);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/StoreTrader", ReplyAction="http://tempuri.org/IDataModel/StoreTraderResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(Teraque.CrossingCode))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void StoreTrader(
				object address1, 
				object address2, 
				object address3, 
				object[] blotterKey, 
				object commissionMaximum, 
				object commissionMinimum, 
				object commissionRate, 
				object commissionRateTypeCode, 
				string configurationId, 
				global::Teraque.CrossingCode crossingCode, 
				object defaultAccountId, 
				object emailAddress, 
				object fixAccountId, 
				object isAgencyMatch, 
				object isBrokerMatch, 
				object isCommissionChangeAllowed, 
				object isEditExecutionsAllowed, 
				object isHedgeMatch, 
				object isHeld, 
				object isInstitutionMatch, 
				object lastDeletedOrder, 
				object lastFilledOrder, 
				object lastFilledSourceOrder, 
				object lastTrade, 
				object lotSizeDefault, 
				object marketSleep, 
				object maximumVolatilityDefault, 
				object newsFreeTimeDefault, 
				object oatsAccountType, 
				object oatsOrigDeptId, 
				object orderMaximumLimitDelta, 
				object orderMaximumMarketValue, 
				object orderMaximumQuantity, 
				object orderWarningMarketValue, 
				object orderWarningQuantity, 
				object phone, 
				object reviewWindow, 
				object scraperConfigurationString, 
				object startTimeDefault, 
				object stopTimeDefault, 
				object tagId, 
				object[] userKey);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/StoreTraderVolumeSetting", ReplyAction="http://tempuri.org/IDataModel/StoreTraderVolumeSettingResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(Teraque.VolumeCategoryCode))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void StoreTraderVolumeSetting(object autoExecuteQuantity, string configurationId, object externalId0, object thresholdQuantity, object[] traderKey, global::System.Guid traderVolumeSettingId, object[] volumeCategoryKey);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/StoreType", ReplyAction="http://tempuri.org/IDataModel/StoreTypeResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void StoreType(string configurationId, object description, object externalId0, object[] imageKey, object type, global::System.Guid typeId);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/StoreUser", ReplyAction="http://tempuri.org/IDataModel/StoreUserResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(byte[]))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void StoreUser(string configurationId, object distinguishedName, object[] entityKey, object isRemoved, object preferences);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/StoreVolumeCategory", ReplyAction="http://tempuri.org/IDataModel/StoreVolumeCategoryResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(Teraque.VolumeCategoryCode))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void StoreVolumeCategory(string configurationId, object description, object externalId0, object highVolumeRange, object lowVolumeRange, object mnemonic, global::Teraque.VolumeCategoryCode volumeCategoryCode);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/StoreWeekend", ReplyAction="http://tempuri.org/IDataModel/StoreWeekendResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(Teraque.WeekendCode))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void StoreWeekend(string configurationId, object externalId0, object externalId1, object userCode0, object userCode1, global::Teraque.WeekendCode weekendCode);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/StoreWorkingOrder", ReplyAction="http://tempuri.org/IDataModel/StoreWorkingOrderResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(Teraque.CrossingCode))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(Teraque.OrderTypeCode))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(Teraque.SideCode))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(Teraque.StatusCode))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(Teraque.TimeInForceCode))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void StoreWorkingOrder(
				object automaticQuantity, 
				object[] blotterKey, 
				string configurationId, 
				global::System.DateTime createdTime, 
				object[] crossingKey, 
				object[] destinationKey, 
				object externalId0, 
				object isAutomatic, 
				object isAwake, 
				object isBrokerMatch, 
				object isHedgeMatch, 
				object isInstitutionMatch, 
				object limitPrice, 
				global::System.DateTime modifiedTime, 
				object[] orderTypeKey, 
				object[] securityKeyBySecurityId, 
				object[] securityKeyBySettlementId, 
				global::System.DateTime settlementDate, 
				object[] sideKey, 
				object startTime, 
				object[] statusKey, 
				object stopPrice, 
				object stopTime, 
				object submittedQuantity, 
				object submittedTime, 
				object[] timeInForceKey, 
				global::System.DateTime tradeDate, 
				object uploadedTime, 
				object[] userKeyByCreatedUserId, 
				object[] userKeyByModifiedUserId, 
				global::System.Guid workingOrderId);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/UpdateAccount", ReplyAction="http://tempuri.org/IDataModel/UpdateAccountResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void UpdateAccount(object[] accountKey, string configurationId, object[] currencyKey, object[] entityKey, object mnemonic);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/UpdateAccountSeries", ReplyAction="http://tempuri.org/IDataModel/UpdateAccountSeriesResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void UpdateAccountSeries(
				object[] accountKey, 
				object[] accountSeriesKey, 
				string configurationId, 
				object date, 
				object monthToDayLinkedReturn, 
				object monthToDayProfitAndLoss, 
				object quarterToDayLinkedReturn, 
				object quarterToDayProfitAndLoss, 
				object totalExposureBase, 
				object totalExposureLocal, 
				object totalMarketValueBase, 
				object totalMarketValueLocal, 
				object trailingOneDayLinkedReturn, 
				object trailingOneDayProfitAndLoss, 
				object trailingOneMonthLinkedReturn, 
				object trailingOneMonthProfitAndLoss, 
				object trailingOneYearLinkedReturn, 
				object trailingOneYearProfitAndLoss, 
				object trailingSixMonthLinkedReturn, 
				object trailingSixMonthProfitAndLoss, 
				object trailingThreeMonthLinkedReturn, 
				object trailingThreeMonthProfitAndLoss, 
				object yearToDayLinkedReturn, 
				object yearToDayProfitAndLoss);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/UpdateAllocation", ReplyAction="http://tempuri.org/IDataModel/UpdateAllocationResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(Teraque.PositionTypeCode))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(Teraque.SideCode))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void UpdateAllocation(
				object[] accountKey, 
				object accruedInterest, 
				object allocationId, 
				object[] allocationKey, 
				object commission, 
				string configurationId, 
				object createdTime, 
				object externalId0, 
				object modifiedTime, 
				object positionTypeCode, 
				object price, 
				object quantity, 
				object[] securityKeyBySecurityId, 
				object[] securityKeyBySettlementId, 
				object settlementDate, 
				object[] sideKey, 
				object tradeDate, 
				object userFee0, 
				object userFee1, 
				object userFee2, 
				object userFee3, 
				object[] userKeyByCreatedUserId, 
				object[] userKeyByModifiedUserId, 
				object[] workingOrderKey);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/UpdateBlotter", ReplyAction="http://tempuri.org/IDataModel/UpdateBlotterResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(Teraque.PartyTypeCode))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void UpdateBlotter(object[] blotterKey, string configurationId, object[] entityKey, object[] partyTypeKey);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/UpdateBlotterDestinationMap", ReplyAction="http://tempuri.org/IDataModel/UpdateBlotterDestinationMapResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void UpdateBlotterDestinationMap(object blotterDestinationMapId, object[] blotterDestinationMapKey, object[] blotterKey, string configurationId, object[] destinationKey, object externalId0);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/UpdateBranch", ReplyAction="http://tempuri.org/IDataModel/UpdateBranchResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void UpdateBranch(object[] blotterKey, object[] branchKey, string configurationId, object shortName);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/UpdateBroker", ReplyAction="http://tempuri.org/IDataModel/UpdateBrokerResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void UpdateBroker(object[] brokerKey, string configurationId, object connected, object phone, object[] sourceKey, object symbol);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/UpdateBrokerAccount", ReplyAction="http://tempuri.org/IDataModel/UpdateBrokerAccountResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void UpdateBrokerAccount(object brokerAccountId, object[] brokerAccountKey, object[] brokerKey, string configurationId, object description, object externalId0, object externalId1, object externalId2, object externalId3, object mnemonic, object[] traderKey);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/UpdateClearingBroker", ReplyAction="http://tempuri.org/IDataModel/UpdateClearingBrokerResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void UpdateClearingBroker(object[] brokerKey, object[] clearingBrokerKey, string configurationId);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/UpdateCommissionSchedule", ReplyAction="http://tempuri.org/IDataModel/UpdateCommissionScheduleResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void UpdateCommissionSchedule(object commissionScheduleId, object[] commissionScheduleKey, string configurationId, object externalId0, object name);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/UpdateCommissionTranche", ReplyAction="http://tempuri.org/IDataModel/UpdateCommissionTrancheResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(Teraque.CommissionTypeCode))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(Teraque.CommissionUnitCode))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void UpdateCommissionTranche(object[] commissionScheduleKey, object commissionTrancheId, object[] commissionTrancheKey, object[] commissionTypeKey, object[] commissionUnitKey, string configurationId, object endRange, object externalId0, object startRange, object value);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/UpdateCommissionType", ReplyAction="http://tempuri.org/IDataModel/UpdateCommissionTypeResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(Teraque.CommissionTypeCode))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void UpdateCommissionType(object commissionTypeCode, object[] commissionTypeKey, string configurationId, object description, object externalId0, object name);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/UpdateCommissionUnit", ReplyAction="http://tempuri.org/IDataModel/UpdateCommissionUnitResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(Teraque.CommissionUnitCode))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void UpdateCommissionUnit(object commissionUnitCode, object[] commissionUnitKey, string configurationId, object description, object externalId0, object name);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/UpdateComplianceOfficer", ReplyAction="http://tempuri.org/IDataModel/UpdateComplianceOfficerResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void UpdateComplianceOfficer(object[] complianceOfficerKey, string configurationId, object[] userKey);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/UpdateCondition", ReplyAction="http://tempuri.org/IDataModel/UpdateConditionResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(Teraque.ConditionCode))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void UpdateCondition(object conditionCode, object[] conditionKey, string configurationId, object description, object externalId0, object externalId1, object externalId2, object externalId3, object mnemonic);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/UpdateConfiguration", ReplyAction="http://tempuri.org/IDataModel/UpdateConfigurationResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void UpdateConfiguration(object configurationId, object[] configurationKey, object indexName, object relationName);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/UpdateCountry", ReplyAction="http://tempuri.org/IDataModel/UpdateCountryResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void UpdateCountry(object abbreviation, string configurationId, object countryId, object[] countryKey, object externalId0, object externalId1, object name);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/UpdateCreditRating", ReplyAction="http://tempuri.org/IDataModel/UpdateCreditRatingResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void UpdateCreditRating(string configurationId, object creditRatingId, object[] creditRatingKey, object[] creditRatingServiceKey, object externalId0, object externalId1, object scale, object value);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/UpdateCreditRatingService", ReplyAction="http://tempuri.org/IDataModel/UpdateCreditRatingServiceResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void UpdateCreditRatingService(string configurationId, object creditRatingServiceId, object[] creditRatingServiceKey, object externalId0, object externalId1, object name);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/UpdateCrossing", ReplyAction="http://tempuri.org/IDataModel/UpdateCrossingResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(Teraque.CrossingCode))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void UpdateCrossing(string configurationId, object crossingCode, object[] crossingKey, object description, object externalId0, object externalId1, object name);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/UpdateCurrency", ReplyAction="http://tempuri.org/IDataModel/UpdateCurrencyResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void UpdateCurrency(string configurationId, object[] currencyKey, object[] securityKey);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/UpdateDebt", ReplyAction="http://tempuri.org/IDataModel/UpdateDebtResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(Teraque.WeekendCode))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void UpdateDebt(string configurationId, object[] debtKey, object exdividendDays, object faceOutstanding, object firstCoupon, object frequency, object issuePrice, object maturityDate, object redemptionValue, object[] securityKeyByDebtId, object[] securityKeyBySettlementId, object[] weekendKey);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/UpdateDestination", ReplyAction="http://tempuri.org/IDataModel/UpdateDestinationResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void UpdateDestination(
				object cancelCustomFixTag, 
				object clearingFirmId, 
				string configurationId, 
				object destinationId, 
				object[] destinationKey, 
				object externalId0, 
				object externalId1, 
				object fixAccount, 
				object fixAccountSuffixLength, 
				object fixExchangeMnemonic, 
				object fixExecBroker, 
				object fixExecDestinationListed, 
				object fixExecDestinationUnlisted, 
				object fixHandleInstListed, 
				object fixHandleInstUnlisted, 
				object fixIoiRoutingId, 
				object fixIoiRoutingType, 
				object fixNetCommissionType, 
				object fixNoteTagId, 
				object fixOnBehalfOf, 
				object fixOnBehalfOfSub, 
				object fixOrderIdFormat, 
				object fixPassiveTag, 
				object fixProactiveTag, 
				object fixSourceCompany, 
				object fixSourceId, 
				object fixSourceTrader, 
				object fixTargetCompany, 
				object fixTargetLocationId, 
				object fixTargetTrader, 
				object fixVersion, 
				object isBroker, 
				object isCancelAllowed, 
				object isCancelReplaceAllowed, 
				object isEcn, 
				object isExchange, 
				object isInternal, 
				object isIoiAllowed, 
				object isLimitPricingAllowed, 
				object isMarketOnClosePricingAllowed, 
				object isMarketPricingAllowed, 
				object isSystemUp, 
				object isTagEligible, 
				object isTradeAwayAllowed, 
				object isUnsolicitedTradeAllowed, 
				object lotSize, 
				object maximumQuantityListedLimit, 
				object maximumQuantityListedMarket, 
				object maximumQuantityUnlistedLimit, 
				object maximumQuantityUnlistedMarket, 
				object modifiedTime, 
				object name, 
				object newOrderCustomFixTag, 
				object oatsDepartmentId, 
				object oatsDestinationCode, 
				object oatsReceivingMpi, 
				object oatsRouteMethod, 
				object oatsRoutingMpi, 
				object oatsSentMpi, 
				object oatsTerminalId, 
				object onCloseCancelTime, 
				object onCloseOrderTime, 
				object perShareUsageFee, 
				object postMarketLogic, 
				object primaryBackupDestinationId, 
				object secondaryBackupDestinationId, 
				object selectnetFlag, 
				object shortName, 
				object sourceId0, 
				object sourceId1, 
				object sourceId2, 
				object sourceId3, 
				object sourceId4, 
				object sourceId5, 
				object sourceId6, 
				object sourceId7, 
				object uniqueShortName);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/UpdateDestinationExchangeMap", ReplyAction="http://tempuri.org/IDataModel/UpdateDestinationExchangeMapResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void UpdateDestinationExchangeMap(string configurationId, object destinationExchangeMapId, object[] destinationExchangeMapKey, object[] destinationKey, object[] exchangeKey, object externalId0);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/UpdateDestinationOrder", ReplyAction="http://tempuri.org/IDataModel/UpdateDestinationOrderResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(Teraque.OrderTypeCode))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(Teraque.SideCode))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(Teraque.StateCode))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(Teraque.StatusCode))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(Teraque.TimeInForceCode))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void UpdateDestinationOrder(
				object canceledQuantity, 
				object canceledTime, 
				string configurationId, 
				object createdTime, 
				object[] destinationKey, 
				object destinationOrderId, 
				object[] destinationOrderKey, 
				object externalId0, 
				object isCanceledByUser, 
				object isHidden, 
				object limitPrice, 
				object modifiedTime, 
				object orderedQuantity, 
				object[] orderTypeKey, 
				object[] securityKeyBySecurityId, 
				object[] securityKeyBySettlementId, 
				object settlementDate, 
				object[] sideKey, 
				object[] stateKey, 
				object[] statusKey, 
				object stopPrice, 
				object[] timeInForceKey, 
				object tradeDate, 
				object[] traderKey, 
				object[] userKeyByCreatedUserId, 
				object[] userKeyByModifiedUserId, 
				object[] workingOrderKey);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/UpdateEntity", ReplyAction="http://tempuri.org/IDataModel/UpdateEntityResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void UpdateEntity(
				string configurationId, 
				object createdTime, 
				object description, 
				object entityId, 
				object[] entityKey, 
				object externalId0, 
				object externalId1, 
				object externalId2, 
				object externalId3, 
				object externalId4, 
				object externalId5, 
				object externalId6, 
				object externalId7, 
				object[] imageKey, 
				object isContainer, 
				object isHidden, 
				object isReadOnly, 
				object modifiedTime, 
				object name, 
				object[] typeKey);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/UpdateEntityTree", ReplyAction="http://tempuri.org/IDataModel/UpdateEntityTreeResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void UpdateEntityTree(string configurationId, object[] entityKeyByChildId, object[] entityKeyByParentId, object entityTreeId, object[] entityTreeKey, object externalId0);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/UpdateEquity", ReplyAction="http://tempuri.org/IDataModel/UpdateEquityResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void UpdateEquity(string configurationId, object[] equityKey, object[] exchangeKey, object issuerId, object[] securityKeyByEquityId, object[] securityKeyBySettlementId, object sharesOutstanding);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/UpdateExchange", ReplyAction="http://tempuri.org/IDataModel/UpdateExchangeResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void UpdateExchange(string configurationId, object[] countryKey, object exchangeId, object[] exchangeKey, object externalId0, object externalId1, object externalId2, object externalId3, object isListed, object mnemonic, object name);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/UpdateExecution", ReplyAction="http://tempuri.org/IDataModel/UpdateExecutionResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(Teraque.StateCode))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void UpdateExecution(
				object accruedInterest, 
				object[] brokerAccountKey, 
				object[] brokerKey, 
				object commission, 
				string configurationId, 
				object createdTime, 
				object[] destinationOrderKey, 
				object executionId, 
				object[] executionKey, 
				object executionPrice, 
				object executionQuantity, 
				object externalId0, 
				object isHidden, 
				object modifiedTime, 
				object originalDestinationOrderId, 
				object originalPrice, 
				object originalQuantity, 
				object sourceExecutionId, 
				object[] stateKeyByDestinationStateCode, 
				object[] stateKeyBySourceStateCode, 
				object userFee0, 
				object userFee1, 
				object userFee2, 
				object userFee3, 
				object[] userKeyByCreatedUserId, 
				object[] userKeyByModifiedUserId);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/UpdateFolder", ReplyAction="http://tempuri.org/IDataModel/UpdateFolderResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void UpdateFolder(string configurationId, object[] entityKey, object[] folderKey);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/UpdateGroupAccount", ReplyAction="http://tempuri.org/IDataModel/UpdateGroupAccountResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void UpdateGroupAccount(object[] accountKey, string configurationId, object[] groupAccountKey);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/UpdateHoliday", ReplyAction="http://tempuri.org/IDataModel/UpdateHolidayResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(Teraque.HolidayTypeCode))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void UpdateHoliday(string configurationId, object[] countryKey, object date, object externalId0, object externalId1, object holidayId, object[] holidayKey, object[] holidayTypeKey);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/UpdateHolidayType", ReplyAction="http://tempuri.org/IDataModel/UpdateHolidayTypeResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(Teraque.HolidayTypeCode))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void UpdateHolidayType(string configurationId, object description, object externalId0, object externalId1, object externalId2, object externalId3, object holidayTypeCode, object[] holidayTypeKey);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/UpdateImage", ReplyAction="http://tempuri.org/IDataModel/UpdateImageResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void UpdateImage(string configurationId, object externalId0, object image, object imageId, object[] imageKey);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/UpdateIndustry", ReplyAction="http://tempuri.org/IDataModel/UpdateIndustryResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void UpdateIndustry(string configurationId, object externalId0, object externalId1, object[] industryClassificationKey, object industryId, object[] industryKey, object mnemonic, object name);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/UpdateIndustryClassification", ReplyAction="http://tempuri.org/IDataModel/UpdateIndustryClassificationResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void UpdateIndustryClassification(string configurationId, object externalId0, object externalId1, object industryClassificationId, object[] industryClassificationKey, object mnemonic, object name);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/UpdateIndustryLeaf", ReplyAction="http://tempuri.org/IDataModel/UpdateIndustryLeafResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void UpdateIndustryLeaf(string configurationId, object externalId0, object externalId1, object[] industryKey, object industryLeafId, object[] industryLeafKey, object[] securityKey);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/UpdateIndustryTree", ReplyAction="http://tempuri.org/IDataModel/UpdateIndustryTreeResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void UpdateIndustryTree(string configurationId, object externalId0, object externalId1, object[] industryKeyByChildId, object[] industryKeyByParentId, object industryTreeId, object[] industryTreeKey);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/UpdateInstitution", ReplyAction="http://tempuri.org/IDataModel/UpdateInstitutionResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void UpdateInstitution(string configurationId, object[] institutionKey, object[] sourceKey);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/UpdateIssuer", ReplyAction="http://tempuri.org/IDataModel/UpdateIssuerResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void UpdateIssuer(string configurationId, object[] entityKey, object[] issuerKey);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/UpdateLotHandling", ReplyAction="http://tempuri.org/IDataModel/UpdateLotHandlingResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(Teraque.LotHandlingCode))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void UpdateLotHandling(string configurationId, object description, object externalId0, object externalId1, object externalId2, object externalId3, object lotHandlingCode, object[] lotHandlingKey, object mnemonic);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/UpdateMajorInstrumentType", ReplyAction="http://tempuri.org/IDataModel/UpdateMajorInstrumentTypeResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void UpdateMajorInstrumentType(string configurationId, object externalId0, object externalId1, object majorInstrumentTypeId, object[] majorInstrumentTypeKey, object mnemonic, object name);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/UpdateMatch", ReplyAction="http://tempuri.org/IDataModel/UpdateMatchResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(Teraque.StatusCode))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void UpdateMatch(object[] blotterKey, string configurationId, object contraMatchId, object contraOrderId, object heatIndex, object heatIndexDetails, object matchedTime, object matchId, object[] matchKey, object[] statusKey, object[] workingOrderKey);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/UpdateMinorInstrumentType", ReplyAction="http://tempuri.org/IDataModel/UpdateMinorInstrumentTypeResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void UpdateMinorInstrumentType(string configurationId, object externalId0, object externalId1, object minorInstrumentTypeId, object[] minorInstrumentTypeKey, object mnemonic, object name);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/UpdateMssaBucket", ReplyAction="http://tempuri.org/IDataModel/UpdateMssaBucketResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void UpdateMssaBucket(string configurationId, object externalId0, object externalId1, object mssaBucketId, object[] mssaBucketKey, object name);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/UpdateNegotiation", ReplyAction="http://tempuri.org/IDataModel/UpdateNegotiationResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(Teraque.StatusCode))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void UpdateNegotiation(object[] blotterKey, string configurationId, object[] executionKey, object isRead, object[] matchKey, object negotiationId, object[] negotiationKey, object quantity, object[] statusKey);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/UpdateOrderType", ReplyAction="http://tempuri.org/IDataModel/UpdateOrderTypeResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(Teraque.OrderTypeCode))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void UpdateOrderType(string configurationId, object description, object externalId0, object externalId1, object externalId2, object externalId3, object mnemonic, object orderTypeCode, object[] orderTypeKey);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/UpdatePartyType", ReplyAction="http://tempuri.org/IDataModel/UpdatePartyTypeResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(Teraque.PartyTypeCode))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void UpdatePartyType(string configurationId, object description, object externalId0, object externalId1, object mnemonic, object partyTypeCode, object[] partyTypeKey);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/UpdatePosition", ReplyAction="http://tempuri.org/IDataModel/UpdatePositionResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(Teraque.PositionTypeCode))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void UpdatePosition(object[] accountKey, string configurationId, object externalId0, object externalId1, object externalId2, object externalId3, object positionId, object[] positionKey, object[] positionTypeKey, object[] securityKey);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/UpdatePositionSeries", ReplyAction="http://tempuri.org/IDataModel/UpdatePositionSeriesResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(Teraque.PositionTypeCode))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void UpdatePositionSeries(object[] accountKey, object baseCost, object basePrice, string configurationId, object date, object externalId0, object externalId1, object localCost, object localPrice, object[] positionKey, object positionSeriesId, object[] positionSeriesKey, object[] positionTypeKey, object[] securityKey, object[] securitySeriesKey);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/UpdatePositionType", ReplyAction="http://tempuri.org/IDataModel/UpdatePositionTypeResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(Teraque.PositionTypeCode))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void UpdatePositionType(string configurationId, object externalId0, object externalId1, object externalId2, object externalId3, object mnemonic, object positionTypeCode, object[] positionTypeKey, object sign);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/UpdatePrice", ReplyAction="http://tempuri.org/IDataModel/UpdatePriceResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void UpdatePrice(
				object askPrice, 
				object askSize, 
				object bidPrice, 
				object bidSize, 
				object closePrice, 
				string configurationId, 
				object highPrice, 
				object lastPrice, 
				object lastSize, 
				object lowPrice, 
				object openPrice, 
				object priceChange, 
				object[] priceKey, 
				object[] securityKeyByCurrencyId, 
				object[] securityKeyBySecurityId, 
				object volume, 
				object volumeWeightedAveragePrice);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/UpdateProperty", ReplyAction="http://tempuri.org/IDataModel/UpdatePropertyResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void UpdateProperty(string configurationId, object externalId0, object name, object propertyId, object[] propertyKey);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/UpdatePropertyStore", ReplyAction="http://tempuri.org/IDataModel/UpdatePropertyStoreResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(byte[]))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void UpdatePropertyStore(string configurationId, object[] entityKey, object externalId0, object[] propertyKey, object propertyStoreId, object[] propertyStoreKey, object value);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/UpdateProvince", ReplyAction="http://tempuri.org/IDataModel/UpdateProvinceResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void UpdateProvince(object abbreviation, string configurationId, object[] countryKey, object externalId0, object externalId1, object name, object provinceId, object[] provinceKey);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/UpdateSecurity", ReplyAction="http://tempuri.org/IDataModel/UpdateSecurityResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(Teraque.VolumeCategoryCode))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void UpdateSecurity(
				object averageDailyVolume, 
				string configurationId, 
				object[] countryKey, 
				object[] entityKey, 
				object isDerivative, 
				object[] issuerKey, 
				object logo, 
				object[] majorInstrumentTypeKey, 
				object marketCapitalization, 
				object minimumQuantity, 
				object[] minorInstrumentTypeKey, 
				object priceFactor, 
				object quantityFactor, 
				object[] securityKey, 
				object symbol, 
				object[] volumeCategoryKey);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/UpdateSecuritySeries", ReplyAction="http://tempuri.org/IDataModel/UpdateSecuritySeriesResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(Teraque.SubordinateTypeCode))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void UpdateSecuritySeries(
				object betaAdjustedKrd10Year, 
				object betaAdjustedKrd20Year, 
				object betaAdjustedKrd2Year, 
				object betaAdjustedKrd30Year, 
				object betaAdjustedKrd5Year, 
				object betaAdjustedKrd6Month, 
				string configurationId, 
				object coupon, 
				object[] creditRatingKeyByCreditRatingId0, 
				object[] creditRatingKeyByCreditRatingId1, 
				object[] creditRatingKeyByCreditRatingId2, 
				object[] creditRatingKeyByCreditRatingId3, 
				object[] creditRatingKeyByCreditRatingId4, 
				object[] creditRatingKeyByCreditRatingId5, 
				object currentYield, 
				object date, 
				object effectiveConvexity, 
				object effectiveDuration, 
				object externalId0, 
				object externalId1, 
				object modifiedDurationToWorst, 
				object modifiedOptionAdjustedDuration, 
				object[] mssaBucketKey, 
				object optionAdjustedDuration, 
				object optionAdjustedSpread, 
				object optionAdjustedSpreadDuration, 
				object optionAdjustedYieldToWorst, 
				object[] securityKey, 
				object securitySeriesId, 
				object[] securitySeriesKey, 
				object[] subordinateTypeKey, 
				object yearsToAverageLife, 
				object yearsToMaturity, 
				object yieldToEffectiveMaturity, 
				object yieldToMaturity, 
				object yieldToWorst);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/UpdateSettlementUnit", ReplyAction="http://tempuri.org/IDataModel/UpdateSettlementUnitResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(Teraque.SettlementUnitCode))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void UpdateSettlementUnit(string configurationId, object description, object externalId0, object name, object settlementUnitCode, object[] settlementUnitKey);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/UpdateSide", ReplyAction="http://tempuri.org/IDataModel/UpdateSideResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(Teraque.SideCode))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void UpdateSide(object cashSign, string configurationId, object description, object externalId0, object externalId1, object externalId2, object externalId3, object image, object mnemonic, object quantitySign, object sideCode, object[] sideKey, object sortOrder);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/UpdateSingleAccount", ReplyAction="http://tempuri.org/IDataModel/UpdateSingleAccountResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(Teraque.LotHandlingCode))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void UpdateSingleAccount(object[] accountKey, object address0, object address1, object city, string configurationId, object[] countryKey, object[] lotHandlingKey, object postalCode, object[] provinceKey, object[] singleAccountKey);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/UpdateSource", ReplyAction="http://tempuri.org/IDataModel/UpdateSourceResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(Teraque.PartyTypeCode))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void UpdateSource(object advertisementSchemaId, object[] blotterKey, object buyMarketValueThreshold, object buyQuantityThreshold, string configurationId, object partyTypeCode, object sellMarketValueThreshold, object sellQuantityThreshold, object shortName, object[] sourceKey);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/UpdateSourceOrder", ReplyAction="http://tempuri.org/IDataModel/UpdateSourceOrderResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(Teraque.OrderTypeCode))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(Teraque.SideCode))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(Teraque.StatusCode))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(Teraque.TimeInForceCode))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void UpdateSourceOrder(
				string configurationId, 
				object createdTime, 
				object[] destinationKey, 
				object externalId0, 
				object isAdvertised, 
				object isAutoExecute, 
				object isCanceled, 
				object isHeld, 
				object isSteppedIn, 
				object isSubmitted, 
				object limitPrice, 
				object maximumVolatility, 
				object modifiedTime, 
				object newsFreeTime, 
				object orderedQuantity, 
				object[] orderTypeKey, 
				object receivedTime, 
				object[] securityKeyBySecurityId, 
				object[] securityKeyBySettlementId, 
				object settlementDate, 
				object[] sideKey, 
				object sourceOrderId, 
				object[] sourceOrderKey, 
				object startTime, 
				object[] statusKey, 
				object stopPrice, 
				object stopTime, 
				object submittedQuantity, 
				object submittedTime, 
				object targetPrice, 
				object[] timeInForceKey, 
				object tradeDate, 
				object[] userKeyByCreatedUserId, 
				object[] userKeyByModifiedUserId, 
				object[] workingOrderKey);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/UpdateState", ReplyAction="http://tempuri.org/IDataModel/UpdateStateResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(Teraque.StateCode))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void UpdateState(string configurationId, object description, object externalId0, object externalId1, object externalId2, object externalId3, object mnemonic, object stateCode, object[] stateKey);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/UpdateStatus", ReplyAction="http://tempuri.org/IDataModel/UpdateStatusResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(Teraque.StatusCode))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void UpdateStatus(string configurationId, object description, object externalId0, object externalId1, object externalId2, object externalId3, object image, object mnemonic, object sortOrder, object statusCode, object[] statusKey);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/UpdateSubordinateType", ReplyAction="http://tempuri.org/IDataModel/UpdateSubordinateTypeResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(Teraque.SubordinateTypeCode))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void UpdateSubordinateType(string configurationId, object description, object externalId0, object externalId1, object subordinateTypeCode, object[] subordinateTypeKey);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/UpdateTaxLot", ReplyAction="http://tempuri.org/IDataModel/UpdateTaxLotResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(Teraque.PositionTypeCode))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void UpdateTaxLot(object[] accountKey, object baseCost, string configurationId, object externalId0, object externalId1, object localCost, object[] positionKey, object[] positionTypeKey, object[] securityKey, object settlementDate, object taxLotId, object[] taxLotKey, object tradeDate);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/UpdateTaxLotSeries", ReplyAction="http://tempuri.org/IDataModel/UpdateTaxLotSeriesResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(Teraque.PositionTypeCode))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void UpdateTaxLotSeries(
				object[] accountKey, 
				string configurationId, 
				object date, 
				object dealSpread, 
				object duration, 
				object exposureWeight, 
				object externalId0, 
				object externalId1, 
				object lotExposureBase, 
				object lotExposureLocal, 
				object lotMarketValueBase, 
				object lotMarketValueLocal, 
				object lotQuantity, 
				object marketWeight, 
				object monthToDayLinkedReturn, 
				object monthToDayProfitAndLoss, 
				object netAssetValue, 
				object originalBuyTransaction, 
				object[] positionSeriesKey, 
				object[] positionTypeKey, 
				object qualityLabel, 
				object quantity, 
				object quarterToDayLinkedReturn, 
				object quarterToDayProfitAndLoss, 
				object ratingScore, 
				object sector, 
				object[] securityKey, 
				object[] securitySeriesKey, 
				object strategy, 
				object strategyDescription, 
				object sumExposure, 
				object sumMarketValue, 
				object[] taxLotKey, 
				object taxLotSeriesId, 
				object[] taxLotSeriesKey, 
				object trade, 
				object weight, 
				object yearToDayLinkedReturn, 
				object yearToDayProfitAndLoss);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/UpdateTimeInForce", ReplyAction="http://tempuri.org/IDataModel/UpdateTimeInForceResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(Teraque.TimeInForceCode))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void UpdateTimeInForce(string configurationId, object description, object externalId0, object externalId1, object externalId2, object externalId3, object mnemonic, object sortOrder, object timeInForceCode, object[] timeInForceKey);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/UpdateTimeUnit", ReplyAction="http://tempuri.org/IDataModel/UpdateTimeUnitResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(Teraque.TimeUnitCode))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void UpdateTimeUnit(string configurationId, object externalId0, object inDays, object name, object timeUnitCode, object[] timeUnitKey);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/UpdateTrader", ReplyAction="http://tempuri.org/IDataModel/UpdateTraderResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(Teraque.CrossingCode))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void UpdateTrader(
				object address1, 
				object address2, 
				object address3, 
				object[] blotterKey, 
				object commissionMaximum, 
				object commissionMinimum, 
				object commissionRate, 
				object commissionRateTypeCode, 
				string configurationId, 
				object crossingCode, 
				object defaultAccountId, 
				object emailAddress, 
				object fixAccountId, 
				object isAgencyMatch, 
				object isBrokerMatch, 
				object isCommissionChangeAllowed, 
				object isEditExecutionsAllowed, 
				object isHedgeMatch, 
				object isHeld, 
				object isInstitutionMatch, 
				object lastDeletedOrder, 
				object lastFilledOrder, 
				object lastFilledSourceOrder, 
				object lastTrade, 
				object lotSizeDefault, 
				object marketSleep, 
				object maximumVolatilityDefault, 
				object newsFreeTimeDefault, 
				object oatsAccountType, 
				object oatsOrigDeptId, 
				object orderMaximumLimitDelta, 
				object orderMaximumMarketValue, 
				object orderMaximumQuantity, 
				object orderWarningMarketValue, 
				object orderWarningQuantity, 
				object phone, 
				object reviewWindow, 
				object scraperConfigurationString, 
				object startTimeDefault, 
				object stopTimeDefault, 
				object tagId, 
				object[] traderKey, 
				object[] userKey);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/UpdateTraderVolumeSetting", ReplyAction="http://tempuri.org/IDataModel/UpdateTraderVolumeSettingResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(Teraque.VolumeCategoryCode))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void UpdateTraderVolumeSetting(object autoExecuteQuantity, string configurationId, object externalId0, object thresholdQuantity, object[] traderKey, object traderVolumeSettingId, object[] traderVolumeSettingKey, object[] volumeCategoryKey);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/UpdateType", ReplyAction="http://tempuri.org/IDataModel/UpdateTypeResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void UpdateType(string configurationId, object description, object externalId0, object[] imageKey, object type, object typeId, object[] typeKey);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/UpdateUser", ReplyAction="http://tempuri.org/IDataModel/UpdateUserResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(byte[]))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void UpdateUser(string configurationId, object distinguishedName, object[] entityKey, object isRemoved, object preferences, object[] userKey);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/UpdateVolumeCategory", ReplyAction="http://tempuri.org/IDataModel/UpdateVolumeCategoryResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(Teraque.VolumeCategoryCode))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void UpdateVolumeCategory(string configurationId, object description, object externalId0, object highVolumeRange, object lowVolumeRange, object mnemonic, object volumeCategoryCode, object[] volumeCategoryKey);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/UpdateWeekend", ReplyAction="http://tempuri.org/IDataModel/UpdateWeekendResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(Teraque.WeekendCode))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void UpdateWeekend(string configurationId, object externalId0, object externalId1, object userCode0, object userCode1, object weekendCode, object[] weekendKey);
	
	[global::System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataModel/UpdateWorkingOrder", ReplyAction="http://tempuri.org/IDataModel/UpdateWorkingOrderResponse")]
	[global::System.ServiceModel.TransactionFlowAttribute(global::System.ServiceModel.TransactionFlowOption.Allowed)]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DBNull))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(Teraque.CrossingCode))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(Teraque.OrderTypeCode))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(Teraque.SideCode))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(Teraque.StatusCode))]
	[global::System.ServiceModel.ServiceKnownTypeAttribute(typeof(Teraque.TimeInForceCode))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ArgumentFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.ConstraintFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.FormatFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.IndexNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.RecordNotFoundFault))]
	[global::System.ServiceModel.FaultContractAttribute(typeof(global::Teraque.TenantNotLoadedFault))]
	void UpdateWorkingOrder(
				object automaticQuantity, 
				object[] blotterKey, 
				string configurationId, 
				object createdTime, 
				object[] crossingKey, 
				object[] destinationKey, 
				object externalId0, 
				object isAutomatic, 
				object isAwake, 
				object isBrokerMatch, 
				object isHedgeMatch, 
				object isInstitutionMatch, 
				object limitPrice, 
				object modifiedTime, 
				object[] orderTypeKey, 
				object[] securityKeyBySecurityId, 
				object[] securityKeyBySettlementId, 
				object settlementDate, 
				object[] sideKey, 
				object startTime, 
				object[] statusKey, 
				object stopPrice, 
				object stopTime, 
				object submittedQuantity, 
				object submittedTime, 
				object[] timeInForceKey, 
				object tradeDate, 
				object uploadedTime, 
				object[] userKeyByCreatedUserId, 
				object[] userKeyByModifiedUserId, 
				object workingOrderId, 
				object[] workingOrderKey);
}

/// <summary>
/// Client interface to a shared DataModel.
/// </summary>
public partial class DataModelClient : global::System.ServiceModel.ClientBase<IDataModel>, IDataModel
{
	
	public DataModelClient()
	{
	}
	
	public DataModelClient(string endpointConfigurationName) : 
			base(endpointConfigurationName)
	{
	}
	
	public void CreateAccount(string configurationId, object[] currencyKey, object[] entityKey, object mnemonic)
	{
		base.Channel.CreateAccount(configurationId, currencyKey, entityKey, mnemonic);
	}
	
	public void CreateAccountSeries(
				object[] accountKey, 
				string configurationId, 
				global::System.DateTime date, 
				object monthToDayLinkedReturn, 
				object monthToDayProfitAndLoss, 
				object quarterToDayLinkedReturn, 
				object quarterToDayProfitAndLoss, 
				object totalExposureBase, 
				object totalExposureLocal, 
				object totalMarketValueBase, 
				object totalMarketValueLocal, 
				object trailingOneDayLinkedReturn, 
				object trailingOneDayProfitAndLoss, 
				object trailingOneMonthLinkedReturn, 
				object trailingOneMonthProfitAndLoss, 
				object trailingOneYearLinkedReturn, 
				object trailingOneYearProfitAndLoss, 
				object trailingSixMonthLinkedReturn, 
				object trailingSixMonthProfitAndLoss, 
				object trailingThreeMonthLinkedReturn, 
				object trailingThreeMonthProfitAndLoss, 
				object yearToDayLinkedReturn, 
				object yearToDayProfitAndLoss)
	{
		base.Channel.CreateAccountSeries(accountKey, configurationId, date, monthToDayLinkedReturn, monthToDayProfitAndLoss, quarterToDayLinkedReturn, quarterToDayProfitAndLoss, totalExposureBase, totalExposureLocal, totalMarketValueBase, totalMarketValueLocal, trailingOneDayLinkedReturn, trailingOneDayProfitAndLoss, trailingOneMonthLinkedReturn, trailingOneMonthProfitAndLoss, trailingOneYearLinkedReturn, trailingOneYearProfitAndLoss, trailingSixMonthLinkedReturn, trailingSixMonthProfitAndLoss, trailingThreeMonthLinkedReturn, trailingThreeMonthProfitAndLoss, yearToDayLinkedReturn, yearToDayProfitAndLoss);
	}
	
	public void CreateAllocation(
				object[] accountKey, 
				object accruedInterest, 
				global::System.Guid allocationId, 
				object commission, 
				string configurationId, 
				global::System.DateTime createdTime, 
				object externalId0, 
				global::System.DateTime modifiedTime, 
				global::Teraque.PositionTypeCode positionTypeCode, 
				object price, 
				object quantity, 
				object[] securityKeyBySecurityId, 
				object[] securityKeyBySettlementId, 
				global::System.DateTime settlementDate, 
				object[] sideKey, 
				global::System.DateTime tradeDate, 
				object userFee0, 
				object userFee1, 
				object userFee2, 
				object userFee3, 
				object[] userKeyByCreatedUserId, 
				object[] userKeyByModifiedUserId, 
				object[] workingOrderKey)
	{
		base.Channel.CreateAllocation(accountKey, accruedInterest, allocationId, commission, configurationId, createdTime, externalId0, modifiedTime, positionTypeCode, price, quantity, securityKeyBySecurityId, securityKeyBySettlementId, settlementDate, sideKey, tradeDate, userFee0, userFee1, userFee2, userFee3, userKeyByCreatedUserId, userKeyByModifiedUserId, workingOrderKey);
	}
	
	public void CreateBlotter(string configurationId, object[] entityKey, object[] partyTypeKey)
	{
		base.Channel.CreateBlotter(configurationId, entityKey, partyTypeKey);
	}
	
	public void CreateBlotterDestinationMap(global::System.Guid blotterDestinationMapId, object[] blotterKey, string configurationId, object[] destinationKey, object externalId0)
	{
		base.Channel.CreateBlotterDestinationMap(blotterDestinationMapId, blotterKey, configurationId, destinationKey, externalId0);
	}
	
	public void CreateBranch(object[] blotterKey, string configurationId, object shortName)
	{
		base.Channel.CreateBranch(blotterKey, configurationId, shortName);
	}
	
	public void CreateBroker(string configurationId, object connected, object phone, object[] sourceKey, object symbol)
	{
		base.Channel.CreateBroker(configurationId, connected, phone, sourceKey, symbol);
	}
	
	public void CreateBrokerAccount(global::System.Guid brokerAccountId, object[] brokerKey, string configurationId, object description, object externalId0, object externalId1, object externalId2, object externalId3, object mnemonic, object[] traderKey)
	{
		base.Channel.CreateBrokerAccount(brokerAccountId, brokerKey, configurationId, description, externalId0, externalId1, externalId2, externalId3, mnemonic, traderKey);
	}
	
	public void CreateClearingBroker(object[] brokerKey, string configurationId)
	{
		base.Channel.CreateClearingBroker(brokerKey, configurationId);
	}
	
	public void CreateCommissionSchedule(global::System.Guid commissionScheduleId, string configurationId, object externalId0, object name)
	{
		base.Channel.CreateCommissionSchedule(commissionScheduleId, configurationId, externalId0, name);
	}
	
	public void CreateCommissionTranche(object[] commissionScheduleKey, global::System.Guid commissionTrancheId, object[] commissionTypeKey, object[] commissionUnitKey, string configurationId, object endRange, object externalId0, object startRange, object value)
	{
		base.Channel.CreateCommissionTranche(commissionScheduleKey, commissionTrancheId, commissionTypeKey, commissionUnitKey, configurationId, endRange, externalId0, startRange, value);
	}
	
	public void CreateCommissionType(global::Teraque.CommissionTypeCode commissionTypeCode, string configurationId, object description, object externalId0, object name)
	{
		base.Channel.CreateCommissionType(commissionTypeCode, configurationId, description, externalId0, name);
	}
	
	public void CreateCommissionUnit(global::Teraque.CommissionUnitCode commissionUnitCode, string configurationId, object description, object externalId0, object name)
	{
		base.Channel.CreateCommissionUnit(commissionUnitCode, configurationId, description, externalId0, name);
	}
	
	public void CreateComplianceOfficer(string configurationId, object[] userKey)
	{
		base.Channel.CreateComplianceOfficer(configurationId, userKey);
	}
	
	public void CreateCondition(global::Teraque.ConditionCode conditionCode, string configurationId, object description, object externalId0, object externalId1, object externalId2, object externalId3, object mnemonic)
	{
		base.Channel.CreateCondition(conditionCode, configurationId, description, externalId0, externalId1, externalId2, externalId3, mnemonic);
	}
	
	public void CreateConfiguration(object configurationId, object indexName, object relationName)
	{
		base.Channel.CreateConfiguration(configurationId, indexName, relationName);
	}
	
	public void CreateCountry(object abbreviation, string configurationId, global::System.Guid countryId, object externalId0, object externalId1, object name)
	{
		base.Channel.CreateCountry(abbreviation, configurationId, countryId, externalId0, externalId1, name);
	}
	
	public void CreateCreditRating(string configurationId, global::System.Guid creditRatingId, object[] creditRatingServiceKey, object externalId0, object externalId1, object scale, object value)
	{
		base.Channel.CreateCreditRating(configurationId, creditRatingId, creditRatingServiceKey, externalId0, externalId1, scale, value);
	}
	
	public void CreateCreditRatingService(string configurationId, global::System.Guid creditRatingServiceId, object externalId0, object externalId1, object name)
	{
		base.Channel.CreateCreditRatingService(configurationId, creditRatingServiceId, externalId0, externalId1, name);
	}
	
	public void CreateCrossing(string configurationId, global::Teraque.CrossingCode crossingCode, object description, object externalId0, object externalId1, object name)
	{
		base.Channel.CreateCrossing(configurationId, crossingCode, description, externalId0, externalId1, name);
	}
	
	public void CreateCurrency(string configurationId, object[] securityKey)
	{
		base.Channel.CreateCurrency(configurationId, securityKey);
	}
	
	public void CreateDebt(string configurationId, object exdividendDays, object faceOutstanding, global::System.DateTime firstCoupon, object frequency, object issuePrice, global::System.DateTime maturityDate, object redemptionValue, object[] securityKeyByDebtId, object[] securityKeyBySettlementId, object[] weekendKey)
	{
		base.Channel.CreateDebt(configurationId, exdividendDays, faceOutstanding, firstCoupon, frequency, issuePrice, maturityDate, redemptionValue, securityKeyByDebtId, securityKeyBySettlementId, weekendKey);
	}
	
	public void CreateDestination(
				object cancelCustomFixTag, 
				object clearingFirmId, 
				string configurationId, 
				global::System.Guid destinationId, 
				object externalId0, 
				object externalId1, 
				object fixAccount, 
				object fixAccountSuffixLength, 
				object fixExchangeMnemonic, 
				object fixExecBroker, 
				object fixExecDestinationListed, 
				object fixExecDestinationUnlisted, 
				object fixHandleInstListed, 
				object fixHandleInstUnlisted, 
				object fixIoiRoutingId, 
				object fixIoiRoutingType, 
				object fixNetCommissionType, 
				object fixNoteTagId, 
				object fixOnBehalfOf, 
				object fixOnBehalfOfSub, 
				object fixOrderIdFormat, 
				object fixPassiveTag, 
				object fixProactiveTag, 
				object fixSourceCompany, 
				object fixSourceId, 
				object fixSourceTrader, 
				object fixTargetCompany, 
				object fixTargetLocationId, 
				object fixTargetTrader, 
				object fixVersion, 
				object isBroker, 
				object isCancelAllowed, 
				object isCancelReplaceAllowed, 
				object isEcn, 
				object isExchange, 
				object isInternal, 
				object isIoiAllowed, 
				object isLimitPricingAllowed, 
				object isMarketOnClosePricingAllowed, 
				object isMarketPricingAllowed, 
				object isSystemUp, 
				object isTagEligible, 
				object isTradeAwayAllowed, 
				object isUnsolicitedTradeAllowed, 
				object lotSize, 
				object maximumQuantityListedLimit, 
				object maximumQuantityListedMarket, 
				object maximumQuantityUnlistedLimit, 
				object maximumQuantityUnlistedMarket, 
				global::System.DateTime modifiedTime, 
				object name, 
				object newOrderCustomFixTag, 
				object oatsDepartmentId, 
				object oatsDestinationCode, 
				object oatsReceivingMpi, 
				object oatsRouteMethod, 
				object oatsRoutingMpi, 
				object oatsSentMpi, 
				object oatsTerminalId, 
				object onCloseCancelTime, 
				object onCloseOrderTime, 
				object perShareUsageFee, 
				object postMarketLogic, 
				object primaryBackupDestinationId, 
				object secondaryBackupDestinationId, 
				object selectnetFlag, 
				object shortName, 
				object sourceId0, 
				object sourceId1, 
				object sourceId2, 
				object sourceId3, 
				object sourceId4, 
				object sourceId5, 
				object sourceId6, 
				object sourceId7, 
				object uniqueShortName)
	{
		base.Channel.CreateDestination(cancelCustomFixTag, clearingFirmId, configurationId, destinationId, externalId0, externalId1, fixAccount, fixAccountSuffixLength, fixExchangeMnemonic, fixExecBroker, fixExecDestinationListed, fixExecDestinationUnlisted, fixHandleInstListed, fixHandleInstUnlisted, fixIoiRoutingId, fixIoiRoutingType, fixNetCommissionType, fixNoteTagId, fixOnBehalfOf, fixOnBehalfOfSub, fixOrderIdFormat, fixPassiveTag, fixProactiveTag, fixSourceCompany, fixSourceId, fixSourceTrader, fixTargetCompany, fixTargetLocationId, fixTargetTrader, fixVersion, isBroker, isCancelAllowed, isCancelReplaceAllowed, isEcn, isExchange, isInternal, isIoiAllowed, isLimitPricingAllowed, isMarketOnClosePricingAllowed, isMarketPricingAllowed, isSystemUp, isTagEligible, isTradeAwayAllowed, isUnsolicitedTradeAllowed, lotSize, maximumQuantityListedLimit, maximumQuantityListedMarket, maximumQuantityUnlistedLimit, maximumQuantityUnlistedMarket, modifiedTime, name, newOrderCustomFixTag, oatsDepartmentId, oatsDestinationCode, oatsReceivingMpi, oatsRouteMethod, oatsRoutingMpi, oatsSentMpi, oatsTerminalId, onCloseCancelTime, onCloseOrderTime, perShareUsageFee, postMarketLogic, primaryBackupDestinationId, secondaryBackupDestinationId, selectnetFlag, shortName, sourceId0, sourceId1, sourceId2, sourceId3, sourceId4, sourceId5, sourceId6, sourceId7, uniqueShortName);
	}
	
	public void CreateDestinationExchangeMap(string configurationId, global::System.Guid destinationExchangeMapId, object[] destinationKey, object[] exchangeKey, object externalId0)
	{
		base.Channel.CreateDestinationExchangeMap(configurationId, destinationExchangeMapId, destinationKey, exchangeKey, externalId0);
	}
	
	public void CreateDestinationOrder(
				object canceledQuantity, 
				object canceledTime, 
				string configurationId, 
				global::System.DateTime createdTime, 
				object[] destinationKey, 
				global::System.Guid destinationOrderId, 
				object externalId0, 
				object isCanceledByUser, 
				object isHidden, 
				object limitPrice, 
				global::System.DateTime modifiedTime, 
				object orderedQuantity, 
				object[] orderTypeKey, 
				object[] securityKeyBySecurityId, 
				object[] securityKeyBySettlementId, 
				global::System.DateTime settlementDate, 
				object[] sideKey, 
				object[] stateKey, 
				object[] statusKey, 
				object stopPrice, 
				object[] timeInForceKey, 
				global::System.DateTime tradeDate, 
				object[] traderKey, 
				object[] userKeyByCreatedUserId, 
				object[] userKeyByModifiedUserId, 
				object[] workingOrderKey)
	{
		base.Channel.CreateDestinationOrder(canceledQuantity, canceledTime, configurationId, createdTime, destinationKey, destinationOrderId, externalId0, isCanceledByUser, isHidden, limitPrice, modifiedTime, orderedQuantity, orderTypeKey, securityKeyBySecurityId, securityKeyBySettlementId, settlementDate, sideKey, stateKey, statusKey, stopPrice, timeInForceKey, tradeDate, traderKey, userKeyByCreatedUserId, userKeyByModifiedUserId, workingOrderKey);
	}
	
	public void CreateEntity(
				string configurationId, 
				global::System.DateTime createdTime, 
				object description, 
				global::System.Guid entityId, 
				object externalId0, 
				object externalId1, 
				object externalId2, 
				object externalId3, 
				object externalId4, 
				object externalId5, 
				object externalId6, 
				object externalId7, 
				object[] imageKey, 
				object isContainer, 
				object isHidden, 
				object isReadOnly, 
				global::System.DateTime modifiedTime, 
				object name, 
				object[] typeKey)
	{
		base.Channel.CreateEntity(configurationId, createdTime, description, entityId, externalId0, externalId1, externalId2, externalId3, externalId4, externalId5, externalId6, externalId7, imageKey, isContainer, isHidden, isReadOnly, modifiedTime, name, typeKey);
	}
	
	public void CreateEntityTree(string configurationId, object[] entityKeyByChildId, object[] entityKeyByParentId, global::System.Guid entityTreeId, object externalId0)
	{
		base.Channel.CreateEntityTree(configurationId, entityKeyByChildId, entityKeyByParentId, entityTreeId, externalId0);
	}
	
	public void CreateEquity(string configurationId, object[] exchangeKey, object issuerId, object[] securityKeyByEquityId, object[] securityKeyBySettlementId, object sharesOutstanding)
	{
		base.Channel.CreateEquity(configurationId, exchangeKey, issuerId, securityKeyByEquityId, securityKeyBySettlementId, sharesOutstanding);
	}
	
	public void CreateExchange(string configurationId, object[] countryKey, global::System.Guid exchangeId, object externalId0, object externalId1, object externalId2, object externalId3, object isListed, object mnemonic, object name)
	{
		base.Channel.CreateExchange(configurationId, countryKey, exchangeId, externalId0, externalId1, externalId2, externalId3, isListed, mnemonic, name);
	}
	
	public void CreateExecution(
				object accruedInterest, 
				object[] brokerAccountKey, 
				object[] brokerKey, 
				object commission, 
				string configurationId, 
				global::System.DateTime createdTime, 
				object[] destinationOrderKey, 
				global::System.Guid executionId, 
				object executionPrice, 
				object executionQuantity, 
				object externalId0, 
				object isHidden, 
				object modifiedTime, 
				object originalDestinationOrderId, 
				object originalPrice, 
				object originalQuantity, 
				object sourceExecutionId, 
				object[] stateKeyByDestinationStateCode, 
				object[] stateKeyBySourceStateCode, 
				object userFee0, 
				object userFee1, 
				object userFee2, 
				object userFee3, 
				object[] userKeyByCreatedUserId, 
				object[] userKeyByModifiedUserId)
	{
		base.Channel.CreateExecution(accruedInterest, brokerAccountKey, brokerKey, commission, configurationId, createdTime, destinationOrderKey, executionId, executionPrice, executionQuantity, externalId0, isHidden, modifiedTime, originalDestinationOrderId, originalPrice, originalQuantity, sourceExecutionId, stateKeyByDestinationStateCode, stateKeyBySourceStateCode, userFee0, userFee1, userFee2, userFee3, userKeyByCreatedUserId, userKeyByModifiedUserId);
	}
	
	public void CreateFolder(string configurationId, object[] entityKey)
	{
		base.Channel.CreateFolder(configurationId, entityKey);
	}
	
	public void CreateGroupAccount(object[] accountKey, string configurationId)
	{
		base.Channel.CreateGroupAccount(accountKey, configurationId);
	}
	
	public void CreateHoliday(string configurationId, object[] countryKey, global::System.DateTime date, object externalId0, object externalId1, global::System.Guid holidayId, object[] holidayTypeKey)
	{
		base.Channel.CreateHoliday(configurationId, countryKey, date, externalId0, externalId1, holidayId, holidayTypeKey);
	}
	
	public void CreateHolidayType(string configurationId, object description, object externalId0, object externalId1, object externalId2, object externalId3, global::Teraque.HolidayTypeCode holidayTypeCode)
	{
		base.Channel.CreateHolidayType(configurationId, description, externalId0, externalId1, externalId2, externalId3, holidayTypeCode);
	}
	
	public void CreateImage(string configurationId, object externalId0, object image, global::System.Guid imageId)
	{
		base.Channel.CreateImage(configurationId, externalId0, image, imageId);
	}
	
	public void CreateIndustry(string configurationId, object externalId0, object externalId1, object[] industryClassificationKey, global::System.Guid industryId, object mnemonic, object name)
	{
		base.Channel.CreateIndustry(configurationId, externalId0, externalId1, industryClassificationKey, industryId, mnemonic, name);
	}
	
	public void CreateIndustryClassification(string configurationId, object externalId0, object externalId1, global::System.Guid industryClassificationId, object mnemonic, object name)
	{
		base.Channel.CreateIndustryClassification(configurationId, externalId0, externalId1, industryClassificationId, mnemonic, name);
	}
	
	public void CreateIndustryLeaf(string configurationId, object externalId0, object externalId1, object[] industryKey, global::System.Guid industryLeafId, object[] securityKey)
	{
		base.Channel.CreateIndustryLeaf(configurationId, externalId0, externalId1, industryKey, industryLeafId, securityKey);
	}
	
	public void CreateIndustryTree(string configurationId, object externalId0, object externalId1, object[] industryKeyByChildId, object[] industryKeyByParentId, global::System.Guid industryTreeId)
	{
		base.Channel.CreateIndustryTree(configurationId, externalId0, externalId1, industryKeyByChildId, industryKeyByParentId, industryTreeId);
	}
	
	public void CreateInstitution(string configurationId, object[] sourceKey)
	{
		base.Channel.CreateInstitution(configurationId, sourceKey);
	}
	
	public void CreateIssuer(string configurationId, object[] entityKey)
	{
		base.Channel.CreateIssuer(configurationId, entityKey);
	}
	
	public void CreateLotHandling(string configurationId, object description, object externalId0, object externalId1, object externalId2, object externalId3, global::Teraque.LotHandlingCode lotHandlingCode, object mnemonic)
	{
		base.Channel.CreateLotHandling(configurationId, description, externalId0, externalId1, externalId2, externalId3, lotHandlingCode, mnemonic);
	}
	
	public void CreateMajorInstrumentType(string configurationId, object externalId0, object externalId1, global::System.Guid majorInstrumentTypeId, object mnemonic, object name)
	{
		base.Channel.CreateMajorInstrumentType(configurationId, externalId0, externalId1, majorInstrumentTypeId, mnemonic, name);
	}
	
	public void CreateMatch(object[] blotterKey, string configurationId, global::System.Guid contraMatchId, global::System.Guid contraOrderId, object heatIndex, object heatIndexDetails, global::System.DateTime matchedTime, global::System.Guid matchId, object[] statusKey, object[] workingOrderKey)
	{
		base.Channel.CreateMatch(blotterKey, configurationId, contraMatchId, contraOrderId, heatIndex, heatIndexDetails, matchedTime, matchId, statusKey, workingOrderKey);
	}
	
	public void CreateMinorInstrumentType(string configurationId, object externalId0, object externalId1, global::System.Guid minorInstrumentTypeId, object mnemonic, object name)
	{
		base.Channel.CreateMinorInstrumentType(configurationId, externalId0, externalId1, minorInstrumentTypeId, mnemonic, name);
	}
	
	public void CreateMssaBucket(string configurationId, object externalId0, object externalId1, global::System.Guid mssaBucketId, object name)
	{
		base.Channel.CreateMssaBucket(configurationId, externalId0, externalId1, mssaBucketId, name);
	}
	
	public void CreateNegotiation(object[] blotterKey, string configurationId, object[] executionKey, object isRead, object[] matchKey, global::System.Guid negotiationId, object quantity, object[] statusKey)
	{
		base.Channel.CreateNegotiation(blotterKey, configurationId, executionKey, isRead, matchKey, negotiationId, quantity, statusKey);
	}
	
	public void CreateOrderType(string configurationId, object description, object externalId0, object externalId1, object externalId2, object externalId3, object mnemonic, global::Teraque.OrderTypeCode orderTypeCode)
	{
		base.Channel.CreateOrderType(configurationId, description, externalId0, externalId1, externalId2, externalId3, mnemonic, orderTypeCode);
	}
	
	public void CreatePartyType(string configurationId, object description, object externalId0, object externalId1, object mnemonic, global::Teraque.PartyTypeCode partyTypeCode)
	{
		base.Channel.CreatePartyType(configurationId, description, externalId0, externalId1, mnemonic, partyTypeCode);
	}
	
	public void CreatePosition(object[] accountKey, string configurationId, object externalId0, object externalId1, object externalId2, object externalId3, global::System.Guid positionId, object[] positionTypeKey, object[] securityKey)
	{
		base.Channel.CreatePosition(accountKey, configurationId, externalId0, externalId1, externalId2, externalId3, positionId, positionTypeKey, securityKey);
	}
	
	public void CreatePositionSeries(object[] accountKey, object baseCost, object basePrice, string configurationId, global::System.DateTime date, object externalId0, object externalId1, object localCost, object localPrice, object[] positionKey, global::System.Guid positionSeriesId, object[] positionTypeKey, object[] securityKey, object[] securitySeriesKey)
	{
		base.Channel.CreatePositionSeries(accountKey, baseCost, basePrice, configurationId, date, externalId0, externalId1, localCost, localPrice, positionKey, positionSeriesId, positionTypeKey, securityKey, securitySeriesKey);
	}
	
	public void CreatePositionType(string configurationId, object externalId0, object externalId1, object externalId2, object externalId3, object mnemonic, global::Teraque.PositionTypeCode positionTypeCode, object sign)
	{
		base.Channel.CreatePositionType(configurationId, externalId0, externalId1, externalId2, externalId3, mnemonic, positionTypeCode, sign);
	}
	
	public void CreatePrice(
				object askPrice, 
				object askSize, 
				object bidPrice, 
				object bidSize, 
				object closePrice, 
				string configurationId, 
				object highPrice, 
				object lastPrice, 
				object lastSize, 
				object lowPrice, 
				object openPrice, 
				object priceChange, 
				object[] securityKeyByCurrencyId, 
				object[] securityKeyBySecurityId, 
				object volume, 
				object volumeWeightedAveragePrice)
	{
		base.Channel.CreatePrice(askPrice, askSize, bidPrice, bidSize, closePrice, configurationId, highPrice, lastPrice, lastSize, lowPrice, openPrice, priceChange, securityKeyByCurrencyId, securityKeyBySecurityId, volume, volumeWeightedAveragePrice);
	}
	
	public void CreateProperty(string configurationId, object externalId0, object name, global::System.Guid propertyId)
	{
		base.Channel.CreateProperty(configurationId, externalId0, name, propertyId);
	}
	
	public void CreatePropertyStore(string configurationId, object[] entityKey, object externalId0, object[] propertyKey, global::System.Guid propertyStoreId, byte[] value)
	{
		base.Channel.CreatePropertyStore(configurationId, entityKey, externalId0, propertyKey, propertyStoreId, value);
	}
	
	public void CreateProvince(object abbreviation, string configurationId, object[] countryKey, object externalId0, object externalId1, object name, global::System.Guid provinceId)
	{
		base.Channel.CreateProvince(abbreviation, configurationId, countryKey, externalId0, externalId1, name, provinceId);
	}
	
	public void CreateSecurity(object averageDailyVolume, string configurationId, object[] countryKey, object[] entityKey, object isDerivative, object[] issuerKey, object logo, object[] majorInstrumentTypeKey, object marketCapitalization, object minimumQuantity, object[] minorInstrumentTypeKey, object priceFactor, object quantityFactor, object symbol, object[] volumeCategoryKey)
	{
		base.Channel.CreateSecurity(averageDailyVolume, configurationId, countryKey, entityKey, isDerivative, issuerKey, logo, majorInstrumentTypeKey, marketCapitalization, minimumQuantity, minorInstrumentTypeKey, priceFactor, quantityFactor, symbol, volumeCategoryKey);
	}
	
	public void CreateSecuritySeries(
				object betaAdjustedKrd10Year, 
				object betaAdjustedKrd20Year, 
				object betaAdjustedKrd2Year, 
				object betaAdjustedKrd30Year, 
				object betaAdjustedKrd5Year, 
				object betaAdjustedKrd6Month, 
				string configurationId, 
				object coupon, 
				object[] creditRatingKeyByCreditRatingId0, 
				object[] creditRatingKeyByCreditRatingId1, 
				object[] creditRatingKeyByCreditRatingId2, 
				object[] creditRatingKeyByCreditRatingId3, 
				object[] creditRatingKeyByCreditRatingId4, 
				object[] creditRatingKeyByCreditRatingId5, 
				object currentYield, 
				global::System.DateTime date, 
				object effectiveConvexity, 
				object effectiveDuration, 
				object externalId0, 
				object externalId1, 
				object modifiedDurationToWorst, 
				object modifiedOptionAdjustedDuration, 
				object[] mssaBucketKey, 
				object optionAdjustedDuration, 
				object optionAdjustedSpread, 
				object optionAdjustedSpreadDuration, 
				object optionAdjustedYieldToWorst, 
				object[] securityKey, 
				global::System.Guid securitySeriesId, 
				object[] subordinateTypeKey, 
				object yearsToAverageLife, 
				object yearsToMaturity, 
				object yieldToEffectiveMaturity, 
				object yieldToMaturity, 
				object yieldToWorst)
	{
		base.Channel.CreateSecuritySeries(betaAdjustedKrd10Year, betaAdjustedKrd20Year, betaAdjustedKrd2Year, betaAdjustedKrd30Year, betaAdjustedKrd5Year, betaAdjustedKrd6Month, configurationId, coupon, creditRatingKeyByCreditRatingId0, creditRatingKeyByCreditRatingId1, creditRatingKeyByCreditRatingId2, creditRatingKeyByCreditRatingId3, creditRatingKeyByCreditRatingId4, creditRatingKeyByCreditRatingId5, currentYield, date, effectiveConvexity, effectiveDuration, externalId0, externalId1, modifiedDurationToWorst, modifiedOptionAdjustedDuration, mssaBucketKey, optionAdjustedDuration, optionAdjustedSpread, optionAdjustedSpreadDuration, optionAdjustedYieldToWorst, securityKey, securitySeriesId, subordinateTypeKey, yearsToAverageLife, yearsToMaturity, yieldToEffectiveMaturity, yieldToMaturity, yieldToWorst);
	}
	
	public void CreateSettlementUnit(string configurationId, object description, object externalId0, object name, global::Teraque.SettlementUnitCode settlementUnitCode)
	{
		base.Channel.CreateSettlementUnit(configurationId, description, externalId0, name, settlementUnitCode);
	}
	
	public void CreateSide(object cashSign, string configurationId, object description, object externalId0, object externalId1, object externalId2, object externalId3, object image, object mnemonic, object quantitySign, global::Teraque.SideCode sideCode, object sortOrder)
	{
		base.Channel.CreateSide(cashSign, configurationId, description, externalId0, externalId1, externalId2, externalId3, image, mnemonic, quantitySign, sideCode, sortOrder);
	}
	
	public void CreateSingleAccount(object[] accountKey, object address0, object address1, object city, string configurationId, object[] countryKey, object[] lotHandlingKey, object postalCode, object[] provinceKey)
	{
		base.Channel.CreateSingleAccount(accountKey, address0, address1, city, configurationId, countryKey, lotHandlingKey, postalCode, provinceKey);
	}
	
	public void CreateSource(object advertisementSchemaId, object[] blotterKey, object buyMarketValueThreshold, object buyQuantityThreshold, string configurationId, global::Teraque.PartyTypeCode partyTypeCode, object sellMarketValueThreshold, object sellQuantityThreshold, object shortName)
	{
		base.Channel.CreateSource(advertisementSchemaId, blotterKey, buyMarketValueThreshold, buyQuantityThreshold, configurationId, partyTypeCode, sellMarketValueThreshold, sellQuantityThreshold, shortName);
	}
	
	public void CreateSourceOrder(
				string configurationId, 
				global::System.DateTime createdTime, 
				object[] destinationKey, 
				object externalId0, 
				object isAdvertised, 
				object isAutoExecute, 
				object isCanceled, 
				object isHeld, 
				object isSteppedIn, 
				object isSubmitted, 
				object limitPrice, 
				object maximumVolatility, 
				global::System.DateTime modifiedTime, 
				object newsFreeTime, 
				object orderedQuantity, 
				object[] orderTypeKey, 
				object receivedTime, 
				object[] securityKeyBySecurityId, 
				object[] securityKeyBySettlementId, 
				object settlementDate, 
				object[] sideKey, 
				global::System.Guid sourceOrderId, 
				object startTime, 
				object[] statusKey, 
				object stopPrice, 
				object stopTime, 
				object submittedQuantity, 
				object submittedTime, 
				object targetPrice, 
				object[] timeInForceKey, 
				object tradeDate, 
				object[] userKeyByCreatedUserId, 
				object[] userKeyByModifiedUserId, 
				object[] workingOrderKey)
	{
		base.Channel.CreateSourceOrder(configurationId, createdTime, destinationKey, externalId0, isAdvertised, isAutoExecute, isCanceled, isHeld, isSteppedIn, isSubmitted, limitPrice, maximumVolatility, modifiedTime, newsFreeTime, orderedQuantity, orderTypeKey, receivedTime, securityKeyBySecurityId, securityKeyBySettlementId, settlementDate, sideKey, sourceOrderId, startTime, statusKey, stopPrice, stopTime, submittedQuantity, submittedTime, targetPrice, timeInForceKey, tradeDate, userKeyByCreatedUserId, userKeyByModifiedUserId, workingOrderKey);
	}
	
	public void CreateState(string configurationId, object description, object externalId0, object externalId1, object externalId2, object externalId3, object mnemonic, global::Teraque.StateCode stateCode)
	{
		base.Channel.CreateState(configurationId, description, externalId0, externalId1, externalId2, externalId3, mnemonic, stateCode);
	}
	
	public void CreateStatus(string configurationId, object description, object externalId0, object externalId1, object externalId2, object externalId3, object image, object mnemonic, object sortOrder, global::Teraque.StatusCode statusCode)
	{
		base.Channel.CreateStatus(configurationId, description, externalId0, externalId1, externalId2, externalId3, image, mnemonic, sortOrder, statusCode);
	}
	
	public void CreateSubordinateType(string configurationId, object description, object externalId0, object externalId1, global::Teraque.SubordinateTypeCode subordinateTypeCode)
	{
		base.Channel.CreateSubordinateType(configurationId, description, externalId0, externalId1, subordinateTypeCode);
	}
	
	public void CreateTaxLot(object[] accountKey, object baseCost, string configurationId, object externalId0, object externalId1, object localCost, object[] positionKey, object[] positionTypeKey, object[] securityKey, object settlementDate, global::System.Guid taxLotId, object tradeDate)
	{
		base.Channel.CreateTaxLot(accountKey, baseCost, configurationId, externalId0, externalId1, localCost, positionKey, positionTypeKey, securityKey, settlementDate, taxLotId, tradeDate);
	}
	
	public void CreateTaxLotSeries(
				object[] accountKey, 
				string configurationId, 
				global::System.DateTime date, 
				object dealSpread, 
				object duration, 
				object exposureWeight, 
				object externalId0, 
				object externalId1, 
				object lotExposureBase, 
				object lotExposureLocal, 
				object lotMarketValueBase, 
				object lotMarketValueLocal, 
				object lotQuantity, 
				object marketWeight, 
				object monthToDayLinkedReturn, 
				object monthToDayProfitAndLoss, 
				object netAssetValue, 
				object originalBuyTransaction, 
				object[] positionSeriesKey, 
				object[] positionTypeKey, 
				object qualityLabel, 
				object quantity, 
				object quarterToDayLinkedReturn, 
				object quarterToDayProfitAndLoss, 
				object ratingScore, 
				object sector, 
				object[] securityKey, 
				object[] securitySeriesKey, 
				object strategy, 
				object strategyDescription, 
				object sumExposure, 
				object sumMarketValue, 
				object[] taxLotKey, 
				global::System.Guid taxLotSeriesId, 
				object trade, 
				object weight, 
				object yearToDayLinkedReturn, 
				object yearToDayProfitAndLoss)
	{
		base.Channel.CreateTaxLotSeries(accountKey, configurationId, date, dealSpread, duration, exposureWeight, externalId0, externalId1, lotExposureBase, lotExposureLocal, lotMarketValueBase, lotMarketValueLocal, lotQuantity, marketWeight, monthToDayLinkedReturn, monthToDayProfitAndLoss, netAssetValue, originalBuyTransaction, positionSeriesKey, positionTypeKey, qualityLabel, quantity, quarterToDayLinkedReturn, quarterToDayProfitAndLoss, ratingScore, sector, securityKey, securitySeriesKey, strategy, strategyDescription, sumExposure, sumMarketValue, taxLotKey, taxLotSeriesId, trade, weight, yearToDayLinkedReturn, yearToDayProfitAndLoss);
	}
	
	public void CreateTimeInForce(string configurationId, object description, object externalId0, object externalId1, object externalId2, object externalId3, object mnemonic, object sortOrder, global::Teraque.TimeInForceCode timeInForceCode)
	{
		base.Channel.CreateTimeInForce(configurationId, description, externalId0, externalId1, externalId2, externalId3, mnemonic, sortOrder, timeInForceCode);
	}
	
	public void CreateTimeUnit(string configurationId, object externalId0, object inDays, object name, global::Teraque.TimeUnitCode timeUnitCode)
	{
		base.Channel.CreateTimeUnit(configurationId, externalId0, inDays, name, timeUnitCode);
	}
	
	public void CreateTrader(
				object address1, 
				object address2, 
				object address3, 
				object[] blotterKey, 
				object commissionMaximum, 
				object commissionMinimum, 
				object commissionRate, 
				object commissionRateTypeCode, 
				string configurationId, 
				global::Teraque.CrossingCode crossingCode, 
				object defaultAccountId, 
				object emailAddress, 
				object fixAccountId, 
				object isAgencyMatch, 
				object isBrokerMatch, 
				object isCommissionChangeAllowed, 
				object isEditExecutionsAllowed, 
				object isHedgeMatch, 
				object isHeld, 
				object isInstitutionMatch, 
				object lastDeletedOrder, 
				object lastFilledOrder, 
				object lastFilledSourceOrder, 
				object lastTrade, 
				object lotSizeDefault, 
				object marketSleep, 
				object maximumVolatilityDefault, 
				object newsFreeTimeDefault, 
				object oatsAccountType, 
				object oatsOrigDeptId, 
				object orderMaximumLimitDelta, 
				object orderMaximumMarketValue, 
				object orderMaximumQuantity, 
				object orderWarningMarketValue, 
				object orderWarningQuantity, 
				object phone, 
				object reviewWindow, 
				object scraperConfigurationString, 
				object startTimeDefault, 
				object stopTimeDefault, 
				object tagId, 
				object[] userKey)
	{
		base.Channel.CreateTrader(address1, address2, address3, blotterKey, commissionMaximum, commissionMinimum, commissionRate, commissionRateTypeCode, configurationId, crossingCode, defaultAccountId, emailAddress, fixAccountId, isAgencyMatch, isBrokerMatch, isCommissionChangeAllowed, isEditExecutionsAllowed, isHedgeMatch, isHeld, isInstitutionMatch, lastDeletedOrder, lastFilledOrder, lastFilledSourceOrder, lastTrade, lotSizeDefault, marketSleep, maximumVolatilityDefault, newsFreeTimeDefault, oatsAccountType, oatsOrigDeptId, orderMaximumLimitDelta, orderMaximumMarketValue, orderMaximumQuantity, orderWarningMarketValue, orderWarningQuantity, phone, reviewWindow, scraperConfigurationString, startTimeDefault, stopTimeDefault, tagId, userKey);
	}
	
	public void CreateTraderVolumeSetting(object autoExecuteQuantity, string configurationId, object externalId0, object thresholdQuantity, object[] traderKey, global::System.Guid traderVolumeSettingId, object[] volumeCategoryKey)
	{
		base.Channel.CreateTraderVolumeSetting(autoExecuteQuantity, configurationId, externalId0, thresholdQuantity, traderKey, traderVolumeSettingId, volumeCategoryKey);
	}
	
	public void CreateType(string configurationId, object description, object externalId0, object[] imageKey, object type, global::System.Guid typeId)
	{
		base.Channel.CreateType(configurationId, description, externalId0, imageKey, type, typeId);
	}
	
	public void CreateUser(string configurationId, object distinguishedName, object[] entityKey, object isRemoved, object preferences)
	{
		base.Channel.CreateUser(configurationId, distinguishedName, entityKey, isRemoved, preferences);
	}
	
	public void CreateVolumeCategory(string configurationId, object description, object externalId0, object highVolumeRange, object lowVolumeRange, object mnemonic, global::Teraque.VolumeCategoryCode volumeCategoryCode)
	{
		base.Channel.CreateVolumeCategory(configurationId, description, externalId0, highVolumeRange, lowVolumeRange, mnemonic, volumeCategoryCode);
	}
	
	public void CreateWeekend(string configurationId, object externalId0, object externalId1, object userCode0, object userCode1, global::Teraque.WeekendCode weekendCode)
	{
		base.Channel.CreateWeekend(configurationId, externalId0, externalId1, userCode0, userCode1, weekendCode);
	}
	
	public void CreateWorkingOrder(
				object automaticQuantity, 
				object[] blotterKey, 
				string configurationId, 
				global::System.DateTime createdTime, 
				object[] crossingKey, 
				object[] destinationKey, 
				object externalId0, 
				object isAutomatic, 
				object isAwake, 
				object isBrokerMatch, 
				object isHedgeMatch, 
				object isInstitutionMatch, 
				object limitPrice, 
				global::System.DateTime modifiedTime, 
				object[] orderTypeKey, 
				object[] securityKeyBySecurityId, 
				object[] securityKeyBySettlementId, 
				global::System.DateTime settlementDate, 
				object[] sideKey, 
				object startTime, 
				object[] statusKey, 
				object stopPrice, 
				object stopTime, 
				object submittedQuantity, 
				object submittedTime, 
				object[] timeInForceKey, 
				global::System.DateTime tradeDate, 
				object uploadedTime, 
				object[] userKeyByCreatedUserId, 
				object[] userKeyByModifiedUserId, 
				global::System.Guid workingOrderId)
	{
		base.Channel.CreateWorkingOrder(automaticQuantity, blotterKey, configurationId, createdTime, crossingKey, destinationKey, externalId0, isAutomatic, isAwake, isBrokerMatch, isHedgeMatch, isInstitutionMatch, limitPrice, modifiedTime, orderTypeKey, securityKeyBySecurityId, securityKeyBySettlementId, settlementDate, sideKey, startTime, statusKey, stopPrice, stopTime, submittedQuantity, submittedTime, timeInForceKey, tradeDate, uploadedTime, userKeyByCreatedUserId, userKeyByModifiedUserId, workingOrderId);
	}
	
	public void DestroyAccount(object[] accountKey, string configurationId)
	{
		base.Channel.DestroyAccount(accountKey, configurationId);
	}
	
	public void DestroyAccountSeries(object[] accountSeriesKey, string configurationId)
	{
		base.Channel.DestroyAccountSeries(accountSeriesKey, configurationId);
	}
	
	public void DestroyAllocation(object[] allocationKey, string configurationId)
	{
		base.Channel.DestroyAllocation(allocationKey, configurationId);
	}
	
	public void DestroyBlotter(object[] blotterKey, string configurationId)
	{
		base.Channel.DestroyBlotter(blotterKey, configurationId);
	}
	
	public void DestroyBlotterDestinationMap(object[] blotterDestinationMapKey, string configurationId)
	{
		base.Channel.DestroyBlotterDestinationMap(blotterDestinationMapKey, configurationId);
	}
	
	public void DestroyBranch(object[] branchKey, string configurationId)
	{
		base.Channel.DestroyBranch(branchKey, configurationId);
	}
	
	public void DestroyBroker(object[] brokerKey, string configurationId)
	{
		base.Channel.DestroyBroker(brokerKey, configurationId);
	}
	
	public void DestroyBrokerAccount(object[] brokerAccountKey, string configurationId)
	{
		base.Channel.DestroyBrokerAccount(brokerAccountKey, configurationId);
	}
	
	public void DestroyClearingBroker(object[] clearingBrokerKey, string configurationId)
	{
		base.Channel.DestroyClearingBroker(clearingBrokerKey, configurationId);
	}
	
	public void DestroyCommissionSchedule(object[] commissionScheduleKey, string configurationId)
	{
		base.Channel.DestroyCommissionSchedule(commissionScheduleKey, configurationId);
	}
	
	public void DestroyCommissionTranche(object[] commissionTrancheKey, string configurationId)
	{
		base.Channel.DestroyCommissionTranche(commissionTrancheKey, configurationId);
	}
	
	public void DestroyCommissionType(object[] commissionTypeKey, string configurationId)
	{
		base.Channel.DestroyCommissionType(commissionTypeKey, configurationId);
	}
	
	public void DestroyCommissionUnit(object[] commissionUnitKey, string configurationId)
	{
		base.Channel.DestroyCommissionUnit(commissionUnitKey, configurationId);
	}
	
	public void DestroyComplianceOfficer(object[] complianceOfficerKey, string configurationId)
	{
		base.Channel.DestroyComplianceOfficer(complianceOfficerKey, configurationId);
	}
	
	public void DestroyCondition(object[] conditionKey, string configurationId)
	{
		base.Channel.DestroyCondition(conditionKey, configurationId);
	}
	
	public void DestroyConfiguration(string configurationId, object[] configurationKey)
	{
		base.Channel.DestroyConfiguration(configurationId, configurationKey);
	}
	
	public void DestroyCountry(string configurationId, object[] countryKey)
	{
		base.Channel.DestroyCountry(configurationId, countryKey);
	}
	
	public void DestroyCreditRating(string configurationId, object[] creditRatingKey)
	{
		base.Channel.DestroyCreditRating(configurationId, creditRatingKey);
	}
	
	public void DestroyCreditRatingService(string configurationId, object[] creditRatingServiceKey)
	{
		base.Channel.DestroyCreditRatingService(configurationId, creditRatingServiceKey);
	}
	
	public void DestroyCrossing(string configurationId, object[] crossingKey)
	{
		base.Channel.DestroyCrossing(configurationId, crossingKey);
	}
	
	public void DestroyCurrency(string configurationId, object[] currencyKey)
	{
		base.Channel.DestroyCurrency(configurationId, currencyKey);
	}
	
	public void DestroyDebt(string configurationId, object[] debtKey)
	{
		base.Channel.DestroyDebt(configurationId, debtKey);
	}
	
	public void DestroyDestination(string configurationId, object[] destinationKey)
	{
		base.Channel.DestroyDestination(configurationId, destinationKey);
	}
	
	public void DestroyDestinationExchangeMap(string configurationId, object[] destinationExchangeMapKey)
	{
		base.Channel.DestroyDestinationExchangeMap(configurationId, destinationExchangeMapKey);
	}
	
	public void DestroyDestinationOrder(string configurationId, object[] destinationOrderKey)
	{
		base.Channel.DestroyDestinationOrder(configurationId, destinationOrderKey);
	}
	
	public void DestroyEntity(string configurationId, object[] entityKey)
	{
		base.Channel.DestroyEntity(configurationId, entityKey);
	}
	
	public void DestroyEntityTree(string configurationId, object[] entityTreeKey)
	{
		base.Channel.DestroyEntityTree(configurationId, entityTreeKey);
	}
	
	public void DestroyEquity(string configurationId, object[] equityKey)
	{
		base.Channel.DestroyEquity(configurationId, equityKey);
	}
	
	public void DestroyExchange(string configurationId, object[] exchangeKey)
	{
		base.Channel.DestroyExchange(configurationId, exchangeKey);
	}
	
	public void DestroyExecution(string configurationId, object[] executionKey)
	{
		base.Channel.DestroyExecution(configurationId, executionKey);
	}
	
	public void DestroyFolder(string configurationId, object[] folderKey)
	{
		base.Channel.DestroyFolder(configurationId, folderKey);
	}
	
	public void DestroyGroupAccount(string configurationId, object[] groupAccountKey)
	{
		base.Channel.DestroyGroupAccount(configurationId, groupAccountKey);
	}
	
	public void DestroyHoliday(string configurationId, object[] holidayKey)
	{
		base.Channel.DestroyHoliday(configurationId, holidayKey);
	}
	
	public void DestroyHolidayType(string configurationId, object[] holidayTypeKey)
	{
		base.Channel.DestroyHolidayType(configurationId, holidayTypeKey);
	}
	
	public void DestroyImage(string configurationId, object[] imageKey)
	{
		base.Channel.DestroyImage(configurationId, imageKey);
	}
	
	public void DestroyIndustry(string configurationId, object[] industryKey)
	{
		base.Channel.DestroyIndustry(configurationId, industryKey);
	}
	
	public void DestroyIndustryClassification(string configurationId, object[] industryClassificationKey)
	{
		base.Channel.DestroyIndustryClassification(configurationId, industryClassificationKey);
	}
	
	public void DestroyIndustryLeaf(string configurationId, object[] industryLeafKey)
	{
		base.Channel.DestroyIndustryLeaf(configurationId, industryLeafKey);
	}
	
	public void DestroyIndustryTree(string configurationId, object[] industryTreeKey)
	{
		base.Channel.DestroyIndustryTree(configurationId, industryTreeKey);
	}
	
	public void DestroyInstitution(string configurationId, object[] institutionKey)
	{
		base.Channel.DestroyInstitution(configurationId, institutionKey);
	}
	
	public void DestroyIssuer(string configurationId, object[] issuerKey)
	{
		base.Channel.DestroyIssuer(configurationId, issuerKey);
	}
	
	public void DestroyLotHandling(string configurationId, object[] lotHandlingKey)
	{
		base.Channel.DestroyLotHandling(configurationId, lotHandlingKey);
	}
	
	public void DestroyMajorInstrumentType(string configurationId, object[] majorInstrumentTypeKey)
	{
		base.Channel.DestroyMajorInstrumentType(configurationId, majorInstrumentTypeKey);
	}
	
	public void DestroyMatch(string configurationId, object[] matchKey)
	{
		base.Channel.DestroyMatch(configurationId, matchKey);
	}
	
	public void DestroyMinorInstrumentType(string configurationId, object[] minorInstrumentTypeKey)
	{
		base.Channel.DestroyMinorInstrumentType(configurationId, minorInstrumentTypeKey);
	}
	
	public void DestroyMssaBucket(string configurationId, object[] mssaBucketKey)
	{
		base.Channel.DestroyMssaBucket(configurationId, mssaBucketKey);
	}
	
	public void DestroyNegotiation(string configurationId, object[] negotiationKey)
	{
		base.Channel.DestroyNegotiation(configurationId, negotiationKey);
	}
	
	public void DestroyOrderType(string configurationId, object[] orderTypeKey)
	{
		base.Channel.DestroyOrderType(configurationId, orderTypeKey);
	}
	
	public void DestroyPartyType(string configurationId, object[] partyTypeKey)
	{
		base.Channel.DestroyPartyType(configurationId, partyTypeKey);
	}
	
	public void DestroyPosition(string configurationId, object[] positionKey)
	{
		base.Channel.DestroyPosition(configurationId, positionKey);
	}
	
	public void DestroyPositionSeries(string configurationId, object[] positionSeriesKey)
	{
		base.Channel.DestroyPositionSeries(configurationId, positionSeriesKey);
	}
	
	public void DestroyPositionType(string configurationId, object[] positionTypeKey)
	{
		base.Channel.DestroyPositionType(configurationId, positionTypeKey);
	}
	
	public void DestroyPrice(string configurationId, object[] priceKey)
	{
		base.Channel.DestroyPrice(configurationId, priceKey);
	}
	
	public void DestroyProperty(string configurationId, object[] propertyKey)
	{
		base.Channel.DestroyProperty(configurationId, propertyKey);
	}
	
	public void DestroyPropertyStore(string configurationId, object[] propertyStoreKey)
	{
		base.Channel.DestroyPropertyStore(configurationId, propertyStoreKey);
	}
	
	public void DestroyProvince(string configurationId, object[] provinceKey)
	{
		base.Channel.DestroyProvince(configurationId, provinceKey);
	}
	
	public void DestroySecurity(string configurationId, object[] securityKey)
	{
		base.Channel.DestroySecurity(configurationId, securityKey);
	}
	
	public void DestroySecuritySeries(string configurationId, object[] securitySeriesKey)
	{
		base.Channel.DestroySecuritySeries(configurationId, securitySeriesKey);
	}
	
	public void DestroySettlementUnit(string configurationId, object[] settlementUnitKey)
	{
		base.Channel.DestroySettlementUnit(configurationId, settlementUnitKey);
	}
	
	public void DestroySide(string configurationId, object[] sideKey)
	{
		base.Channel.DestroySide(configurationId, sideKey);
	}
	
	public void DestroySingleAccount(string configurationId, object[] singleAccountKey)
	{
		base.Channel.DestroySingleAccount(configurationId, singleAccountKey);
	}
	
	public void DestroySource(string configurationId, object[] sourceKey)
	{
		base.Channel.DestroySource(configurationId, sourceKey);
	}
	
	public void DestroySourceOrder(string configurationId, object[] sourceOrderKey)
	{
		base.Channel.DestroySourceOrder(configurationId, sourceOrderKey);
	}
	
	public void DestroyState(string configurationId, object[] stateKey)
	{
		base.Channel.DestroyState(configurationId, stateKey);
	}
	
	public void DestroyStatus(string configurationId, object[] statusKey)
	{
		base.Channel.DestroyStatus(configurationId, statusKey);
	}
	
	public void DestroySubordinateType(string configurationId, object[] subordinateTypeKey)
	{
		base.Channel.DestroySubordinateType(configurationId, subordinateTypeKey);
	}
	
	public void DestroyTaxLot(string configurationId, object[] taxLotKey)
	{
		base.Channel.DestroyTaxLot(configurationId, taxLotKey);
	}
	
	public void DestroyTaxLotSeries(string configurationId, object[] taxLotSeriesKey)
	{
		base.Channel.DestroyTaxLotSeries(configurationId, taxLotSeriesKey);
	}
	
	public void DestroyTimeInForce(string configurationId, object[] timeInForceKey)
	{
		base.Channel.DestroyTimeInForce(configurationId, timeInForceKey);
	}
	
	public void DestroyTimeUnit(string configurationId, object[] timeUnitKey)
	{
		base.Channel.DestroyTimeUnit(configurationId, timeUnitKey);
	}
	
	public void DestroyTrader(string configurationId, object[] traderKey)
	{
		base.Channel.DestroyTrader(configurationId, traderKey);
	}
	
	public void DestroyTraderVolumeSetting(string configurationId, object[] traderVolumeSettingKey)
	{
		base.Channel.DestroyTraderVolumeSetting(configurationId, traderVolumeSettingKey);
	}
	
	public void DestroyType(string configurationId, object[] typeKey)
	{
		base.Channel.DestroyType(configurationId, typeKey);
	}
	
	public void DestroyUser(string configurationId, object[] userKey)
	{
		base.Channel.DestroyUser(configurationId, userKey);
	}
	
	public void DestroyVolumeCategory(string configurationId, object[] volumeCategoryKey)
	{
		base.Channel.DestroyVolumeCategory(configurationId, volumeCategoryKey);
	}
	
	public void DestroyWeekend(string configurationId, object[] weekendKey)
	{
		base.Channel.DestroyWeekend(configurationId, weekendKey);
	}
	
	public void DestroyWorkingOrder(string configurationId, object[] workingOrderKey)
	{
		base.Channel.DestroyWorkingOrder(configurationId, workingOrderKey);
	}
	
	public object[] Read(global::System.Guid dataSetId, long sequence)
	{
		return base.Channel.Read(dataSetId, sequence);
	}
	
	public void StoreAccount(string configurationId, object[] currencyKey, object[] entityKey, object mnemonic)
	{
		base.Channel.StoreAccount(configurationId, currencyKey, entityKey, mnemonic);
	}
	
	public void StoreAccountSeries(
				object[] accountKey, 
				string configurationId, 
				global::System.DateTime date, 
				object monthToDayLinkedReturn, 
				object monthToDayProfitAndLoss, 
				object quarterToDayLinkedReturn, 
				object quarterToDayProfitAndLoss, 
				object totalExposureBase, 
				object totalExposureLocal, 
				object totalMarketValueBase, 
				object totalMarketValueLocal, 
				object trailingOneDayLinkedReturn, 
				object trailingOneDayProfitAndLoss, 
				object trailingOneMonthLinkedReturn, 
				object trailingOneMonthProfitAndLoss, 
				object trailingOneYearLinkedReturn, 
				object trailingOneYearProfitAndLoss, 
				object trailingSixMonthLinkedReturn, 
				object trailingSixMonthProfitAndLoss, 
				object trailingThreeMonthLinkedReturn, 
				object trailingThreeMonthProfitAndLoss, 
				object yearToDayLinkedReturn, 
				object yearToDayProfitAndLoss)
	{
		base.Channel.StoreAccountSeries(accountKey, configurationId, date, monthToDayLinkedReturn, monthToDayProfitAndLoss, quarterToDayLinkedReturn, quarterToDayProfitAndLoss, totalExposureBase, totalExposureLocal, totalMarketValueBase, totalMarketValueLocal, trailingOneDayLinkedReturn, trailingOneDayProfitAndLoss, trailingOneMonthLinkedReturn, trailingOneMonthProfitAndLoss, trailingOneYearLinkedReturn, trailingOneYearProfitAndLoss, trailingSixMonthLinkedReturn, trailingSixMonthProfitAndLoss, trailingThreeMonthLinkedReturn, trailingThreeMonthProfitAndLoss, yearToDayLinkedReturn, yearToDayProfitAndLoss);
	}
	
	public void StoreAllocation(
				object[] accountKey, 
				object accruedInterest, 
				global::System.Guid allocationId, 
				object commission, 
				string configurationId, 
				global::System.DateTime createdTime, 
				object externalId0, 
				global::System.DateTime modifiedTime, 
				global::Teraque.PositionTypeCode positionTypeCode, 
				object price, 
				object quantity, 
				object[] securityKeyBySecurityId, 
				object[] securityKeyBySettlementId, 
				global::System.DateTime settlementDate, 
				object[] sideKey, 
				global::System.DateTime tradeDate, 
				object userFee0, 
				object userFee1, 
				object userFee2, 
				object userFee3, 
				object[] userKeyByCreatedUserId, 
				object[] userKeyByModifiedUserId, 
				object[] workingOrderKey)
	{
		base.Channel.StoreAllocation(accountKey, accruedInterest, allocationId, commission, configurationId, createdTime, externalId0, modifiedTime, positionTypeCode, price, quantity, securityKeyBySecurityId, securityKeyBySettlementId, settlementDate, sideKey, tradeDate, userFee0, userFee1, userFee2, userFee3, userKeyByCreatedUserId, userKeyByModifiedUserId, workingOrderKey);
	}
	
	public void StoreBlotter(string configurationId, object[] entityKey, object[] partyTypeKey)
	{
		base.Channel.StoreBlotter(configurationId, entityKey, partyTypeKey);
	}
	
	public void StoreBlotterDestinationMap(global::System.Guid blotterDestinationMapId, object[] blotterKey, string configurationId, object[] destinationKey, object externalId0)
	{
		base.Channel.StoreBlotterDestinationMap(blotterDestinationMapId, blotterKey, configurationId, destinationKey, externalId0);
	}
	
	public void StoreBranch(object[] blotterKey, string configurationId, object shortName)
	{
		base.Channel.StoreBranch(blotterKey, configurationId, shortName);
	}
	
	public void StoreBroker(string configurationId, object connected, object phone, object[] sourceKey, object symbol)
	{
		base.Channel.StoreBroker(configurationId, connected, phone, sourceKey, symbol);
	}
	
	public void StoreBrokerAccount(global::System.Guid brokerAccountId, object[] brokerKey, string configurationId, object description, object externalId0, object externalId1, object externalId2, object externalId3, object mnemonic, object[] traderKey)
	{
		base.Channel.StoreBrokerAccount(brokerAccountId, brokerKey, configurationId, description, externalId0, externalId1, externalId2, externalId3, mnemonic, traderKey);
	}
	
	public void StoreClearingBroker(object[] brokerKey, string configurationId)
	{
		base.Channel.StoreClearingBroker(brokerKey, configurationId);
	}
	
	public void StoreCommissionSchedule(global::System.Guid commissionScheduleId, string configurationId, object externalId0, object name)
	{
		base.Channel.StoreCommissionSchedule(commissionScheduleId, configurationId, externalId0, name);
	}
	
	public void StoreCommissionTranche(object[] commissionScheduleKey, global::System.Guid commissionTrancheId, object[] commissionTypeKey, object[] commissionUnitKey, string configurationId, object endRange, object externalId0, object startRange, object value)
	{
		base.Channel.StoreCommissionTranche(commissionScheduleKey, commissionTrancheId, commissionTypeKey, commissionUnitKey, configurationId, endRange, externalId0, startRange, value);
	}
	
	public void StoreCommissionType(global::Teraque.CommissionTypeCode commissionTypeCode, string configurationId, object description, object externalId0, object name)
	{
		base.Channel.StoreCommissionType(commissionTypeCode, configurationId, description, externalId0, name);
	}
	
	public void StoreCommissionUnit(global::Teraque.CommissionUnitCode commissionUnitCode, string configurationId, object description, object externalId0, object name)
	{
		base.Channel.StoreCommissionUnit(commissionUnitCode, configurationId, description, externalId0, name);
	}
	
	public void StoreComplianceOfficer(string configurationId, object[] userKey)
	{
		base.Channel.StoreComplianceOfficer(configurationId, userKey);
	}
	
	public void StoreCondition(global::Teraque.ConditionCode conditionCode, string configurationId, object description, object externalId0, object externalId1, object externalId2, object externalId3, object mnemonic)
	{
		base.Channel.StoreCondition(conditionCode, configurationId, description, externalId0, externalId1, externalId2, externalId3, mnemonic);
	}
	
	public void StoreConfiguration(object configurationId, object indexName, object relationName)
	{
		base.Channel.StoreConfiguration(configurationId, indexName, relationName);
	}
	
	public void StoreCountry(object abbreviation, string configurationId, global::System.Guid countryId, object externalId0, object externalId1, object name)
	{
		base.Channel.StoreCountry(abbreviation, configurationId, countryId, externalId0, externalId1, name);
	}
	
	public void StoreCreditRating(string configurationId, global::System.Guid creditRatingId, object[] creditRatingServiceKey, object externalId0, object externalId1, object scale, object value)
	{
		base.Channel.StoreCreditRating(configurationId, creditRatingId, creditRatingServiceKey, externalId0, externalId1, scale, value);
	}
	
	public void StoreCreditRatingService(string configurationId, global::System.Guid creditRatingServiceId, object externalId0, object externalId1, object name)
	{
		base.Channel.StoreCreditRatingService(configurationId, creditRatingServiceId, externalId0, externalId1, name);
	}
	
	public void StoreCrossing(string configurationId, global::Teraque.CrossingCode crossingCode, object description, object externalId0, object externalId1, object name)
	{
		base.Channel.StoreCrossing(configurationId, crossingCode, description, externalId0, externalId1, name);
	}
	
	public void StoreCurrency(string configurationId, object[] securityKey)
	{
		base.Channel.StoreCurrency(configurationId, securityKey);
	}
	
	public void StoreDebt(string configurationId, object exdividendDays, object faceOutstanding, global::System.DateTime firstCoupon, object frequency, object issuePrice, global::System.DateTime maturityDate, object redemptionValue, object[] securityKeyByDebtId, object[] securityKeyBySettlementId, object[] weekendKey)
	{
		base.Channel.StoreDebt(configurationId, exdividendDays, faceOutstanding, firstCoupon, frequency, issuePrice, maturityDate, redemptionValue, securityKeyByDebtId, securityKeyBySettlementId, weekendKey);
	}
	
	public void StoreDestination(
				object cancelCustomFixTag, 
				object clearingFirmId, 
				string configurationId, 
				global::System.Guid destinationId, 
				object externalId0, 
				object externalId1, 
				object fixAccount, 
				object fixAccountSuffixLength, 
				object fixExchangeMnemonic, 
				object fixExecBroker, 
				object fixExecDestinationListed, 
				object fixExecDestinationUnlisted, 
				object fixHandleInstListed, 
				object fixHandleInstUnlisted, 
				object fixIoiRoutingId, 
				object fixIoiRoutingType, 
				object fixNetCommissionType, 
				object fixNoteTagId, 
				object fixOnBehalfOf, 
				object fixOnBehalfOfSub, 
				object fixOrderIdFormat, 
				object fixPassiveTag, 
				object fixProactiveTag, 
				object fixSourceCompany, 
				object fixSourceId, 
				object fixSourceTrader, 
				object fixTargetCompany, 
				object fixTargetLocationId, 
				object fixTargetTrader, 
				object fixVersion, 
				object isBroker, 
				object isCancelAllowed, 
				object isCancelReplaceAllowed, 
				object isEcn, 
				object isExchange, 
				object isInternal, 
				object isIoiAllowed, 
				object isLimitPricingAllowed, 
				object isMarketOnClosePricingAllowed, 
				object isMarketPricingAllowed, 
				object isSystemUp, 
				object isTagEligible, 
				object isTradeAwayAllowed, 
				object isUnsolicitedTradeAllowed, 
				object lotSize, 
				object maximumQuantityListedLimit, 
				object maximumQuantityListedMarket, 
				object maximumQuantityUnlistedLimit, 
				object maximumQuantityUnlistedMarket, 
				global::System.DateTime modifiedTime, 
				object name, 
				object newOrderCustomFixTag, 
				object oatsDepartmentId, 
				object oatsDestinationCode, 
				object oatsReceivingMpi, 
				object oatsRouteMethod, 
				object oatsRoutingMpi, 
				object oatsSentMpi, 
				object oatsTerminalId, 
				object onCloseCancelTime, 
				object onCloseOrderTime, 
				object perShareUsageFee, 
				object postMarketLogic, 
				object primaryBackupDestinationId, 
				object secondaryBackupDestinationId, 
				object selectnetFlag, 
				object shortName, 
				object sourceId0, 
				object sourceId1, 
				object sourceId2, 
				object sourceId3, 
				object sourceId4, 
				object sourceId5, 
				object sourceId6, 
				object sourceId7, 
				object uniqueShortName)
	{
		base.Channel.StoreDestination(cancelCustomFixTag, clearingFirmId, configurationId, destinationId, externalId0, externalId1, fixAccount, fixAccountSuffixLength, fixExchangeMnemonic, fixExecBroker, fixExecDestinationListed, fixExecDestinationUnlisted, fixHandleInstListed, fixHandleInstUnlisted, fixIoiRoutingId, fixIoiRoutingType, fixNetCommissionType, fixNoteTagId, fixOnBehalfOf, fixOnBehalfOfSub, fixOrderIdFormat, fixPassiveTag, fixProactiveTag, fixSourceCompany, fixSourceId, fixSourceTrader, fixTargetCompany, fixTargetLocationId, fixTargetTrader, fixVersion, isBroker, isCancelAllowed, isCancelReplaceAllowed, isEcn, isExchange, isInternal, isIoiAllowed, isLimitPricingAllowed, isMarketOnClosePricingAllowed, isMarketPricingAllowed, isSystemUp, isTagEligible, isTradeAwayAllowed, isUnsolicitedTradeAllowed, lotSize, maximumQuantityListedLimit, maximumQuantityListedMarket, maximumQuantityUnlistedLimit, maximumQuantityUnlistedMarket, modifiedTime, name, newOrderCustomFixTag, oatsDepartmentId, oatsDestinationCode, oatsReceivingMpi, oatsRouteMethod, oatsRoutingMpi, oatsSentMpi, oatsTerminalId, onCloseCancelTime, onCloseOrderTime, perShareUsageFee, postMarketLogic, primaryBackupDestinationId, secondaryBackupDestinationId, selectnetFlag, shortName, sourceId0, sourceId1, sourceId2, sourceId3, sourceId4, sourceId5, sourceId6, sourceId7, uniqueShortName);
	}
	
	public void StoreDestinationExchangeMap(string configurationId, global::System.Guid destinationExchangeMapId, object[] destinationKey, object[] exchangeKey, object externalId0)
	{
		base.Channel.StoreDestinationExchangeMap(configurationId, destinationExchangeMapId, destinationKey, exchangeKey, externalId0);
	}
	
	public void StoreDestinationOrder(
				object canceledQuantity, 
				object canceledTime, 
				string configurationId, 
				global::System.DateTime createdTime, 
				object[] destinationKey, 
				global::System.Guid destinationOrderId, 
				object externalId0, 
				object isCanceledByUser, 
				object isHidden, 
				object limitPrice, 
				global::System.DateTime modifiedTime, 
				object orderedQuantity, 
				object[] orderTypeKey, 
				object[] securityKeyBySecurityId, 
				object[] securityKeyBySettlementId, 
				global::System.DateTime settlementDate, 
				object[] sideKey, 
				object[] stateKey, 
				object[] statusKey, 
				object stopPrice, 
				object[] timeInForceKey, 
				global::System.DateTime tradeDate, 
				object[] traderKey, 
				object[] userKeyByCreatedUserId, 
				object[] userKeyByModifiedUserId, 
				object[] workingOrderKey)
	{
		base.Channel.StoreDestinationOrder(canceledQuantity, canceledTime, configurationId, createdTime, destinationKey, destinationOrderId, externalId0, isCanceledByUser, isHidden, limitPrice, modifiedTime, orderedQuantity, orderTypeKey, securityKeyBySecurityId, securityKeyBySettlementId, settlementDate, sideKey, stateKey, statusKey, stopPrice, timeInForceKey, tradeDate, traderKey, userKeyByCreatedUserId, userKeyByModifiedUserId, workingOrderKey);
	}
	
	public void StoreEntity(
				string configurationId, 
				global::System.DateTime createdTime, 
				object description, 
				global::System.Guid entityId, 
				object externalId0, 
				object externalId1, 
				object externalId2, 
				object externalId3, 
				object externalId4, 
				object externalId5, 
				object externalId6, 
				object externalId7, 
				object[] imageKey, 
				object isContainer, 
				object isHidden, 
				object isReadOnly, 
				global::System.DateTime modifiedTime, 
				object name, 
				object[] typeKey)
	{
		base.Channel.StoreEntity(configurationId, createdTime, description, entityId, externalId0, externalId1, externalId2, externalId3, externalId4, externalId5, externalId6, externalId7, imageKey, isContainer, isHidden, isReadOnly, modifiedTime, name, typeKey);
	}
	
	public void StoreEntityTree(string configurationId, object[] entityKeyByChildId, object[] entityKeyByParentId, global::System.Guid entityTreeId, object externalId0)
	{
		base.Channel.StoreEntityTree(configurationId, entityKeyByChildId, entityKeyByParentId, entityTreeId, externalId0);
	}
	
	public void StoreEquity(string configurationId, object[] exchangeKey, object issuerId, object[] securityKeyByEquityId, object[] securityKeyBySettlementId, object sharesOutstanding)
	{
		base.Channel.StoreEquity(configurationId, exchangeKey, issuerId, securityKeyByEquityId, securityKeyBySettlementId, sharesOutstanding);
	}
	
	public void StoreExchange(string configurationId, object[] countryKey, global::System.Guid exchangeId, object externalId0, object externalId1, object externalId2, object externalId3, object isListed, object mnemonic, object name)
	{
		base.Channel.StoreExchange(configurationId, countryKey, exchangeId, externalId0, externalId1, externalId2, externalId3, isListed, mnemonic, name);
	}
	
	public void StoreExecution(
				object accruedInterest, 
				object[] brokerAccountKey, 
				object[] brokerKey, 
				object commission, 
				string configurationId, 
				global::System.DateTime createdTime, 
				object[] destinationOrderKey, 
				global::System.Guid executionId, 
				object executionPrice, 
				object executionQuantity, 
				object externalId0, 
				object isHidden, 
				object modifiedTime, 
				object originalDestinationOrderId, 
				object originalPrice, 
				object originalQuantity, 
				object sourceExecutionId, 
				object[] stateKeyByDestinationStateCode, 
				object[] stateKeyBySourceStateCode, 
				object userFee0, 
				object userFee1, 
				object userFee2, 
				object userFee3, 
				object[] userKeyByCreatedUserId, 
				object[] userKeyByModifiedUserId)
	{
		base.Channel.StoreExecution(accruedInterest, brokerAccountKey, brokerKey, commission, configurationId, createdTime, destinationOrderKey, executionId, executionPrice, executionQuantity, externalId0, isHidden, modifiedTime, originalDestinationOrderId, originalPrice, originalQuantity, sourceExecutionId, stateKeyByDestinationStateCode, stateKeyBySourceStateCode, userFee0, userFee1, userFee2, userFee3, userKeyByCreatedUserId, userKeyByModifiedUserId);
	}
	
	public void StoreFolder(string configurationId, object[] entityKey)
	{
		base.Channel.StoreFolder(configurationId, entityKey);
	}
	
	public void StoreGroupAccount(object[] accountKey, string configurationId)
	{
		base.Channel.StoreGroupAccount(accountKey, configurationId);
	}
	
	public void StoreHoliday(string configurationId, object[] countryKey, global::System.DateTime date, object externalId0, object externalId1, global::System.Guid holidayId, object[] holidayTypeKey)
	{
		base.Channel.StoreHoliday(configurationId, countryKey, date, externalId0, externalId1, holidayId, holidayTypeKey);
	}
	
	public void StoreHolidayType(string configurationId, object description, object externalId0, object externalId1, object externalId2, object externalId3, global::Teraque.HolidayTypeCode holidayTypeCode)
	{
		base.Channel.StoreHolidayType(configurationId, description, externalId0, externalId1, externalId2, externalId3, holidayTypeCode);
	}
	
	public void StoreImage(string configurationId, object externalId0, object image, global::System.Guid imageId)
	{
		base.Channel.StoreImage(configurationId, externalId0, image, imageId);
	}
	
	public void StoreIndustry(string configurationId, object externalId0, object externalId1, object[] industryClassificationKey, global::System.Guid industryId, object mnemonic, object name)
	{
		base.Channel.StoreIndustry(configurationId, externalId0, externalId1, industryClassificationKey, industryId, mnemonic, name);
	}
	
	public void StoreIndustryClassification(string configurationId, object externalId0, object externalId1, global::System.Guid industryClassificationId, object mnemonic, object name)
	{
		base.Channel.StoreIndustryClassification(configurationId, externalId0, externalId1, industryClassificationId, mnemonic, name);
	}
	
	public void StoreIndustryLeaf(string configurationId, object externalId0, object externalId1, object[] industryKey, global::System.Guid industryLeafId, object[] securityKey)
	{
		base.Channel.StoreIndustryLeaf(configurationId, externalId0, externalId1, industryKey, industryLeafId, securityKey);
	}
	
	public void StoreIndustryTree(string configurationId, object externalId0, object externalId1, object[] industryKeyByChildId, object[] industryKeyByParentId, global::System.Guid industryTreeId)
	{
		base.Channel.StoreIndustryTree(configurationId, externalId0, externalId1, industryKeyByChildId, industryKeyByParentId, industryTreeId);
	}
	
	public void StoreInstitution(string configurationId, object[] sourceKey)
	{
		base.Channel.StoreInstitution(configurationId, sourceKey);
	}
	
	public void StoreIssuer(string configurationId, object[] entityKey)
	{
		base.Channel.StoreIssuer(configurationId, entityKey);
	}
	
	public void StoreLotHandling(string configurationId, object description, object externalId0, object externalId1, object externalId2, object externalId3, global::Teraque.LotHandlingCode lotHandlingCode, object mnemonic)
	{
		base.Channel.StoreLotHandling(configurationId, description, externalId0, externalId1, externalId2, externalId3, lotHandlingCode, mnemonic);
	}
	
	public void StoreMajorInstrumentType(string configurationId, object externalId0, object externalId1, global::System.Guid majorInstrumentTypeId, object mnemonic, object name)
	{
		base.Channel.StoreMajorInstrumentType(configurationId, externalId0, externalId1, majorInstrumentTypeId, mnemonic, name);
	}
	
	public void StoreMatch(object[] blotterKey, string configurationId, global::System.Guid contraMatchId, global::System.Guid contraOrderId, object heatIndex, object heatIndexDetails, global::System.DateTime matchedTime, global::System.Guid matchId, object[] statusKey, object[] workingOrderKey)
	{
		base.Channel.StoreMatch(blotterKey, configurationId, contraMatchId, contraOrderId, heatIndex, heatIndexDetails, matchedTime, matchId, statusKey, workingOrderKey);
	}
	
	public void StoreMinorInstrumentType(string configurationId, object externalId0, object externalId1, global::System.Guid minorInstrumentTypeId, object mnemonic, object name)
	{
		base.Channel.StoreMinorInstrumentType(configurationId, externalId0, externalId1, minorInstrumentTypeId, mnemonic, name);
	}
	
	public void StoreMssaBucket(string configurationId, object externalId0, object externalId1, global::System.Guid mssaBucketId, object name)
	{
		base.Channel.StoreMssaBucket(configurationId, externalId0, externalId1, mssaBucketId, name);
	}
	
	public void StoreNegotiation(object[] blotterKey, string configurationId, object[] executionKey, object isRead, object[] matchKey, global::System.Guid negotiationId, object quantity, object[] statusKey)
	{
		base.Channel.StoreNegotiation(blotterKey, configurationId, executionKey, isRead, matchKey, negotiationId, quantity, statusKey);
	}
	
	public void StoreOrderType(string configurationId, object description, object externalId0, object externalId1, object externalId2, object externalId3, object mnemonic, global::Teraque.OrderTypeCode orderTypeCode)
	{
		base.Channel.StoreOrderType(configurationId, description, externalId0, externalId1, externalId2, externalId3, mnemonic, orderTypeCode);
	}
	
	public void StorePartyType(string configurationId, object description, object externalId0, object externalId1, object mnemonic, global::Teraque.PartyTypeCode partyTypeCode)
	{
		base.Channel.StorePartyType(configurationId, description, externalId0, externalId1, mnemonic, partyTypeCode);
	}
	
	public void StorePosition(object[] accountKey, string configurationId, object externalId0, object externalId1, object externalId2, object externalId3, global::System.Guid positionId, object[] positionTypeKey, object[] securityKey)
	{
		base.Channel.StorePosition(accountKey, configurationId, externalId0, externalId1, externalId2, externalId3, positionId, positionTypeKey, securityKey);
	}
	
	public void StorePositionSeries(object[] accountKey, object baseCost, object basePrice, string configurationId, global::System.DateTime date, object externalId0, object externalId1, object localCost, object localPrice, object[] positionKey, global::System.Guid positionSeriesId, object[] positionTypeKey, object[] securityKey, object[] securitySeriesKey)
	{
		base.Channel.StorePositionSeries(accountKey, baseCost, basePrice, configurationId, date, externalId0, externalId1, localCost, localPrice, positionKey, positionSeriesId, positionTypeKey, securityKey, securitySeriesKey);
	}
	
	public void StorePositionType(string configurationId, object externalId0, object externalId1, object externalId2, object externalId3, object mnemonic, global::Teraque.PositionTypeCode positionTypeCode, object sign)
	{
		base.Channel.StorePositionType(configurationId, externalId0, externalId1, externalId2, externalId3, mnemonic, positionTypeCode, sign);
	}
	
	public void StorePrice(
				object askPrice, 
				object askSize, 
				object bidPrice, 
				object bidSize, 
				object closePrice, 
				string configurationId, 
				object highPrice, 
				object lastPrice, 
				object lastSize, 
				object lowPrice, 
				object openPrice, 
				object priceChange, 
				object[] securityKeyByCurrencyId, 
				object[] securityKeyBySecurityId, 
				object volume, 
				object volumeWeightedAveragePrice)
	{
		base.Channel.StorePrice(askPrice, askSize, bidPrice, bidSize, closePrice, configurationId, highPrice, lastPrice, lastSize, lowPrice, openPrice, priceChange, securityKeyByCurrencyId, securityKeyBySecurityId, volume, volumeWeightedAveragePrice);
	}
	
	public void StoreProperty(string configurationId, object externalId0, object name, global::System.Guid propertyId)
	{
		base.Channel.StoreProperty(configurationId, externalId0, name, propertyId);
	}
	
	public void StorePropertyStore(string configurationId, object[] entityKey, object externalId0, object[] propertyKey, global::System.Guid propertyStoreId, object value)
	{
		base.Channel.StorePropertyStore(configurationId, entityKey, externalId0, propertyKey, propertyStoreId, value);
	}
	
	public void StoreProvince(object abbreviation, string configurationId, object[] countryKey, object externalId0, object externalId1, object name, global::System.Guid provinceId)
	{
		base.Channel.StoreProvince(abbreviation, configurationId, countryKey, externalId0, externalId1, name, provinceId);
	}
	
	public void StoreSecurity(object averageDailyVolume, string configurationId, object[] countryKey, object[] entityKey, object isDerivative, object[] issuerKey, object logo, object[] majorInstrumentTypeKey, object marketCapitalization, object minimumQuantity, object[] minorInstrumentTypeKey, object priceFactor, object quantityFactor, object symbol, object[] volumeCategoryKey)
	{
		base.Channel.StoreSecurity(averageDailyVolume, configurationId, countryKey, entityKey, isDerivative, issuerKey, logo, majorInstrumentTypeKey, marketCapitalization, minimumQuantity, minorInstrumentTypeKey, priceFactor, quantityFactor, symbol, volumeCategoryKey);
	}
	
	public void StoreSecuritySeries(
				object betaAdjustedKrd10Year, 
				object betaAdjustedKrd20Year, 
				object betaAdjustedKrd2Year, 
				object betaAdjustedKrd30Year, 
				object betaAdjustedKrd5Year, 
				object betaAdjustedKrd6Month, 
				string configurationId, 
				object coupon, 
				object[] creditRatingKeyByCreditRatingId0, 
				object[] creditRatingKeyByCreditRatingId1, 
				object[] creditRatingKeyByCreditRatingId2, 
				object[] creditRatingKeyByCreditRatingId3, 
				object[] creditRatingKeyByCreditRatingId4, 
				object[] creditRatingKeyByCreditRatingId5, 
				object currentYield, 
				global::System.DateTime date, 
				object effectiveConvexity, 
				object effectiveDuration, 
				object externalId0, 
				object externalId1, 
				object modifiedDurationToWorst, 
				object modifiedOptionAdjustedDuration, 
				object[] mssaBucketKey, 
				object optionAdjustedDuration, 
				object optionAdjustedSpread, 
				object optionAdjustedSpreadDuration, 
				object optionAdjustedYieldToWorst, 
				object[] securityKey, 
				global::System.Guid securitySeriesId, 
				object[] subordinateTypeKey, 
				object yearsToAverageLife, 
				object yearsToMaturity, 
				object yieldToEffectiveMaturity, 
				object yieldToMaturity, 
				object yieldToWorst)
	{
		base.Channel.StoreSecuritySeries(betaAdjustedKrd10Year, betaAdjustedKrd20Year, betaAdjustedKrd2Year, betaAdjustedKrd30Year, betaAdjustedKrd5Year, betaAdjustedKrd6Month, configurationId, coupon, creditRatingKeyByCreditRatingId0, creditRatingKeyByCreditRatingId1, creditRatingKeyByCreditRatingId2, creditRatingKeyByCreditRatingId3, creditRatingKeyByCreditRatingId4, creditRatingKeyByCreditRatingId5, currentYield, date, effectiveConvexity, effectiveDuration, externalId0, externalId1, modifiedDurationToWorst, modifiedOptionAdjustedDuration, mssaBucketKey, optionAdjustedDuration, optionAdjustedSpread, optionAdjustedSpreadDuration, optionAdjustedYieldToWorst, securityKey, securitySeriesId, subordinateTypeKey, yearsToAverageLife, yearsToMaturity, yieldToEffectiveMaturity, yieldToMaturity, yieldToWorst);
	}
	
	public void StoreSettlementUnit(string configurationId, object description, object externalId0, object name, global::Teraque.SettlementUnitCode settlementUnitCode)
	{
		base.Channel.StoreSettlementUnit(configurationId, description, externalId0, name, settlementUnitCode);
	}
	
	public void StoreSide(object cashSign, string configurationId, object description, object externalId0, object externalId1, object externalId2, object externalId3, object image, object mnemonic, object quantitySign, global::Teraque.SideCode sideCode, object sortOrder)
	{
		base.Channel.StoreSide(cashSign, configurationId, description, externalId0, externalId1, externalId2, externalId3, image, mnemonic, quantitySign, sideCode, sortOrder);
	}
	
	public void StoreSingleAccount(object[] accountKey, object address0, object address1, object city, string configurationId, object[] countryKey, object[] lotHandlingKey, object postalCode, object[] provinceKey)
	{
		base.Channel.StoreSingleAccount(accountKey, address0, address1, city, configurationId, countryKey, lotHandlingKey, postalCode, provinceKey);
	}
	
	public void StoreSource(object advertisementSchemaId, object[] blotterKey, object buyMarketValueThreshold, object buyQuantityThreshold, string configurationId, global::Teraque.PartyTypeCode partyTypeCode, object sellMarketValueThreshold, object sellQuantityThreshold, object shortName)
	{
		base.Channel.StoreSource(advertisementSchemaId, blotterKey, buyMarketValueThreshold, buyQuantityThreshold, configurationId, partyTypeCode, sellMarketValueThreshold, sellQuantityThreshold, shortName);
	}
	
	public void StoreSourceOrder(
				string configurationId, 
				global::System.DateTime createdTime, 
				object[] destinationKey, 
				object externalId0, 
				object isAdvertised, 
				object isAutoExecute, 
				object isCanceled, 
				object isHeld, 
				object isSteppedIn, 
				object isSubmitted, 
				object limitPrice, 
				object maximumVolatility, 
				global::System.DateTime modifiedTime, 
				object newsFreeTime, 
				object orderedQuantity, 
				object[] orderTypeKey, 
				object receivedTime, 
				object[] securityKeyBySecurityId, 
				object[] securityKeyBySettlementId, 
				object settlementDate, 
				object[] sideKey, 
				global::System.Guid sourceOrderId, 
				object startTime, 
				object[] statusKey, 
				object stopPrice, 
				object stopTime, 
				object submittedQuantity, 
				object submittedTime, 
				object targetPrice, 
				object[] timeInForceKey, 
				object tradeDate, 
				object[] userKeyByCreatedUserId, 
				object[] userKeyByModifiedUserId, 
				object[] workingOrderKey)
	{
		base.Channel.StoreSourceOrder(configurationId, createdTime, destinationKey, externalId0, isAdvertised, isAutoExecute, isCanceled, isHeld, isSteppedIn, isSubmitted, limitPrice, maximumVolatility, modifiedTime, newsFreeTime, orderedQuantity, orderTypeKey, receivedTime, securityKeyBySecurityId, securityKeyBySettlementId, settlementDate, sideKey, sourceOrderId, startTime, statusKey, stopPrice, stopTime, submittedQuantity, submittedTime, targetPrice, timeInForceKey, tradeDate, userKeyByCreatedUserId, userKeyByModifiedUserId, workingOrderKey);
	}
	
	public void StoreState(string configurationId, object description, object externalId0, object externalId1, object externalId2, object externalId3, object mnemonic, global::Teraque.StateCode stateCode)
	{
		base.Channel.StoreState(configurationId, description, externalId0, externalId1, externalId2, externalId3, mnemonic, stateCode);
	}
	
	public void StoreStatus(string configurationId, object description, object externalId0, object externalId1, object externalId2, object externalId3, object image, object mnemonic, object sortOrder, global::Teraque.StatusCode statusCode)
	{
		base.Channel.StoreStatus(configurationId, description, externalId0, externalId1, externalId2, externalId3, image, mnemonic, sortOrder, statusCode);
	}
	
	public void StoreSubordinateType(string configurationId, object description, object externalId0, object externalId1, global::Teraque.SubordinateTypeCode subordinateTypeCode)
	{
		base.Channel.StoreSubordinateType(configurationId, description, externalId0, externalId1, subordinateTypeCode);
	}
	
	public void StoreTaxLot(object[] accountKey, object baseCost, string configurationId, object externalId0, object externalId1, object localCost, object[] positionKey, object[] positionTypeKey, object[] securityKey, object settlementDate, global::System.Guid taxLotId, object tradeDate)
	{
		base.Channel.StoreTaxLot(accountKey, baseCost, configurationId, externalId0, externalId1, localCost, positionKey, positionTypeKey, securityKey, settlementDate, taxLotId, tradeDate);
	}
	
	public void StoreTaxLotSeries(
				object[] accountKey, 
				string configurationId, 
				global::System.DateTime date, 
				object dealSpread, 
				object duration, 
				object exposureWeight, 
				object externalId0, 
				object externalId1, 
				object lotExposureBase, 
				object lotExposureLocal, 
				object lotMarketValueBase, 
				object lotMarketValueLocal, 
				object lotQuantity, 
				object marketWeight, 
				object monthToDayLinkedReturn, 
				object monthToDayProfitAndLoss, 
				object netAssetValue, 
				object originalBuyTransaction, 
				object[] positionSeriesKey, 
				object[] positionTypeKey, 
				object qualityLabel, 
				object quantity, 
				object quarterToDayLinkedReturn, 
				object quarterToDayProfitAndLoss, 
				object ratingScore, 
				object sector, 
				object[] securityKey, 
				object[] securitySeriesKey, 
				object strategy, 
				object strategyDescription, 
				object sumExposure, 
				object sumMarketValue, 
				object[] taxLotKey, 
				global::System.Guid taxLotSeriesId, 
				object trade, 
				object weight, 
				object yearToDayLinkedReturn, 
				object yearToDayProfitAndLoss)
	{
		base.Channel.StoreTaxLotSeries(accountKey, configurationId, date, dealSpread, duration, exposureWeight, externalId0, externalId1, lotExposureBase, lotExposureLocal, lotMarketValueBase, lotMarketValueLocal, lotQuantity, marketWeight, monthToDayLinkedReturn, monthToDayProfitAndLoss, netAssetValue, originalBuyTransaction, positionSeriesKey, positionTypeKey, qualityLabel, quantity, quarterToDayLinkedReturn, quarterToDayProfitAndLoss, ratingScore, sector, securityKey, securitySeriesKey, strategy, strategyDescription, sumExposure, sumMarketValue, taxLotKey, taxLotSeriesId, trade, weight, yearToDayLinkedReturn, yearToDayProfitAndLoss);
	}
	
	public void StoreTimeInForce(string configurationId, object description, object externalId0, object externalId1, object externalId2, object externalId3, object mnemonic, object sortOrder, global::Teraque.TimeInForceCode timeInForceCode)
	{
		base.Channel.StoreTimeInForce(configurationId, description, externalId0, externalId1, externalId2, externalId3, mnemonic, sortOrder, timeInForceCode);
	}
	
	public void StoreTimeUnit(string configurationId, object externalId0, object inDays, object name, global::Teraque.TimeUnitCode timeUnitCode)
	{
		base.Channel.StoreTimeUnit(configurationId, externalId0, inDays, name, timeUnitCode);
	}
	
	public void StoreTrader(
				object address1, 
				object address2, 
				object address3, 
				object[] blotterKey, 
				object commissionMaximum, 
				object commissionMinimum, 
				object commissionRate, 
				object commissionRateTypeCode, 
				string configurationId, 
				global::Teraque.CrossingCode crossingCode, 
				object defaultAccountId, 
				object emailAddress, 
				object fixAccountId, 
				object isAgencyMatch, 
				object isBrokerMatch, 
				object isCommissionChangeAllowed, 
				object isEditExecutionsAllowed, 
				object isHedgeMatch, 
				object isHeld, 
				object isInstitutionMatch, 
				object lastDeletedOrder, 
				object lastFilledOrder, 
				object lastFilledSourceOrder, 
				object lastTrade, 
				object lotSizeDefault, 
				object marketSleep, 
				object maximumVolatilityDefault, 
				object newsFreeTimeDefault, 
				object oatsAccountType, 
				object oatsOrigDeptId, 
				object orderMaximumLimitDelta, 
				object orderMaximumMarketValue, 
				object orderMaximumQuantity, 
				object orderWarningMarketValue, 
				object orderWarningQuantity, 
				object phone, 
				object reviewWindow, 
				object scraperConfigurationString, 
				object startTimeDefault, 
				object stopTimeDefault, 
				object tagId, 
				object[] userKey)
	{
		base.Channel.StoreTrader(address1, address2, address3, blotterKey, commissionMaximum, commissionMinimum, commissionRate, commissionRateTypeCode, configurationId, crossingCode, defaultAccountId, emailAddress, fixAccountId, isAgencyMatch, isBrokerMatch, isCommissionChangeAllowed, isEditExecutionsAllowed, isHedgeMatch, isHeld, isInstitutionMatch, lastDeletedOrder, lastFilledOrder, lastFilledSourceOrder, lastTrade, lotSizeDefault, marketSleep, maximumVolatilityDefault, newsFreeTimeDefault, oatsAccountType, oatsOrigDeptId, orderMaximumLimitDelta, orderMaximumMarketValue, orderMaximumQuantity, orderWarningMarketValue, orderWarningQuantity, phone, reviewWindow, scraperConfigurationString, startTimeDefault, stopTimeDefault, tagId, userKey);
	}
	
	public void StoreTraderVolumeSetting(object autoExecuteQuantity, string configurationId, object externalId0, object thresholdQuantity, object[] traderKey, global::System.Guid traderVolumeSettingId, object[] volumeCategoryKey)
	{
		base.Channel.StoreTraderVolumeSetting(autoExecuteQuantity, configurationId, externalId0, thresholdQuantity, traderKey, traderVolumeSettingId, volumeCategoryKey);
	}
	
	public void StoreType(string configurationId, object description, object externalId0, object[] imageKey, object type, global::System.Guid typeId)
	{
		base.Channel.StoreType(configurationId, description, externalId0, imageKey, type, typeId);
	}
	
	public void StoreUser(string configurationId, object distinguishedName, object[] entityKey, object isRemoved, object preferences)
	{
		base.Channel.StoreUser(configurationId, distinguishedName, entityKey, isRemoved, preferences);
	}
	
	public void StoreVolumeCategory(string configurationId, object description, object externalId0, object highVolumeRange, object lowVolumeRange, object mnemonic, global::Teraque.VolumeCategoryCode volumeCategoryCode)
	{
		base.Channel.StoreVolumeCategory(configurationId, description, externalId0, highVolumeRange, lowVolumeRange, mnemonic, volumeCategoryCode);
	}
	
	public void StoreWeekend(string configurationId, object externalId0, object externalId1, object userCode0, object userCode1, global::Teraque.WeekendCode weekendCode)
	{
		base.Channel.StoreWeekend(configurationId, externalId0, externalId1, userCode0, userCode1, weekendCode);
	}
	
	public void StoreWorkingOrder(
				object automaticQuantity, 
				object[] blotterKey, 
				string configurationId, 
				global::System.DateTime createdTime, 
				object[] crossingKey, 
				object[] destinationKey, 
				object externalId0, 
				object isAutomatic, 
				object isAwake, 
				object isBrokerMatch, 
				object isHedgeMatch, 
				object isInstitutionMatch, 
				object limitPrice, 
				global::System.DateTime modifiedTime, 
				object[] orderTypeKey, 
				object[] securityKeyBySecurityId, 
				object[] securityKeyBySettlementId, 
				global::System.DateTime settlementDate, 
				object[] sideKey, 
				object startTime, 
				object[] statusKey, 
				object stopPrice, 
				object stopTime, 
				object submittedQuantity, 
				object submittedTime, 
				object[] timeInForceKey, 
				global::System.DateTime tradeDate, 
				object uploadedTime, 
				object[] userKeyByCreatedUserId, 
				object[] userKeyByModifiedUserId, 
				global::System.Guid workingOrderId)
	{
		base.Channel.StoreWorkingOrder(automaticQuantity, blotterKey, configurationId, createdTime, crossingKey, destinationKey, externalId0, isAutomatic, isAwake, isBrokerMatch, isHedgeMatch, isInstitutionMatch, limitPrice, modifiedTime, orderTypeKey, securityKeyBySecurityId, securityKeyBySettlementId, settlementDate, sideKey, startTime, statusKey, stopPrice, stopTime, submittedQuantity, submittedTime, timeInForceKey, tradeDate, uploadedTime, userKeyByCreatedUserId, userKeyByModifiedUserId, workingOrderId);
	}
	
	public void UpdateAccount(object[] accountKey, string configurationId, object[] currencyKey, object[] entityKey, object mnemonic)
	{
		base.Channel.UpdateAccount(accountKey, configurationId, currencyKey, entityKey, mnemonic);
	}
	
	public void UpdateAccountSeries(
				object[] accountKey, 
				object[] accountSeriesKey, 
				string configurationId, 
				object date, 
				object monthToDayLinkedReturn, 
				object monthToDayProfitAndLoss, 
				object quarterToDayLinkedReturn, 
				object quarterToDayProfitAndLoss, 
				object totalExposureBase, 
				object totalExposureLocal, 
				object totalMarketValueBase, 
				object totalMarketValueLocal, 
				object trailingOneDayLinkedReturn, 
				object trailingOneDayProfitAndLoss, 
				object trailingOneMonthLinkedReturn, 
				object trailingOneMonthProfitAndLoss, 
				object trailingOneYearLinkedReturn, 
				object trailingOneYearProfitAndLoss, 
				object trailingSixMonthLinkedReturn, 
				object trailingSixMonthProfitAndLoss, 
				object trailingThreeMonthLinkedReturn, 
				object trailingThreeMonthProfitAndLoss, 
				object yearToDayLinkedReturn, 
				object yearToDayProfitAndLoss)
	{
		base.Channel.UpdateAccountSeries(accountKey, accountSeriesKey, configurationId, date, monthToDayLinkedReturn, monthToDayProfitAndLoss, quarterToDayLinkedReturn, quarterToDayProfitAndLoss, totalExposureBase, totalExposureLocal, totalMarketValueBase, totalMarketValueLocal, trailingOneDayLinkedReturn, trailingOneDayProfitAndLoss, trailingOneMonthLinkedReturn, trailingOneMonthProfitAndLoss, trailingOneYearLinkedReturn, trailingOneYearProfitAndLoss, trailingSixMonthLinkedReturn, trailingSixMonthProfitAndLoss, trailingThreeMonthLinkedReturn, trailingThreeMonthProfitAndLoss, yearToDayLinkedReturn, yearToDayProfitAndLoss);
	}
	
	public void UpdateAllocation(
				object[] accountKey, 
				object accruedInterest, 
				object allocationId, 
				object[] allocationKey, 
				object commission, 
				string configurationId, 
				object createdTime, 
				object externalId0, 
				object modifiedTime, 
				object positionTypeCode, 
				object price, 
				object quantity, 
				object[] securityKeyBySecurityId, 
				object[] securityKeyBySettlementId, 
				object settlementDate, 
				object[] sideKey, 
				object tradeDate, 
				object userFee0, 
				object userFee1, 
				object userFee2, 
				object userFee3, 
				object[] userKeyByCreatedUserId, 
				object[] userKeyByModifiedUserId, 
				object[] workingOrderKey)
	{
		base.Channel.UpdateAllocation(accountKey, accruedInterest, allocationId, allocationKey, commission, configurationId, createdTime, externalId0, modifiedTime, positionTypeCode, price, quantity, securityKeyBySecurityId, securityKeyBySettlementId, settlementDate, sideKey, tradeDate, userFee0, userFee1, userFee2, userFee3, userKeyByCreatedUserId, userKeyByModifiedUserId, workingOrderKey);
	}
	
	public void UpdateBlotter(object[] blotterKey, string configurationId, object[] entityKey, object[] partyTypeKey)
	{
		base.Channel.UpdateBlotter(blotterKey, configurationId, entityKey, partyTypeKey);
	}
	
	public void UpdateBlotterDestinationMap(object blotterDestinationMapId, object[] blotterDestinationMapKey, object[] blotterKey, string configurationId, object[] destinationKey, object externalId0)
	{
		base.Channel.UpdateBlotterDestinationMap(blotterDestinationMapId, blotterDestinationMapKey, blotterKey, configurationId, destinationKey, externalId0);
	}
	
	public void UpdateBranch(object[] blotterKey, object[] branchKey, string configurationId, object shortName)
	{
		base.Channel.UpdateBranch(blotterKey, branchKey, configurationId, shortName);
	}
	
	public void UpdateBroker(object[] brokerKey, string configurationId, object connected, object phone, object[] sourceKey, object symbol)
	{
		base.Channel.UpdateBroker(brokerKey, configurationId, connected, phone, sourceKey, symbol);
	}
	
	public void UpdateBrokerAccount(object brokerAccountId, object[] brokerAccountKey, object[] brokerKey, string configurationId, object description, object externalId0, object externalId1, object externalId2, object externalId3, object mnemonic, object[] traderKey)
	{
		base.Channel.UpdateBrokerAccount(brokerAccountId, brokerAccountKey, brokerKey, configurationId, description, externalId0, externalId1, externalId2, externalId3, mnemonic, traderKey);
	}
	
	public void UpdateClearingBroker(object[] brokerKey, object[] clearingBrokerKey, string configurationId)
	{
		base.Channel.UpdateClearingBroker(brokerKey, clearingBrokerKey, configurationId);
	}
	
	public void UpdateCommissionSchedule(object commissionScheduleId, object[] commissionScheduleKey, string configurationId, object externalId0, object name)
	{
		base.Channel.UpdateCommissionSchedule(commissionScheduleId, commissionScheduleKey, configurationId, externalId0, name);
	}
	
	public void UpdateCommissionTranche(object[] commissionScheduleKey, object commissionTrancheId, object[] commissionTrancheKey, object[] commissionTypeKey, object[] commissionUnitKey, string configurationId, object endRange, object externalId0, object startRange, object value)
	{
		base.Channel.UpdateCommissionTranche(commissionScheduleKey, commissionTrancheId, commissionTrancheKey, commissionTypeKey, commissionUnitKey, configurationId, endRange, externalId0, startRange, value);
	}
	
	public void UpdateCommissionType(object commissionTypeCode, object[] commissionTypeKey, string configurationId, object description, object externalId0, object name)
	{
		base.Channel.UpdateCommissionType(commissionTypeCode, commissionTypeKey, configurationId, description, externalId0, name);
	}
	
	public void UpdateCommissionUnit(object commissionUnitCode, object[] commissionUnitKey, string configurationId, object description, object externalId0, object name)
	{
		base.Channel.UpdateCommissionUnit(commissionUnitCode, commissionUnitKey, configurationId, description, externalId0, name);
	}
	
	public void UpdateComplianceOfficer(object[] complianceOfficerKey, string configurationId, object[] userKey)
	{
		base.Channel.UpdateComplianceOfficer(complianceOfficerKey, configurationId, userKey);
	}
	
	public void UpdateCondition(object conditionCode, object[] conditionKey, string configurationId, object description, object externalId0, object externalId1, object externalId2, object externalId3, object mnemonic)
	{
		base.Channel.UpdateCondition(conditionCode, conditionKey, configurationId, description, externalId0, externalId1, externalId2, externalId3, mnemonic);
	}
	
	public void UpdateConfiguration(object configurationId, object[] configurationKey, object indexName, object relationName)
	{
		base.Channel.UpdateConfiguration(configurationId, configurationKey, indexName, relationName);
	}
	
	public void UpdateCountry(object abbreviation, string configurationId, object countryId, object[] countryKey, object externalId0, object externalId1, object name)
	{
		base.Channel.UpdateCountry(abbreviation, configurationId, countryId, countryKey, externalId0, externalId1, name);
	}
	
	public void UpdateCreditRating(string configurationId, object creditRatingId, object[] creditRatingKey, object[] creditRatingServiceKey, object externalId0, object externalId1, object scale, object value)
	{
		base.Channel.UpdateCreditRating(configurationId, creditRatingId, creditRatingKey, creditRatingServiceKey, externalId0, externalId1, scale, value);
	}
	
	public void UpdateCreditRatingService(string configurationId, object creditRatingServiceId, object[] creditRatingServiceKey, object externalId0, object externalId1, object name)
	{
		base.Channel.UpdateCreditRatingService(configurationId, creditRatingServiceId, creditRatingServiceKey, externalId0, externalId1, name);
	}
	
	public void UpdateCrossing(string configurationId, object crossingCode, object[] crossingKey, object description, object externalId0, object externalId1, object name)
	{
		base.Channel.UpdateCrossing(configurationId, crossingCode, crossingKey, description, externalId0, externalId1, name);
	}
	
	public void UpdateCurrency(string configurationId, object[] currencyKey, object[] securityKey)
	{
		base.Channel.UpdateCurrency(configurationId, currencyKey, securityKey);
	}
	
	public void UpdateDebt(string configurationId, object[] debtKey, object exdividendDays, object faceOutstanding, object firstCoupon, object frequency, object issuePrice, object maturityDate, object redemptionValue, object[] securityKeyByDebtId, object[] securityKeyBySettlementId, object[] weekendKey)
	{
		base.Channel.UpdateDebt(configurationId, debtKey, exdividendDays, faceOutstanding, firstCoupon, frequency, issuePrice, maturityDate, redemptionValue, securityKeyByDebtId, securityKeyBySettlementId, weekendKey);
	}
	
	public void UpdateDestination(
				object cancelCustomFixTag, 
				object clearingFirmId, 
				string configurationId, 
				object destinationId, 
				object[] destinationKey, 
				object externalId0, 
				object externalId1, 
				object fixAccount, 
				object fixAccountSuffixLength, 
				object fixExchangeMnemonic, 
				object fixExecBroker, 
				object fixExecDestinationListed, 
				object fixExecDestinationUnlisted, 
				object fixHandleInstListed, 
				object fixHandleInstUnlisted, 
				object fixIoiRoutingId, 
				object fixIoiRoutingType, 
				object fixNetCommissionType, 
				object fixNoteTagId, 
				object fixOnBehalfOf, 
				object fixOnBehalfOfSub, 
				object fixOrderIdFormat, 
				object fixPassiveTag, 
				object fixProactiveTag, 
				object fixSourceCompany, 
				object fixSourceId, 
				object fixSourceTrader, 
				object fixTargetCompany, 
				object fixTargetLocationId, 
				object fixTargetTrader, 
				object fixVersion, 
				object isBroker, 
				object isCancelAllowed, 
				object isCancelReplaceAllowed, 
				object isEcn, 
				object isExchange, 
				object isInternal, 
				object isIoiAllowed, 
				object isLimitPricingAllowed, 
				object isMarketOnClosePricingAllowed, 
				object isMarketPricingAllowed, 
				object isSystemUp, 
				object isTagEligible, 
				object isTradeAwayAllowed, 
				object isUnsolicitedTradeAllowed, 
				object lotSize, 
				object maximumQuantityListedLimit, 
				object maximumQuantityListedMarket, 
				object maximumQuantityUnlistedLimit, 
				object maximumQuantityUnlistedMarket, 
				object modifiedTime, 
				object name, 
				object newOrderCustomFixTag, 
				object oatsDepartmentId, 
				object oatsDestinationCode, 
				object oatsReceivingMpi, 
				object oatsRouteMethod, 
				object oatsRoutingMpi, 
				object oatsSentMpi, 
				object oatsTerminalId, 
				object onCloseCancelTime, 
				object onCloseOrderTime, 
				object perShareUsageFee, 
				object postMarketLogic, 
				object primaryBackupDestinationId, 
				object secondaryBackupDestinationId, 
				object selectnetFlag, 
				object shortName, 
				object sourceId0, 
				object sourceId1, 
				object sourceId2, 
				object sourceId3, 
				object sourceId4, 
				object sourceId5, 
				object sourceId6, 
				object sourceId7, 
				object uniqueShortName)
	{
		base.Channel.UpdateDestination(cancelCustomFixTag, clearingFirmId, configurationId, destinationId, destinationKey, externalId0, externalId1, fixAccount, fixAccountSuffixLength, fixExchangeMnemonic, fixExecBroker, fixExecDestinationListed, fixExecDestinationUnlisted, fixHandleInstListed, fixHandleInstUnlisted, fixIoiRoutingId, fixIoiRoutingType, fixNetCommissionType, fixNoteTagId, fixOnBehalfOf, fixOnBehalfOfSub, fixOrderIdFormat, fixPassiveTag, fixProactiveTag, fixSourceCompany, fixSourceId, fixSourceTrader, fixTargetCompany, fixTargetLocationId, fixTargetTrader, fixVersion, isBroker, isCancelAllowed, isCancelReplaceAllowed, isEcn, isExchange, isInternal, isIoiAllowed, isLimitPricingAllowed, isMarketOnClosePricingAllowed, isMarketPricingAllowed, isSystemUp, isTagEligible, isTradeAwayAllowed, isUnsolicitedTradeAllowed, lotSize, maximumQuantityListedLimit, maximumQuantityListedMarket, maximumQuantityUnlistedLimit, maximumQuantityUnlistedMarket, modifiedTime, name, newOrderCustomFixTag, oatsDepartmentId, oatsDestinationCode, oatsReceivingMpi, oatsRouteMethod, oatsRoutingMpi, oatsSentMpi, oatsTerminalId, onCloseCancelTime, onCloseOrderTime, perShareUsageFee, postMarketLogic, primaryBackupDestinationId, secondaryBackupDestinationId, selectnetFlag, shortName, sourceId0, sourceId1, sourceId2, sourceId3, sourceId4, sourceId5, sourceId6, sourceId7, uniqueShortName);
	}
	
	public void UpdateDestinationExchangeMap(string configurationId, object destinationExchangeMapId, object[] destinationExchangeMapKey, object[] destinationKey, object[] exchangeKey, object externalId0)
	{
		base.Channel.UpdateDestinationExchangeMap(configurationId, destinationExchangeMapId, destinationExchangeMapKey, destinationKey, exchangeKey, externalId0);
	}
	
	public void UpdateDestinationOrder(
				object canceledQuantity, 
				object canceledTime, 
				string configurationId, 
				object createdTime, 
				object[] destinationKey, 
				object destinationOrderId, 
				object[] destinationOrderKey, 
				object externalId0, 
				object isCanceledByUser, 
				object isHidden, 
				object limitPrice, 
				object modifiedTime, 
				object orderedQuantity, 
				object[] orderTypeKey, 
				object[] securityKeyBySecurityId, 
				object[] securityKeyBySettlementId, 
				object settlementDate, 
				object[] sideKey, 
				object[] stateKey, 
				object[] statusKey, 
				object stopPrice, 
				object[] timeInForceKey, 
				object tradeDate, 
				object[] traderKey, 
				object[] userKeyByCreatedUserId, 
				object[] userKeyByModifiedUserId, 
				object[] workingOrderKey)
	{
		base.Channel.UpdateDestinationOrder(canceledQuantity, canceledTime, configurationId, createdTime, destinationKey, destinationOrderId, destinationOrderKey, externalId0, isCanceledByUser, isHidden, limitPrice, modifiedTime, orderedQuantity, orderTypeKey, securityKeyBySecurityId, securityKeyBySettlementId, settlementDate, sideKey, stateKey, statusKey, stopPrice, timeInForceKey, tradeDate, traderKey, userKeyByCreatedUserId, userKeyByModifiedUserId, workingOrderKey);
	}
	
	public void UpdateEntity(
				string configurationId, 
				object createdTime, 
				object description, 
				object entityId, 
				object[] entityKey, 
				object externalId0, 
				object externalId1, 
				object externalId2, 
				object externalId3, 
				object externalId4, 
				object externalId5, 
				object externalId6, 
				object externalId7, 
				object[] imageKey, 
				object isContainer, 
				object isHidden, 
				object isReadOnly, 
				object modifiedTime, 
				object name, 
				object[] typeKey)
	{
		base.Channel.UpdateEntity(configurationId, createdTime, description, entityId, entityKey, externalId0, externalId1, externalId2, externalId3, externalId4, externalId5, externalId6, externalId7, imageKey, isContainer, isHidden, isReadOnly, modifiedTime, name, typeKey);
	}
	
	public void UpdateEntityTree(string configurationId, object[] entityKeyByChildId, object[] entityKeyByParentId, object entityTreeId, object[] entityTreeKey, object externalId0)
	{
		base.Channel.UpdateEntityTree(configurationId, entityKeyByChildId, entityKeyByParentId, entityTreeId, entityTreeKey, externalId0);
	}
	
	public void UpdateEquity(string configurationId, object[] equityKey, object[] exchangeKey, object issuerId, object[] securityKeyByEquityId, object[] securityKeyBySettlementId, object sharesOutstanding)
	{
		base.Channel.UpdateEquity(configurationId, equityKey, exchangeKey, issuerId, securityKeyByEquityId, securityKeyBySettlementId, sharesOutstanding);
	}
	
	public void UpdateExchange(string configurationId, object[] countryKey, object exchangeId, object[] exchangeKey, object externalId0, object externalId1, object externalId2, object externalId3, object isListed, object mnemonic, object name)
	{
		base.Channel.UpdateExchange(configurationId, countryKey, exchangeId, exchangeKey, externalId0, externalId1, externalId2, externalId3, isListed, mnemonic, name);
	}
	
	public void UpdateExecution(
				object accruedInterest, 
				object[] brokerAccountKey, 
				object[] brokerKey, 
				object commission, 
				string configurationId, 
				object createdTime, 
				object[] destinationOrderKey, 
				object executionId, 
				object[] executionKey, 
				object executionPrice, 
				object executionQuantity, 
				object externalId0, 
				object isHidden, 
				object modifiedTime, 
				object originalDestinationOrderId, 
				object originalPrice, 
				object originalQuantity, 
				object sourceExecutionId, 
				object[] stateKeyByDestinationStateCode, 
				object[] stateKeyBySourceStateCode, 
				object userFee0, 
				object userFee1, 
				object userFee2, 
				object userFee3, 
				object[] userKeyByCreatedUserId, 
				object[] userKeyByModifiedUserId)
	{
		base.Channel.UpdateExecution(accruedInterest, brokerAccountKey, brokerKey, commission, configurationId, createdTime, destinationOrderKey, executionId, executionKey, executionPrice, executionQuantity, externalId0, isHidden, modifiedTime, originalDestinationOrderId, originalPrice, originalQuantity, sourceExecutionId, stateKeyByDestinationStateCode, stateKeyBySourceStateCode, userFee0, userFee1, userFee2, userFee3, userKeyByCreatedUserId, userKeyByModifiedUserId);
	}
	
	public void UpdateFolder(string configurationId, object[] entityKey, object[] folderKey)
	{
		base.Channel.UpdateFolder(configurationId, entityKey, folderKey);
	}
	
	public void UpdateGroupAccount(object[] accountKey, string configurationId, object[] groupAccountKey)
	{
		base.Channel.UpdateGroupAccount(accountKey, configurationId, groupAccountKey);
	}
	
	public void UpdateHoliday(string configurationId, object[] countryKey, object date, object externalId0, object externalId1, object holidayId, object[] holidayKey, object[] holidayTypeKey)
	{
		base.Channel.UpdateHoliday(configurationId, countryKey, date, externalId0, externalId1, holidayId, holidayKey, holidayTypeKey);
	}
	
	public void UpdateHolidayType(string configurationId, object description, object externalId0, object externalId1, object externalId2, object externalId3, object holidayTypeCode, object[] holidayTypeKey)
	{
		base.Channel.UpdateHolidayType(configurationId, description, externalId0, externalId1, externalId2, externalId3, holidayTypeCode, holidayTypeKey);
	}
	
	public void UpdateImage(string configurationId, object externalId0, object image, object imageId, object[] imageKey)
	{
		base.Channel.UpdateImage(configurationId, externalId0, image, imageId, imageKey);
	}
	
	public void UpdateIndustry(string configurationId, object externalId0, object externalId1, object[] industryClassificationKey, object industryId, object[] industryKey, object mnemonic, object name)
	{
		base.Channel.UpdateIndustry(configurationId, externalId0, externalId1, industryClassificationKey, industryId, industryKey, mnemonic, name);
	}
	
	public void UpdateIndustryClassification(string configurationId, object externalId0, object externalId1, object industryClassificationId, object[] industryClassificationKey, object mnemonic, object name)
	{
		base.Channel.UpdateIndustryClassification(configurationId, externalId0, externalId1, industryClassificationId, industryClassificationKey, mnemonic, name);
	}
	
	public void UpdateIndustryLeaf(string configurationId, object externalId0, object externalId1, object[] industryKey, object industryLeafId, object[] industryLeafKey, object[] securityKey)
	{
		base.Channel.UpdateIndustryLeaf(configurationId, externalId0, externalId1, industryKey, industryLeafId, industryLeafKey, securityKey);
	}
	
	public void UpdateIndustryTree(string configurationId, object externalId0, object externalId1, object[] industryKeyByChildId, object[] industryKeyByParentId, object industryTreeId, object[] industryTreeKey)
	{
		base.Channel.UpdateIndustryTree(configurationId, externalId0, externalId1, industryKeyByChildId, industryKeyByParentId, industryTreeId, industryTreeKey);
	}
	
	public void UpdateInstitution(string configurationId, object[] institutionKey, object[] sourceKey)
	{
		base.Channel.UpdateInstitution(configurationId, institutionKey, sourceKey);
	}
	
	public void UpdateIssuer(string configurationId, object[] entityKey, object[] issuerKey)
	{
		base.Channel.UpdateIssuer(configurationId, entityKey, issuerKey);
	}
	
	public void UpdateLotHandling(string configurationId, object description, object externalId0, object externalId1, object externalId2, object externalId3, object lotHandlingCode, object[] lotHandlingKey, object mnemonic)
	{
		base.Channel.UpdateLotHandling(configurationId, description, externalId0, externalId1, externalId2, externalId3, lotHandlingCode, lotHandlingKey, mnemonic);
	}
	
	public void UpdateMajorInstrumentType(string configurationId, object externalId0, object externalId1, object majorInstrumentTypeId, object[] majorInstrumentTypeKey, object mnemonic, object name)
	{
		base.Channel.UpdateMajorInstrumentType(configurationId, externalId0, externalId1, majorInstrumentTypeId, majorInstrumentTypeKey, mnemonic, name);
	}
	
	public void UpdateMatch(object[] blotterKey, string configurationId, object contraMatchId, object contraOrderId, object heatIndex, object heatIndexDetails, object matchedTime, object matchId, object[] matchKey, object[] statusKey, object[] workingOrderKey)
	{
		base.Channel.UpdateMatch(blotterKey, configurationId, contraMatchId, contraOrderId, heatIndex, heatIndexDetails, matchedTime, matchId, matchKey, statusKey, workingOrderKey);
	}
	
	public void UpdateMinorInstrumentType(string configurationId, object externalId0, object externalId1, object minorInstrumentTypeId, object[] minorInstrumentTypeKey, object mnemonic, object name)
	{
		base.Channel.UpdateMinorInstrumentType(configurationId, externalId0, externalId1, minorInstrumentTypeId, minorInstrumentTypeKey, mnemonic, name);
	}
	
	public void UpdateMssaBucket(string configurationId, object externalId0, object externalId1, object mssaBucketId, object[] mssaBucketKey, object name)
	{
		base.Channel.UpdateMssaBucket(configurationId, externalId0, externalId1, mssaBucketId, mssaBucketKey, name);
	}
	
	public void UpdateNegotiation(object[] blotterKey, string configurationId, object[] executionKey, object isRead, object[] matchKey, object negotiationId, object[] negotiationKey, object quantity, object[] statusKey)
	{
		base.Channel.UpdateNegotiation(blotterKey, configurationId, executionKey, isRead, matchKey, negotiationId, negotiationKey, quantity, statusKey);
	}
	
	public void UpdateOrderType(string configurationId, object description, object externalId0, object externalId1, object externalId2, object externalId3, object mnemonic, object orderTypeCode, object[] orderTypeKey)
	{
		base.Channel.UpdateOrderType(configurationId, description, externalId0, externalId1, externalId2, externalId3, mnemonic, orderTypeCode, orderTypeKey);
	}
	
	public void UpdatePartyType(string configurationId, object description, object externalId0, object externalId1, object mnemonic, object partyTypeCode, object[] partyTypeKey)
	{
		base.Channel.UpdatePartyType(configurationId, description, externalId0, externalId1, mnemonic, partyTypeCode, partyTypeKey);
	}
	
	public void UpdatePosition(object[] accountKey, string configurationId, object externalId0, object externalId1, object externalId2, object externalId3, object positionId, object[] positionKey, object[] positionTypeKey, object[] securityKey)
	{
		base.Channel.UpdatePosition(accountKey, configurationId, externalId0, externalId1, externalId2, externalId3, positionId, positionKey, positionTypeKey, securityKey);
	}
	
	public void UpdatePositionSeries(object[] accountKey, object baseCost, object basePrice, string configurationId, object date, object externalId0, object externalId1, object localCost, object localPrice, object[] positionKey, object positionSeriesId, object[] positionSeriesKey, object[] positionTypeKey, object[] securityKey, object[] securitySeriesKey)
	{
		base.Channel.UpdatePositionSeries(accountKey, baseCost, basePrice, configurationId, date, externalId0, externalId1, localCost, localPrice, positionKey, positionSeriesId, positionSeriesKey, positionTypeKey, securityKey, securitySeriesKey);
	}
	
	public void UpdatePositionType(string configurationId, object externalId0, object externalId1, object externalId2, object externalId3, object mnemonic, object positionTypeCode, object[] positionTypeKey, object sign)
	{
		base.Channel.UpdatePositionType(configurationId, externalId0, externalId1, externalId2, externalId3, mnemonic, positionTypeCode, positionTypeKey, sign);
	}
	
	public void UpdatePrice(
				object askPrice, 
				object askSize, 
				object bidPrice, 
				object bidSize, 
				object closePrice, 
				string configurationId, 
				object highPrice, 
				object lastPrice, 
				object lastSize, 
				object lowPrice, 
				object openPrice, 
				object priceChange, 
				object[] priceKey, 
				object[] securityKeyByCurrencyId, 
				object[] securityKeyBySecurityId, 
				object volume, 
				object volumeWeightedAveragePrice)
	{
		base.Channel.UpdatePrice(askPrice, askSize, bidPrice, bidSize, closePrice, configurationId, highPrice, lastPrice, lastSize, lowPrice, openPrice, priceChange, priceKey, securityKeyByCurrencyId, securityKeyBySecurityId, volume, volumeWeightedAveragePrice);
	}
	
	public void UpdateProperty(string configurationId, object externalId0, object name, object propertyId, object[] propertyKey)
	{
		base.Channel.UpdateProperty(configurationId, externalId0, name, propertyId, propertyKey);
	}
	
	public void UpdatePropertyStore(string configurationId, object[] entityKey, object externalId0, object[] propertyKey, object propertyStoreId, object[] propertyStoreKey, object value)
	{
		base.Channel.UpdatePropertyStore(configurationId, entityKey, externalId0, propertyKey, propertyStoreId, propertyStoreKey, value);
	}
	
	public void UpdateProvince(object abbreviation, string configurationId, object[] countryKey, object externalId0, object externalId1, object name, object provinceId, object[] provinceKey)
	{
		base.Channel.UpdateProvince(abbreviation, configurationId, countryKey, externalId0, externalId1, name, provinceId, provinceKey);
	}
	
	public void UpdateSecurity(
				object averageDailyVolume, 
				string configurationId, 
				object[] countryKey, 
				object[] entityKey, 
				object isDerivative, 
				object[] issuerKey, 
				object logo, 
				object[] majorInstrumentTypeKey, 
				object marketCapitalization, 
				object minimumQuantity, 
				object[] minorInstrumentTypeKey, 
				object priceFactor, 
				object quantityFactor, 
				object[] securityKey, 
				object symbol, 
				object[] volumeCategoryKey)
	{
		base.Channel.UpdateSecurity(averageDailyVolume, configurationId, countryKey, entityKey, isDerivative, issuerKey, logo, majorInstrumentTypeKey, marketCapitalization, minimumQuantity, minorInstrumentTypeKey, priceFactor, quantityFactor, securityKey, symbol, volumeCategoryKey);
	}
	
	public void UpdateSecuritySeries(
				object betaAdjustedKrd10Year, 
				object betaAdjustedKrd20Year, 
				object betaAdjustedKrd2Year, 
				object betaAdjustedKrd30Year, 
				object betaAdjustedKrd5Year, 
				object betaAdjustedKrd6Month, 
				string configurationId, 
				object coupon, 
				object[] creditRatingKeyByCreditRatingId0, 
				object[] creditRatingKeyByCreditRatingId1, 
				object[] creditRatingKeyByCreditRatingId2, 
				object[] creditRatingKeyByCreditRatingId3, 
				object[] creditRatingKeyByCreditRatingId4, 
				object[] creditRatingKeyByCreditRatingId5, 
				object currentYield, 
				object date, 
				object effectiveConvexity, 
				object effectiveDuration, 
				object externalId0, 
				object externalId1, 
				object modifiedDurationToWorst, 
				object modifiedOptionAdjustedDuration, 
				object[] mssaBucketKey, 
				object optionAdjustedDuration, 
				object optionAdjustedSpread, 
				object optionAdjustedSpreadDuration, 
				object optionAdjustedYieldToWorst, 
				object[] securityKey, 
				object securitySeriesId, 
				object[] securitySeriesKey, 
				object[] subordinateTypeKey, 
				object yearsToAverageLife, 
				object yearsToMaturity, 
				object yieldToEffectiveMaturity, 
				object yieldToMaturity, 
				object yieldToWorst)
	{
		base.Channel.UpdateSecuritySeries(betaAdjustedKrd10Year, betaAdjustedKrd20Year, betaAdjustedKrd2Year, betaAdjustedKrd30Year, betaAdjustedKrd5Year, betaAdjustedKrd6Month, configurationId, coupon, creditRatingKeyByCreditRatingId0, creditRatingKeyByCreditRatingId1, creditRatingKeyByCreditRatingId2, creditRatingKeyByCreditRatingId3, creditRatingKeyByCreditRatingId4, creditRatingKeyByCreditRatingId5, currentYield, date, effectiveConvexity, effectiveDuration, externalId0, externalId1, modifiedDurationToWorst, modifiedOptionAdjustedDuration, mssaBucketKey, optionAdjustedDuration, optionAdjustedSpread, optionAdjustedSpreadDuration, optionAdjustedYieldToWorst, securityKey, securitySeriesId, securitySeriesKey, subordinateTypeKey, yearsToAverageLife, yearsToMaturity, yieldToEffectiveMaturity, yieldToMaturity, yieldToWorst);
	}
	
	public void UpdateSettlementUnit(string configurationId, object description, object externalId0, object name, object settlementUnitCode, object[] settlementUnitKey)
	{
		base.Channel.UpdateSettlementUnit(configurationId, description, externalId0, name, settlementUnitCode, settlementUnitKey);
	}
	
	public void UpdateSide(object cashSign, string configurationId, object description, object externalId0, object externalId1, object externalId2, object externalId3, object image, object mnemonic, object quantitySign, object sideCode, object[] sideKey, object sortOrder)
	{
		base.Channel.UpdateSide(cashSign, configurationId, description, externalId0, externalId1, externalId2, externalId3, image, mnemonic, quantitySign, sideCode, sideKey, sortOrder);
	}
	
	public void UpdateSingleAccount(object[] accountKey, object address0, object address1, object city, string configurationId, object[] countryKey, object[] lotHandlingKey, object postalCode, object[] provinceKey, object[] singleAccountKey)
	{
		base.Channel.UpdateSingleAccount(accountKey, address0, address1, city, configurationId, countryKey, lotHandlingKey, postalCode, provinceKey, singleAccountKey);
	}
	
	public void UpdateSource(object advertisementSchemaId, object[] blotterKey, object buyMarketValueThreshold, object buyQuantityThreshold, string configurationId, object partyTypeCode, object sellMarketValueThreshold, object sellQuantityThreshold, object shortName, object[] sourceKey)
	{
		base.Channel.UpdateSource(advertisementSchemaId, blotterKey, buyMarketValueThreshold, buyQuantityThreshold, configurationId, partyTypeCode, sellMarketValueThreshold, sellQuantityThreshold, shortName, sourceKey);
	}
	
	public void UpdateSourceOrder(
				string configurationId, 
				object createdTime, 
				object[] destinationKey, 
				object externalId0, 
				object isAdvertised, 
				object isAutoExecute, 
				object isCanceled, 
				object isHeld, 
				object isSteppedIn, 
				object isSubmitted, 
				object limitPrice, 
				object maximumVolatility, 
				object modifiedTime, 
				object newsFreeTime, 
				object orderedQuantity, 
				object[] orderTypeKey, 
				object receivedTime, 
				object[] securityKeyBySecurityId, 
				object[] securityKeyBySettlementId, 
				object settlementDate, 
				object[] sideKey, 
				object sourceOrderId, 
				object[] sourceOrderKey, 
				object startTime, 
				object[] statusKey, 
				object stopPrice, 
				object stopTime, 
				object submittedQuantity, 
				object submittedTime, 
				object targetPrice, 
				object[] timeInForceKey, 
				object tradeDate, 
				object[] userKeyByCreatedUserId, 
				object[] userKeyByModifiedUserId, 
				object[] workingOrderKey)
	{
		base.Channel.UpdateSourceOrder(configurationId, createdTime, destinationKey, externalId0, isAdvertised, isAutoExecute, isCanceled, isHeld, isSteppedIn, isSubmitted, limitPrice, maximumVolatility, modifiedTime, newsFreeTime, orderedQuantity, orderTypeKey, receivedTime, securityKeyBySecurityId, securityKeyBySettlementId, settlementDate, sideKey, sourceOrderId, sourceOrderKey, startTime, statusKey, stopPrice, stopTime, submittedQuantity, submittedTime, targetPrice, timeInForceKey, tradeDate, userKeyByCreatedUserId, userKeyByModifiedUserId, workingOrderKey);
	}
	
	public void UpdateState(string configurationId, object description, object externalId0, object externalId1, object externalId2, object externalId3, object mnemonic, object stateCode, object[] stateKey)
	{
		base.Channel.UpdateState(configurationId, description, externalId0, externalId1, externalId2, externalId3, mnemonic, stateCode, stateKey);
	}
	
	public void UpdateStatus(string configurationId, object description, object externalId0, object externalId1, object externalId2, object externalId3, object image, object mnemonic, object sortOrder, object statusCode, object[] statusKey)
	{
		base.Channel.UpdateStatus(configurationId, description, externalId0, externalId1, externalId2, externalId3, image, mnemonic, sortOrder, statusCode, statusKey);
	}
	
	public void UpdateSubordinateType(string configurationId, object description, object externalId0, object externalId1, object subordinateTypeCode, object[] subordinateTypeKey)
	{
		base.Channel.UpdateSubordinateType(configurationId, description, externalId0, externalId1, subordinateTypeCode, subordinateTypeKey);
	}
	
	public void UpdateTaxLot(object[] accountKey, object baseCost, string configurationId, object externalId0, object externalId1, object localCost, object[] positionKey, object[] positionTypeKey, object[] securityKey, object settlementDate, object taxLotId, object[] taxLotKey, object tradeDate)
	{
		base.Channel.UpdateTaxLot(accountKey, baseCost, configurationId, externalId0, externalId1, localCost, positionKey, positionTypeKey, securityKey, settlementDate, taxLotId, taxLotKey, tradeDate);
	}
	
	public void UpdateTaxLotSeries(
				object[] accountKey, 
				string configurationId, 
				object date, 
				object dealSpread, 
				object duration, 
				object exposureWeight, 
				object externalId0, 
				object externalId1, 
				object lotExposureBase, 
				object lotExposureLocal, 
				object lotMarketValueBase, 
				object lotMarketValueLocal, 
				object lotQuantity, 
				object marketWeight, 
				object monthToDayLinkedReturn, 
				object monthToDayProfitAndLoss, 
				object netAssetValue, 
				object originalBuyTransaction, 
				object[] positionSeriesKey, 
				object[] positionTypeKey, 
				object qualityLabel, 
				object quantity, 
				object quarterToDayLinkedReturn, 
				object quarterToDayProfitAndLoss, 
				object ratingScore, 
				object sector, 
				object[] securityKey, 
				object[] securitySeriesKey, 
				object strategy, 
				object strategyDescription, 
				object sumExposure, 
				object sumMarketValue, 
				object[] taxLotKey, 
				object taxLotSeriesId, 
				object[] taxLotSeriesKey, 
				object trade, 
				object weight, 
				object yearToDayLinkedReturn, 
				object yearToDayProfitAndLoss)
	{
		base.Channel.UpdateTaxLotSeries(accountKey, configurationId, date, dealSpread, duration, exposureWeight, externalId0, externalId1, lotExposureBase, lotExposureLocal, lotMarketValueBase, lotMarketValueLocal, lotQuantity, marketWeight, monthToDayLinkedReturn, monthToDayProfitAndLoss, netAssetValue, originalBuyTransaction, positionSeriesKey, positionTypeKey, qualityLabel, quantity, quarterToDayLinkedReturn, quarterToDayProfitAndLoss, ratingScore, sector, securityKey, securitySeriesKey, strategy, strategyDescription, sumExposure, sumMarketValue, taxLotKey, taxLotSeriesId, taxLotSeriesKey, trade, weight, yearToDayLinkedReturn, yearToDayProfitAndLoss);
	}
	
	public void UpdateTimeInForce(string configurationId, object description, object externalId0, object externalId1, object externalId2, object externalId3, object mnemonic, object sortOrder, object timeInForceCode, object[] timeInForceKey)
	{
		base.Channel.UpdateTimeInForce(configurationId, description, externalId0, externalId1, externalId2, externalId3, mnemonic, sortOrder, timeInForceCode, timeInForceKey);
	}
	
	public void UpdateTimeUnit(string configurationId, object externalId0, object inDays, object name, object timeUnitCode, object[] timeUnitKey)
	{
		base.Channel.UpdateTimeUnit(configurationId, externalId0, inDays, name, timeUnitCode, timeUnitKey);
	}
	
	public void UpdateTrader(
				object address1, 
				object address2, 
				object address3, 
				object[] blotterKey, 
				object commissionMaximum, 
				object commissionMinimum, 
				object commissionRate, 
				object commissionRateTypeCode, 
				string configurationId, 
				object crossingCode, 
				object defaultAccountId, 
				object emailAddress, 
				object fixAccountId, 
				object isAgencyMatch, 
				object isBrokerMatch, 
				object isCommissionChangeAllowed, 
				object isEditExecutionsAllowed, 
				object isHedgeMatch, 
				object isHeld, 
				object isInstitutionMatch, 
				object lastDeletedOrder, 
				object lastFilledOrder, 
				object lastFilledSourceOrder, 
				object lastTrade, 
				object lotSizeDefault, 
				object marketSleep, 
				object maximumVolatilityDefault, 
				object newsFreeTimeDefault, 
				object oatsAccountType, 
				object oatsOrigDeptId, 
				object orderMaximumLimitDelta, 
				object orderMaximumMarketValue, 
				object orderMaximumQuantity, 
				object orderWarningMarketValue, 
				object orderWarningQuantity, 
				object phone, 
				object reviewWindow, 
				object scraperConfigurationString, 
				object startTimeDefault, 
				object stopTimeDefault, 
				object tagId, 
				object[] traderKey, 
				object[] userKey)
	{
		base.Channel.UpdateTrader(address1, address2, address3, blotterKey, commissionMaximum, commissionMinimum, commissionRate, commissionRateTypeCode, configurationId, crossingCode, defaultAccountId, emailAddress, fixAccountId, isAgencyMatch, isBrokerMatch, isCommissionChangeAllowed, isEditExecutionsAllowed, isHedgeMatch, isHeld, isInstitutionMatch, lastDeletedOrder, lastFilledOrder, lastFilledSourceOrder, lastTrade, lotSizeDefault, marketSleep, maximumVolatilityDefault, newsFreeTimeDefault, oatsAccountType, oatsOrigDeptId, orderMaximumLimitDelta, orderMaximumMarketValue, orderMaximumQuantity, orderWarningMarketValue, orderWarningQuantity, phone, reviewWindow, scraperConfigurationString, startTimeDefault, stopTimeDefault, tagId, traderKey, userKey);
	}
	
	public void UpdateTraderVolumeSetting(object autoExecuteQuantity, string configurationId, object externalId0, object thresholdQuantity, object[] traderKey, object traderVolumeSettingId, object[] traderVolumeSettingKey, object[] volumeCategoryKey)
	{
		base.Channel.UpdateTraderVolumeSetting(autoExecuteQuantity, configurationId, externalId0, thresholdQuantity, traderKey, traderVolumeSettingId, traderVolumeSettingKey, volumeCategoryKey);
	}
	
	public void UpdateType(string configurationId, object description, object externalId0, object[] imageKey, object type, object typeId, object[] typeKey)
	{
		base.Channel.UpdateType(configurationId, description, externalId0, imageKey, type, typeId, typeKey);
	}
	
	public void UpdateUser(string configurationId, object distinguishedName, object[] entityKey, object isRemoved, object preferences, object[] userKey)
	{
		base.Channel.UpdateUser(configurationId, distinguishedName, entityKey, isRemoved, preferences, userKey);
	}
	
	public void UpdateVolumeCategory(string configurationId, object description, object externalId0, object highVolumeRange, object lowVolumeRange, object mnemonic, object volumeCategoryCode, object[] volumeCategoryKey)
	{
		base.Channel.UpdateVolumeCategory(configurationId, description, externalId0, highVolumeRange, lowVolumeRange, mnemonic, volumeCategoryCode, volumeCategoryKey);
	}
	
	public void UpdateWeekend(string configurationId, object externalId0, object externalId1, object userCode0, object userCode1, object weekendCode, object[] weekendKey)
	{
		base.Channel.UpdateWeekend(configurationId, externalId0, externalId1, userCode0, userCode1, weekendCode, weekendKey);
	}
	
	public void UpdateWorkingOrder(
				object automaticQuantity, 
				object[] blotterKey, 
				string configurationId, 
				object createdTime, 
				object[] crossingKey, 
				object[] destinationKey, 
				object externalId0, 
				object isAutomatic, 
				object isAwake, 
				object isBrokerMatch, 
				object isHedgeMatch, 
				object isInstitutionMatch, 
				object limitPrice, 
				object modifiedTime, 
				object[] orderTypeKey, 
				object[] securityKeyBySecurityId, 
				object[] securityKeyBySettlementId, 
				object settlementDate, 
				object[] sideKey, 
				object startTime, 
				object[] statusKey, 
				object stopPrice, 
				object stopTime, 
				object submittedQuantity, 
				object submittedTime, 
				object[] timeInForceKey, 
				object tradeDate, 
				object uploadedTime, 
				object[] userKeyByCreatedUserId, 
				object[] userKeyByModifiedUserId, 
				object workingOrderId, 
				object[] workingOrderKey)
	{
		base.Channel.UpdateWorkingOrder(automaticQuantity, blotterKey, configurationId, createdTime, crossingKey, destinationKey, externalId0, isAutomatic, isAwake, isBrokerMatch, isHedgeMatch, isInstitutionMatch, limitPrice, modifiedTime, orderTypeKey, securityKeyBySecurityId, securityKeyBySettlementId, settlementDate, sideKey, startTime, statusKey, stopPrice, stopTime, submittedQuantity, submittedTime, timeInForceKey, tradeDate, uploadedTime, userKeyByCreatedUserId, userKeyByModifiedUserId, workingOrderId, workingOrderKey);
	}
}
