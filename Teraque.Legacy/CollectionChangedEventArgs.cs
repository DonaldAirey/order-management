namespace Teraque
{

    using System.Collections;
    using System.Windows;
	using System.Windows.Controls;

	public delegate void CollectionChangedEventHandler(object sender, CollectionChangedEventArgs collectionChangedEventArgs);

	public enum CollectionChangedAction { Add, Move, Remove, Replace, Reset };

	/// <summary>
	/// Describes the data generated by a column deletion event.
	/// </summary>
	public class CollectionChangedEventArgs : RoutedEventArgs
	{

		// Private Instance Fields
		private CollectionChangedAction collectionChangedAction;
		private System.Windows.Controls.UndoAction undoAction;
		private System.Collections.IList newItems;
		private System.Collections.IList oldItems;
		private System.Int32 newStartingIndex;
		private System.Int32 oldStartingIndex;

		public CollectionChangedEventArgs(RoutedEvent routedEvent, UndoAction undoAction, CollectionChangedAction collectionChangedAction)
			: base(routedEvent)
		{

			// Initialize the object
			this.undoAction = undoAction;
			this.collectionChangedAction = collectionChangedAction;

		}

		public CollectionChangedEventArgs(RoutedEvent routedEvent, UndoAction undoAction, CollectionChangedAction collectionChangedAction, IList items)
			: base(routedEvent)
		{

			// Initialize the object
			this.undoAction = undoAction;
			this.collectionChangedAction = collectionChangedAction;

			switch (this.collectionChangedAction)
			{

			case CollectionChangedAction.Add:

				this.newItems = items;
				break;

			case CollectionChangedAction.Remove:

				this.oldItems = items;
				break;

			}

		}

		public CollectionChangedEventArgs(RoutedEvent routedEvent, UndoAction undoAction, CollectionChangedAction collectionChangedAction, object item)
			: base(routedEvent)
		{

			// Initialize the object
			this.undoAction = undoAction;
			this.collectionChangedAction = collectionChangedAction;

			ArrayList items = new ArrayList();
			items.Add(item);

			switch (this.collectionChangedAction)
			{

			case CollectionChangedAction.Add:

				this.newItems = items;
				break;

			case CollectionChangedAction.Remove:

				this.oldItems = items;
				break;

			}

		}

		public CollectionChangedEventArgs(RoutedEvent routedEvent, UndoAction undoAction, CollectionChangedAction collectionChangedAction, IList items, int index)
			: base(routedEvent)
		{

			// Initialize the object
			this.undoAction = undoAction;
			this.collectionChangedAction = collectionChangedAction;

			switch (this.collectionChangedAction)
			{

			case CollectionChangedAction.Add:

				this.newStartingIndex = index;
				this.newItems = items;
				break;

			case CollectionChangedAction.Remove:

				this.oldStartingIndex = index;
				this.oldItems = items;
				break;

			}

		}

		public CollectionChangedEventArgs(RoutedEvent routedEvent, UndoAction undoAction,
			CollectionChangedAction collectionChangedAction, object newItem, object oldItem)
			: base(routedEvent)
		{

			// Initialize the object
			this.undoAction = undoAction;
			this.collectionChangedAction = collectionChangedAction;

			ArrayList newItems = new ArrayList();
			newItems.Add(newItem);

			ArrayList oldItems = new ArrayList();
			oldItems.Add(oldItem);

			switch (this.collectionChangedAction)
			{

			case CollectionChangedAction.Replace:

				this.newItems = newItems;
				this.oldItems = oldItems;
				break;

			}

		}

		public CollectionChangedEventArgs(RoutedEvent routedEvent, UndoAction undoAction,
			CollectionChangedAction collectionChangedAction, object newItem, object oldItem, int newIndex)
			: base(routedEvent)
		{

			// Initialize the object
			this.undoAction = undoAction;
			this.collectionChangedAction = collectionChangedAction;

			ArrayList newItems = new ArrayList();
			newItems.Add(newItem);

			ArrayList oldItems = new ArrayList();
			oldItems.Add(oldItem);

			switch (this.collectionChangedAction)
			{

			case CollectionChangedAction.Replace:

				this.newItems = newItems;
				this.oldItems = oldItems;
				this.newStartingIndex = newIndex;
				break;

			}

		}

		public CollectionChangedEventArgs(RoutedEvent routedEvent, UndoAction undoAction,
			CollectionChangedAction collectionChangedAction, IList newItems, IList oldItems)
			: base(routedEvent)
		{

			// Initialize the object
			this.undoAction = undoAction;
			this.collectionChangedAction = collectionChangedAction;

			switch (this.collectionChangedAction)
			{

			case CollectionChangedAction.Replace:

				this.newItems = newItems;
				this.oldItems = oldItems;
				break;

			}

		}

		public CollectionChangedEventArgs(RoutedEvent routedEvent, UndoAction undoAction, CollectionChangedAction collectionChangedAction, object item, int index, int oldIndex)
			: base(routedEvent)
		{

			// Initialize the object
			this.undoAction = undoAction;
			this.collectionChangedAction = collectionChangedAction;

			ArrayList items = new ArrayList();
			items.Add(item);

			switch (this.collectionChangedAction)
			{

			case CollectionChangedAction.Move:

				this.newStartingIndex = index;
				this.oldStartingIndex = oldIndex;
				this.newItems = items;
				break;

			}

		}

		public CollectionChangedEventArgs(RoutedEvent routedEvent, UndoAction undoAction, CollectionChangedAction collectionChangedAction, object item, int index)
			: base(routedEvent)
		{

			// Initialize the object
			this.undoAction = undoAction;
			this.collectionChangedAction = collectionChangedAction;

			ArrayList items = new ArrayList();
			items.Add(item);

			switch (this.collectionChangedAction)
			{

			case CollectionChangedAction.Add:

				this.newStartingIndex = index;
				this.newItems = items;
				break;

			case CollectionChangedAction.Remove:

				this.oldStartingIndex = index;
				this.oldItems = items;
				break;

			}

		}

		public CollectionChangedAction Action
		{
			get { return this.collectionChangedAction; }
		}

		public IList NewItems
		{
			get { return this.newItems; }
		}

		public IList OldItems
		{
			get { return this.oldItems; }
		}

		public int NewStartingIndex
		{
			get { return this.newStartingIndex; }
		}

		public int OldStartingIndex
		{
			get { return this.oldStartingIndex; }
		}

		public UndoAction UndoAction
		{
			get { return this.undoAction; }
		}

	}

}
